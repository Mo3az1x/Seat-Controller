
SPI_ECU_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007118  08007118  00008118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a0  080072a0  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072a0  080072a0  000082a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072a8  080072a8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a8  080072a8  000082a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072ac  080072ac  000082ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080072b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b70  2000006c  0800731c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bdc  0800731c  00009bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014156  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003398  00000000  00000000  0001d1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00020590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d58  00000000  00000000  00021710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191e4  00000000  00000000  00022468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014254  00000000  00000000  0003b64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093cf5  00000000  00000000  0004f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ecc  00000000  00000000  000e35d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e84a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007100 	.word	0x08007100

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007100 	.word	0x08007100

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

 /* Create the mutex(es) */
 /* definition and creation of spiMutex */
 spiMutexHandle = osMutexNew(NULL);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f002 fda4 	bl	80030fe <osMutexNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a0d      	ldr	r2, [pc, #52]	@ (80005f0 <MX_FREERTOS_Init+0x44>)
 80005ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <MX_FREERTOS_Init+0x48>)
 80005be:	2100      	movs	r1, #0
 80005c0:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <MX_FREERTOS_Init+0x4c>)
 80005c2:	f002 fcef 	bl	8002fa4 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a0c      	ldr	r2, [pc, #48]	@ (80005fc <MX_FREERTOS_Init+0x50>)
 80005ca:	6013      	str	r3, [r2, #0]
  saveTaskHandle    = osThreadNew(StartSaveTask, NULL, &saveTask_attributes);
 80005cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000600 <MX_FREERTOS_Init+0x54>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	480c      	ldr	r0, [pc, #48]	@ (8000604 <MX_FREERTOS_Init+0x58>)
 80005d2:	f002 fce7 	bl	8002fa4 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000608 <MX_FREERTOS_Init+0x5c>)
 80005da:	6013      	str	r3, [r2, #0]
  loadTaskHandle    = osThreadNew(StartLoadTask, NULL, &loadTask_attributes);
 80005dc:	4a0b      	ldr	r2, [pc, #44]	@ (800060c <MX_FREERTOS_Init+0x60>)
 80005de:	2100      	movs	r1, #0
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <MX_FREERTOS_Init+0x64>)
 80005e2:	f002 fcdf 	bl	8002fa4 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000614 <MX_FREERTOS_Init+0x68>)
 80005ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000088 	.word	0x20000088
 80005f4:	080071e8 	.word	0x080071e8
 80005f8:	08000619 	.word	0x08000619
 80005fc:	2000008c 	.word	0x2000008c
 8000600:	0800720c 	.word	0x0800720c
 8000604:	08000799 	.word	0x08000799
 8000608:	20000090 	.word	0x20000090
 800060c:	08007230 	.word	0x08007230
 8000610:	0800083d 	.word	0x0800083d
 8000614:	20000094 	.word	0x20000094

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f002 fd51 	bl	80030c8 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <__io_putchar>:
  /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN 0 */
/* Retarget printf to USART2 */
int __io_putchar(int ch) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint8_t c = ch & 0xFF;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
 8000636:	f107 010f 	add.w	r1, r7, #15
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	2201      	movs	r2, #1
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <__io_putchar+0x28>)
 8000642:	f002 f875 	bl	8002730 <HAL_UART_Transmit>
  return ch;
 8000646:	687b      	ldr	r3, [r7, #4]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200000f4 	.word	0x200000f4

08000654 <CS_Select>:

/* Chip Select helpers */
static inline void CS_Select(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2140      	movs	r1, #64	@ 0x40
 800065c:	4802      	ldr	r0, [pc, #8]	@ (8000668 <CS_Select+0x14>)
 800065e:	f000 ff13 	bl	8001488 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40020400 	.word	0x40020400

0800066c <CS_Deselect>:
static inline void CS_Deselect(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2140      	movs	r1, #64	@ 0x40
 8000674:	4802      	ldr	r0, [pc, #8]	@ (8000680 <CS_Deselect+0x14>)
 8000676:	f000 ff07 	bl	8001488 <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020400 	.word	0x40020400

08000684 <SaveProfileSPI>:

/* SPI save/load functions */
HAL_StatusTypeDef SaveProfileSPI(uint8_t id, SeatProfile *p) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	6039      	str	r1, [r7, #0]
 800068e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef st;
  uint8_t cmd[2] = { CMD_SAVE, id };
 8000690:	2301      	movs	r3, #1
 8000692:	733b      	strb	r3, [r7, #12]
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	737b      	strb	r3, [r7, #13]

  osMutexAcquire(spiMutexHandle, osWaitForever);
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <SaveProfileSPI+0x6c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f04f 31ff 	mov.w	r1, #4294967295
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fdb2 	bl	800320a <osMutexAcquire>
  CS_Select();
 80006a6:	f7ff ffd5 	bl	8000654 <CS_Select>
  st = HAL_SPI_Transmit(&hspi1, cmd, 2, HAL_MAX_DELAY);
 80006aa:	f107 010c 	add.w	r1, r7, #12
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	2202      	movs	r2, #2
 80006b4:	480f      	ldr	r0, [pc, #60]	@ (80006f4 <SaveProfileSPI+0x70>)
 80006b6:	f001 fc22 	bl	8001efe <HAL_SPI_Transmit>
 80006ba:	4603      	mov	r3, r0
 80006bc:	73fb      	strb	r3, [r7, #15]
  if (st == HAL_OK) {
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d108      	bne.n	80006d6 <SaveProfileSPI+0x52>
    st = HAL_SPI_Transmit(&hspi1, (uint8_t*)p, sizeof(SeatProfile), HAL_MAX_DELAY);
 80006c4:	f04f 33ff 	mov.w	r3, #4294967295
 80006c8:	2206      	movs	r2, #6
 80006ca:	6839      	ldr	r1, [r7, #0]
 80006cc:	4809      	ldr	r0, [pc, #36]	@ (80006f4 <SaveProfileSPI+0x70>)
 80006ce:	f001 fc16 	bl	8001efe <HAL_SPI_Transmit>
 80006d2:	4603      	mov	r3, r0
 80006d4:	73fb      	strb	r3, [r7, #15]
  }
  CS_Deselect();
 80006d6:	f7ff ffc9 	bl	800066c <CS_Deselect>
  osMutexRelease(spiMutexHandle);
 80006da:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <SaveProfileSPI+0x6c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fdde 	bl	80032a0 <osMutexRelease>

  return st;
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000088 	.word	0x20000088
 80006f4:	20000098 	.word	0x20000098

080006f8 <LoadProfileSPI>:

HAL_StatusTypeDef LoadProfileSPI(uint8_t id, SeatProfile *p) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	4603      	mov	r3, r0
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef st;
  uint8_t cmd[2] = { CMD_LOAD, id };
 8000704:	2302      	movs	r3, #2
 8000706:	773b      	strb	r3, [r7, #28]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	777b      	strb	r3, [r7, #29]
  uint8_t rxbuf[sizeof(SeatProfile)];
  uint8_t txDummy[sizeof(SeatProfile)];
  memset(txDummy, 0xFF, sizeof(txDummy));
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2206      	movs	r2, #6
 8000712:	21ff      	movs	r1, #255	@ 0xff
 8000714:	4618      	mov	r0, r3
 8000716:	f005 fece 	bl	80064b6 <memset>

  osMutexAcquire(spiMutexHandle, osWaitForever);
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <LoadProfileSPI+0x98>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f04f 31ff 	mov.w	r1, #4294967295
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fd71 	bl	800320a <osMutexAcquire>
  CS_Select();
 8000728:	f7ff ff94 	bl	8000654 <CS_Select>
  st = HAL_SPI_Transmit(&hspi1, cmd, 2, HAL_MAX_DELAY);
 800072c:	f107 011c 	add.w	r1, r7, #28
 8000730:	f04f 33ff 	mov.w	r3, #4294967295
 8000734:	2202      	movs	r2, #2
 8000736:	4817      	ldr	r0, [pc, #92]	@ (8000794 <LoadProfileSPI+0x9c>)
 8000738:	f001 fbe1 	bl	8001efe <HAL_SPI_Transmit>
 800073c:	4603      	mov	r3, r0
 800073e:	77fb      	strb	r3, [r7, #31]
  if (st == HAL_OK) {
 8000740:	7ffb      	ldrb	r3, [r7, #31]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d10c      	bne.n	8000760 <LoadProfileSPI+0x68>
    st = HAL_SPI_TransmitReceive(&hspi1, txDummy, rxbuf, sizeof(SeatProfile), HAL_MAX_DELAY);
 8000746:	f107 0214 	add.w	r2, r7, #20
 800074a:	f107 010c 	add.w	r1, r7, #12
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2306      	movs	r3, #6
 8000756:	480f      	ldr	r0, [pc, #60]	@ (8000794 <LoadProfileSPI+0x9c>)
 8000758:	f001 fd15 	bl	8002186 <HAL_SPI_TransmitReceive>
 800075c:	4603      	mov	r3, r0
 800075e:	77fb      	strb	r3, [r7, #31]
  }
  CS_Deselect();
 8000760:	f7ff ff84 	bl	800066c <CS_Deselect>
  osMutexRelease(spiMutexHandle);
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <LoadProfileSPI+0x98>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f002 fd99 	bl	80032a0 <osMutexRelease>

  if (st == HAL_OK) memcpy(p, rxbuf, sizeof(SeatProfile));
 800076e:	7ffb      	ldrb	r3, [r7, #31]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d107      	bne.n	8000784 <LoadProfileSPI+0x8c>
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	f107 0314 	add.w	r3, r7, #20
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	6010      	str	r0, [r2, #0]
 8000780:	889b      	ldrh	r3, [r3, #4]
 8000782:	8093      	strh	r3, [r2, #4]
  return st;
 8000784:	7ffb      	ldrb	r3, [r7, #31]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000088 	.word	0x20000088
 8000794:	20000098 	.word	0x20000098

08000798 <StartSaveTask>:
/* USER CODE END 0 */

/* USER CODE BEGIN 4 */
void StartSaveTask(void *argument)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]
  SeatProfile p;
  uint8_t id = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]

  for(;;)
  {
    p.height  = 100 + id * 10;
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	461a      	mov	r2, r3
 80007aa:	0092      	lsls	r2, r2, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	3364      	adds	r3, #100	@ 0x64
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	813b      	strh	r3, [r7, #8]
    p.slide   = 200 + id * 5;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	0092      	lsls	r2, r2, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	33c8      	adds	r3, #200	@ 0xc8
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	817b      	strh	r3, [r7, #10]
    p.incline = 10  + id;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	330a      	adds	r3, #10
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	81bb      	strh	r3, [r7, #12]

    if (SaveProfileSPI(id, &p) == HAL_OK) {
 80007d4:	f107 0208 	add.w	r2, r7, #8
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff51 	bl	8000684 <SaveProfileSPI>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10b      	bne.n	8000800 <StartSaveTask+0x68>
      printf("[SAVE] Profile %u saved: H=%u S=%u I=%u\r\n", id, p.height, p.slide, p.incline);
 80007e8:	7bf9      	ldrb	r1, [r7, #15]
 80007ea:	893b      	ldrh	r3, [r7, #8]
 80007ec:	461a      	mov	r2, r3
 80007ee:	897b      	ldrh	r3, [r7, #10]
 80007f0:	4618      	mov	r0, r3
 80007f2:	89bb      	ldrh	r3, [r7, #12]
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	4603      	mov	r3, r0
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <StartSaveTask+0x98>)
 80007fa:	f005 fe07 	bl	800640c <iprintf>
 80007fe:	e004      	b.n	800080a <StartSaveTask+0x72>
    } else {
      printf("[SAVE] Error saving profile %u\r\n", id);
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	4619      	mov	r1, r3
 8000804:	480b      	ldr	r0, [pc, #44]	@ (8000834 <StartSaveTask+0x9c>)
 8000806:	f005 fe01 	bl	800640c <iprintf>
    }

    id = (id + 1) % MAX_PROFILES;
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <StartSaveTask+0xa0>)
 8000810:	fb83 1302 	smull	r1, r3, r3, r2
 8000814:	1059      	asrs	r1, r3, #1
 8000816:	17d3      	asrs	r3, r2, #31
 8000818:	1ac9      	subs	r1, r1, r3
 800081a:	460b      	mov	r3, r1
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	440b      	add	r3, r1
 8000820:	1ad1      	subs	r1, r2, r3
 8000822:	460b      	mov	r3, r1
 8000824:	73fb      	strb	r3, [r7, #15]
    osDelay(5000); // every 5s
 8000826:	f241 3088 	movw	r0, #5000	@ 0x1388
 800082a:	f002 fc4d 	bl	80030c8 <osDelay>
    p.height  = 100 + id * 10;
 800082e:	e7b9      	b.n	80007a4 <StartSaveTask+0xc>
 8000830:	0800713c 	.word	0x0800713c
 8000834:	08007168 	.word	0x08007168
 8000838:	66666667 	.word	0x66666667

0800083c <StartLoadTask>:
  }
}

void StartLoadTask(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	6078      	str	r0, [r7, #4]
  SeatProfile p;

  for(;;)
  {
    for (uint8_t i = 0; i < MAX_PROFILES; i++) {
 8000844:	2300      	movs	r3, #0
 8000846:	73fb      	strb	r3, [r7, #15]
 8000848:	e020      	b.n	800088c <StartLoadTask+0x50>
      if (LoadProfileSPI(i, &p) == HAL_OK) {
 800084a:	f107 0208 	add.w	r2, r7, #8
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff50 	bl	80006f8 <LoadProfileSPI>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d10b      	bne.n	8000876 <StartLoadTask+0x3a>
        printf("[LOAD] ID=%u -> H=%u S=%u I=%u\r\n", i, p.height, p.slide, p.incline);
 800085e:	7bf9      	ldrb	r1, [r7, #15]
 8000860:	893b      	ldrh	r3, [r7, #8]
 8000862:	461a      	mov	r2, r3
 8000864:	897b      	ldrh	r3, [r7, #10]
 8000866:	4618      	mov	r0, r3
 8000868:	89bb      	ldrh	r3, [r7, #12]
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	4603      	mov	r3, r0
 800086e:	480b      	ldr	r0, [pc, #44]	@ (800089c <StartLoadTask+0x60>)
 8000870:	f005 fdcc 	bl	800640c <iprintf>
 8000874:	e004      	b.n	8000880 <StartLoadTask+0x44>
      } else {
        printf("[LOAD] Error loading ID=%u\r\n", i);
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	4619      	mov	r1, r3
 800087a:	4809      	ldr	r0, [pc, #36]	@ (80008a0 <StartLoadTask+0x64>)
 800087c:	f005 fdc6 	bl	800640c <iprintf>
      }
      osDelay(100); // small gap
 8000880:	2064      	movs	r0, #100	@ 0x64
 8000882:	f002 fc21 	bl	80030c8 <osDelay>
    for (uint8_t i = 0; i < MAX_PROFILES; i++) {
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	3301      	adds	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	7bfb      	ldrb	r3, [r7, #15]
 800088e:	2b04      	cmp	r3, #4
 8000890:	d9db      	bls.n	800084a <StartLoadTask+0xe>
    }
    osDelay(8000);
 8000892:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8000896:	f002 fc17 	bl	80030c8 <osDelay>
    for (uint8_t i = 0; i < MAX_PROFILES; i++) {
 800089a:	e7d3      	b.n	8000844 <StartLoadTask+0x8>
 800089c:	0800718c 	.word	0x0800718c
 80008a0:	080071b0 	.word	0x080071b0

080008a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a25      	ldr	r2, [pc, #148]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a1e      	ldr	r2, [pc, #120]	@ (8000974 <MX_GPIO_Init+0xd0>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <MX_GPIO_Init+0xd0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <MX_GPIO_Init+0xd0>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0302 	and.w	r3, r3, #2
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2140      	movs	r1, #64	@ 0x40
 800092e:	4812      	ldr	r0, [pc, #72]	@ (8000978 <MX_GPIO_Init+0xd4>)
 8000930:	f000 fdaa 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	480c      	ldr	r0, [pc, #48]	@ (800097c <MX_GPIO_Init+0xd8>)
 800094c:	f000 fc18 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000950:	2340      	movs	r3, #64	@ 0x40
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_GPIO_Init+0xd4>)
 8000968:	f000 fc0a 	bl	8001180 <HAL_GPIO_Init>

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	@ 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020400 	.word	0x40020400
 800097c:	40020800 	.word	0x40020800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 faa4 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f80e 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff8a 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000990:	f000 fa02 	bl	8000d98 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000994:	f000 f878 	bl	8000a88 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 8000998:	f002 faba 	bl	8002f10 <osKernelInitialize>
  MX_FREERTOS_Init();
 800099c:	f7ff fe06 	bl	80005ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009a0:	f002 fada 	bl	8002f58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <main+0x24>

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	@ 0x50
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2230      	movs	r2, #48	@ 0x30
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f005 fd7d 	bl	80064b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a27      	ldr	r2, [pc, #156]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <SystemClock_Config+0xd0>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a21      	ldr	r2, [pc, #132]	@ (8000a78 <SystemClock_Config+0xd0>)
 80009f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a78 <SystemClock_Config+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a22:	2304      	movs	r3, #4
 8000a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a26:	2304      	movs	r3, #4
 8000a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fd44 	bl	80014bc <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a3a:	f000 f81f 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3e:	230f      	movs	r3, #15
 8000a40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a42:	2302      	movs	r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2102      	movs	r1, #2
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 ffa6 	bl	80019ac <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a66:	f000 f809 	bl	8000a7c <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	3750      	adds	r7, #80	@ 0x50
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40007000 	.word	0x40007000

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000a8e:	4a18      	ldr	r2, [pc, #96]	@ (8000af0 <MX_SPI1_Init+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000a94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000ab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ab8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000ad4:	220a      	movs	r2, #10
 8000ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad8:	4804      	ldr	r0, [pc, #16]	@ (8000aec <MX_SPI1_Init+0x64>)
 8000ada:	f001 f987 	bl	8001dec <HAL_SPI_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae4:	f7ff ffca 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000098 	.word	0x20000098
 8000af0:	40013000 	.word	0x40013000

08000af4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	@ (8000b78 <HAL_SPI_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1e:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a10      	ldr	r2, [pc, #64]	@ (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b4e:	23e0      	movs	r3, #224	@ 0xe0
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5e:	2305      	movs	r3, #5
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <HAL_SPI_MspInit+0x8c>)
 8000b6a:	f000 fb09 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	@ 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40013000 	.word	0x40013000
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	4a11      	ldr	r2, [pc, #68]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <HAL_MspInit+0x54>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	f06f 0001 	mvn.w	r0, #1
 8000bca:	f000 fab0 	bl	800112e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 f9ad 	bl	8000f74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c1a:	f004 f9b7 	bl	8004f8c <xTaskGetSchedulerState>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d001      	beq.n	8000c28 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c24:	f005 f8b0 	bl	8005d88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
 8000c3c:	e00a      	b.n	8000c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3e:	f3af 8000 	nop.w
 8000c42:	4601      	mov	r1, r0
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	1c5a      	adds	r2, r3, #1
 8000c48:	60ba      	str	r2, [r7, #8]
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf0      	blt.n	8000c3e <_read+0x12>
  }

  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	e009      	b.n	8000c8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	1c5a      	adds	r2, r3, #1
 8000c7c:	60ba      	str	r2, [r7, #8]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fcd1 	bl	8000628 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf1      	blt.n	8000c78 <_write+0x12>
  }
  return len;
 8000c94:	687b      	ldr	r3, [r7, #4]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_close>:

int _close(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
 8000cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <_isatty>:

int _isatty(int file)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d10:	4a14      	ldr	r2, [pc, #80]	@ (8000d64 <_sbrk+0x5c>)
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <_sbrk+0x60>)
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d1c:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d102      	bne.n	8000d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <_sbrk+0x64>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	@ (8000d70 <_sbrk+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <_sbrk+0x64>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d207      	bcs.n	8000d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d38:	f005 fc0c 	bl	8006554 <__errno>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295
 8000d46:	e009      	b.n	8000d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <_sbrk+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	4a05      	ldr	r2, [pc, #20]	@ (8000d6c <_sbrk+0x64>)
 8000d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20020000 	.word	0x20020000
 8000d68:	00000400 	.word	0x00000400
 8000d6c:	200000f0 	.word	0x200000f0
 8000d70:	20004be0 	.word	0x20004be0

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	@ (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <MX_USART2_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	f001 fc5e 	bl	8002690 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f7ff fe4f 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000f4 	.word	0x200000f4
 8000de8:	40004400 	.word	0x40004400

08000dec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a19      	ldr	r2, [pc, #100]	@ (8000e70 <HAL_UART_MspInit+0x84>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d12b      	bne.n	8000e66 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	4a10      	ldr	r2, [pc, #64]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_UART_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e46:	230c      	movs	r3, #12
 8000e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e52:	2303      	movs	r3, #3
 8000e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e56:	2307      	movs	r3, #7
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <HAL_UART_MspInit+0x8c>)
 8000e62:	f000 f98d 	bl	8001180 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e66:	bf00      	nop
 8000e68:	3728      	adds	r7, #40	@ 0x28
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000eb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e80:	f7ff ff78 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e86:	490d      	ldr	r1, [pc, #52]	@ (8000ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e8c:	e002      	b.n	8000e94 <LoopCopyDataInit>

08000e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e92:	3304      	adds	r3, #4

08000e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e98:	d3f9      	bcc.n	8000e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea0:	e001      	b.n	8000ea6 <LoopFillZerobss>

08000ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea4:	3204      	adds	r2, #4

08000ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea8:	d3fb      	bcc.n	8000ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eaa:	f005 fb59 	bl	8006560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eae:	f7ff fd67 	bl	8000980 <main>
  bx  lr    
 8000eb2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ebc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000ec0:	080072b0 	.word	0x080072b0
  ldr r2, =_sbss
 8000ec4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000ec8:	20004bdc 	.word	0x20004bdc

08000ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f90d 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fe3e 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f917 	bl	8001166 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f8ed 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	@ (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	@ (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	2000013c 	.word	0x2000013c

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	@ (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000013c 	.word	0x2000013c

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	@ (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	@ (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	@ 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5c 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff8e 	bl	800106c <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5d 	bl	8001018 <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	@ 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e159      	b.n	8001450 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8148 	bne.w	800144a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a2 	beq.w	800144a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b57      	ldr	r3, [pc, #348]	@ (8001468 <HAL_GPIO_Init+0x2e8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	4a56      	ldr	r2, [pc, #344]	@ (8001468 <HAL_GPIO_Init+0x2e8>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001314:	6453      	str	r3, [r2, #68]	@ 0x44
 8001316:	4b54      	ldr	r3, [pc, #336]	@ (8001468 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a52      	ldr	r2, [pc, #328]	@ (800146c <HAL_GPIO_Init+0x2ec>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a49      	ldr	r2, [pc, #292]	@ (8001470 <HAL_GPIO_Init+0x2f0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x202>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a48      	ldr	r2, [pc, #288]	@ (8001474 <HAL_GPIO_Init+0x2f4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x1fe>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a47      	ldr	r2, [pc, #284]	@ (8001478 <HAL_GPIO_Init+0x2f8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x1fa>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a46      	ldr	r2, [pc, #280]	@ (800147c <HAL_GPIO_Init+0x2fc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x1f6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a45      	ldr	r2, [pc, #276]	@ (8001480 <HAL_GPIO_Init+0x300>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x1f2>
 800136e:	2304      	movs	r3, #4
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001372:	2307      	movs	r3, #7
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	@ (800146c <HAL_GPIO_Init+0x2ec>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b38      	ldr	r3, [pc, #224]	@ (8001484 <HAL_GPIO_Init+0x304>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001484 <HAL_GPIO_Init+0x304>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_GPIO_Init+0x304>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a24      	ldr	r2, [pc, #144]	@ (8001484 <HAL_GPIO_Init+0x304>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <HAL_GPIO_Init+0x304>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1a      	ldr	r2, [pc, #104]	@ (8001484 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b18      	ldr	r3, [pc, #96]	@ (8001484 <HAL_GPIO_Init+0x304>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a0f      	ldr	r2, [pc, #60]	@ (8001484 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f aea2 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e267      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d075      	beq.n	80015c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014da:	4b88      	ldr	r3, [pc, #544]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d00c      	beq.n	8001500 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e6:	4b85      	ldr	r3, [pc, #532]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d112      	bne.n	8001518 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4b82      	ldr	r3, [pc, #520]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80014fe:	d10b      	bne.n	8001518 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	4b7e      	ldr	r3, [pc, #504]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d05b      	beq.n	80015c4 <HAL_RCC_OscConfig+0x108>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d157      	bne.n	80015c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e242      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001520:	d106      	bne.n	8001530 <HAL_RCC_OscConfig+0x74>
 8001522:	4b76      	ldr	r3, [pc, #472]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a75      	ldr	r2, [pc, #468]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e01d      	b.n	800156c <HAL_RCC_OscConfig+0xb0>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001538:	d10c      	bne.n	8001554 <HAL_RCC_OscConfig+0x98>
 800153a:	4b70      	ldr	r3, [pc, #448]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6f      	ldr	r2, [pc, #444]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	4b6d      	ldr	r3, [pc, #436]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6c      	ldr	r2, [pc, #432]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	e00b      	b.n	800156c <HAL_RCC_OscConfig+0xb0>
 8001554:	4b69      	ldr	r3, [pc, #420]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a68      	ldr	r2, [pc, #416]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 800155a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b66      	ldr	r3, [pc, #408]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a65      	ldr	r2, [pc, #404]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001566:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800156a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d013      	beq.n	800159c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fd12 	bl	8000f9c <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fd0e 	bl	8000f9c <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	@ 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e207      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b5b      	ldr	r3, [pc, #364]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0xc0>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fcfe 	bl	8000f9c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a4:	f7ff fcfa 	bl	8000f9c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	@ 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1f3      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	4b51      	ldr	r3, [pc, #324]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0xe8>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d063      	beq.n	800169a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015d2:	4b4a      	ldr	r3, [pc, #296]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00b      	beq.n	80015f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015de:	4b47      	ldr	r3, [pc, #284]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d11c      	bne.n	8001624 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d116      	bne.n	8001624 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	4b41      	ldr	r3, [pc, #260]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_RCC_OscConfig+0x152>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d001      	beq.n	800160e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e1c7      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4937      	ldr	r1, [pc, #220]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 800161e:	4313      	orrs	r3, r2
 8001620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001622:	e03a      	b.n	800169a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800162c:	4b34      	ldr	r3, [pc, #208]	@ (8001700 <HAL_RCC_OscConfig+0x244>)
 800162e:	2201      	movs	r2, #1
 8001630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fcb3 	bl	8000f9c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163a:	f7ff fcaf 	bl	8000f9c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e1a8      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001658:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4925      	ldr	r1, [pc, #148]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001668:	4313      	orrs	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
 800166c:	e015      	b.n	800169a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166e:	4b24      	ldr	r3, [pc, #144]	@ (8001700 <HAL_RCC_OscConfig+0x244>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff fc92 	bl	8000f9c <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fc8e 	bl	8000f9c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e187      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	4b1b      	ldr	r3, [pc, #108]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d036      	beq.n	8001714 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d016      	beq.n	80016dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_RCC_OscConfig+0x248>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fc72 	bl	8000f9c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fc6e 	bl	8000f9c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e167      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <HAL_RCC_OscConfig+0x240>)
 80016d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x200>
 80016da:	e01b      	b.n	8001714 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_RCC_OscConfig+0x248>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fc5b 	bl	8000f9c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	e00e      	b.n	8001708 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ea:	f7ff fc57 	bl	8000f9c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d907      	bls.n	8001708 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e150      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
 80016fc:	40023800 	.word	0x40023800
 8001700:	42470000 	.word	0x42470000
 8001704:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b88      	ldr	r3, [pc, #544]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ea      	bne.n	80016ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8097 	beq.w	8001850 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b81      	ldr	r3, [pc, #516]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b7d      	ldr	r3, [pc, #500]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a7c      	ldr	r2, [pc, #496]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b7a      	ldr	r3, [pc, #488]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b77      	ldr	r3, [pc, #476]	@ (8001930 <HAL_RCC_OscConfig+0x474>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d118      	bne.n	8001790 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b74      	ldr	r3, [pc, #464]	@ (8001930 <HAL_RCC_OscConfig+0x474>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a73      	ldr	r2, [pc, #460]	@ (8001930 <HAL_RCC_OscConfig+0x474>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fc17 	bl	8000f9c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001772:	f7ff fc13 	bl	8000f9c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e10c      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	4b6a      	ldr	r3, [pc, #424]	@ (8001930 <HAL_RCC_OscConfig+0x474>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d106      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2ea>
 8001798:	4b64      	ldr	r3, [pc, #400]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800179c:	4a63      	ldr	r2, [pc, #396]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017a4:	e01c      	b.n	80017e0 <HAL_RCC_OscConfig+0x324>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d10c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x30c>
 80017ae:	4b5f      	ldr	r3, [pc, #380]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b2:	4a5e      	ldr	r2, [pc, #376]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ba:	4b5c      	ldr	r3, [pc, #368]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017be:	4a5b      	ldr	r2, [pc, #364]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0x324>
 80017c8:	4b58      	ldr	r3, [pc, #352]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017cc:	4a57      	ldr	r2, [pc, #348]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d4:	4b55      	ldr	r3, [pc, #340]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d8:	4a54      	ldr	r2, [pc, #336]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d015      	beq.n	8001814 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fbd8 	bl	8000f9c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f0:	f7ff fbd4 	bl	8000f9c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0cb      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001806:	4b49      	ldr	r3, [pc, #292]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0ee      	beq.n	80017f0 <HAL_RCC_OscConfig+0x334>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff fbc2 	bl	8000f9c <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181a:	e00a      	b.n	8001832 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181c:	f7ff fbbe 	bl	8000f9c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0b5      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001832:	4b3e      	ldr	r3, [pc, #248]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ee      	bne.n	800181c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d105      	bne.n	8001850 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001844:	4b39      	ldr	r3, [pc, #228]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001848:	4a38      	ldr	r2, [pc, #224]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800184e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a1 	beq.w	800199c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185a:	4b34      	ldr	r3, [pc, #208]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
 8001862:	2b08      	cmp	r3, #8
 8001864:	d05c      	beq.n	8001920 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d141      	bne.n	80018f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b31      	ldr	r3, [pc, #196]	@ (8001934 <HAL_RCC_OscConfig+0x478>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fb92 	bl	8000f9c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fb8e 	bl	8000f9c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e087      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	4b27      	ldr	r3, [pc, #156]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	019b      	lsls	r3, r3, #6
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	3b01      	subs	r3, #1
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	491b      	ldr	r1, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <HAL_RCC_OscConfig+0x478>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ca:	f7ff fb67 	bl	8000f9c <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff fb63 	bl	8000f9c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e05c      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x416>
 80018f0:	e054      	b.n	800199c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_RCC_OscConfig+0x478>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff fb50 	bl	8000f9c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001900:	f7ff fb4c 	bl	8000f9c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e045      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_RCC_OscConfig+0x470>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x444>
 800191e:	e03d      	b.n	800199c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d107      	bne.n	8001938 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e038      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000
 8001934:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_RCC_OscConfig+0x4ec>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d028      	beq.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d121      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d11a      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001968:	4013      	ands	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800196e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001970:	4293      	cmp	r3, r2
 8001972:	d111      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800197e:	085b      	lsrs	r3, r3, #1
 8001980:	3b01      	subs	r3, #1
 8001982:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001992:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0cc      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b68      	ldr	r3, [pc, #416]	@ (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d90c      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b65      	ldr	r3, [pc, #404]	@ (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b63      	ldr	r3, [pc, #396]	@ (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d020      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a00:	4b59      	ldr	r3, [pc, #356]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a58      	ldr	r2, [pc, #352]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d005      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a18:	4b53      	ldr	r3, [pc, #332]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4a52      	ldr	r2, [pc, #328]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a24:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	494d      	ldr	r1, [pc, #308]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d044      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4a:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d119      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e07f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d109      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e067      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8a:	4b37      	ldr	r3, [pc, #220]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f023 0203 	bic.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	4934      	ldr	r1, [pc, #208]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fa7e 	bl	8000f9c <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	e00a      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa4:	f7ff fa7a 	bl	8000f9c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e04f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 020c 	and.w	r2, r3, #12
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1eb      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b25      	ldr	r3, [pc, #148]	@ (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d20c      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e032      	b.n	8001b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d008      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b00:	4b19      	ldr	r3, [pc, #100]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4916      	ldr	r1, [pc, #88]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1e:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	490e      	ldr	r1, [pc, #56]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b32:	f000 f821 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b36:	4602      	mov	r2, r0
 8001b38:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	091b      	lsrs	r3, r3, #4
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	490a      	ldr	r1, [pc, #40]	@ (8001b6c <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4a:	4a09      	ldr	r2, [pc, #36]	@ (8001b70 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f9de 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08007254 	.word	0x08007254
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b7c:	b094      	sub	sp, #80	@ 0x50
 8001b7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b90:	4b79      	ldr	r3, [pc, #484]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	f200 80e1 	bhi.w	8001d64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x34>
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d003      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001baa:	e0db      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b73      	ldr	r3, [pc, #460]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001bae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bb0:	e0db      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bb2:	4b73      	ldr	r3, [pc, #460]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x208>)
 8001bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bb6:	e0d8      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d063      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bce:	4b6a      	ldr	r3, [pc, #424]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	099b      	lsrs	r3, r3, #6
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001be2:	2300      	movs	r3, #0
 8001be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001be6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bea:	4622      	mov	r2, r4
 8001bec:	462b      	mov	r3, r5
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 0100 	mov.w	r1, #0
 8001bf6:	0159      	lsls	r1, r3, #5
 8001bf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfc:	0150      	lsls	r0, r2, #5
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4621      	mov	r1, r4
 8001c04:	1a51      	subs	r1, r2, r1
 8001c06:	6139      	str	r1, [r7, #16]
 8001c08:	4629      	mov	r1, r5
 8001c0a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c1c:	4659      	mov	r1, fp
 8001c1e:	018b      	lsls	r3, r1, #6
 8001c20:	4651      	mov	r1, sl
 8001c22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c26:	4651      	mov	r1, sl
 8001c28:	018a      	lsls	r2, r1, #6
 8001c2a:	4651      	mov	r1, sl
 8001c2c:	ebb2 0801 	subs.w	r8, r2, r1
 8001c30:	4659      	mov	r1, fp
 8001c32:	eb63 0901 	sbc.w	r9, r3, r1
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c4a:	4690      	mov	r8, r2
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	4623      	mov	r3, r4
 8001c50:	eb18 0303 	adds.w	r3, r8, r3
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	462b      	mov	r3, r5
 8001c58:	eb49 0303 	adc.w	r3, r9, r3
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	024b      	lsls	r3, r1, #9
 8001c6e:	4621      	mov	r1, r4
 8001c70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c74:	4621      	mov	r1, r4
 8001c76:	024a      	lsls	r2, r1, #9
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c7e:	2200      	movs	r2, #0
 8001c80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c88:	f7fe fafa 	bl	8000280 <__aeabi_uldivmod>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4613      	mov	r3, r2
 8001c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c94:	e058      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b38      	ldr	r3, [pc, #224]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ca6:	623b      	str	r3, [r7, #32]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	f04f 0000 	mov.w	r0, #0
 8001cb8:	f04f 0100 	mov.w	r1, #0
 8001cbc:	0159      	lsls	r1, r3, #5
 8001cbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc2:	0150      	lsls	r0, r2, #5
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4641      	mov	r1, r8
 8001cca:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cce:	4649      	mov	r1, r9
 8001cd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ce0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ce4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce8:	ebb2 040a 	subs.w	r4, r2, sl
 8001cec:	eb63 050b 	sbc.w	r5, r3, fp
 8001cf0:	f04f 0200 	mov.w	r2, #0
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	00eb      	lsls	r3, r5, #3
 8001cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfe:	00e2      	lsls	r2, r4, #3
 8001d00:	4614      	mov	r4, r2
 8001d02:	461d      	mov	r5, r3
 8001d04:	4643      	mov	r3, r8
 8001d06:	18e3      	adds	r3, r4, r3
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	464b      	mov	r3, r9
 8001d0c:	eb45 0303 	adc.w	r3, r5, r3
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d1e:	4629      	mov	r1, r5
 8001d20:	028b      	lsls	r3, r1, #10
 8001d22:	4621      	mov	r1, r4
 8001d24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d28:	4621      	mov	r1, r4
 8001d2a:	028a      	lsls	r2, r1, #10
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d32:	2200      	movs	r2, #0
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	61fa      	str	r2, [r7, #28]
 8001d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d3c:	f7fe faa0 	bl	8000280 <__aeabi_uldivmod>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4613      	mov	r3, r2
 8001d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	0c1b      	lsrs	r3, r3, #16
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	3301      	adds	r3, #1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001d58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d62:	e002      	b.n	8001d6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x204>)
 8001d66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3750      	adds	r7, #80	@ 0x50
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	00f42400 	.word	0x00f42400
 8001d80:	007a1200 	.word	0x007a1200

08001d84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000

08001d9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001da0:	f7ff fff0 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0a9b      	lsrs	r3, r3, #10
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4903      	ldr	r1, [pc, #12]	@ (8001dc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	08007264 	.word	0x08007264

08001dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dc8:	f7ff ffdc 	bl	8001d84 <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0b5b      	lsrs	r3, r3, #13
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4903      	ldr	r1, [pc, #12]	@ (8001de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	08007264 	.word	0x08007264

08001dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07b      	b.n	8001ef6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d108      	bne.n	8001e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e0e:	d009      	beq.n	8001e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
 8001e16:	e005      	b.n	8001e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe fe58 	bl	8000af4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea8:	ea42 0103 	orr.w	r1, r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	f003 0104 	and.w	r1, r3, #4
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	f003 0210 	and.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b088      	sub	sp, #32
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f0e:	f7ff f845 	bl	8000f9c <HAL_GetTick>
 8001f12:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d001      	beq.n	8001f28 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001f24:	2302      	movs	r3, #2
 8001f26:	e12a      	b.n	800217e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <HAL_SPI_Transmit+0x36>
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e122      	b.n	800217e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_SPI_Transmit+0x48>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e11b      	b.n	800217e <HAL_SPI_Transmit+0x280>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2203      	movs	r2, #3
 8001f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	88fa      	ldrh	r2, [r7, #6]
 8001f66:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	88fa      	ldrh	r2, [r7, #6]
 8001f6c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f94:	d10f      	bne.n	8001fb6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fb4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc0:	2b40      	cmp	r3, #64	@ 0x40
 8001fc2:	d007      	beq.n	8001fd4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fdc:	d152      	bne.n	8002084 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_SPI_Transmit+0xee>
 8001fe6:	8b7b      	ldrh	r3, [r7, #26]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d145      	bne.n	8002078 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002010:	e032      	b.n	8002078 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b02      	cmp	r3, #2
 800201e:	d112      	bne.n	8002046 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	1c9a      	adds	r2, r3, #2
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002044:	e018      	b.n	8002078 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002046:	f7fe ffa9 	bl	8000f9c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d803      	bhi.n	800205e <HAL_SPI_Transmit+0x160>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d102      	bne.n	8002064 <HAL_SPI_Transmit+0x166>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e082      	b.n	800217e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800207c:	b29b      	uxth	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1c7      	bne.n	8002012 <HAL_SPI_Transmit+0x114>
 8002082:	e053      	b.n	800212c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <HAL_SPI_Transmit+0x194>
 800208c:	8b7b      	ldrh	r3, [r7, #26]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d147      	bne.n	8002122 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	330c      	adds	r3, #12
 800209c:	7812      	ldrb	r2, [r2, #0]
 800209e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3b01      	subs	r3, #1
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020b8:	e033      	b.n	8002122 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d113      	bne.n	80020f0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	330c      	adds	r3, #12
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020ee:	e018      	b.n	8002122 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f0:	f7fe ff54 	bl	8000f9c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d803      	bhi.n	8002108 <HAL_SPI_Transmit+0x20a>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002106:	d102      	bne.n	800210e <HAL_SPI_Transmit+0x210>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e02d      	b.n	800217e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002126:	b29b      	uxth	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1c6      	bne.n	80020ba <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	6839      	ldr	r1, [r7, #0]
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f000 fa59 	bl	80025e8 <SPI_EndRxTxTransaction>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800217c:	2300      	movs	r3, #0
  }
}
 800217e:	4618      	mov	r0, r3
 8002180:	3720      	adds	r7, #32
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b08a      	sub	sp, #40	@ 0x28
 800218a:	af00      	add	r7, sp, #0
 800218c:	60f8      	str	r0, [r7, #12]
 800218e:	60b9      	str	r1, [r7, #8]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002194:	2301      	movs	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002198:	f7fe ff00 	bl	8000f9c <HAL_GetTick>
 800219c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021a4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021b0:	7ffb      	ldrb	r3, [r7, #31]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d00c      	beq.n	80021d0 <HAL_SPI_TransmitReceive+0x4a>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021bc:	d106      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_SPI_TransmitReceive+0x46>
 80021c6:	7ffb      	ldrb	r3, [r7, #31]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d001      	beq.n	80021d0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	e17f      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d005      	beq.n	80021e2 <HAL_SPI_TransmitReceive+0x5c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <HAL_SPI_TransmitReceive+0x5c>
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e174      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x6e>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e16d      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x34a>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b04      	cmp	r3, #4
 8002206:	d003      	beq.n	8002210 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2205      	movs	r2, #5
 800220c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	887a      	ldrh	r2, [r7, #2]
 8002220:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	887a      	ldrh	r2, [r7, #2]
 8002226:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	887a      	ldrh	r2, [r7, #2]
 8002232:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002250:	2b40      	cmp	r3, #64	@ 0x40
 8002252:	d007      	beq.n	8002264 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800226c:	d17e      	bne.n	800236c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_SPI_TransmitReceive+0xf6>
 8002276:	8afb      	ldrh	r3, [r7, #22]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d16c      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	1c9a      	adds	r2, r3, #2
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022a0:	e059      	b.n	8002356 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d11b      	bne.n	80022e8 <HAL_SPI_TransmitReceive+0x162>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d016      	beq.n	80022e8 <HAL_SPI_TransmitReceive+0x162>
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d113      	bne.n	80022e8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	881a      	ldrh	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	1c9a      	adds	r2, r3, #2
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d119      	bne.n	800232a <HAL_SPI_TransmitReceive+0x1a4>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d014      	beq.n	800232a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230a:	b292      	uxth	r2, r2
 800230c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002312:	1c9a      	adds	r2, r3, #2
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800231c:	b29b      	uxth	r3, r3
 800231e:	3b01      	subs	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002326:	2301      	movs	r3, #1
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800232a:	f7fe fe37 	bl	8000f9c <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002336:	429a      	cmp	r2, r3
 8002338:	d80d      	bhi.n	8002356 <HAL_SPI_TransmitReceive+0x1d0>
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d009      	beq.n	8002356 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e0bc      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800235a:	b29b      	uxth	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1a0      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x11c>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d19b      	bne.n	80022a2 <HAL_SPI_TransmitReceive+0x11c>
 800236a:	e082      	b.n	8002472 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_SPI_TransmitReceive+0x1f4>
 8002374:	8afb      	ldrh	r3, [r7, #22]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d171      	bne.n	800245e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	330c      	adds	r3, #12
 8002384:	7812      	ldrb	r2, [r2, #0]
 8002386:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a0:	e05d      	b.n	800245e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d11c      	bne.n	80023ea <HAL_SPI_TransmitReceive+0x264>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d017      	beq.n	80023ea <HAL_SPI_TransmitReceive+0x264>
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d114      	bne.n	80023ea <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d119      	bne.n	800242c <HAL_SPI_TransmitReceive+0x2a6>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002428:	2301      	movs	r3, #1
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800242c:	f7fe fdb6 	bl	8000f9c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002438:	429a      	cmp	r2, r3
 800243a:	d803      	bhi.n	8002444 <HAL_SPI_TransmitReceive+0x2be>
 800243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002442:	d102      	bne.n	800244a <HAL_SPI_TransmitReceive+0x2c4>
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	2b00      	cmp	r3, #0
 8002448:	d109      	bne.n	800245e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e038      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d19c      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x21c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d197      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002472:	6a3a      	ldr	r2, [r7, #32]
 8002474:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8b6 	bl	80025e8 <SPI_EndRxTxTransaction>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e01d      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3728      	adds	r7, #40	@ 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	4613      	mov	r3, r2
 80024e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024e8:	f7fe fd58 	bl	8000f9c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f0:	1a9b      	subs	r3, r3, r2
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	4413      	add	r3, r2
 80024f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024f8:	f7fe fd50 	bl	8000f9c <HAL_GetTick>
 80024fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024fe:	4b39      	ldr	r3, [pc, #228]	@ (80025e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	015b      	lsls	r3, r3, #5
 8002504:	0d1b      	lsrs	r3, r3, #20
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800250e:	e055      	b.n	80025bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d051      	beq.n	80025bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002518:	f7fe fd40 	bl	8000f9c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	429a      	cmp	r2, r3
 8002526:	d902      	bls.n	800252e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d13d      	bne.n	80025aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800253c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002546:	d111      	bne.n	800256c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002550:	d004      	beq.n	800255c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800255a:	d107      	bne.n	800256c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800256a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002574:	d10f      	bne.n	8002596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002594:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e018      	b.n	80025dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e002      	b.n	80025bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	4013      	ands	r3, r2
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d19a      	bne.n	8002510 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3720      	adds	r7, #32
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000000 	.word	0x20000000

080025e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2201      	movs	r2, #1
 80025fc:	2102      	movs	r1, #2
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f7ff ff6a 	bl	80024d8 <SPI_WaitFlagStateUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260e:	f043 0220 	orr.w	r2, r3, #32
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e032      	b.n	8002680 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800261a:	4b1b      	ldr	r3, [pc, #108]	@ (8002688 <SPI_EndRxTxTransaction+0xa0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <SPI_EndRxTxTransaction+0xa4>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	0d5b      	lsrs	r3, r3, #21
 8002626:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002638:	d112      	bne.n	8002660 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	2180      	movs	r1, #128	@ 0x80
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7ff ff47 	bl	80024d8 <SPI_WaitFlagStateUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d016      	beq.n	800267e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e00f      	b.n	8002680 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3b01      	subs	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002676:	2b80      	cmp	r3, #128	@ 0x80
 8002678:	d0f2      	beq.n	8002660 <SPI_EndRxTxTransaction+0x78>
 800267a:	e000      	b.n	800267e <SPI_EndRxTxTransaction+0x96>
        break;
 800267c:	bf00      	nop
  }

  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000000 	.word	0x20000000
 800268c:	165e9f81 	.word	0x165e9f81

08002690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e042      	b.n	8002728 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fb98 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f973 	bl	80029c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	4613      	mov	r3, r2
 800273e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	d175      	bne.n	800283c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_UART_Transmit+0x2c>
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e06e      	b.n	800283e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2221      	movs	r2, #33	@ 0x21
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800276e:	f7fe fc15 	bl	8000f9c <HAL_GetTick>
 8002772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	88fa      	ldrh	r2, [r7, #6]
 8002778:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	88fa      	ldrh	r2, [r7, #6]
 800277e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002788:	d108      	bne.n	800279c <HAL_UART_Transmit+0x6c>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d104      	bne.n	800279c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	61bb      	str	r3, [r7, #24]
 800279a:	e003      	b.n	80027a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a4:	e02e      	b.n	8002804 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2200      	movs	r2, #0
 80027ae:	2180      	movs	r1, #128	@ 0x80
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f848 	bl	8002846 <UART_WaitOnFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e03a      	b.n	800283e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10b      	bne.n	80027e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	3302      	adds	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	e007      	b.n	80027f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002808:	b29b      	uxth	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1cb      	bne.n	80027a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2200      	movs	r2, #0
 8002816:	2140      	movs	r1, #64	@ 0x40
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f814 	bl	8002846 <UART_WaitOnFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e006      	b.n	800283e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	e000      	b.n	800283e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b086      	sub	sp, #24
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4613      	mov	r3, r2
 8002854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002856:	e03b      	b.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285e:	d037      	beq.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7fe fb9c 	bl	8000f9c <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	6a3a      	ldr	r2, [r7, #32]
 800286c:	429a      	cmp	r2, r3
 800286e:	d302      	bcc.n	8002876 <UART_WaitOnFlagUntilTimeout+0x30>
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e03a      	b.n	80028f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d023      	beq.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b80      	cmp	r3, #128	@ 0x80
 800288c:	d020      	beq.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b40      	cmp	r3, #64	@ 0x40
 8002892:	d01d      	beq.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d116      	bne.n	80028d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f81d 	bl	80028f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2208      	movs	r2, #8
 80028c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e00f      	b.n	80028f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	4013      	ands	r3, r2
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	bf0c      	ite	eq
 80028e0:	2301      	moveq	r3, #1
 80028e2:	2300      	movne	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d0b4      	beq.n	8002858 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b095      	sub	sp, #84	@ 0x54
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	330c      	adds	r3, #12
 8002906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290a:	e853 3f00 	ldrex	r3, [r3]
 800290e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002912:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	330c      	adds	r3, #12
 800291e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002920:	643a      	str	r2, [r7, #64]	@ 0x40
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002924:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002928:	e841 2300 	strex	r3, r2, [r1]
 800292c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800292e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e5      	bne.n	8002900 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3314      	adds	r3, #20
 800293a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	e853 3f00 	ldrex	r3, [r3]
 8002942:	61fb      	str	r3, [r7, #28]
   return(result);
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3314      	adds	r3, #20
 8002952:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002954:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002956:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002958:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800295a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800295c:	e841 2300 	strex	r3, r2, [r1]
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1e5      	bne.n	8002934 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	2b01      	cmp	r3, #1
 800296e:	d119      	bne.n	80029a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f023 0310 	bic.w	r3, r3, #16
 8002986:	647b      	str	r3, [r7, #68]	@ 0x44
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	330c      	adds	r3, #12
 800298e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002990:	61ba      	str	r2, [r7, #24]
 8002992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	6979      	ldr	r1, [r7, #20]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	613b      	str	r3, [r7, #16]
   return(result);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e5      	bne.n	8002970 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029b2:	bf00      	nop
 80029b4:	3754      	adds	r7, #84	@ 0x54
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b0c0      	sub	sp, #256	@ 0x100
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	ea40 0301 	orr.w	r3, r0, r1
 80029e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a18:	f021 010c 	bic.w	r1, r1, #12
 8002a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a26:	430b      	orrs	r3, r1
 8002a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3a:	6999      	ldr	r1, [r3, #24]
 8002a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	ea40 0301 	orr.w	r3, r0, r1
 8002a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8002c8c <UART_SetConfig+0x2cc>)
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d005      	beq.n	8002a60 <UART_SetConfig+0xa0>
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c90 <UART_SetConfig+0x2d0>)
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d104      	bne.n	8002a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7ff f9b0 	bl	8001dc4 <HAL_RCC_GetPCLK2Freq>
 8002a64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a68:	e003      	b.n	8002a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a6a:	f7ff f997 	bl	8001d9c <HAL_RCC_GetPCLK1Freq>
 8002a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a76:	69db      	ldr	r3, [r3, #28]
 8002a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a7c:	f040 810c 	bne.w	8002c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a84:	2200      	movs	r2, #0
 8002a86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a92:	4622      	mov	r2, r4
 8002a94:	462b      	mov	r3, r5
 8002a96:	1891      	adds	r1, r2, r2
 8002a98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a9a:	415b      	adcs	r3, r3
 8002a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	eb12 0801 	adds.w	r8, r2, r1
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	eb43 0901 	adc.w	r9, r3, r1
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ac2:	4690      	mov	r8, r2
 8002ac4:	4699      	mov	r9, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	eb18 0303 	adds.w	r3, r8, r3
 8002acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ad0:	462b      	mov	r3, r5
 8002ad2:	eb49 0303 	adc.w	r3, r9, r3
 8002ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002aee:	460b      	mov	r3, r1
 8002af0:	18db      	adds	r3, r3, r3
 8002af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002af4:	4613      	mov	r3, r2
 8002af6:	eb42 0303 	adc.w	r3, r2, r3
 8002afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8002afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b04:	f7fd fbbc 	bl	8000280 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4b61      	ldr	r3, [pc, #388]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	011c      	lsls	r4, r3, #4
 8002b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b28:	4642      	mov	r2, r8
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	1891      	adds	r1, r2, r2
 8002b2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b30:	415b      	adcs	r3, r3
 8002b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b38:	4641      	mov	r1, r8
 8002b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8002b3e:	4649      	mov	r1, r9
 8002b40:	eb43 0b01 	adc.w	fp, r3, r1
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b58:	4692      	mov	sl, r2
 8002b5a:	469b      	mov	fp, r3
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8002b62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b66:	464b      	mov	r3, r9
 8002b68:	eb4b 0303 	adc.w	r3, fp, r3
 8002b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b84:	460b      	mov	r3, r1
 8002b86:	18db      	adds	r3, r3, r3
 8002b88:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	eb42 0303 	adc.w	r3, r2, r3
 8002b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b9a:	f7fd fb71 	bl	8000280 <__aeabi_uldivmod>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2264      	movs	r2, #100	@ 0x64
 8002bae:	fb02 f303 	mul.w	r3, r2, r3
 8002bb2:	1acb      	subs	r3, r1, r3
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bba:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc0:	095b      	lsrs	r3, r3, #5
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002bc8:	441c      	add	r4, r3
 8002bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	1891      	adds	r1, r2, r2
 8002be2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002be4:	415b      	adcs	r3, r3
 8002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bec:	4641      	mov	r1, r8
 8002bee:	1851      	adds	r1, r2, r1
 8002bf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	414b      	adcs	r3, r1
 8002bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c04:	4659      	mov	r1, fp
 8002c06:	00cb      	lsls	r3, r1, #3
 8002c08:	4651      	mov	r1, sl
 8002c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c0e:	4651      	mov	r1, sl
 8002c10:	00ca      	lsls	r2, r1, #3
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	4642      	mov	r2, r8
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c20:	464b      	mov	r3, r9
 8002c22:	460a      	mov	r2, r1
 8002c24:	eb42 0303 	adc.w	r3, r2, r3
 8002c28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c40:	460b      	mov	r3, r1
 8002c42:	18db      	adds	r3, r3, r3
 8002c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c46:	4613      	mov	r3, r2
 8002c48:	eb42 0303 	adc.w	r3, r2, r3
 8002c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c56:	f7fd fb13 	bl	8000280 <__aeabi_uldivmod>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002c60:	fba3 1302 	umull	r1, r3, r3, r2
 8002c64:	095b      	lsrs	r3, r3, #5
 8002c66:	2164      	movs	r1, #100	@ 0x64
 8002c68:	fb01 f303 	mul.w	r3, r1, r3
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	3332      	adds	r3, #50	@ 0x32
 8002c72:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <UART_SetConfig+0x2d4>)
 8002c74:	fba2 2303 	umull	r2, r3, r2, r3
 8002c78:	095b      	lsrs	r3, r3, #5
 8002c7a:	f003 0207 	and.w	r2, r3, #7
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4422      	add	r2, r4
 8002c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c88:	e106      	b.n	8002e98 <UART_SetConfig+0x4d8>
 8002c8a:	bf00      	nop
 8002c8c:	40011000 	.word	0x40011000
 8002c90:	40011400 	.word	0x40011400
 8002c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002caa:	4642      	mov	r2, r8
 8002cac:	464b      	mov	r3, r9
 8002cae:	1891      	adds	r1, r2, r2
 8002cb0:	6239      	str	r1, [r7, #32]
 8002cb2:	415b      	adcs	r3, r3
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cba:	4641      	mov	r1, r8
 8002cbc:	1854      	adds	r4, r2, r1
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	eb43 0501 	adc.w	r5, r3, r1
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	00eb      	lsls	r3, r5, #3
 8002cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd2:	00e2      	lsls	r2, r4, #3
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	18e3      	adds	r3, r4, r3
 8002cdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	eb45 0303 	adc.w	r3, r5, r3
 8002ce6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cf6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d06:	4629      	mov	r1, r5
 8002d08:	008b      	lsls	r3, r1, #2
 8002d0a:	4621      	mov	r1, r4
 8002d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d10:	4621      	mov	r1, r4
 8002d12:	008a      	lsls	r2, r1, #2
 8002d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d18:	f7fd fab2 	bl	8000280 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4b60      	ldr	r3, [pc, #384]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002d22:	fba3 2302 	umull	r2, r3, r3, r2
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	011c      	lsls	r4, r3, #4
 8002d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d3c:	4642      	mov	r2, r8
 8002d3e:	464b      	mov	r3, r9
 8002d40:	1891      	adds	r1, r2, r2
 8002d42:	61b9      	str	r1, [r7, #24]
 8002d44:	415b      	adcs	r3, r3
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	1851      	adds	r1, r2, r1
 8002d50:	6139      	str	r1, [r7, #16]
 8002d52:	4649      	mov	r1, r9
 8002d54:	414b      	adcs	r3, r1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d64:	4659      	mov	r1, fp
 8002d66:	00cb      	lsls	r3, r1, #3
 8002d68:	4651      	mov	r1, sl
 8002d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d6e:	4651      	mov	r1, sl
 8002d70:	00ca      	lsls	r2, r1, #3
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	4642      	mov	r2, r8
 8002d7a:	189b      	adds	r3, r3, r2
 8002d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d80:	464b      	mov	r3, r9
 8002d82:	460a      	mov	r2, r1
 8002d84:	eb42 0303 	adc.w	r3, r2, r3
 8002d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002da4:	4649      	mov	r1, r9
 8002da6:	008b      	lsls	r3, r1, #2
 8002da8:	4641      	mov	r1, r8
 8002daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dae:	4641      	mov	r1, r8
 8002db0:	008a      	lsls	r2, r1, #2
 8002db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002db6:	f7fd fa63 	bl	8000280 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4b38      	ldr	r3, [pc, #224]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2264      	movs	r2, #100	@ 0x64
 8002dca:	fb02 f303 	mul.w	r3, r2, r3
 8002dce:	1acb      	subs	r3, r1, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	@ 0x32
 8002dd4:	4a33      	ldr	r2, [pc, #204]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de0:	441c      	add	r4, r3
 8002de2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002de6:	2200      	movs	r2, #0
 8002de8:	673b      	str	r3, [r7, #112]	@ 0x70
 8002dea:	677a      	str	r2, [r7, #116]	@ 0x74
 8002dec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	1891      	adds	r1, r2, r2
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	415b      	adcs	r3, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e00:	4641      	mov	r1, r8
 8002e02:	1851      	adds	r1, r2, r1
 8002e04:	6039      	str	r1, [r7, #0]
 8002e06:	4649      	mov	r1, r9
 8002e08:	414b      	adcs	r3, r1
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e18:	4659      	mov	r1, fp
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e22:	4651      	mov	r1, sl
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e32:	464b      	mov	r3, r9
 8002e34:	460a      	mov	r2, r1
 8002e36:	eb42 0303 	adc.w	r3, r2, r3
 8002e3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e46:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e54:	4649      	mov	r1, r9
 8002e56:	008b      	lsls	r3, r1, #2
 8002e58:	4641      	mov	r1, r8
 8002e5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e5e:	4641      	mov	r1, r8
 8002e60:	008a      	lsls	r2, r1, #2
 8002e62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e66:	f7fd fa0b 	bl	8000280 <__aeabi_uldivmod>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002e70:	fba3 1302 	umull	r1, r3, r3, r2
 8002e74:	095b      	lsrs	r3, r3, #5
 8002e76:	2164      	movs	r1, #100	@ 0x64
 8002e78:	fb01 f303 	mul.w	r3, r1, r3
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	3332      	adds	r3, #50	@ 0x32
 8002e82:	4a08      	ldr	r2, [pc, #32]	@ (8002ea4 <UART_SetConfig+0x4e4>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	f003 020f 	and.w	r2, r3, #15
 8002e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4422      	add	r2, r4
 8002e96:	609a      	str	r2, [r3, #8]
}
 8002e98:	bf00      	nop
 8002e9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea4:	51eb851f 	.word	0x51eb851f

08002ea8 <__NVIC_SetPriority>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db0a      	blt.n	8002ed2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	490c      	ldr	r1, [pc, #48]	@ (8002ef4 <__NVIC_SetPriority+0x4c>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ed0:	e00a      	b.n	8002ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4908      	ldr	r1, [pc, #32]	@ (8002ef8 <__NVIC_SetPriority+0x50>)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000e100 	.word	0xe000e100
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f00:	2100      	movs	r1, #0
 8002f02:	f06f 0004 	mvn.w	r0, #4
 8002f06:	f7ff ffcf 	bl	8002ea8 <__NVIC_SetPriority>
#endif
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f16:	f3ef 8305 	mrs	r3, IPSR
 8002f1a:	603b      	str	r3, [r7, #0]
  return(result);
 8002f1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002f22:	f06f 0305 	mvn.w	r3, #5
 8002f26:	607b      	str	r3, [r7, #4]
 8002f28:	e00c      	b.n	8002f44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <osKernelInitialize+0x44>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d105      	bne.n	8002f3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <osKernelInitialize+0x44>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
 8002f3c:	e002      	b.n	8002f44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f44:	687b      	ldr	r3, [r7, #4]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000140 	.word	0x20000140

08002f58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f5e:	f3ef 8305 	mrs	r3, IPSR
 8002f62:	603b      	str	r3, [r7, #0]
  return(result);
 8002f64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002f6a:	f06f 0305 	mvn.w	r3, #5
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	e010      	b.n	8002f94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <osKernelStart+0x48>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d109      	bne.n	8002f8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002f7a:	f7ff ffbf 	bl	8002efc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <osKernelStart+0x48>)
 8002f80:	2202      	movs	r2, #2
 8002f82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002f84:	f001 fba4 	bl	80046d0 <vTaskStartScheduler>
      stat = osOK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	607b      	str	r3, [r7, #4]
 8002f8c:	e002      	b.n	8002f94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002f94:	687b      	ldr	r3, [r7, #4]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000140 	.word	0x20000140

08002fa4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08e      	sub	sp, #56	@ 0x38
 8002fa8:	af04      	add	r7, sp, #16
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fb4:	f3ef 8305 	mrs	r3, IPSR
 8002fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8002fba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d17e      	bne.n	80030be <osThreadNew+0x11a>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d07b      	beq.n	80030be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002fca:	2318      	movs	r3, #24
 8002fcc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d045      	beq.n	800306a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <osThreadNew+0x48>
        name = attr->name;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <osThreadNew+0x6e>
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b38      	cmp	r3, #56	@ 0x38
 8003004:	d805      	bhi.n	8003012 <osThreadNew+0x6e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <osThreadNew+0x72>
        return (NULL);
 8003012:	2300      	movs	r3, #0
 8003014:	e054      	b.n	80030c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <osThreadNew+0xa8>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b5b      	cmp	r3, #91	@ 0x5b
 8003034:	d90a      	bls.n	800304c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800303a:	2b00      	cmp	r3, #0
 800303c:	d006      	beq.n	800304c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <osThreadNew+0xa8>
        mem = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	e010      	b.n	800306e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10c      	bne.n	800306e <osThreadNew+0xca>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d108      	bne.n	800306e <osThreadNew+0xca>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <osThreadNew+0xca>
          mem = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	e001      	b.n	800306e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d110      	bne.n	8003096 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800307c:	9202      	str	r2, [sp, #8]
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	6a3a      	ldr	r2, [r7, #32]
 8003088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f001 f944 	bl	8004318 <xTaskCreateStatic>
 8003090:	4603      	mov	r3, r0
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	e013      	b.n	80030be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d110      	bne.n	80030be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	f107 0310 	add.w	r3, r7, #16
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f001 f992 	bl	80043d8 <xTaskCreate>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d001      	beq.n	80030be <osThreadNew+0x11a>
            hTask = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80030be:	693b      	ldr	r3, [r7, #16]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3728      	adds	r7, #40	@ 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030d0:	f3ef 8305 	mrs	r3, IPSR
 80030d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80030d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <osDelay+0x1c>
    stat = osErrorISR;
 80030dc:	f06f 0305 	mvn.w	r3, #5
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e007      	b.n	80030f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d002      	beq.n	80030f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f001 fab8 	bl	8004664 <vTaskDelay>
    }
  }

  return (stat);
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80030fe:	b580      	push	{r7, lr}
 8003100:	b088      	sub	sp, #32
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800310a:	f3ef 8305 	mrs	r3, IPSR
 800310e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003110:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003112:	2b00      	cmp	r3, #0
 8003114:	d174      	bne.n	8003200 <osMutexNew+0x102>
    if (attr != NULL) {
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <osMutexNew+0x26>
      type = attr->attr_bits;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	61bb      	str	r3, [r7, #24]
 8003122:	e001      	b.n	8003128 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f003 0301 	and.w	r3, r3, #1
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <osMutexNew+0x3a>
      rmtx = 1U;
 8003132:	2301      	movs	r3, #1
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e001      	b.n	800313c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d15c      	bne.n	8003200 <osMutexNew+0x102>
      mem = -1;
 8003146:	f04f 33ff 	mov.w	r3, #4294967295
 800314a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d015      	beq.n	800317e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <osMutexNew+0x6a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003160:	d902      	bls.n	8003168 <osMutexNew+0x6a>
          mem = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e00c      	b.n	8003182 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d108      	bne.n	8003182 <osMutexNew+0x84>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <osMutexNew+0x84>
            mem = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	e001      	b.n	8003182 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d112      	bne.n	80031ae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	4619      	mov	r1, r3
 8003194:	2004      	movs	r0, #4
 8003196:	f000 fb20 	bl	80037da <xQueueCreateMutexStatic>
 800319a:	61f8      	str	r0, [r7, #28]
 800319c:	e016      	b.n	80031cc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4619      	mov	r1, r3
 80031a4:	2001      	movs	r0, #1
 80031a6:	f000 fb18 	bl	80037da <xQueueCreateMutexStatic>
 80031aa:	61f8      	str	r0, [r7, #28]
 80031ac:	e00e      	b.n	80031cc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d004      	beq.n	80031c4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80031ba:	2004      	movs	r0, #4
 80031bc:	f000 faf5 	bl	80037aa <xQueueCreateMutex>
 80031c0:	61f8      	str	r0, [r7, #28]
 80031c2:	e003      	b.n	80031cc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80031c4:	2001      	movs	r0, #1
 80031c6:	f000 faf0 	bl	80037aa <xQueueCreateMutex>
 80031ca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <osMutexNew+0xee>
        if (attr != NULL) {
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <osMutexNew+0xe2>
          name = attr->name;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e001      	b.n	80031e4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	69f8      	ldr	r0, [r7, #28]
 80031e8:	f001 f838 	bl	800425c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <osMutexNew+0x102>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003200:	69fb      	ldr	r3, [r7, #28]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3720      	adds	r7, #32
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003228:	f3ef 8305 	mrs	r3, IPSR
 800322c:	60bb      	str	r3, [r7, #8]
  return(result);
 800322e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003234:	f06f 0305 	mvn.w	r3, #5
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	e02c      	b.n	8003296 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003242:	f06f 0303 	mvn.w	r3, #3
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	e025      	b.n	8003296 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d011      	beq.n	8003274 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003250:	6839      	ldr	r1, [r7, #0]
 8003252:	6938      	ldr	r0, [r7, #16]
 8003254:	f000 fb11 	bl	800387a <xQueueTakeMutexRecursive>
 8003258:	4603      	mov	r3, r0
 800325a:	2b01      	cmp	r3, #1
 800325c:	d01b      	beq.n	8003296 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003264:	f06f 0301 	mvn.w	r3, #1
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	e014      	b.n	8003296 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800326c:	f06f 0302 	mvn.w	r3, #2
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	e010      	b.n	8003296 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003274:	6839      	ldr	r1, [r7, #0]
 8003276:	6938      	ldr	r0, [r7, #16]
 8003278:	f000 fdb8 	bl	8003dec <xQueueSemaphoreTake>
 800327c:	4603      	mov	r3, r0
 800327e:	2b01      	cmp	r3, #1
 8003280:	d009      	beq.n	8003296 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003288:	f06f 0301 	mvn.w	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	e002      	b.n	8003296 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003290:	f06f 0302 	mvn.w	r3, #2
 8003294:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003296:	697b      	ldr	r3, [r7, #20]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032bc:	f3ef 8305 	mrs	r3, IPSR
 80032c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80032c2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80032c8:	f06f 0305 	mvn.w	r3, #5
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	e01f      	b.n	8003310 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d103      	bne.n	80032de <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80032d6:	f06f 0303 	mvn.w	r3, #3
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	e018      	b.n	8003310 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80032e4:	6938      	ldr	r0, [r7, #16]
 80032e6:	f000 fa93 	bl	8003810 <xQueueGiveMutexRecursive>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d00f      	beq.n	8003310 <osMutexRelease+0x70>
        stat = osErrorResource;
 80032f0:	f06f 0302 	mvn.w	r3, #2
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e00b      	b.n	8003310 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80032f8:	2300      	movs	r3, #0
 80032fa:	2200      	movs	r2, #0
 80032fc:	2100      	movs	r1, #0
 80032fe:	6938      	ldr	r0, [r7, #16]
 8003300:	f000 faf2 	bl	80038e8 <xQueueGenericSend>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d002      	beq.n	8003310 <osMutexRelease+0x70>
        stat = osErrorResource;
 800330a:	f06f 0302 	mvn.w	r3, #2
 800330e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003310:	697b      	ldr	r3, [r7, #20]
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a07      	ldr	r2, [pc, #28]	@ (8003348 <vApplicationGetIdleTaskMemory+0x2c>)
 800332c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a06      	ldr	r2, [pc, #24]	@ (800334c <vApplicationGetIdleTaskMemory+0x30>)
 8003332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2280      	movs	r2, #128	@ 0x80
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000144 	.word	0x20000144
 800334c:	200001a0 	.word	0x200001a0

08003350 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a07      	ldr	r2, [pc, #28]	@ (800337c <vApplicationGetTimerTaskMemory+0x2c>)
 8003360:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a06      	ldr	r2, [pc, #24]	@ (8003380 <vApplicationGetTimerTaskMemory+0x30>)
 8003366:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	200003a0 	.word	0x200003a0
 8003380:	200003fc 	.word	0x200003fc

08003384 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0208 	add.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f103 0208 	add.w	r2, r3, #8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d103      	bne.n	8003446 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e00c      	b.n	8003460 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3308      	adds	r3, #8
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <vListInsert+0x2e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d2f6      	bcs.n	800344e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6852      	ldr	r2, [r2, #4]
 80034b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d103      	bne.n	80034cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003518:	f002 fba6 	bl	8005c68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	3b01      	subs	r3, #1
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	441a      	add	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	22ff      	movs	r2, #255	@ 0xff
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3310      	adds	r3, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fb36 	bl	8004bec <xTaskRemoveFromEventList>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d012      	beq.n	80035ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <xQueueGenericReset+0xd0>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	e009      	b.n	80035ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3310      	adds	r3, #16
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fef1 	bl	8003384 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3324      	adds	r3, #36	@ 0x24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff feec 	bl	8003384 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035ac:	f002 fb8e 	bl	8005ccc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08e      	sub	sp, #56	@ 0x38
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <xQueueGenericCreateStatic+0x56>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <xQueueGenericCreateStatic+0x5a>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <xQueueGenericCreateStatic+0x5c>
 800361a:	2300      	movs	r3, #0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	623b      	str	r3, [r7, #32]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <xQueueGenericCreateStatic+0x84>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <xQueueGenericCreateStatic+0x88>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <xQueueGenericCreateStatic+0x8a>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	61fb      	str	r3, [r7, #28]
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	e7fd      	b.n	8003662 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003666:	2350      	movs	r3, #80	@ 0x50
 8003668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b50      	cmp	r3, #80	@ 0x50
 800366e:	d00b      	beq.n	8003688 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61bb      	str	r3, [r7, #24]
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003688:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800369c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80036a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f840 	bl	8003730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3730      	adds	r7, #48	@ 0x30
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b08a      	sub	sp, #40	@ 0x28
 80036be:	af02      	add	r7, sp, #8
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	613b      	str	r3, [r7, #16]
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	e7fd      	b.n	80036e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3350      	adds	r3, #80	@ 0x50
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 fbd9 	bl	8005eac <pvPortMalloc>
 80036fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3350      	adds	r3, #80	@ 0x50
 800370a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003714:	79fa      	ldrb	r2, [r7, #7]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f805 	bl	8003730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003726:	69bb      	ldr	r3, [r7, #24]
	}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e002      	b.n	8003752 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800375e:	2101      	movs	r1, #1
 8003760:	69b8      	ldr	r0, [r7, #24]
 8003762:	f7ff fec3 	bl	80034ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003796:	2300      	movs	r3, #0
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8a3 	bl	80038e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	461a      	mov	r2, r3
 80037c0:	6939      	ldr	r1, [r7, #16]
 80037c2:	6978      	ldr	r0, [r7, #20]
 80037c4:	f7ff ff79 	bl	80036ba <xQueueGenericCreate>
 80037c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff ffd3 	bl	8003776 <prvInitialiseMutex>

		return xNewQueue;
 80037d0:	68fb      	ldr	r3, [r7, #12]
	}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af02      	add	r7, sp, #8
 80037e0:	4603      	mov	r3, r0
 80037e2:	6039      	str	r1, [r7, #0]
 80037e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037e6:	2301      	movs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2200      	movs	r2, #0
 80037f6:	6939      	ldr	r1, [r7, #16]
 80037f8:	6978      	ldr	r0, [r7, #20]
 80037fa:	f7ff fee1 	bl	80035c0 <xQueueGenericCreateStatic>
 80037fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff ffb8 	bl	8003776 <prvInitialiseMutex>

		return xNewQueue;
 8003806:	68fb      	ldr	r3, [r7, #12]
	}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	60fb      	str	r3, [r7, #12]
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	e7fd      	b.n	8003836 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	689c      	ldr	r4, [r3, #8]
 800383e:	f001 fb95 	bl	8004f6c <xTaskGetCurrentTaskHandle>
 8003842:	4603      	mov	r3, r0
 8003844:	429c      	cmp	r4, r3
 8003846:	d111      	bne.n	800386c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800385a:	2300      	movs	r3, #0
 800385c:	2200      	movs	r2, #0
 800385e:	2100      	movs	r1, #0
 8003860:	6938      	ldr	r0, [r7, #16]
 8003862:	f000 f841 	bl	80038e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003866:	2301      	movs	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e001      	b.n	8003870 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003870:	697b      	ldr	r3, [r7, #20]
	}
 8003872:	4618      	mov	r0, r3
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd90      	pop	{r4, r7, pc}

0800387a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800387a:	b590      	push	{r4, r7, lr}
 800387c:	b087      	sub	sp, #28
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60fb      	str	r3, [r7, #12]
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	e7fd      	b.n	80038a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	689c      	ldr	r4, [r3, #8]
 80038aa:	f001 fb5f 	bl	8004f6c <xTaskGetCurrentTaskHandle>
 80038ae:	4603      	mov	r3, r0
 80038b0:	429c      	cmp	r4, r3
 80038b2:	d107      	bne.n	80038c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80038be:	2301      	movs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e00c      	b.n	80038de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	6938      	ldr	r0, [r7, #16]
 80038c8:	f000 fa90 	bl	8003dec <xQueueSemaphoreTake>
 80038cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80038de:	697b      	ldr	r3, [r7, #20]
	}
 80038e0:	4618      	mov	r0, r3
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}

080038e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	@ 0x38
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <xQueueGenericSend+0x34>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <xQueueGenericSend+0x42>
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <xQueueGenericSend+0x46>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <xQueueGenericSend+0x48>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <xQueueGenericSend+0x64>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003946:	bf00      	nop
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d103      	bne.n	800395a <xQueueGenericSend+0x72>
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <xQueueGenericSend+0x76>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <xQueueGenericSend+0x78>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <xQueueGenericSend+0x94>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	623b      	str	r3, [r7, #32]
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397c:	f001 fb06 	bl	8004f8c <xTaskGetSchedulerState>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <xQueueGenericSend+0xa4>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <xQueueGenericSend+0xa8>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <xQueueGenericSend+0xaa>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <xQueueGenericSend+0xc6>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	61fb      	str	r3, [r7, #28]
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	e7fd      	b.n	80039aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ae:	f002 f95b 	bl	8005c68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <xQueueGenericSend+0xdc>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d129      	bne.n	8003a18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039ca:	f000 fb37 	bl	800403c <prvCopyDataToQueue>
 80039ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	3324      	adds	r3, #36	@ 0x24
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 f905 	bl	8004bec <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae8 <xQueueGenericSend+0x200>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e00a      	b.n	8003a10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a00:	4b39      	ldr	r3, [pc, #228]	@ (8003ae8 <xQueueGenericSend+0x200>)
 8003a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a10:	f002 f95c 	bl	8005ccc <vPortExitCritical>
				return pdPASS;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e063      	b.n	8003ae0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a1e:	f002 f955 	bl	8005ccc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e05c      	b.n	8003ae0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f93f 	bl	8004cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a36:	2301      	movs	r3, #1
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a3a:	f002 f947 	bl	8005ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a3e:	f000 feaf 	bl	80047a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a42:	f002 f911 	bl	8005c68 <vPortEnterCritical>
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d103      	bne.n	8003a5c <xQueueGenericSend+0x174>
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d103      	bne.n	8003a72 <xQueueGenericSend+0x18a>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a72:	f002 f92b 	bl	8005ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a76:	1d3a      	adds	r2, r7, #4
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f92e 	bl	8004ce0 <xTaskCheckForTimeOut>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d124      	bne.n	8003ad4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a8c:	f000 fbce 	bl	800422c <prvIsQueueFull>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a98:	3310      	adds	r3, #16
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 f852 	bl	8004b48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aa6:	f000 fb59 	bl	800415c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aaa:	f000 fe87 	bl	80047bc <xTaskResumeAll>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f47f af7c 	bne.w	80039ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <xQueueGenericSend+0x200>)
 8003ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	e772      	b.n	80039ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aca:	f000 fb47 	bl	800415c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ace:	f000 fe75 	bl	80047bc <xTaskResumeAll>
 8003ad2:	e76c      	b.n	80039ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ad4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ad6:	f000 fb41 	bl	800415c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ada:	f000 fe6f 	bl	80047bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3738      	adds	r7, #56	@ 0x38
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b090      	sub	sp, #64	@ 0x40
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <xQueueGenericSendFromISR+0x3e>
 8003b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <xQueueGenericSendFromISR+0x42>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <xQueueGenericSendFromISR+0x44>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d103      	bne.n	8003b5a <xQueueGenericSendFromISR+0x6e>
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <xQueueGenericSendFromISR+0x72>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <xQueueGenericSendFromISR+0x74>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	623b      	str	r3, [r7, #32]
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b7c:	f002 f954 	bl	8005e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b80:	f3ef 8211 	mrs	r2, BASEPRI
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	61fa      	str	r2, [r7, #28]
 8003b96:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d302      	bcc.n	8003bae <xQueueGenericSendFromISR+0xc2>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d12f      	bne.n	8003c0e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bc4:	f000 fa3a 	bl	800403c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bc8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d112      	bne.n	8003bf8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	3324      	adds	r3, #36	@ 0x24
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f804 	bl	8004bec <xTaskRemoveFromEventList>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00e      	beq.n	8003c08 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e007      	b.n	8003c08 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	b25a      	sxtb	r2, r3
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003c0c:	e001      	b.n	8003c12 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3740      	adds	r7, #64	@ 0x40
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08c      	sub	sp, #48	@ 0x30
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <xQueueReceive+0x32>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	623b      	str	r3, [r7, #32]
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <xQueueReceive+0x40>
 8003c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <xQueueReceive+0x44>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <xQueueReceive+0x46>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <xQueueReceive+0x62>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	61fb      	str	r3, [r7, #28]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c8a:	f001 f97f 	bl	8004f8c <xTaskGetSchedulerState>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <xQueueReceive+0x72>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <xQueueReceive+0x76>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <xQueueReceive+0x78>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <xQueueReceive+0x94>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	61bb      	str	r3, [r7, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cbc:	f001 ffd4 	bl	8005c68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01f      	beq.n	8003d0c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cd0:	f000 fa1e 	bl	8004110 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00f      	beq.n	8003d04 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce6:	3310      	adds	r3, #16
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 ff7f 	bl	8004bec <xTaskRemoveFromEventList>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8003de8 <xQueueReceive+0x1c0>)
 8003cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d04:	f001 ffe2 	bl	8005ccc <vPortExitCritical>
				return pdPASS;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e069      	b.n	8003de0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d12:	f001 ffdb 	bl	8005ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e062      	b.n	8003de0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 ffc5 	bl	8004cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d2e:	f001 ffcd 	bl	8005ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d32:	f000 fd35 	bl	80047a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d36:	f001 ff97 	bl	8005c68 <vPortEnterCritical>
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d40:	b25b      	sxtb	r3, r3
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d103      	bne.n	8003d50 <xQueueReceive+0x128>
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d56:	b25b      	sxtb	r3, r3
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d103      	bne.n	8003d66 <xQueueReceive+0x13e>
 8003d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d66:	f001 ffb1 	bl	8005ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d6a:	1d3a      	adds	r2, r7, #4
 8003d6c:	f107 0310 	add.w	r3, r7, #16
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ffb4 	bl	8004ce0 <xTaskCheckForTimeOut>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d123      	bne.n	8003dc6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d80:	f000 fa3e 	bl	8004200 <prvIsQueueEmpty>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	3324      	adds	r3, #36	@ 0x24
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fed8 	bl	8004b48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d9a:	f000 f9df 	bl	800415c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d9e:	f000 fd0d 	bl	80047bc <xTaskResumeAll>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d189      	bne.n	8003cbc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003da8:	4b0f      	ldr	r3, [pc, #60]	@ (8003de8 <xQueueReceive+0x1c0>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	e780      	b.n	8003cbc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dbc:	f000 f9ce 	bl	800415c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dc0:	f000 fcfc 	bl	80047bc <xTaskResumeAll>
 8003dc4:	e77a      	b.n	8003cbc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dc8:	f000 f9c8 	bl	800415c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dcc:	f000 fcf6 	bl	80047bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dd2:	f000 fa15 	bl	8004200 <prvIsQueueEmpty>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f43f af6f 	beq.w	8003cbc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3730      	adds	r7, #48	@ 0x30
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	@ 0x38
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	623b      	str	r3, [r7, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61fb      	str	r3, [r7, #28]
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e40:	f001 f8a4 	bl	8004f8c <xTaskGetSchedulerState>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <xQueueSemaphoreTake+0x64>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <xQueueSemaphoreTake+0x68>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <xQueueSemaphoreTake+0x6a>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	61bb      	str	r3, [r7, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e72:	f001 fef9 	bl	8005c68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d024      	beq.n	8003ecc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	1e5a      	subs	r2, r3, #1
 8003e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e88:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e92:	f001 f9f5 	bl	8005280 <pvTaskIncrementMutexHeldCount>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00f      	beq.n	8003ec4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea6:	3310      	adds	r3, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fe9f 	bl	8004bec <xTaskRemoveFromEventList>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eb4:	4b54      	ldr	r3, [pc, #336]	@ (8004008 <xQueueSemaphoreTake+0x21c>)
 8003eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ec4:	f001 ff02 	bl	8005ccc <vPortExitCritical>
				return pdPASS;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e098      	b.n	8003ffe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d112      	bne.n	8003ef8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	617b      	str	r3, [r7, #20]
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ef0:	f001 feec 	bl	8005ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e082      	b.n	8003ffe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fed6 	bl	8004cb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f0c:	f001 fede 	bl	8005ccc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f10:	f000 fc46 	bl	80047a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f14:	f001 fea8 	bl	8005c68 <vPortEnterCritical>
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d103      	bne.n	8003f2e <xQueueSemaphoreTake+0x142>
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d103      	bne.n	8003f44 <xQueueSemaphoreTake+0x158>
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f44:	f001 fec2 	bl	8005ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f48:	463a      	mov	r2, r7
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fec5 	bl	8004ce0 <xTaskCheckForTimeOut>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d132      	bne.n	8003fc2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f5e:	f000 f94f 	bl	8004200 <prvIsQueueEmpty>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d026      	beq.n	8003fb6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003f70:	f001 fe7a 	bl	8005c68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f825 	bl	8004fc8 <xTaskPriorityInherit>
 8003f7e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003f80:	f001 fea4 	bl	8005ccc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f86:	3324      	adds	r3, #36	@ 0x24
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fddb 	bl	8004b48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f94:	f000 f8e2 	bl	800415c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f98:	f000 fc10 	bl	80047bc <xTaskResumeAll>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f47f af67 	bne.w	8003e72 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003fa4:	4b18      	ldr	r3, [pc, #96]	@ (8004008 <xQueueSemaphoreTake+0x21c>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	e75d      	b.n	8003e72 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fb8:	f000 f8d0 	bl	800415c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fbc:	f000 fbfe 	bl	80047bc <xTaskResumeAll>
 8003fc0:	e757      	b.n	8003e72 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003fc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fc4:	f000 f8ca 	bl	800415c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fc8:	f000 fbf8 	bl	80047bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fce:	f000 f917 	bl	8004200 <prvIsQueueEmpty>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f43f af4c 	beq.w	8003e72 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003fe0:	f001 fe42 	bl	8005c68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003fe4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fe6:	f000 f811 	bl	800400c <prvGetDisinheritPriorityAfterTimeout>
 8003fea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f8c0 	bl	8005178 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ff8:	f001 fe68 	bl	8005ccc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3738      	adds	r7, #56	@ 0x38
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d006      	beq.n	800402a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	e001      	b.n	800402e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800402e:	68fb      	ldr	r3, [r7, #12]
	}
 8004030:	4618      	mov	r0, r3
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004050:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10d      	bne.n	8004076 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d14d      	bne.n	80040fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f816 	bl	8005098 <xTaskPriorityDisinherit>
 800406c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	e043      	b.n	80040fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d119      	bne.n	80040b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6858      	ldr	r0, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	461a      	mov	r2, r3
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	f002 fa91 	bl	80065ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	441a      	add	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d32b      	bcc.n	80040fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	605a      	str	r2, [r3, #4]
 80040ae:	e026      	b.n	80040fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68d8      	ldr	r0, [r3, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	461a      	mov	r2, r3
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	f002 fa77 	bl	80065ae <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	425b      	negs	r3, r3
 80040ca:	441a      	add	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d207      	bcs.n	80040ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e4:	425b      	negs	r3, r3
 80040e6:	441a      	add	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d105      	bne.n	80040fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004106:	697b      	ldr	r3, [r7, #20]
}
 8004108:	4618      	mov	r0, r3
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	2b00      	cmp	r3, #0
 8004120:	d018      	beq.n	8004154 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	441a      	add	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	429a      	cmp	r2, r3
 800413a:	d303      	bcc.n	8004144 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68d9      	ldr	r1, [r3, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	461a      	mov	r2, r3
 800414e:	6838      	ldr	r0, [r7, #0]
 8004150:	f002 fa2d 	bl	80065ae <memcpy>
	}
}
 8004154:	bf00      	nop
 8004156:	3708      	adds	r7, #8
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004164:	f001 fd80 	bl	8005c68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800416e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004170:	e011      	b.n	8004196 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	2b00      	cmp	r3, #0
 8004178:	d012      	beq.n	80041a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3324      	adds	r3, #36	@ 0x24
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fd34 	bl	8004bec <xTaskRemoveFromEventList>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800418a:	f000 fe0d 	bl	8004da8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	3b01      	subs	r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	dce9      	bgt.n	8004172 <prvUnlockQueue+0x16>
 800419e:	e000      	b.n	80041a2 <prvUnlockQueue+0x46>
					break;
 80041a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	22ff      	movs	r2, #255	@ 0xff
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80041aa:	f001 fd8f 	bl	8005ccc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041ae:	f001 fd5b 	bl	8005c68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ba:	e011      	b.n	80041e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d012      	beq.n	80041ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3310      	adds	r3, #16
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 fd0f 	bl	8004bec <xTaskRemoveFromEventList>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041d4:	f000 fde8 	bl	8004da8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041d8:	7bbb      	ldrb	r3, [r7, #14]
 80041da:	3b01      	subs	r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	dce9      	bgt.n	80041bc <prvUnlockQueue+0x60>
 80041e8:	e000      	b.n	80041ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	22ff      	movs	r2, #255	@ 0xff
 80041f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041f4:	f001 fd6a 	bl	8005ccc <vPortExitCritical>
}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004208:	f001 fd2e 	bl	8005c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004210:	2b00      	cmp	r3, #0
 8004212:	d102      	bne.n	800421a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e001      	b.n	800421e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800421e:	f001 fd55 	bl	8005ccc <vPortExitCritical>

	return xReturn;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004234:	f001 fd18 	bl	8005c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004240:	429a      	cmp	r2, r3
 8004242:	d102      	bne.n	800424a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e001      	b.n	800424e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800424e:	f001 fd3d 	bl	8005ccc <vPortExitCritical>

	return xReturn;
 8004252:	68fb      	ldr	r3, [r7, #12]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e014      	b.n	8004296 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800426c:	4a0f      	ldr	r2, [pc, #60]	@ (80042ac <vQueueAddToRegistry+0x50>)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10b      	bne.n	8004290 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004278:	490c      	ldr	r1, [pc, #48]	@ (80042ac <vQueueAddToRegistry+0x50>)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004282:	4a0a      	ldr	r2, [pc, #40]	@ (80042ac <vQueueAddToRegistry+0x50>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800428e:	e006      	b.n	800429e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b07      	cmp	r3, #7
 800429a:	d9e7      	bls.n	800426c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	200007fc 	.word	0x200007fc

080042b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042c0:	f001 fcd2 	bl	8005c68 <vPortEnterCritical>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d103      	bne.n	80042da <vQueueWaitForMessageRestricted+0x2a>
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d103      	bne.n	80042f0 <vQueueWaitForMessageRestricted+0x40>
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042f0:	f001 fcec 	bl	8005ccc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3324      	adds	r3, #36	@ 0x24
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fc45 	bl	8004b94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f7ff ff26 	bl	800415c <prvUnlockQueue>
	}
 8004310:	bf00      	nop
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08e      	sub	sp, #56	@ 0x38
 800431c:	af04      	add	r7, sp, #16
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <xTaskCreateStatic+0x2c>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	623b      	str	r3, [r7, #32]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10b      	bne.n	8004362 <xTaskCreateStatic+0x4a>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	61fb      	str	r3, [r7, #28]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004362:	235c      	movs	r3, #92	@ 0x5c
 8004364:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b5c      	cmp	r3, #92	@ 0x5c
 800436a:	d00b      	beq.n	8004384 <xTaskCreateStatic+0x6c>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61bb      	str	r3, [r7, #24]
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004384:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01e      	beq.n	80043ca <xTaskCreateStatic+0xb2>
 800438c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01b      	beq.n	80043ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004398:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043a4:	2300      	movs	r3, #0
 80043a6:	9303      	str	r3, [sp, #12]
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	9302      	str	r3, [sp, #8]
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f850 	bl	8004462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043c4:	f000 f8de 	bl	8004584 <prvAddNewTaskToReadyList>
 80043c8:	e001      	b.n	80043ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043ce:	697b      	ldr	r3, [r7, #20]
	}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	@ 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08c      	sub	sp, #48	@ 0x30
 80043dc:	af04      	add	r7, sp, #16
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 fd5d 	bl	8005eac <pvPortMalloc>
 80043f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00e      	beq.n	8004418 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043fa:	205c      	movs	r0, #92	@ 0x5c
 80043fc:	f001 fd56 	bl	8005eac <pvPortMalloc>
 8004400:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	631a      	str	r2, [r3, #48]	@ 0x30
 800440e:	e005      	b.n	800441c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	f001 fe19 	bl	8006048 <vPortFree>
 8004416:	e001      	b.n	800441c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d017      	beq.n	8004452 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	2300      	movs	r3, #0
 800442e:	9303      	str	r3, [sp, #12]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	9302      	str	r3, [sp, #8]
 8004434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f80e 	bl	8004462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004446:	69f8      	ldr	r0, [r7, #28]
 8004448:	f000 f89c 	bl	8004584 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800444c:	2301      	movs	r3, #1
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e002      	b.n	8004458 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004458:	69bb      	ldr	r3, [r7, #24]
	}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b088      	sub	sp, #32
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	461a      	mov	r2, r3
 800447a:	21a5      	movs	r1, #165	@ 0xa5
 800447c:	f002 f81b 	bl	80064b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800448a:	3b01      	subs	r3, #1
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f023 0307 	bic.w	r3, r3, #7
 8004498:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00b      	beq.n	80044bc <prvInitialiseNewTask+0x5a>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	617b      	str	r3, [r7, #20]
}
 80044b6:	bf00      	nop
 80044b8:	bf00      	nop
 80044ba:	e7fd      	b.n	80044b8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01f      	beq.n	8004502 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	e012      	b.n	80044ee <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	7819      	ldrb	r1, [r3, #0]
 80044d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	3334      	adds	r3, #52	@ 0x34
 80044d8:	460a      	mov	r2, r1
 80044da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	3301      	adds	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b0f      	cmp	r3, #15
 80044f2:	d9e9      	bls.n	80044c8 <prvInitialiseNewTask+0x66>
 80044f4:	e000      	b.n	80044f8 <prvInitialiseNewTask+0x96>
			{
				break;
 80044f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004500:	e003      	b.n	800450a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	2b37      	cmp	r3, #55	@ 0x37
 800450e:	d901      	bls.n	8004514 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004510:	2337      	movs	r3, #55	@ 0x37
 8004512:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004518:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800451e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	2200      	movs	r2, #0
 8004524:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	3304      	adds	r3, #4
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe ff4a 	bl	80033c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004532:	3318      	adds	r3, #24
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe ff45 	bl	80033c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	2200      	movs	r2, #0
 8004554:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	68f9      	ldr	r1, [r7, #12]
 8004562:	69b8      	ldr	r0, [r7, #24]
 8004564:	f001 fa4e 	bl	8005a04 <pxPortInitialiseStack>
 8004568:	4602      	mov	r2, r0
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800456e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004578:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800457a:	bf00      	nop
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800458c:	f001 fb6c 	bl	8005c68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004590:	4b2d      	ldr	r3, [pc, #180]	@ (8004648 <prvAddNewTaskToReadyList+0xc4>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	3301      	adds	r3, #1
 8004596:	4a2c      	ldr	r2, [pc, #176]	@ (8004648 <prvAddNewTaskToReadyList+0xc4>)
 8004598:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800459a:	4b2c      	ldr	r3, [pc, #176]	@ (800464c <prvAddNewTaskToReadyList+0xc8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045a2:	4a2a      	ldr	r2, [pc, #168]	@ (800464c <prvAddNewTaskToReadyList+0xc8>)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045a8:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <prvAddNewTaskToReadyList+0xc4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d110      	bne.n	80045d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045b0:	f000 fc1e 	bl	8004df0 <prvInitialiseTaskLists>
 80045b4:	e00d      	b.n	80045d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045b6:	4b26      	ldr	r3, [pc, #152]	@ (8004650 <prvAddNewTaskToReadyList+0xcc>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045be:	4b23      	ldr	r3, [pc, #140]	@ (800464c <prvAddNewTaskToReadyList+0xc8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d802      	bhi.n	80045d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045cc:	4a1f      	ldr	r2, [pc, #124]	@ (800464c <prvAddNewTaskToReadyList+0xc8>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045d2:	4b20      	ldr	r3, [pc, #128]	@ (8004654 <prvAddNewTaskToReadyList+0xd0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3301      	adds	r3, #1
 80045d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004654 <prvAddNewTaskToReadyList+0xd0>)
 80045da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004654 <prvAddNewTaskToReadyList+0xd0>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <prvAddNewTaskToReadyList+0xd4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d903      	bls.n	80045f8 <prvAddNewTaskToReadyList+0x74>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f4:	4a18      	ldr	r2, [pc, #96]	@ (8004658 <prvAddNewTaskToReadyList+0xd4>)
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4a15      	ldr	r2, [pc, #84]	@ (800465c <prvAddNewTaskToReadyList+0xd8>)
 8004606:	441a      	add	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3304      	adds	r3, #4
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f7fe fee5 	bl	80033de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004614:	f001 fb5a 	bl	8005ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004618:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <prvAddNewTaskToReadyList+0xcc>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00e      	beq.n	800463e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004620:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <prvAddNewTaskToReadyList+0xc8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462a:	429a      	cmp	r2, r3
 800462c:	d207      	bcs.n	800463e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800462e:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <prvAddNewTaskToReadyList+0xdc>)
 8004630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800463e:	bf00      	nop
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000d10 	.word	0x20000d10
 800464c:	2000083c 	.word	0x2000083c
 8004650:	20000d1c 	.word	0x20000d1c
 8004654:	20000d2c 	.word	0x20000d2c
 8004658:	20000d18 	.word	0x20000d18
 800465c:	20000840 	.word	0x20000840
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d018      	beq.n	80046a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004676:	4b14      	ldr	r3, [pc, #80]	@ (80046c8 <vTaskDelay+0x64>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <vTaskDelay+0x32>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	60bb      	str	r3, [r7, #8]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004696:	f000 f883 	bl	80047a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800469a:	2100      	movs	r1, #0
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fe03 	bl	80052a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046a2:	f000 f88b 	bl	80047bc <xTaskResumeAll>
 80046a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d107      	bne.n	80046be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80046ae:	4b07      	ldr	r3, [pc, #28]	@ (80046cc <vTaskDelay+0x68>)
 80046b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000d38 	.word	0x20000d38
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	@ 0x28
 80046d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046de:	463a      	mov	r2, r7
 80046e0:	1d39      	adds	r1, r7, #4
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fe fe18 	bl	800331c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	9202      	str	r2, [sp, #8]
 80046f4:	9301      	str	r3, [sp, #4]
 80046f6:	2300      	movs	r3, #0
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	2300      	movs	r3, #0
 80046fc:	460a      	mov	r2, r1
 80046fe:	4922      	ldr	r1, [pc, #136]	@ (8004788 <vTaskStartScheduler+0xb8>)
 8004700:	4822      	ldr	r0, [pc, #136]	@ (800478c <vTaskStartScheduler+0xbc>)
 8004702:	f7ff fe09 	bl	8004318 <xTaskCreateStatic>
 8004706:	4603      	mov	r3, r0
 8004708:	4a21      	ldr	r2, [pc, #132]	@ (8004790 <vTaskStartScheduler+0xc0>)
 800470a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800470c:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <vTaskStartScheduler+0xc0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004714:	2301      	movs	r3, #1
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e001      	b.n	800471e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d102      	bne.n	800472a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004724:	f000 fe14 	bl	8005350 <xTimerCreateTimerTask>
 8004728:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d116      	bne.n	800475e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	613b      	str	r3, [r7, #16]
}
 8004742:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004744:	4b13      	ldr	r3, [pc, #76]	@ (8004794 <vTaskStartScheduler+0xc4>)
 8004746:	f04f 32ff 	mov.w	r2, #4294967295
 800474a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800474c:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <vTaskStartScheduler+0xc8>)
 800474e:	2201      	movs	r2, #1
 8004750:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004752:	4b12      	ldr	r3, [pc, #72]	@ (800479c <vTaskStartScheduler+0xcc>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004758:	f001 f9e2 	bl	8005b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800475c:	e00f      	b.n	800477e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004764:	d10b      	bne.n	800477e <vTaskStartScheduler+0xae>
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60fb      	str	r3, [r7, #12]
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	e7fd      	b.n	800477a <vTaskStartScheduler+0xaa>
}
 800477e:	bf00      	nop
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	080071d0 	.word	0x080071d0
 800478c:	08004dc1 	.word	0x08004dc1
 8004790:	20000d34 	.word	0x20000d34
 8004794:	20000d30 	.word	0x20000d30
 8004798:	20000d1c 	.word	0x20000d1c
 800479c:	20000d14 	.word	0x20000d14

080047a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <vTaskSuspendAll+0x18>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	4a03      	ldr	r2, [pc, #12]	@ (80047b8 <vTaskSuspendAll+0x18>)
 80047ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20000d38 	.word	0x20000d38

080047bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ca:	4b42      	ldr	r3, [pc, #264]	@ (80048d4 <xTaskResumeAll+0x118>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10b      	bne.n	80047ea <xTaskResumeAll+0x2e>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	603b      	str	r3, [r7, #0]
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	e7fd      	b.n	80047e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ea:	f001 fa3d 	bl	8005c68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047ee:	4b39      	ldr	r3, [pc, #228]	@ (80048d4 <xTaskResumeAll+0x118>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3b01      	subs	r3, #1
 80047f4:	4a37      	ldr	r2, [pc, #220]	@ (80048d4 <xTaskResumeAll+0x118>)
 80047f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f8:	4b36      	ldr	r3, [pc, #216]	@ (80048d4 <xTaskResumeAll+0x118>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d162      	bne.n	80048c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004800:	4b35      	ldr	r3, [pc, #212]	@ (80048d8 <xTaskResumeAll+0x11c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d05e      	beq.n	80048c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004808:	e02f      	b.n	800486a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480a:	4b34      	ldr	r3, [pc, #208]	@ (80048dc <xTaskResumeAll+0x120>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3318      	adds	r3, #24
 8004816:	4618      	mov	r0, r3
 8004818:	f7fe fe3e 	bl	8003498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3304      	adds	r3, #4
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fe39 	bl	8003498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800482a:	4b2d      	ldr	r3, [pc, #180]	@ (80048e0 <xTaskResumeAll+0x124>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d903      	bls.n	800483a <xTaskResumeAll+0x7e>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004836:	4a2a      	ldr	r2, [pc, #168]	@ (80048e0 <xTaskResumeAll+0x124>)
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4a27      	ldr	r2, [pc, #156]	@ (80048e4 <xTaskResumeAll+0x128>)
 8004848:	441a      	add	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3304      	adds	r3, #4
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f7fe fdc4 	bl	80033de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485a:	4b23      	ldr	r3, [pc, #140]	@ (80048e8 <xTaskResumeAll+0x12c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004860:	429a      	cmp	r2, r3
 8004862:	d302      	bcc.n	800486a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004864:	4b21      	ldr	r3, [pc, #132]	@ (80048ec <xTaskResumeAll+0x130>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800486a:	4b1c      	ldr	r3, [pc, #112]	@ (80048dc <xTaskResumeAll+0x120>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1cb      	bne.n	800480a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004878:	f000 fb58 	bl	8004f2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800487c:	4b1c      	ldr	r3, [pc, #112]	@ (80048f0 <xTaskResumeAll+0x134>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004888:	f000 f846 	bl	8004918 <xTaskIncrementTick>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004892:	4b16      	ldr	r3, [pc, #88]	@ (80048ec <xTaskResumeAll+0x130>)
 8004894:	2201      	movs	r2, #1
 8004896:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f1      	bne.n	8004888 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80048a4:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <xTaskResumeAll+0x134>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048aa:	4b10      	ldr	r3, [pc, #64]	@ (80048ec <xTaskResumeAll+0x130>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048b2:	2301      	movs	r3, #1
 80048b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048b6:	4b0f      	ldr	r3, [pc, #60]	@ (80048f4 <xTaskResumeAll+0x138>)
 80048b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048c6:	f001 fa01 	bl	8005ccc <vPortExitCritical>

	return xAlreadyYielded;
 80048ca:	68bb      	ldr	r3, [r7, #8]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000d38 	.word	0x20000d38
 80048d8:	20000d10 	.word	0x20000d10
 80048dc:	20000cd0 	.word	0x20000cd0
 80048e0:	20000d18 	.word	0x20000d18
 80048e4:	20000840 	.word	0x20000840
 80048e8:	2000083c 	.word	0x2000083c
 80048ec:	20000d24 	.word	0x20000d24
 80048f0:	20000d20 	.word	0x20000d20
 80048f4:	e000ed04 	.word	0xe000ed04

080048f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048fe:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <xTaskGetTickCount+0x1c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004904:	687b      	ldr	r3, [r7, #4]
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000d14 	.word	0x20000d14

08004918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004922:	4b4f      	ldr	r3, [pc, #316]	@ (8004a60 <xTaskIncrementTick+0x148>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 8090 	bne.w	8004a4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800492c:	4b4d      	ldr	r3, [pc, #308]	@ (8004a64 <xTaskIncrementTick+0x14c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3301      	adds	r3, #1
 8004932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004934:	4a4b      	ldr	r2, [pc, #300]	@ (8004a64 <xTaskIncrementTick+0x14c>)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d121      	bne.n	8004984 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004940:	4b49      	ldr	r3, [pc, #292]	@ (8004a68 <xTaskIncrementTick+0x150>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <xTaskIncrementTick+0x4a>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	603b      	str	r3, [r7, #0]
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	e7fd      	b.n	800495e <xTaskIncrementTick+0x46>
 8004962:	4b41      	ldr	r3, [pc, #260]	@ (8004a68 <xTaskIncrementTick+0x150>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	4b40      	ldr	r3, [pc, #256]	@ (8004a6c <xTaskIncrementTick+0x154>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3e      	ldr	r2, [pc, #248]	@ (8004a68 <xTaskIncrementTick+0x150>)
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4a3e      	ldr	r2, [pc, #248]	@ (8004a6c <xTaskIncrementTick+0x154>)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4b3e      	ldr	r3, [pc, #248]	@ (8004a70 <xTaskIncrementTick+0x158>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3301      	adds	r3, #1
 800497c:	4a3c      	ldr	r2, [pc, #240]	@ (8004a70 <xTaskIncrementTick+0x158>)
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	f000 fad4 	bl	8004f2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004984:	4b3b      	ldr	r3, [pc, #236]	@ (8004a74 <xTaskIncrementTick+0x15c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	429a      	cmp	r2, r3
 800498c:	d349      	bcc.n	8004a22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800498e:	4b36      	ldr	r3, [pc, #216]	@ (8004a68 <xTaskIncrementTick+0x150>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d104      	bne.n	80049a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004998:	4b36      	ldr	r3, [pc, #216]	@ (8004a74 <xTaskIncrementTick+0x15c>)
 800499a:	f04f 32ff 	mov.w	r2, #4294967295
 800499e:	601a      	str	r2, [r3, #0]
					break;
 80049a0:	e03f      	b.n	8004a22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a2:	4b31      	ldr	r3, [pc, #196]	@ (8004a68 <xTaskIncrementTick+0x150>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d203      	bcs.n	80049c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049ba:	4a2e      	ldr	r2, [pc, #184]	@ (8004a74 <xTaskIncrementTick+0x15c>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049c0:	e02f      	b.n	8004a22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fd66 	bl	8003498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3318      	adds	r3, #24
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fd5d 	bl	8003498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e2:	4b25      	ldr	r3, [pc, #148]	@ (8004a78 <xTaskIncrementTick+0x160>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d903      	bls.n	80049f2 <xTaskIncrementTick+0xda>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ee:	4a22      	ldr	r2, [pc, #136]	@ (8004a78 <xTaskIncrementTick+0x160>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4a1f      	ldr	r2, [pc, #124]	@ (8004a7c <xTaskIncrementTick+0x164>)
 8004a00:	441a      	add	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7fe fce8 	bl	80033de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a12:	4b1b      	ldr	r3, [pc, #108]	@ (8004a80 <xTaskIncrementTick+0x168>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d3b8      	bcc.n	800498e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a20:	e7b5      	b.n	800498e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a22:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <xTaskIncrementTick+0x168>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a28:	4914      	ldr	r1, [pc, #80]	@ (8004a7c <xTaskIncrementTick+0x164>)
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d901      	bls.n	8004a3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a3e:	4b11      	ldr	r3, [pc, #68]	@ (8004a84 <xTaskIncrementTick+0x16c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004a46:	2301      	movs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e004      	b.n	8004a56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a88 <xTaskIncrementTick+0x170>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	4a0d      	ldr	r2, [pc, #52]	@ (8004a88 <xTaskIncrementTick+0x170>)
 8004a54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a56:	697b      	ldr	r3, [r7, #20]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20000d38 	.word	0x20000d38
 8004a64:	20000d14 	.word	0x20000d14
 8004a68:	20000cc8 	.word	0x20000cc8
 8004a6c:	20000ccc 	.word	0x20000ccc
 8004a70:	20000d28 	.word	0x20000d28
 8004a74:	20000d30 	.word	0x20000d30
 8004a78:	20000d18 	.word	0x20000d18
 8004a7c:	20000840 	.word	0x20000840
 8004a80:	2000083c 	.word	0x2000083c
 8004a84:	20000d24 	.word	0x20000d24
 8004a88:	20000d20 	.word	0x20000d20

08004a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a92:	4b28      	ldr	r3, [pc, #160]	@ (8004b34 <vTaskSwitchContext+0xa8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a9a:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <vTaskSwitchContext+0xac>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aa0:	e042      	b.n	8004b28 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004aa2:	4b25      	ldr	r3, [pc, #148]	@ (8004b38 <vTaskSwitchContext+0xac>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aa8:	4b24      	ldr	r3, [pc, #144]	@ (8004b3c <vTaskSwitchContext+0xb0>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e011      	b.n	8004ad4 <vTaskSwitchContext+0x48>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10b      	bne.n	8004ace <vTaskSwitchContext+0x42>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	607b      	str	r3, [r7, #4]
}
 8004ac8:	bf00      	nop
 8004aca:	bf00      	nop
 8004acc:	e7fd      	b.n	8004aca <vTaskSwitchContext+0x3e>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	491a      	ldr	r1, [pc, #104]	@ (8004b40 <vTaskSwitchContext+0xb4>)
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d0e3      	beq.n	8004ab0 <vTaskSwitchContext+0x24>
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4a13      	ldr	r2, [pc, #76]	@ (8004b40 <vTaskSwitchContext+0xb4>)
 8004af4:	4413      	add	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d104      	bne.n	8004b18 <vTaskSwitchContext+0x8c>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	605a      	str	r2, [r3, #4]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	4a09      	ldr	r2, [pc, #36]	@ (8004b44 <vTaskSwitchContext+0xb8>)
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	4a06      	ldr	r2, [pc, #24]	@ (8004b3c <vTaskSwitchContext+0xb0>)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6013      	str	r3, [r2, #0]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	20000d38 	.word	0x20000d38
 8004b38:	20000d24 	.word	0x20000d24
 8004b3c:	20000d18 	.word	0x20000d18
 8004b40:	20000840 	.word	0x20000840
 8004b44:	2000083c 	.word	0x2000083c

08004b48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10b      	bne.n	8004b70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	60fb      	str	r3, [r7, #12]
}
 8004b6a:	bf00      	nop
 8004b6c:	bf00      	nop
 8004b6e:	e7fd      	b.n	8004b6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b70:	4b07      	ldr	r3, [pc, #28]	@ (8004b90 <vTaskPlaceOnEventList+0x48>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3318      	adds	r3, #24
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7fe fc54 	bl	8003426 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b7e:	2101      	movs	r1, #1
 8004b80:	6838      	ldr	r0, [r7, #0]
 8004b82:	f000 fb91 	bl	80052a8 <prvAddCurrentTaskToDelayedList>
}
 8004b86:	bf00      	nop
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	2000083c 	.word	0x2000083c

08004b94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10b      	bne.n	8004bbe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	617b      	str	r3, [r7, #20]
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	e7fd      	b.n	8004bba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f7fe fc09 	bl	80033de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	68b8      	ldr	r0, [r7, #8]
 8004bdc:	f000 fb64 	bl	80052a8 <prvAddCurrentTaskToDelayedList>
	}
 8004be0:	bf00      	nop
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	2000083c 	.word	0x2000083c

08004bec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	60fb      	str	r3, [r7, #12]
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	e7fd      	b.n	8004c16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	3318      	adds	r3, #24
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fc3a 	bl	8003498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c24:	4b1d      	ldr	r3, [pc, #116]	@ (8004c9c <xTaskRemoveFromEventList+0xb0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11d      	bne.n	8004c68 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe fc31 	bl	8003498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3a:	4b19      	ldr	r3, [pc, #100]	@ (8004ca0 <xTaskRemoveFromEventList+0xb4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d903      	bls.n	8004c4a <xTaskRemoveFromEventList+0x5e>
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	4a16      	ldr	r2, [pc, #88]	@ (8004ca0 <xTaskRemoveFromEventList+0xb4>)
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4a13      	ldr	r2, [pc, #76]	@ (8004ca4 <xTaskRemoveFromEventList+0xb8>)
 8004c58:	441a      	add	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	3304      	adds	r3, #4
 8004c5e:	4619      	mov	r1, r3
 8004c60:	4610      	mov	r0, r2
 8004c62:	f7fe fbbc 	bl	80033de <vListInsertEnd>
 8004c66:	e005      	b.n	8004c74 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	3318      	adds	r3, #24
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	480e      	ldr	r0, [pc, #56]	@ (8004ca8 <xTaskRemoveFromEventList+0xbc>)
 8004c70:	f7fe fbb5 	bl	80033de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <xTaskRemoveFromEventList+0xc0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d905      	bls.n	8004c8e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c86:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <xTaskRemoveFromEventList+0xc4>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e001      	b.n	8004c92 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c92:	697b      	ldr	r3, [r7, #20]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000d38 	.word	0x20000d38
 8004ca0:	20000d18 	.word	0x20000d18
 8004ca4:	20000840 	.word	0x20000840
 8004ca8:	20000cd0 	.word	0x20000cd0
 8004cac:	2000083c 	.word	0x2000083c
 8004cb0:	20000d24 	.word	0x20000d24

08004cb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cbc:	4b06      	ldr	r3, [pc, #24]	@ (8004cd8 <vTaskInternalSetTimeOutState+0x24>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <vTaskInternalSetTimeOutState+0x28>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	20000d28 	.word	0x20000d28
 8004cdc:	20000d14 	.word	0x20000d14

08004ce0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10b      	bne.n	8004d08 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
}
 8004d02:	bf00      	nop
 8004d04:	bf00      	nop
 8004d06:	e7fd      	b.n	8004d04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10b      	bne.n	8004d26 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60fb      	str	r3, [r7, #12]
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004d26:	f000 ff9f 	bl	8005c68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <xTaskCheckForTimeOut+0xc0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e023      	b.n	8004d92 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	4b15      	ldr	r3, [pc, #84]	@ (8004da4 <xTaskCheckForTimeOut+0xc4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d007      	beq.n	8004d66 <xTaskCheckForTimeOut+0x86>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d302      	bcc.n	8004d66 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d60:	2301      	movs	r3, #1
 8004d62:	61fb      	str	r3, [r7, #28]
 8004d64:	e015      	b.n	8004d92 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d20b      	bcs.n	8004d88 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff99 	bl	8004cb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e004      	b.n	8004d92 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d92:	f000 ff9b 	bl	8005ccc <vPortExitCritical>

	return xReturn;
 8004d96:	69fb      	ldr	r3, [r7, #28]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3720      	adds	r7, #32
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000d14 	.word	0x20000d14
 8004da4:	20000d28 	.word	0x20000d28

08004da8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <vTaskMissedYield+0x14>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20000d24 	.word	0x20000d24

08004dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dc8:	f000 f852 	bl	8004e70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dcc:	4b06      	ldr	r3, [pc, #24]	@ (8004de8 <prvIdleTask+0x28>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d9f9      	bls.n	8004dc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dd4:	4b05      	ldr	r3, [pc, #20]	@ (8004dec <prvIdleTask+0x2c>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004de4:	e7f0      	b.n	8004dc8 <prvIdleTask+0x8>
 8004de6:	bf00      	nop
 8004de8:	20000840 	.word	0x20000840
 8004dec:	e000ed04 	.word	0xe000ed04

08004df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004df6:	2300      	movs	r3, #0
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	e00c      	b.n	8004e16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4a12      	ldr	r2, [pc, #72]	@ (8004e50 <prvInitialiseTaskLists+0x60>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fe faba 	bl	8003384 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3301      	adds	r3, #1
 8004e14:	607b      	str	r3, [r7, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b37      	cmp	r3, #55	@ 0x37
 8004e1a:	d9ef      	bls.n	8004dfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e1c:	480d      	ldr	r0, [pc, #52]	@ (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e1e:	f7fe fab1 	bl	8003384 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e22:	480d      	ldr	r0, [pc, #52]	@ (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e24:	f7fe faae 	bl	8003384 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e28:	480c      	ldr	r0, [pc, #48]	@ (8004e5c <prvInitialiseTaskLists+0x6c>)
 8004e2a:	f7fe faab 	bl	8003384 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e2e:	480c      	ldr	r0, [pc, #48]	@ (8004e60 <prvInitialiseTaskLists+0x70>)
 8004e30:	f7fe faa8 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e34:	480b      	ldr	r0, [pc, #44]	@ (8004e64 <prvInitialiseTaskLists+0x74>)
 8004e36:	f7fe faa5 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e68 <prvInitialiseTaskLists+0x78>)
 8004e3c:	4a05      	ldr	r2, [pc, #20]	@ (8004e54 <prvInitialiseTaskLists+0x64>)
 8004e3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <prvInitialiseTaskLists+0x7c>)
 8004e42:	4a05      	ldr	r2, [pc, #20]	@ (8004e58 <prvInitialiseTaskLists+0x68>)
 8004e44:	601a      	str	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000840 	.word	0x20000840
 8004e54:	20000ca0 	.word	0x20000ca0
 8004e58:	20000cb4 	.word	0x20000cb4
 8004e5c:	20000cd0 	.word	0x20000cd0
 8004e60:	20000ce4 	.word	0x20000ce4
 8004e64:	20000cfc 	.word	0x20000cfc
 8004e68:	20000cc8 	.word	0x20000cc8
 8004e6c:	20000ccc 	.word	0x20000ccc

08004e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e76:	e019      	b.n	8004eac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e78:	f000 fef6 	bl	8005c68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7c:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <prvCheckTasksWaitingTermination+0x50>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fe fb05 	bl	8003498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4a0b      	ldr	r2, [pc, #44]	@ (8004ec4 <prvCheckTasksWaitingTermination+0x54>)
 8004e96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004ea0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ea2:	f000 ff13 	bl	8005ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f810 	bl	8004ecc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <prvCheckTasksWaitingTermination+0x58>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e1      	bne.n	8004e78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000ce4 	.word	0x20000ce4
 8004ec4:	20000d10 	.word	0x20000d10
 8004ec8:	20000cf8 	.word	0x20000cf8

08004ecc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d108      	bne.n	8004ef0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 f8b0 	bl	8006048 <vPortFree>
				vPortFree( pxTCB );
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 f8ad 	bl	8006048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eee:	e019      	b.n	8004f24 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d103      	bne.n	8004f02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 f8a4 	bl	8006048 <vPortFree>
	}
 8004f00:	e010      	b.n	8004f24 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d00b      	beq.n	8004f24 <prvDeleteTCB+0x58>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60fb      	str	r3, [r7, #12]
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <prvDeleteTCB+0x54>
	}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f32:	4b0c      	ldr	r3, [pc, #48]	@ (8004f64 <prvResetNextTaskUnblockTime+0x38>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f68 <prvResetNextTaskUnblockTime+0x3c>)
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f44:	e008      	b.n	8004f58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f46:	4b07      	ldr	r3, [pc, #28]	@ (8004f64 <prvResetNextTaskUnblockTime+0x38>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4a04      	ldr	r2, [pc, #16]	@ (8004f68 <prvResetNextTaskUnblockTime+0x3c>)
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000cc8 	.word	0x20000cc8
 8004f68:	20000d30 	.word	0x20000d30

08004f6c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004f72:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <xTaskGetCurrentTaskHandle+0x1c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004f78:	687b      	ldr	r3, [r7, #4]
	}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	2000083c 	.word	0x2000083c

08004f8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f92:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc0 <xTaskGetSchedulerState+0x34>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	607b      	str	r3, [r7, #4]
 8004f9e:	e008      	b.n	8004fb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa0:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <xTaskGetSchedulerState+0x38>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fa8:	2302      	movs	r3, #2
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	e001      	b.n	8004fb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fb2:	687b      	ldr	r3, [r7, #4]
	}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	20000d1c 	.word	0x20000d1c
 8004fc4:	20000d38 	.word	0x20000d38

08004fc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d051      	beq.n	8005082 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800508c <xTaskPriorityInherit+0xc4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d241      	bcs.n	8005070 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	db06      	blt.n	8005002 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff4:	4b25      	ldr	r3, [pc, #148]	@ (800508c <xTaskPriorityInherit+0xc4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6959      	ldr	r1, [r3, #20]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4a1f      	ldr	r2, [pc, #124]	@ (8005090 <xTaskPriorityInherit+0xc8>)
 8005014:	4413      	add	r3, r2
 8005016:	4299      	cmp	r1, r3
 8005018:	d122      	bne.n	8005060 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	3304      	adds	r3, #4
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fa3a 	bl	8003498 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005024:	4b19      	ldr	r3, [pc, #100]	@ (800508c <xTaskPriorityInherit+0xc4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005032:	4b18      	ldr	r3, [pc, #96]	@ (8005094 <xTaskPriorityInherit+0xcc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d903      	bls.n	8005042 <xTaskPriorityInherit+0x7a>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	4a15      	ldr	r2, [pc, #84]	@ (8005094 <xTaskPriorityInherit+0xcc>)
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4a10      	ldr	r2, [pc, #64]	@ (8005090 <xTaskPriorityInherit+0xc8>)
 8005050:	441a      	add	r2, r3
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f7fe f9c0 	bl	80033de <vListInsertEnd>
 800505e:	e004      	b.n	800506a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005060:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <xTaskPriorityInherit+0xc4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800506a:	2301      	movs	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e008      	b.n	8005082 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005074:	4b05      	ldr	r3, [pc, #20]	@ (800508c <xTaskPriorityInherit+0xc4>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	429a      	cmp	r2, r3
 800507c:	d201      	bcs.n	8005082 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800507e:	2301      	movs	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005082:	68fb      	ldr	r3, [r7, #12]
	}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	2000083c 	.word	0x2000083c
 8005090:	20000840 	.word	0x20000840
 8005094:	20000d18 	.word	0x20000d18

08005098 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d058      	beq.n	8005160 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050ae:	4b2f      	ldr	r3, [pc, #188]	@ (800516c <xTaskPriorityDisinherit+0xd4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d00b      	beq.n	80050d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	60fb      	str	r3, [r7, #12]
}
 80050ca:	bf00      	nop
 80050cc:	bf00      	nop
 80050ce:	e7fd      	b.n	80050cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	60bb      	str	r3, [r7, #8]
}
 80050ea:	bf00      	nop
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005102:	429a      	cmp	r2, r3
 8005104:	d02c      	beq.n	8005160 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510a:	2b00      	cmp	r3, #0
 800510c:	d128      	bne.n	8005160 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3304      	adds	r3, #4
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe f9c0 	bl	8003498 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005130:	4b0f      	ldr	r3, [pc, #60]	@ (8005170 <xTaskPriorityDisinherit+0xd8>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d903      	bls.n	8005140 <xTaskPriorityDisinherit+0xa8>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	4a0c      	ldr	r2, [pc, #48]	@ (8005170 <xTaskPriorityDisinherit+0xd8>)
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a09      	ldr	r2, [pc, #36]	@ (8005174 <xTaskPriorityDisinherit+0xdc>)
 800514e:	441a      	add	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7fe f941 	bl	80033de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800515c:	2301      	movs	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005160:	697b      	ldr	r3, [r7, #20]
	}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2000083c 	.word	0x2000083c
 8005170:	20000d18 	.word	0x20000d18
 8005174:	20000840 	.word	0x20000840

08005178 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d06c      	beq.n	800526a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60fb      	str	r3, [r7, #12]
}
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d902      	bls.n	80051c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	e002      	b.n	80051c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d04c      	beq.n	800526a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d147      	bne.n	800526a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80051da:	4b26      	ldr	r3, [pc, #152]	@ (8005274 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d10b      	bne.n	80051fc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	60bb      	str	r3, [r7, #8]
}
 80051f6:	bf00      	nop
 80051f8:	bf00      	nop
 80051fa:	e7fd      	b.n	80051f8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005200:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	db04      	blt.n	800521a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	6959      	ldr	r1, [r3, #20]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4a13      	ldr	r2, [pc, #76]	@ (8005278 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800522a:	4413      	add	r3, r2
 800522c:	4299      	cmp	r1, r3
 800522e:	d11c      	bne.n	800526a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe f92f 	bl	8003498 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800523e:	4b0f      	ldr	r3, [pc, #60]	@ (800527c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d903      	bls.n	800524e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524a:	4a0c      	ldr	r2, [pc, #48]	@ (800527c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4a07      	ldr	r2, [pc, #28]	@ (8005278 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800525c:	441a      	add	r2, r3
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	3304      	adds	r3, #4
 8005262:	4619      	mov	r1, r3
 8005264:	4610      	mov	r0, r2
 8005266:	f7fe f8ba 	bl	80033de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800526a:	bf00      	nop
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2000083c 	.word	0x2000083c
 8005278:	20000840 	.word	0x20000840
 800527c:	20000d18 	.word	0x20000d18

08005280 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005284:	4b07      	ldr	r3, [pc, #28]	@ (80052a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d004      	beq.n	8005296 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005292:	3201      	adds	r2, #1
 8005294:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005296:	4b03      	ldr	r3, [pc, #12]	@ (80052a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005298:	681b      	ldr	r3, [r3, #0]
	}
 800529a:	4618      	mov	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	2000083c 	.word	0x2000083c

080052a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052b2:	4b21      	ldr	r3, [pc, #132]	@ (8005338 <prvAddCurrentTaskToDelayedList+0x90>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052b8:	4b20      	ldr	r3, [pc, #128]	@ (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3304      	adds	r3, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe f8ea 	bl	8003498 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	d10a      	bne.n	80052e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052d2:	4b1a      	ldr	r3, [pc, #104]	@ (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4819      	ldr	r0, [pc, #100]	@ (8005340 <prvAddCurrentTaskToDelayedList+0x98>)
 80052dc:	f7fe f87f 	bl	80033de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052e0:	e026      	b.n	8005330 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4413      	add	r3, r2
 80052e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052ea:	4b14      	ldr	r3, [pc, #80]	@ (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d209      	bcs.n	800530e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052fa:	4b12      	ldr	r3, [pc, #72]	@ (8005344 <prvAddCurrentTaskToDelayedList+0x9c>)
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b0f      	ldr	r3, [pc, #60]	@ (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f7fe f88d 	bl	8003426 <vListInsert>
}
 800530c:	e010      	b.n	8005330 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800530e:	4b0e      	ldr	r3, [pc, #56]	@ (8005348 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b0a      	ldr	r3, [pc, #40]	@ (800533c <prvAddCurrentTaskToDelayedList+0x94>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3304      	adds	r3, #4
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f7fe f883 	bl	8003426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005320:	4b0a      	ldr	r3, [pc, #40]	@ (800534c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d202      	bcs.n	8005330 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800532a:	4a08      	ldr	r2, [pc, #32]	@ (800534c <prvAddCurrentTaskToDelayedList+0xa4>)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6013      	str	r3, [r2, #0]
}
 8005330:	bf00      	nop
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000d14 	.word	0x20000d14
 800533c:	2000083c 	.word	0x2000083c
 8005340:	20000cfc 	.word	0x20000cfc
 8005344:	20000ccc 	.word	0x20000ccc
 8005348:	20000cc8 	.word	0x20000cc8
 800534c:	20000d30 	.word	0x20000d30

08005350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	@ 0x28
 8005354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005356:	2300      	movs	r3, #0
 8005358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800535a:	f000 fb13 	bl	8005984 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800535e:	4b1d      	ldr	r3, [pc, #116]	@ (80053d4 <xTimerCreateTimerTask+0x84>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d021      	beq.n	80053aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800536e:	1d3a      	adds	r2, r7, #4
 8005370:	f107 0108 	add.w	r1, r7, #8
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	4618      	mov	r0, r3
 800537a:	f7fd ffe9 	bl	8003350 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	9202      	str	r2, [sp, #8]
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	2302      	movs	r3, #2
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	2300      	movs	r3, #0
 800538e:	460a      	mov	r2, r1
 8005390:	4911      	ldr	r1, [pc, #68]	@ (80053d8 <xTimerCreateTimerTask+0x88>)
 8005392:	4812      	ldr	r0, [pc, #72]	@ (80053dc <xTimerCreateTimerTask+0x8c>)
 8005394:	f7fe ffc0 	bl	8004318 <xTaskCreateStatic>
 8005398:	4603      	mov	r3, r0
 800539a:	4a11      	ldr	r2, [pc, #68]	@ (80053e0 <xTimerCreateTimerTask+0x90>)
 800539c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800539e:	4b10      	ldr	r3, [pc, #64]	@ (80053e0 <xTimerCreateTimerTask+0x90>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053a6:	2301      	movs	r3, #1
 80053a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10b      	bne.n	80053c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	613b      	str	r3, [r7, #16]
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	e7fd      	b.n	80053c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053c8:	697b      	ldr	r3, [r7, #20]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	20000d6c 	.word	0x20000d6c
 80053d8:	080071d8 	.word	0x080071d8
 80053dc:	0800551d 	.word	0x0800551d
 80053e0:	20000d70 	.word	0x20000d70

080053e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	@ 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10b      	bne.n	8005414 <xTimerGenericCommand+0x30>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	623b      	str	r3, [r7, #32]
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	e7fd      	b.n	8005410 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005414:	4b19      	ldr	r3, [pc, #100]	@ (800547c <xTimerGenericCommand+0x98>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d02a      	beq.n	8005472 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b05      	cmp	r3, #5
 800542c:	dc18      	bgt.n	8005460 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800542e:	f7ff fdad 	bl	8004f8c <xTaskGetSchedulerState>
 8005432:	4603      	mov	r3, r0
 8005434:	2b02      	cmp	r3, #2
 8005436:	d109      	bne.n	800544c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005438:	4b10      	ldr	r3, [pc, #64]	@ (800547c <xTimerGenericCommand+0x98>)
 800543a:	6818      	ldr	r0, [r3, #0]
 800543c:	f107 0110 	add.w	r1, r7, #16
 8005440:	2300      	movs	r3, #0
 8005442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005444:	f7fe fa50 	bl	80038e8 <xQueueGenericSend>
 8005448:	6278      	str	r0, [r7, #36]	@ 0x24
 800544a:	e012      	b.n	8005472 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800544c:	4b0b      	ldr	r3, [pc, #44]	@ (800547c <xTimerGenericCommand+0x98>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	f107 0110 	add.w	r1, r7, #16
 8005454:	2300      	movs	r3, #0
 8005456:	2200      	movs	r2, #0
 8005458:	f7fe fa46 	bl	80038e8 <xQueueGenericSend>
 800545c:	6278      	str	r0, [r7, #36]	@ 0x24
 800545e:	e008      	b.n	8005472 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005460:	4b06      	ldr	r3, [pc, #24]	@ (800547c <xTimerGenericCommand+0x98>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	f107 0110 	add.w	r1, r7, #16
 8005468:	2300      	movs	r3, #0
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	f7fe fb3e 	bl	8003aec <xQueueGenericSendFromISR>
 8005470:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005474:	4618      	mov	r0, r3
 8005476:	3728      	adds	r7, #40	@ 0x28
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000d6c 	.word	0x20000d6c

08005480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548a:	4b23      	ldr	r3, [pc, #140]	@ (8005518 <prvProcessExpiredTimer+0x98>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	3304      	adds	r3, #4
 8005498:	4618      	mov	r0, r3
 800549a:	f7fd fffd 	bl	8003498 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d023      	beq.n	80054f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	18d1      	adds	r1, r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	6978      	ldr	r0, [r7, #20]
 80054ba:	f000 f8d5 	bl	8005668 <prvInsertTimerInActiveList>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054c4:	2300      	movs	r3, #0
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	2100      	movs	r1, #0
 80054ce:	6978      	ldr	r0, [r7, #20]
 80054d0:	f7ff ff88 	bl	80053e4 <xTimerGenericCommand>
 80054d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d114      	bne.n	8005506 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	60fb      	str	r3, [r7, #12]
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054fa:	f023 0301 	bic.w	r3, r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	6978      	ldr	r0, [r7, #20]
 800550c:	4798      	blx	r3
}
 800550e:	bf00      	nop
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000d64 	.word	0x20000d64

0800551c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005524:	f107 0308 	add.w	r3, r7, #8
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f859 	bl	80055e0 <prvGetNextExpireTime>
 800552e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4619      	mov	r1, r3
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f805 	bl	8005544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800553a:	f000 f8d7 	bl	80056ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800553e:	bf00      	nop
 8005540:	e7f0      	b.n	8005524 <prvTimerTask+0x8>
	...

08005544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800554e:	f7ff f927 	bl	80047a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005552:	f107 0308 	add.w	r3, r7, #8
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f866 	bl	8005628 <prvSampleTimeNow>
 800555c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d130      	bne.n	80055c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10a      	bne.n	8005580 <prvProcessTimerOrBlockTask+0x3c>
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	429a      	cmp	r2, r3
 8005570:	d806      	bhi.n	8005580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005572:	f7ff f923 	bl	80047bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f7ff ff81 	bl	8005480 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800557e:	e024      	b.n	80055ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005586:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <prvProcessTimerOrBlockTask+0x90>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <prvProcessTimerOrBlockTask+0x50>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <prvProcessTimerOrBlockTask+0x52>
 8005594:	2300      	movs	r3, #0
 8005596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005598:	4b0f      	ldr	r3, [pc, #60]	@ (80055d8 <prvProcessTimerOrBlockTask+0x94>)
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	f7fe fe83 	bl	80042b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055aa:	f7ff f907 	bl	80047bc <xTaskResumeAll>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055b4:	4b09      	ldr	r3, [pc, #36]	@ (80055dc <prvProcessTimerOrBlockTask+0x98>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
}
 80055c4:	e001      	b.n	80055ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055c6:	f7ff f8f9 	bl	80047bc <xTaskResumeAll>
}
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000d68 	.word	0x20000d68
 80055d8:	20000d6c 	.word	0x20000d6c
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80055e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005624 <prvGetNextExpireTime+0x44>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <prvGetNextExpireTime+0x16>
 80055f2:	2201      	movs	r2, #1
 80055f4:	e000      	b.n	80055f8 <prvGetNextExpireTime+0x18>
 80055f6:	2200      	movs	r2, #0
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d105      	bne.n	8005610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005604:	4b07      	ldr	r3, [pc, #28]	@ (8005624 <prvGetNextExpireTime+0x44>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e001      	b.n	8005614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005614:	68fb      	ldr	r3, [r7, #12]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000d64 	.word	0x20000d64

08005628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005630:	f7ff f962 	bl	80048f8 <xTaskGetTickCount>
 8005634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005636:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <prvSampleTimeNow+0x3c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	429a      	cmp	r2, r3
 800563e:	d205      	bcs.n	800564c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005640:	f000 f93a 	bl	80058b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e002      	b.n	8005652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005652:	4a04      	ldr	r2, [pc, #16]	@ (8005664 <prvSampleTimeNow+0x3c>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005658:	68fb      	ldr	r3, [r7, #12]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000d74 	.word	0x20000d74

08005668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	429a      	cmp	r2, r3
 800568c:	d812      	bhi.n	80056b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	1ad2      	subs	r2, r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	429a      	cmp	r2, r3
 800569a:	d302      	bcc.n	80056a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800569c:	2301      	movs	r3, #1
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	e01b      	b.n	80056da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056a2:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <prvInsertTimerInActiveList+0x7c>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	3304      	adds	r3, #4
 80056aa:	4619      	mov	r1, r3
 80056ac:	4610      	mov	r0, r2
 80056ae:	f7fd feba 	bl	8003426 <vListInsert>
 80056b2:	e012      	b.n	80056da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d206      	bcs.n	80056ca <prvInsertTimerInActiveList+0x62>
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	e007      	b.n	80056da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ca:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <prvInsertTimerInActiveList+0x80>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f7fd fea6 	bl	8003426 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056da:	697b      	ldr	r3, [r7, #20]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	20000d68 	.word	0x20000d68
 80056e8:	20000d64 	.word	0x20000d64

080056ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08e      	sub	sp, #56	@ 0x38
 80056f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056f2:	e0ce      	b.n	8005892 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	da19      	bge.n	800572e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80056fa:	1d3b      	adds	r3, r7, #4
 80056fc:	3304      	adds	r3, #4
 80056fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	61fb      	str	r3, [r7, #28]
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	e7fd      	b.n	800571a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800571e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005724:	6850      	ldr	r0, [r2, #4]
 8005726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005728:	6892      	ldr	r2, [r2, #8]
 800572a:	4611      	mov	r1, r2
 800572c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f2c0 80ae 	blt.w	8005892 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800573a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005744:	3304      	adds	r3, #4
 8005746:	4618      	mov	r0, r3
 8005748:	f7fd fea6 	bl	8003498 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800574c:	463b      	mov	r3, r7
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff ff6a 	bl	8005628 <prvSampleTimeNow>
 8005754:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b09      	cmp	r3, #9
 800575a:	f200 8097 	bhi.w	800588c <prvProcessReceivedCommands+0x1a0>
 800575e:	a201      	add	r2, pc, #4	@ (adr r2, 8005764 <prvProcessReceivedCommands+0x78>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	0800578d 	.word	0x0800578d
 8005768:	0800578d 	.word	0x0800578d
 800576c:	0800578d 	.word	0x0800578d
 8005770:	08005803 	.word	0x08005803
 8005774:	08005817 	.word	0x08005817
 8005778:	08005863 	.word	0x08005863
 800577c:	0800578d 	.word	0x0800578d
 8005780:	0800578d 	.word	0x0800578d
 8005784:	08005803 	.word	0x08005803
 8005788:	08005817 	.word	0x08005817
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800578c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	b2da      	uxtb	r2, r3
 8005798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	18d1      	adds	r1, r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057ac:	f7ff ff5c 	bl	8005668 <prvInsertTimerInActiveList>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d06c      	beq.n	8005890 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d061      	beq.n	8005890 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	441a      	add	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	2300      	movs	r3, #0
 80057da:	2100      	movs	r1, #0
 80057dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057de:	f7ff fe01 	bl	80053e4 <xTimerGenericCommand>
 80057e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d152      	bne.n	8005890 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	61bb      	str	r3, [r7, #24]
}
 80057fc:	bf00      	nop
 80057fe:	bf00      	nop
 8005800:	e7fd      	b.n	80057fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	b2da      	uxtb	r2, r3
 800580e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005810:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005814:	e03d      	b.n	8005892 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800581c:	f043 0301 	orr.w	r3, r3, #1
 8005820:	b2da      	uxtb	r2, r3
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800582c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	617b      	str	r3, [r7, #20]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800584e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	18d1      	adds	r1, r2, r3
 8005856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005858:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800585a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800585c:	f7ff ff04 	bl	8005668 <prvInsertTimerInActiveList>
					break;
 8005860:	e017      	b.n	8005892 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d103      	bne.n	8005878 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005870:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005872:	f000 fbe9 	bl	8006048 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005876:	e00c      	b.n	8005892 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	b2da      	uxtb	r2, r3
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800588a:	e002      	b.n	8005892 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <prvProcessReceivedCommands+0x1a6>
					break;
 8005890:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005892:	4b08      	ldr	r3, [pc, #32]	@ (80058b4 <prvProcessReceivedCommands+0x1c8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	1d39      	adds	r1, r7, #4
 8005898:	2200      	movs	r2, #0
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe f9c4 	bl	8003c28 <xQueueReceive>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f47f af26 	bne.w	80056f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	3730      	adds	r7, #48	@ 0x30
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000d6c 	.word	0x20000d6c

080058b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b088      	sub	sp, #32
 80058bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058be:	e049      	b.n	8005954 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058c0:	4b2e      	ldr	r3, [pc, #184]	@ (800597c <prvSwitchTimerLists+0xc4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ca:	4b2c      	ldr	r3, [pc, #176]	@ (800597c <prvSwitchTimerLists+0xc4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fd fddd 	bl	8003498 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058ec:	f003 0304 	and.w	r3, r3, #4
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d02f      	beq.n	8005954 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4413      	add	r3, r2
 80058fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d90e      	bls.n	8005924 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005912:	4b1a      	ldr	r3, [pc, #104]	@ (800597c <prvSwitchTimerLists+0xc4>)
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3304      	adds	r3, #4
 800591a:	4619      	mov	r1, r3
 800591c:	4610      	mov	r0, r2
 800591e:	f7fd fd82 	bl	8003426 <vListInsert>
 8005922:	e017      	b.n	8005954 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005924:	2300      	movs	r3, #0
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	2300      	movs	r3, #0
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	2100      	movs	r1, #0
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fd58 	bl	80053e4 <xTimerGenericCommand>
 8005934:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10b      	bne.n	8005954 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	603b      	str	r3, [r7, #0]
}
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005954:	4b09      	ldr	r3, [pc, #36]	@ (800597c <prvSwitchTimerLists+0xc4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1b0      	bne.n	80058c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800595e:	4b07      	ldr	r3, [pc, #28]	@ (800597c <prvSwitchTimerLists+0xc4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <prvSwitchTimerLists+0xc8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a04      	ldr	r2, [pc, #16]	@ (800597c <prvSwitchTimerLists+0xc4>)
 800596a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800596c:	4a04      	ldr	r2, [pc, #16]	@ (8005980 <prvSwitchTimerLists+0xc8>)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	6013      	str	r3, [r2, #0]
}
 8005972:	bf00      	nop
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000d64 	.word	0x20000d64
 8005980:	20000d68 	.word	0x20000d68

08005984 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800598a:	f000 f96d 	bl	8005c68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800598e:	4b15      	ldr	r3, [pc, #84]	@ (80059e4 <prvCheckForValidListAndQueue+0x60>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d120      	bne.n	80059d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005996:	4814      	ldr	r0, [pc, #80]	@ (80059e8 <prvCheckForValidListAndQueue+0x64>)
 8005998:	f7fd fcf4 	bl	8003384 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800599c:	4813      	ldr	r0, [pc, #76]	@ (80059ec <prvCheckForValidListAndQueue+0x68>)
 800599e:	f7fd fcf1 	bl	8003384 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059a2:	4b13      	ldr	r3, [pc, #76]	@ (80059f0 <prvCheckForValidListAndQueue+0x6c>)
 80059a4:	4a10      	ldr	r2, [pc, #64]	@ (80059e8 <prvCheckForValidListAndQueue+0x64>)
 80059a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059a8:	4b12      	ldr	r3, [pc, #72]	@ (80059f4 <prvCheckForValidListAndQueue+0x70>)
 80059aa:	4a10      	ldr	r2, [pc, #64]	@ (80059ec <prvCheckForValidListAndQueue+0x68>)
 80059ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059ae:	2300      	movs	r3, #0
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	4b11      	ldr	r3, [pc, #68]	@ (80059f8 <prvCheckForValidListAndQueue+0x74>)
 80059b4:	4a11      	ldr	r2, [pc, #68]	@ (80059fc <prvCheckForValidListAndQueue+0x78>)
 80059b6:	2110      	movs	r1, #16
 80059b8:	200a      	movs	r0, #10
 80059ba:	f7fd fe01 	bl	80035c0 <xQueueGenericCreateStatic>
 80059be:	4603      	mov	r3, r0
 80059c0:	4a08      	ldr	r2, [pc, #32]	@ (80059e4 <prvCheckForValidListAndQueue+0x60>)
 80059c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059c4:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <prvCheckForValidListAndQueue+0x60>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d005      	beq.n	80059d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059cc:	4b05      	ldr	r3, [pc, #20]	@ (80059e4 <prvCheckForValidListAndQueue+0x60>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	490b      	ldr	r1, [pc, #44]	@ (8005a00 <prvCheckForValidListAndQueue+0x7c>)
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fc42 	bl	800425c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059d8:	f000 f978 	bl	8005ccc <vPortExitCritical>
}
 80059dc:	bf00      	nop
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000d6c 	.word	0x20000d6c
 80059e8:	20000d3c 	.word	0x20000d3c
 80059ec:	20000d50 	.word	0x20000d50
 80059f0:	20000d64 	.word	0x20000d64
 80059f4:	20000d68 	.word	0x20000d68
 80059f8:	20000e18 	.word	0x20000e18
 80059fc:	20000d78 	.word	0x20000d78
 8005a00:	080071e0 	.word	0x080071e0

08005a04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	3b04      	subs	r3, #4
 8005a14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3b04      	subs	r3, #4
 8005a22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f023 0201 	bic.w	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a34:	4a0c      	ldr	r2, [pc, #48]	@ (8005a68 <pxPortInitialiseStack+0x64>)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3b14      	subs	r3, #20
 8005a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3b04      	subs	r3, #4
 8005a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f06f 0202 	mvn.w	r2, #2
 8005a52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3b20      	subs	r3, #32
 8005a58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	08005a6d 	.word	0x08005a6d

08005a6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a72:	2300      	movs	r3, #0
 8005a74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a76:	4b13      	ldr	r3, [pc, #76]	@ (8005ac4 <prvTaskExitError+0x58>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7e:	d00b      	beq.n	8005a98 <prvTaskExitError+0x2c>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	60fb      	str	r3, [r7, #12]
}
 8005a92:	bf00      	nop
 8005a94:	bf00      	nop
 8005a96:	e7fd      	b.n	8005a94 <prvTaskExitError+0x28>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	60bb      	str	r3, [r7, #8]
}
 8005aaa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005aac:	bf00      	nop
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0fc      	beq.n	8005aae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	2000000c 	.word	0x2000000c
	...

08005ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ad0:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <pxCurrentTCBConst2>)
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	6808      	ldr	r0, [r1, #0]
 8005ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f380 8809 	msr	PSP, r0
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8811 	msr	BASEPRI, r0
 8005aea:	4770      	bx	lr
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst2>:
 8005af0:	2000083c 	.word	0x2000083c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005af8:	4808      	ldr	r0, [pc, #32]	@ (8005b1c <prvPortStartFirstTask+0x24>)
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	6800      	ldr	r0, [r0, #0]
 8005afe:	f380 8808 	msr	MSP, r0
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8814 	msr	CONTROL, r0
 8005b0a:	b662      	cpsie	i
 8005b0c:	b661      	cpsie	f
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	df00      	svc	0
 8005b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b1a:	bf00      	nop
 8005b1c:	e000ed08 	.word	0xe000ed08

08005b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b26:	4b47      	ldr	r3, [pc, #284]	@ (8005c44 <xPortStartScheduler+0x124>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a47      	ldr	r2, [pc, #284]	@ (8005c48 <xPortStartScheduler+0x128>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d10b      	bne.n	8005b48 <xPortStartScheduler+0x28>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60fb      	str	r3, [r7, #12]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b48:	4b3e      	ldr	r3, [pc, #248]	@ (8005c44 <xPortStartScheduler+0x124>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c4c <xPortStartScheduler+0x12c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d10b      	bne.n	8005b6a <xPortStartScheduler+0x4a>
	__asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	613b      	str	r3, [r7, #16]
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	e7fd      	b.n	8005b66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b6a:	4b39      	ldr	r3, [pc, #228]	@ (8005c50 <xPortStartScheduler+0x130>)
 8005b6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	22ff      	movs	r2, #255	@ 0xff
 8005b7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	4b31      	ldr	r3, [pc, #196]	@ (8005c54 <xPortStartScheduler+0x134>)
 8005b90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b92:	4b31      	ldr	r3, [pc, #196]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b98:	e009      	b.n	8005bae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005ba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb6:	2b80      	cmp	r3, #128	@ 0x80
 8005bb8:	d0ef      	beq.n	8005b9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bba:	4b27      	ldr	r3, [pc, #156]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f1c3 0307 	rsb	r3, r3, #7
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d00b      	beq.n	8005bde <xPortStartScheduler+0xbe>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60bb      	str	r3, [r7, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bde:	4b1e      	ldr	r3, [pc, #120]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	4a1c      	ldr	r2, [pc, #112]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005be8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bf0:	4a19      	ldr	r2, [pc, #100]	@ (8005c58 <xPortStartScheduler+0x138>)
 8005bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bfc:	4b17      	ldr	r3, [pc, #92]	@ (8005c5c <xPortStartScheduler+0x13c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a16      	ldr	r2, [pc, #88]	@ (8005c5c <xPortStartScheduler+0x13c>)
 8005c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c08:	4b14      	ldr	r3, [pc, #80]	@ (8005c5c <xPortStartScheduler+0x13c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a13      	ldr	r2, [pc, #76]	@ (8005c5c <xPortStartScheduler+0x13c>)
 8005c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c14:	f000 f8da 	bl	8005dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c18:	4b11      	ldr	r3, [pc, #68]	@ (8005c60 <xPortStartScheduler+0x140>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c1e:	f000 f8f9 	bl	8005e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c22:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <xPortStartScheduler+0x144>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a0f      	ldr	r2, [pc, #60]	@ (8005c64 <xPortStartScheduler+0x144>)
 8005c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c2e:	f7ff ff63 	bl	8005af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c32:	f7fe ff2b 	bl	8004a8c <vTaskSwitchContext>
	prvTaskExitError();
 8005c36:	f7ff ff19 	bl	8005a6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	e000ed00 	.word	0xe000ed00
 8005c48:	410fc271 	.word	0x410fc271
 8005c4c:	410fc270 	.word	0x410fc270
 8005c50:	e000e400 	.word	0xe000e400
 8005c54:	20000e68 	.word	0x20000e68
 8005c58:	20000e6c 	.word	0x20000e6c
 8005c5c:	e000ed20 	.word	0xe000ed20
 8005c60:	2000000c 	.word	0x2000000c
 8005c64:	e000ef34 	.word	0xe000ef34

08005c68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	607b      	str	r3, [r7, #4]
}
 8005c80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c82:	4b10      	ldr	r3, [pc, #64]	@ (8005cc4 <vPortEnterCritical+0x5c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	4a0e      	ldr	r2, [pc, #56]	@ (8005cc4 <vPortEnterCritical+0x5c>)
 8005c8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc4 <vPortEnterCritical+0x5c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d110      	bne.n	8005cb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c94:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <vPortEnterCritical+0x60>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00b      	beq.n	8005cb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	603b      	str	r3, [r7, #0]
}
 8005cb0:	bf00      	nop
 8005cb2:	bf00      	nop
 8005cb4:	e7fd      	b.n	8005cb2 <vPortEnterCritical+0x4a>
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	2000000c 	.word	0x2000000c
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cd2:	4b12      	ldr	r3, [pc, #72]	@ (8005d1c <vPortExitCritical+0x50>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <vPortExitCritical+0x26>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	607b      	str	r3, [r7, #4]
}
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8005d1c <vPortExitCritical+0x50>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	4a08      	ldr	r2, [pc, #32]	@ (8005d1c <vPortExitCritical+0x50>)
 8005cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cfc:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <vPortExitCritical+0x50>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <vPortExitCritical+0x44>
 8005d04:	2300      	movs	r3, #0
 8005d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	f383 8811 	msr	BASEPRI, r3
}
 8005d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	2000000c 	.word	0x2000000c

08005d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d20:	f3ef 8009 	mrs	r0, PSP
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	4b15      	ldr	r3, [pc, #84]	@ (8005d80 <pxCurrentTCBConst>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	f01e 0f10 	tst.w	lr, #16
 8005d30:	bf08      	it	eq
 8005d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3a:	6010      	str	r0, [r2, #0]
 8005d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005d44:	f380 8811 	msr	BASEPRI, r0
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f7fe fe9c 	bl	8004a8c <vTaskSwitchContext>
 8005d54:	f04f 0000 	mov.w	r0, #0
 8005d58:	f380 8811 	msr	BASEPRI, r0
 8005d5c:	bc09      	pop	{r0, r3}
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	6808      	ldr	r0, [r1, #0]
 8005d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d66:	f01e 0f10 	tst.w	lr, #16
 8005d6a:	bf08      	it	eq
 8005d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d70:	f380 8809 	msr	PSP, r0
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	f3af 8000 	nop.w

08005d80 <pxCurrentTCBConst>:
 8005d80:	2000083c 	.word	0x2000083c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop

08005d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	607b      	str	r3, [r7, #4]
}
 8005da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005da2:	f7fe fdb9 	bl	8004918 <xTaskIncrementTick>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <xPortSysTickHandler+0x40>)
 8005dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	2300      	movs	r3, #0
 8005db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f383 8811 	msr	BASEPRI, r3
}
 8005dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dc0:	bf00      	nop
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <vPortSetupTimerInterrupt+0x38>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e08 <vPortSetupTimerInterrupt+0x3c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <vPortSetupTimerInterrupt+0x40>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	4a09      	ldr	r2, [pc, #36]	@ (8005e10 <vPortSetupTimerInterrupt+0x44>)
 8005dea:	3b01      	subs	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dee:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <vPortSetupTimerInterrupt+0x34>)
 8005df0:	2207      	movs	r2, #7
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	e000e010 	.word	0xe000e010
 8005e04:	e000e018 	.word	0xe000e018
 8005e08:	20000000 	.word	0x20000000
 8005e0c:	10624dd3 	.word	0x10624dd3
 8005e10:	e000e014 	.word	0xe000e014

08005e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e24 <vPortEnableVFP+0x10>
 8005e18:	6801      	ldr	r1, [r0, #0]
 8005e1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e1e:	6001      	str	r1, [r0, #0]
 8005e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e22:	bf00      	nop
 8005e24:	e000ed88 	.word	0xe000ed88

08005e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e2e:	f3ef 8305 	mrs	r3, IPSR
 8005e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b0f      	cmp	r3, #15
 8005e38:	d915      	bls.n	8005e66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e3a:	4a18      	ldr	r2, [pc, #96]	@ (8005e9c <vPortValidateInterruptPriority+0x74>)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e44:	4b16      	ldr	r3, [pc, #88]	@ (8005ea0 <vPortValidateInterruptPriority+0x78>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	7afa      	ldrb	r2, [r7, #11]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d20b      	bcs.n	8005e66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	e7fd      	b.n	8005e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e66:	4b0f      	ldr	r3, [pc, #60]	@ (8005ea4 <vPortValidateInterruptPriority+0x7c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea8 <vPortValidateInterruptPriority+0x80>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d90b      	bls.n	8005e8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	603b      	str	r3, [r7, #0]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <vPortValidateInterruptPriority+0x62>
	}
 8005e8e:	bf00      	nop
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	e000e3f0 	.word	0xe000e3f0
 8005ea0:	20000e68 	.word	0x20000e68
 8005ea4:	e000ed0c 	.word	0xe000ed0c
 8005ea8:	20000e6c 	.word	0x20000e6c

08005eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08a      	sub	sp, #40	@ 0x28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005eb8:	f7fe fc72 	bl	80047a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8006030 <pvPortMalloc+0x184>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ec4:	f000 f924 	bl	8006110 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8006034 <pvPortMalloc+0x188>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 8095 	bne.w	8006000 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01e      	beq.n	8005f1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005edc:	2208      	movs	r2, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d015      	beq.n	8005f1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f023 0307 	bic.w	r3, r3, #7
 8005ef4:	3308      	adds	r3, #8
 8005ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00b      	beq.n	8005f1a <pvPortMalloc+0x6e>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	617b      	str	r3, [r7, #20]
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	e7fd      	b.n	8005f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d06f      	beq.n	8006000 <pvPortMalloc+0x154>
 8005f20:	4b45      	ldr	r3, [pc, #276]	@ (8006038 <pvPortMalloc+0x18c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d86a      	bhi.n	8006000 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f2a:	4b44      	ldr	r3, [pc, #272]	@ (800603c <pvPortMalloc+0x190>)
 8005f2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f2e:	4b43      	ldr	r3, [pc, #268]	@ (800603c <pvPortMalloc+0x190>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f34:	e004      	b.n	8005f40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d903      	bls.n	8005f52 <pvPortMalloc+0xa6>
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d1f1      	bne.n	8005f36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f52:	4b37      	ldr	r3, [pc, #220]	@ (8006030 <pvPortMalloc+0x184>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d051      	beq.n	8006000 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f5c:	6a3b      	ldr	r3, [r7, #32]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2208      	movs	r2, #8
 8005f62:	4413      	add	r3, r2
 8005f64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	2308      	movs	r3, #8
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d920      	bls.n	8005fc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4413      	add	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <pvPortMalloc+0xfc>
	__asm volatile
 8005f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f94:	f383 8811 	msr	BASEPRI, r3
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	613b      	str	r3, [r7, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	bf00      	nop
 8005fa6:	e7fd      	b.n	8005fa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fba:	69b8      	ldr	r0, [r7, #24]
 8005fbc:	f000 f90a 	bl	80061d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006038 <pvPortMalloc+0x18c>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	4a1b      	ldr	r2, [pc, #108]	@ (8006038 <pvPortMalloc+0x18c>)
 8005fcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fce:	4b1a      	ldr	r3, [pc, #104]	@ (8006038 <pvPortMalloc+0x18c>)
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006040 <pvPortMalloc+0x194>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d203      	bcs.n	8005fe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fda:	4b17      	ldr	r3, [pc, #92]	@ (8006038 <pvPortMalloc+0x18c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a18      	ldr	r2, [pc, #96]	@ (8006040 <pvPortMalloc+0x194>)
 8005fe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	4b13      	ldr	r3, [pc, #76]	@ (8006034 <pvPortMalloc+0x188>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ff6:	4b13      	ldr	r3, [pc, #76]	@ (8006044 <pvPortMalloc+0x198>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	4a11      	ldr	r2, [pc, #68]	@ (8006044 <pvPortMalloc+0x198>)
 8005ffe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006000:	f7fe fbdc 	bl	80047bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00b      	beq.n	8006026 <pvPortMalloc+0x17a>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	60fb      	str	r3, [r7, #12]
}
 8006020:	bf00      	nop
 8006022:	bf00      	nop
 8006024:	e7fd      	b.n	8006022 <pvPortMalloc+0x176>
	return pvReturn;
 8006026:	69fb      	ldr	r3, [r7, #28]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3728      	adds	r7, #40	@ 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20004a78 	.word	0x20004a78
 8006034:	20004a8c 	.word	0x20004a8c
 8006038:	20004a7c 	.word	0x20004a7c
 800603c:	20004a70 	.word	0x20004a70
 8006040:	20004a80 	.word	0x20004a80
 8006044:	20004a84 	.word	0x20004a84

08006048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d04f      	beq.n	80060fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800605a:	2308      	movs	r3, #8
 800605c:	425b      	negs	r3, r3
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4413      	add	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4b25      	ldr	r3, [pc, #148]	@ (8006104 <vPortFree+0xbc>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4013      	ands	r3, r2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <vPortFree+0x46>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	60fb      	str	r3, [r7, #12]
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	e7fd      	b.n	800608a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <vPortFree+0x66>
	__asm volatile
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	60bb      	str	r3, [r7, #8]
}
 80060a8:	bf00      	nop
 80060aa:	bf00      	nop
 80060ac:	e7fd      	b.n	80060aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	4b14      	ldr	r3, [pc, #80]	@ (8006104 <vPortFree+0xbc>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01e      	beq.n	80060fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d11a      	bne.n	80060fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006104 <vPortFree+0xbc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	401a      	ands	r2, r3
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060d4:	f7fe fb64 	bl	80047a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006108 <vPortFree+0xc0>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4413      	add	r3, r2
 80060e2:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <vPortFree+0xc0>)
 80060e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060e6:	6938      	ldr	r0, [r7, #16]
 80060e8:	f000 f874 	bl	80061d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060ec:	4b07      	ldr	r3, [pc, #28]	@ (800610c <vPortFree+0xc4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a06      	ldr	r2, [pc, #24]	@ (800610c <vPortFree+0xc4>)
 80060f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060f6:	f7fe fb61 	bl	80047bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060fa:	bf00      	nop
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20004a8c 	.word	0x20004a8c
 8006108:	20004a7c 	.word	0x20004a7c
 800610c:	20004a88 	.word	0x20004a88

08006110 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006116:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800611a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800611c:	4b27      	ldr	r3, [pc, #156]	@ (80061bc <prvHeapInit+0xac>)
 800611e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00c      	beq.n	8006144 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3307      	adds	r3, #7
 800612e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0307 	bic.w	r3, r3, #7
 8006136:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	4a1f      	ldr	r2, [pc, #124]	@ (80061bc <prvHeapInit+0xac>)
 8006140:	4413      	add	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006148:	4a1d      	ldr	r2, [pc, #116]	@ (80061c0 <prvHeapInit+0xb0>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800614e:	4b1c      	ldr	r3, [pc, #112]	@ (80061c0 <prvHeapInit+0xb0>)
 8006150:	2200      	movs	r2, #0
 8006152:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4413      	add	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800615c:	2208      	movs	r2, #8
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0307 	bic.w	r3, r3, #7
 800616a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <prvHeapInit+0xb4>)
 8006170:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006172:	4b14      	ldr	r3, [pc, #80]	@ (80061c4 <prvHeapInit+0xb4>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2200      	movs	r2, #0
 8006178:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800617a:	4b12      	ldr	r3, [pc, #72]	@ (80061c4 <prvHeapInit+0xb4>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006190:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <prvHeapInit+0xb4>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	4a0a      	ldr	r2, [pc, #40]	@ (80061c8 <prvHeapInit+0xb8>)
 800619e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	4a09      	ldr	r2, [pc, #36]	@ (80061cc <prvHeapInit+0xbc>)
 80061a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061a8:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <prvHeapInit+0xc0>)
 80061aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80061ae:	601a      	str	r2, [r3, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	20000e70 	.word	0x20000e70
 80061c0:	20004a70 	.word	0x20004a70
 80061c4:	20004a78 	.word	0x20004a78
 80061c8:	20004a80 	.word	0x20004a80
 80061cc:	20004a7c 	.word	0x20004a7c
 80061d0:	20004a8c 	.word	0x20004a8c

080061d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061dc:	4b28      	ldr	r3, [pc, #160]	@ (8006280 <prvInsertBlockIntoFreeList+0xac>)
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e002      	b.n	80061e8 <prvInsertBlockIntoFreeList+0x14>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d8f7      	bhi.n	80061e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4413      	add	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	429a      	cmp	r2, r3
 8006202:	d108      	bne.n	8006216 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	441a      	add	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	441a      	add	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d118      	bne.n	800625c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <prvInsertBlockIntoFreeList+0xb0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d00d      	beq.n	8006252 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	441a      	add	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e008      	b.n	8006264 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006252:	4b0c      	ldr	r3, [pc, #48]	@ (8006284 <prvInsertBlockIntoFreeList+0xb0>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e003      	b.n	8006264 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	429a      	cmp	r2, r3
 800626a:	d002      	beq.n	8006272 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20004a70 	.word	0x20004a70
 8006284:	20004a78 	.word	0x20004a78

08006288 <std>:
 8006288:	2300      	movs	r3, #0
 800628a:	b510      	push	{r4, lr}
 800628c:	4604      	mov	r4, r0
 800628e:	e9c0 3300 	strd	r3, r3, [r0]
 8006292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006296:	6083      	str	r3, [r0, #8]
 8006298:	8181      	strh	r1, [r0, #12]
 800629a:	6643      	str	r3, [r0, #100]	@ 0x64
 800629c:	81c2      	strh	r2, [r0, #14]
 800629e:	6183      	str	r3, [r0, #24]
 80062a0:	4619      	mov	r1, r3
 80062a2:	2208      	movs	r2, #8
 80062a4:	305c      	adds	r0, #92	@ 0x5c
 80062a6:	f000 f906 	bl	80064b6 <memset>
 80062aa:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <std+0x58>)
 80062ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <std+0x5c>)
 80062b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062b2:	4b0d      	ldr	r3, [pc, #52]	@ (80062e8 <std+0x60>)
 80062b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062b6:	4b0d      	ldr	r3, [pc, #52]	@ (80062ec <std+0x64>)
 80062b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80062ba:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <std+0x68>)
 80062bc:	6224      	str	r4, [r4, #32]
 80062be:	429c      	cmp	r4, r3
 80062c0:	d006      	beq.n	80062d0 <std+0x48>
 80062c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062c6:	4294      	cmp	r4, r2
 80062c8:	d002      	beq.n	80062d0 <std+0x48>
 80062ca:	33d0      	adds	r3, #208	@ 0xd0
 80062cc:	429c      	cmp	r4, r3
 80062ce:	d105      	bne.n	80062dc <std+0x54>
 80062d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062d8:	f000 b966 	b.w	80065a8 <__retarget_lock_init_recursive>
 80062dc:	bd10      	pop	{r4, pc}
 80062de:	bf00      	nop
 80062e0:	08006431 	.word	0x08006431
 80062e4:	08006453 	.word	0x08006453
 80062e8:	0800648b 	.word	0x0800648b
 80062ec:	080064af 	.word	0x080064af
 80062f0:	20004a90 	.word	0x20004a90

080062f4 <stdio_exit_handler>:
 80062f4:	4a02      	ldr	r2, [pc, #8]	@ (8006300 <stdio_exit_handler+0xc>)
 80062f6:	4903      	ldr	r1, [pc, #12]	@ (8006304 <stdio_exit_handler+0x10>)
 80062f8:	4803      	ldr	r0, [pc, #12]	@ (8006308 <stdio_exit_handler+0x14>)
 80062fa:	f000 b869 	b.w	80063d0 <_fwalk_sglue>
 80062fe:	bf00      	nop
 8006300:	20000010 	.word	0x20000010
 8006304:	08006e61 	.word	0x08006e61
 8006308:	20000020 	.word	0x20000020

0800630c <cleanup_stdio>:
 800630c:	6841      	ldr	r1, [r0, #4]
 800630e:	4b0c      	ldr	r3, [pc, #48]	@ (8006340 <cleanup_stdio+0x34>)
 8006310:	4299      	cmp	r1, r3
 8006312:	b510      	push	{r4, lr}
 8006314:	4604      	mov	r4, r0
 8006316:	d001      	beq.n	800631c <cleanup_stdio+0x10>
 8006318:	f000 fda2 	bl	8006e60 <_fflush_r>
 800631c:	68a1      	ldr	r1, [r4, #8]
 800631e:	4b09      	ldr	r3, [pc, #36]	@ (8006344 <cleanup_stdio+0x38>)
 8006320:	4299      	cmp	r1, r3
 8006322:	d002      	beq.n	800632a <cleanup_stdio+0x1e>
 8006324:	4620      	mov	r0, r4
 8006326:	f000 fd9b 	bl	8006e60 <_fflush_r>
 800632a:	68e1      	ldr	r1, [r4, #12]
 800632c:	4b06      	ldr	r3, [pc, #24]	@ (8006348 <cleanup_stdio+0x3c>)
 800632e:	4299      	cmp	r1, r3
 8006330:	d004      	beq.n	800633c <cleanup_stdio+0x30>
 8006332:	4620      	mov	r0, r4
 8006334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006338:	f000 bd92 	b.w	8006e60 <_fflush_r>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	bf00      	nop
 8006340:	20004a90 	.word	0x20004a90
 8006344:	20004af8 	.word	0x20004af8
 8006348:	20004b60 	.word	0x20004b60

0800634c <global_stdio_init.part.0>:
 800634c:	b510      	push	{r4, lr}
 800634e:	4b0b      	ldr	r3, [pc, #44]	@ (800637c <global_stdio_init.part.0+0x30>)
 8006350:	4c0b      	ldr	r4, [pc, #44]	@ (8006380 <global_stdio_init.part.0+0x34>)
 8006352:	4a0c      	ldr	r2, [pc, #48]	@ (8006384 <global_stdio_init.part.0+0x38>)
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	4620      	mov	r0, r4
 8006358:	2200      	movs	r2, #0
 800635a:	2104      	movs	r1, #4
 800635c:	f7ff ff94 	bl	8006288 <std>
 8006360:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006364:	2201      	movs	r2, #1
 8006366:	2109      	movs	r1, #9
 8006368:	f7ff ff8e 	bl	8006288 <std>
 800636c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006370:	2202      	movs	r2, #2
 8006372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006376:	2112      	movs	r1, #18
 8006378:	f7ff bf86 	b.w	8006288 <std>
 800637c:	20004bc8 	.word	0x20004bc8
 8006380:	20004a90 	.word	0x20004a90
 8006384:	080062f5 	.word	0x080062f5

08006388 <__sfp_lock_acquire>:
 8006388:	4801      	ldr	r0, [pc, #4]	@ (8006390 <__sfp_lock_acquire+0x8>)
 800638a:	f000 b90e 	b.w	80065aa <__retarget_lock_acquire_recursive>
 800638e:	bf00      	nop
 8006390:	20004bd1 	.word	0x20004bd1

08006394 <__sfp_lock_release>:
 8006394:	4801      	ldr	r0, [pc, #4]	@ (800639c <__sfp_lock_release+0x8>)
 8006396:	f000 b909 	b.w	80065ac <__retarget_lock_release_recursive>
 800639a:	bf00      	nop
 800639c:	20004bd1 	.word	0x20004bd1

080063a0 <__sinit>:
 80063a0:	b510      	push	{r4, lr}
 80063a2:	4604      	mov	r4, r0
 80063a4:	f7ff fff0 	bl	8006388 <__sfp_lock_acquire>
 80063a8:	6a23      	ldr	r3, [r4, #32]
 80063aa:	b11b      	cbz	r3, 80063b4 <__sinit+0x14>
 80063ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b0:	f7ff bff0 	b.w	8006394 <__sfp_lock_release>
 80063b4:	4b04      	ldr	r3, [pc, #16]	@ (80063c8 <__sinit+0x28>)
 80063b6:	6223      	str	r3, [r4, #32]
 80063b8:	4b04      	ldr	r3, [pc, #16]	@ (80063cc <__sinit+0x2c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d1f5      	bne.n	80063ac <__sinit+0xc>
 80063c0:	f7ff ffc4 	bl	800634c <global_stdio_init.part.0>
 80063c4:	e7f2      	b.n	80063ac <__sinit+0xc>
 80063c6:	bf00      	nop
 80063c8:	0800630d 	.word	0x0800630d
 80063cc:	20004bc8 	.word	0x20004bc8

080063d0 <_fwalk_sglue>:
 80063d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d4:	4607      	mov	r7, r0
 80063d6:	4688      	mov	r8, r1
 80063d8:	4614      	mov	r4, r2
 80063da:	2600      	movs	r6, #0
 80063dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063e0:	f1b9 0901 	subs.w	r9, r9, #1
 80063e4:	d505      	bpl.n	80063f2 <_fwalk_sglue+0x22>
 80063e6:	6824      	ldr	r4, [r4, #0]
 80063e8:	2c00      	cmp	r4, #0
 80063ea:	d1f7      	bne.n	80063dc <_fwalk_sglue+0xc>
 80063ec:	4630      	mov	r0, r6
 80063ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f2:	89ab      	ldrh	r3, [r5, #12]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d907      	bls.n	8006408 <_fwalk_sglue+0x38>
 80063f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063fc:	3301      	adds	r3, #1
 80063fe:	d003      	beq.n	8006408 <_fwalk_sglue+0x38>
 8006400:	4629      	mov	r1, r5
 8006402:	4638      	mov	r0, r7
 8006404:	47c0      	blx	r8
 8006406:	4306      	orrs	r6, r0
 8006408:	3568      	adds	r5, #104	@ 0x68
 800640a:	e7e9      	b.n	80063e0 <_fwalk_sglue+0x10>

0800640c <iprintf>:
 800640c:	b40f      	push	{r0, r1, r2, r3}
 800640e:	b507      	push	{r0, r1, r2, lr}
 8006410:	4906      	ldr	r1, [pc, #24]	@ (800642c <iprintf+0x20>)
 8006412:	ab04      	add	r3, sp, #16
 8006414:	6808      	ldr	r0, [r1, #0]
 8006416:	f853 2b04 	ldr.w	r2, [r3], #4
 800641a:	6881      	ldr	r1, [r0, #8]
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	f000 f9f7 	bl	8006810 <_vfiprintf_r>
 8006422:	b003      	add	sp, #12
 8006424:	f85d eb04 	ldr.w	lr, [sp], #4
 8006428:	b004      	add	sp, #16
 800642a:	4770      	bx	lr
 800642c:	2000001c 	.word	0x2000001c

08006430 <__sread>:
 8006430:	b510      	push	{r4, lr}
 8006432:	460c      	mov	r4, r1
 8006434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006438:	f000 f868 	bl	800650c <_read_r>
 800643c:	2800      	cmp	r0, #0
 800643e:	bfab      	itete	ge
 8006440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006442:	89a3      	ldrhlt	r3, [r4, #12]
 8006444:	181b      	addge	r3, r3, r0
 8006446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800644a:	bfac      	ite	ge
 800644c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800644e:	81a3      	strhlt	r3, [r4, #12]
 8006450:	bd10      	pop	{r4, pc}

08006452 <__swrite>:
 8006452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006456:	461f      	mov	r7, r3
 8006458:	898b      	ldrh	r3, [r1, #12]
 800645a:	05db      	lsls	r3, r3, #23
 800645c:	4605      	mov	r5, r0
 800645e:	460c      	mov	r4, r1
 8006460:	4616      	mov	r6, r2
 8006462:	d505      	bpl.n	8006470 <__swrite+0x1e>
 8006464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006468:	2302      	movs	r3, #2
 800646a:	2200      	movs	r2, #0
 800646c:	f000 f83c 	bl	80064e8 <_lseek_r>
 8006470:	89a3      	ldrh	r3, [r4, #12]
 8006472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800647a:	81a3      	strh	r3, [r4, #12]
 800647c:	4632      	mov	r2, r6
 800647e:	463b      	mov	r3, r7
 8006480:	4628      	mov	r0, r5
 8006482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006486:	f000 b853 	b.w	8006530 <_write_r>

0800648a <__sseek>:
 800648a:	b510      	push	{r4, lr}
 800648c:	460c      	mov	r4, r1
 800648e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006492:	f000 f829 	bl	80064e8 <_lseek_r>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	bf15      	itete	ne
 800649c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800649e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064a6:	81a3      	strheq	r3, [r4, #12]
 80064a8:	bf18      	it	ne
 80064aa:	81a3      	strhne	r3, [r4, #12]
 80064ac:	bd10      	pop	{r4, pc}

080064ae <__sclose>:
 80064ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b2:	f000 b809 	b.w	80064c8 <_close_r>

080064b6 <memset>:
 80064b6:	4402      	add	r2, r0
 80064b8:	4603      	mov	r3, r0
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d100      	bne.n	80064c0 <memset+0xa>
 80064be:	4770      	bx	lr
 80064c0:	f803 1b01 	strb.w	r1, [r3], #1
 80064c4:	e7f9      	b.n	80064ba <memset+0x4>
	...

080064c8 <_close_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4d06      	ldr	r5, [pc, #24]	@ (80064e4 <_close_r+0x1c>)
 80064cc:	2300      	movs	r3, #0
 80064ce:	4604      	mov	r4, r0
 80064d0:	4608      	mov	r0, r1
 80064d2:	602b      	str	r3, [r5, #0]
 80064d4:	f7fa fbe3 	bl	8000c9e <_close>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_close_r+0x1a>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_close_r+0x1a>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	20004bcc 	.word	0x20004bcc

080064e8 <_lseek_r>:
 80064e8:	b538      	push	{r3, r4, r5, lr}
 80064ea:	4d07      	ldr	r5, [pc, #28]	@ (8006508 <_lseek_r+0x20>)
 80064ec:	4604      	mov	r4, r0
 80064ee:	4608      	mov	r0, r1
 80064f0:	4611      	mov	r1, r2
 80064f2:	2200      	movs	r2, #0
 80064f4:	602a      	str	r2, [r5, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	f7fa fbf8 	bl	8000cec <_lseek>
 80064fc:	1c43      	adds	r3, r0, #1
 80064fe:	d102      	bne.n	8006506 <_lseek_r+0x1e>
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	b103      	cbz	r3, 8006506 <_lseek_r+0x1e>
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	20004bcc 	.word	0x20004bcc

0800650c <_read_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	@ (800652c <_read_r+0x20>)
 8006510:	4604      	mov	r4, r0
 8006512:	4608      	mov	r0, r1
 8006514:	4611      	mov	r1, r2
 8006516:	2200      	movs	r2, #0
 8006518:	602a      	str	r2, [r5, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	f7fa fb86 	bl	8000c2c <_read>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_read_r+0x1e>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_read_r+0x1e>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	20004bcc 	.word	0x20004bcc

08006530 <_write_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d07      	ldr	r5, [pc, #28]	@ (8006550 <_write_r+0x20>)
 8006534:	4604      	mov	r4, r0
 8006536:	4608      	mov	r0, r1
 8006538:	4611      	mov	r1, r2
 800653a:	2200      	movs	r2, #0
 800653c:	602a      	str	r2, [r5, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	f7fa fb91 	bl	8000c66 <_write>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_write_r+0x1e>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_write_r+0x1e>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20004bcc 	.word	0x20004bcc

08006554 <__errno>:
 8006554:	4b01      	ldr	r3, [pc, #4]	@ (800655c <__errno+0x8>)
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	2000001c 	.word	0x2000001c

08006560 <__libc_init_array>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	4d0d      	ldr	r5, [pc, #52]	@ (8006598 <__libc_init_array+0x38>)
 8006564:	4c0d      	ldr	r4, [pc, #52]	@ (800659c <__libc_init_array+0x3c>)
 8006566:	1b64      	subs	r4, r4, r5
 8006568:	10a4      	asrs	r4, r4, #2
 800656a:	2600      	movs	r6, #0
 800656c:	42a6      	cmp	r6, r4
 800656e:	d109      	bne.n	8006584 <__libc_init_array+0x24>
 8006570:	4d0b      	ldr	r5, [pc, #44]	@ (80065a0 <__libc_init_array+0x40>)
 8006572:	4c0c      	ldr	r4, [pc, #48]	@ (80065a4 <__libc_init_array+0x44>)
 8006574:	f000 fdc4 	bl	8007100 <_init>
 8006578:	1b64      	subs	r4, r4, r5
 800657a:	10a4      	asrs	r4, r4, #2
 800657c:	2600      	movs	r6, #0
 800657e:	42a6      	cmp	r6, r4
 8006580:	d105      	bne.n	800658e <__libc_init_array+0x2e>
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	f855 3b04 	ldr.w	r3, [r5], #4
 8006588:	4798      	blx	r3
 800658a:	3601      	adds	r6, #1
 800658c:	e7ee      	b.n	800656c <__libc_init_array+0xc>
 800658e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006592:	4798      	blx	r3
 8006594:	3601      	adds	r6, #1
 8006596:	e7f2      	b.n	800657e <__libc_init_array+0x1e>
 8006598:	080072a8 	.word	0x080072a8
 800659c:	080072a8 	.word	0x080072a8
 80065a0:	080072a8 	.word	0x080072a8
 80065a4:	080072ac 	.word	0x080072ac

080065a8 <__retarget_lock_init_recursive>:
 80065a8:	4770      	bx	lr

080065aa <__retarget_lock_acquire_recursive>:
 80065aa:	4770      	bx	lr

080065ac <__retarget_lock_release_recursive>:
 80065ac:	4770      	bx	lr

080065ae <memcpy>:
 80065ae:	440a      	add	r2, r1
 80065b0:	4291      	cmp	r1, r2
 80065b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80065b6:	d100      	bne.n	80065ba <memcpy+0xc>
 80065b8:	4770      	bx	lr
 80065ba:	b510      	push	{r4, lr}
 80065bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065c4:	4291      	cmp	r1, r2
 80065c6:	d1f9      	bne.n	80065bc <memcpy+0xe>
 80065c8:	bd10      	pop	{r4, pc}
	...

080065cc <_free_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4605      	mov	r5, r0
 80065d0:	2900      	cmp	r1, #0
 80065d2:	d041      	beq.n	8006658 <_free_r+0x8c>
 80065d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d8:	1f0c      	subs	r4, r1, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfb8      	it	lt
 80065de:	18e4      	addlt	r4, r4, r3
 80065e0:	f000 f8e0 	bl	80067a4 <__malloc_lock>
 80065e4:	4a1d      	ldr	r2, [pc, #116]	@ (800665c <_free_r+0x90>)
 80065e6:	6813      	ldr	r3, [r2, #0]
 80065e8:	b933      	cbnz	r3, 80065f8 <_free_r+0x2c>
 80065ea:	6063      	str	r3, [r4, #4]
 80065ec:	6014      	str	r4, [r2, #0]
 80065ee:	4628      	mov	r0, r5
 80065f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065f4:	f000 b8dc 	b.w	80067b0 <__malloc_unlock>
 80065f8:	42a3      	cmp	r3, r4
 80065fa:	d908      	bls.n	800660e <_free_r+0x42>
 80065fc:	6820      	ldr	r0, [r4, #0]
 80065fe:	1821      	adds	r1, r4, r0
 8006600:	428b      	cmp	r3, r1
 8006602:	bf01      	itttt	eq
 8006604:	6819      	ldreq	r1, [r3, #0]
 8006606:	685b      	ldreq	r3, [r3, #4]
 8006608:	1809      	addeq	r1, r1, r0
 800660a:	6021      	streq	r1, [r4, #0]
 800660c:	e7ed      	b.n	80065ea <_free_r+0x1e>
 800660e:	461a      	mov	r2, r3
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	b10b      	cbz	r3, 8006618 <_free_r+0x4c>
 8006614:	42a3      	cmp	r3, r4
 8006616:	d9fa      	bls.n	800660e <_free_r+0x42>
 8006618:	6811      	ldr	r1, [r2, #0]
 800661a:	1850      	adds	r0, r2, r1
 800661c:	42a0      	cmp	r0, r4
 800661e:	d10b      	bne.n	8006638 <_free_r+0x6c>
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	4401      	add	r1, r0
 8006624:	1850      	adds	r0, r2, r1
 8006626:	4283      	cmp	r3, r0
 8006628:	6011      	str	r1, [r2, #0]
 800662a:	d1e0      	bne.n	80065ee <_free_r+0x22>
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	6053      	str	r3, [r2, #4]
 8006632:	4408      	add	r0, r1
 8006634:	6010      	str	r0, [r2, #0]
 8006636:	e7da      	b.n	80065ee <_free_r+0x22>
 8006638:	d902      	bls.n	8006640 <_free_r+0x74>
 800663a:	230c      	movs	r3, #12
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	e7d6      	b.n	80065ee <_free_r+0x22>
 8006640:	6820      	ldr	r0, [r4, #0]
 8006642:	1821      	adds	r1, r4, r0
 8006644:	428b      	cmp	r3, r1
 8006646:	bf04      	itt	eq
 8006648:	6819      	ldreq	r1, [r3, #0]
 800664a:	685b      	ldreq	r3, [r3, #4]
 800664c:	6063      	str	r3, [r4, #4]
 800664e:	bf04      	itt	eq
 8006650:	1809      	addeq	r1, r1, r0
 8006652:	6021      	streq	r1, [r4, #0]
 8006654:	6054      	str	r4, [r2, #4]
 8006656:	e7ca      	b.n	80065ee <_free_r+0x22>
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	bf00      	nop
 800665c:	20004bd8 	.word	0x20004bd8

08006660 <sbrk_aligned>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	4e0f      	ldr	r6, [pc, #60]	@ (80066a0 <sbrk_aligned+0x40>)
 8006664:	460c      	mov	r4, r1
 8006666:	6831      	ldr	r1, [r6, #0]
 8006668:	4605      	mov	r5, r0
 800666a:	b911      	cbnz	r1, 8006672 <sbrk_aligned+0x12>
 800666c:	f000 fcb4 	bl	8006fd8 <_sbrk_r>
 8006670:	6030      	str	r0, [r6, #0]
 8006672:	4621      	mov	r1, r4
 8006674:	4628      	mov	r0, r5
 8006676:	f000 fcaf 	bl	8006fd8 <_sbrk_r>
 800667a:	1c43      	adds	r3, r0, #1
 800667c:	d103      	bne.n	8006686 <sbrk_aligned+0x26>
 800667e:	f04f 34ff 	mov.w	r4, #4294967295
 8006682:	4620      	mov	r0, r4
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	1cc4      	adds	r4, r0, #3
 8006688:	f024 0403 	bic.w	r4, r4, #3
 800668c:	42a0      	cmp	r0, r4
 800668e:	d0f8      	beq.n	8006682 <sbrk_aligned+0x22>
 8006690:	1a21      	subs	r1, r4, r0
 8006692:	4628      	mov	r0, r5
 8006694:	f000 fca0 	bl	8006fd8 <_sbrk_r>
 8006698:	3001      	adds	r0, #1
 800669a:	d1f2      	bne.n	8006682 <sbrk_aligned+0x22>
 800669c:	e7ef      	b.n	800667e <sbrk_aligned+0x1e>
 800669e:	bf00      	nop
 80066a0:	20004bd4 	.word	0x20004bd4

080066a4 <_malloc_r>:
 80066a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a8:	1ccd      	adds	r5, r1, #3
 80066aa:	f025 0503 	bic.w	r5, r5, #3
 80066ae:	3508      	adds	r5, #8
 80066b0:	2d0c      	cmp	r5, #12
 80066b2:	bf38      	it	cc
 80066b4:	250c      	movcc	r5, #12
 80066b6:	2d00      	cmp	r5, #0
 80066b8:	4606      	mov	r6, r0
 80066ba:	db01      	blt.n	80066c0 <_malloc_r+0x1c>
 80066bc:	42a9      	cmp	r1, r5
 80066be:	d904      	bls.n	80066ca <_malloc_r+0x26>
 80066c0:	230c      	movs	r3, #12
 80066c2:	6033      	str	r3, [r6, #0]
 80066c4:	2000      	movs	r0, #0
 80066c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067a0 <_malloc_r+0xfc>
 80066ce:	f000 f869 	bl	80067a4 <__malloc_lock>
 80066d2:	f8d8 3000 	ldr.w	r3, [r8]
 80066d6:	461c      	mov	r4, r3
 80066d8:	bb44      	cbnz	r4, 800672c <_malloc_r+0x88>
 80066da:	4629      	mov	r1, r5
 80066dc:	4630      	mov	r0, r6
 80066de:	f7ff ffbf 	bl	8006660 <sbrk_aligned>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	4604      	mov	r4, r0
 80066e6:	d158      	bne.n	800679a <_malloc_r+0xf6>
 80066e8:	f8d8 4000 	ldr.w	r4, [r8]
 80066ec:	4627      	mov	r7, r4
 80066ee:	2f00      	cmp	r7, #0
 80066f0:	d143      	bne.n	800677a <_malloc_r+0xd6>
 80066f2:	2c00      	cmp	r4, #0
 80066f4:	d04b      	beq.n	800678e <_malloc_r+0xea>
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	4639      	mov	r1, r7
 80066fa:	4630      	mov	r0, r6
 80066fc:	eb04 0903 	add.w	r9, r4, r3
 8006700:	f000 fc6a 	bl	8006fd8 <_sbrk_r>
 8006704:	4581      	cmp	r9, r0
 8006706:	d142      	bne.n	800678e <_malloc_r+0xea>
 8006708:	6821      	ldr	r1, [r4, #0]
 800670a:	1a6d      	subs	r5, r5, r1
 800670c:	4629      	mov	r1, r5
 800670e:	4630      	mov	r0, r6
 8006710:	f7ff ffa6 	bl	8006660 <sbrk_aligned>
 8006714:	3001      	adds	r0, #1
 8006716:	d03a      	beq.n	800678e <_malloc_r+0xea>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	442b      	add	r3, r5
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	f8d8 3000 	ldr.w	r3, [r8]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	bb62      	cbnz	r2, 8006780 <_malloc_r+0xdc>
 8006726:	f8c8 7000 	str.w	r7, [r8]
 800672a:	e00f      	b.n	800674c <_malloc_r+0xa8>
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	1b52      	subs	r2, r2, r5
 8006730:	d420      	bmi.n	8006774 <_malloc_r+0xd0>
 8006732:	2a0b      	cmp	r2, #11
 8006734:	d917      	bls.n	8006766 <_malloc_r+0xc2>
 8006736:	1961      	adds	r1, r4, r5
 8006738:	42a3      	cmp	r3, r4
 800673a:	6025      	str	r5, [r4, #0]
 800673c:	bf18      	it	ne
 800673e:	6059      	strne	r1, [r3, #4]
 8006740:	6863      	ldr	r3, [r4, #4]
 8006742:	bf08      	it	eq
 8006744:	f8c8 1000 	streq.w	r1, [r8]
 8006748:	5162      	str	r2, [r4, r5]
 800674a:	604b      	str	r3, [r1, #4]
 800674c:	4630      	mov	r0, r6
 800674e:	f000 f82f 	bl	80067b0 <__malloc_unlock>
 8006752:	f104 000b 	add.w	r0, r4, #11
 8006756:	1d23      	adds	r3, r4, #4
 8006758:	f020 0007 	bic.w	r0, r0, #7
 800675c:	1ac2      	subs	r2, r0, r3
 800675e:	bf1c      	itt	ne
 8006760:	1a1b      	subne	r3, r3, r0
 8006762:	50a3      	strne	r3, [r4, r2]
 8006764:	e7af      	b.n	80066c6 <_malloc_r+0x22>
 8006766:	6862      	ldr	r2, [r4, #4]
 8006768:	42a3      	cmp	r3, r4
 800676a:	bf0c      	ite	eq
 800676c:	f8c8 2000 	streq.w	r2, [r8]
 8006770:	605a      	strne	r2, [r3, #4]
 8006772:	e7eb      	b.n	800674c <_malloc_r+0xa8>
 8006774:	4623      	mov	r3, r4
 8006776:	6864      	ldr	r4, [r4, #4]
 8006778:	e7ae      	b.n	80066d8 <_malloc_r+0x34>
 800677a:	463c      	mov	r4, r7
 800677c:	687f      	ldr	r7, [r7, #4]
 800677e:	e7b6      	b.n	80066ee <_malloc_r+0x4a>
 8006780:	461a      	mov	r2, r3
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	42a3      	cmp	r3, r4
 8006786:	d1fb      	bne.n	8006780 <_malloc_r+0xdc>
 8006788:	2300      	movs	r3, #0
 800678a:	6053      	str	r3, [r2, #4]
 800678c:	e7de      	b.n	800674c <_malloc_r+0xa8>
 800678e:	230c      	movs	r3, #12
 8006790:	6033      	str	r3, [r6, #0]
 8006792:	4630      	mov	r0, r6
 8006794:	f000 f80c 	bl	80067b0 <__malloc_unlock>
 8006798:	e794      	b.n	80066c4 <_malloc_r+0x20>
 800679a:	6005      	str	r5, [r0, #0]
 800679c:	e7d6      	b.n	800674c <_malloc_r+0xa8>
 800679e:	bf00      	nop
 80067a0:	20004bd8 	.word	0x20004bd8

080067a4 <__malloc_lock>:
 80067a4:	4801      	ldr	r0, [pc, #4]	@ (80067ac <__malloc_lock+0x8>)
 80067a6:	f7ff bf00 	b.w	80065aa <__retarget_lock_acquire_recursive>
 80067aa:	bf00      	nop
 80067ac:	20004bd0 	.word	0x20004bd0

080067b0 <__malloc_unlock>:
 80067b0:	4801      	ldr	r0, [pc, #4]	@ (80067b8 <__malloc_unlock+0x8>)
 80067b2:	f7ff befb 	b.w	80065ac <__retarget_lock_release_recursive>
 80067b6:	bf00      	nop
 80067b8:	20004bd0 	.word	0x20004bd0

080067bc <__sfputc_r>:
 80067bc:	6893      	ldr	r3, [r2, #8]
 80067be:	3b01      	subs	r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	b410      	push	{r4}
 80067c4:	6093      	str	r3, [r2, #8]
 80067c6:	da08      	bge.n	80067da <__sfputc_r+0x1e>
 80067c8:	6994      	ldr	r4, [r2, #24]
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	db01      	blt.n	80067d2 <__sfputc_r+0x16>
 80067ce:	290a      	cmp	r1, #10
 80067d0:	d103      	bne.n	80067da <__sfputc_r+0x1e>
 80067d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067d6:	f000 bb6b 	b.w	8006eb0 <__swbuf_r>
 80067da:	6813      	ldr	r3, [r2, #0]
 80067dc:	1c58      	adds	r0, r3, #1
 80067de:	6010      	str	r0, [r2, #0]
 80067e0:	7019      	strb	r1, [r3, #0]
 80067e2:	4608      	mov	r0, r1
 80067e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <__sfputs_r>:
 80067ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ec:	4606      	mov	r6, r0
 80067ee:	460f      	mov	r7, r1
 80067f0:	4614      	mov	r4, r2
 80067f2:	18d5      	adds	r5, r2, r3
 80067f4:	42ac      	cmp	r4, r5
 80067f6:	d101      	bne.n	80067fc <__sfputs_r+0x12>
 80067f8:	2000      	movs	r0, #0
 80067fa:	e007      	b.n	800680c <__sfputs_r+0x22>
 80067fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006800:	463a      	mov	r2, r7
 8006802:	4630      	mov	r0, r6
 8006804:	f7ff ffda 	bl	80067bc <__sfputc_r>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d1f3      	bne.n	80067f4 <__sfputs_r+0xa>
 800680c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006810 <_vfiprintf_r>:
 8006810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006814:	460d      	mov	r5, r1
 8006816:	b09d      	sub	sp, #116	@ 0x74
 8006818:	4614      	mov	r4, r2
 800681a:	4698      	mov	r8, r3
 800681c:	4606      	mov	r6, r0
 800681e:	b118      	cbz	r0, 8006828 <_vfiprintf_r+0x18>
 8006820:	6a03      	ldr	r3, [r0, #32]
 8006822:	b90b      	cbnz	r3, 8006828 <_vfiprintf_r+0x18>
 8006824:	f7ff fdbc 	bl	80063a0 <__sinit>
 8006828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800682a:	07d9      	lsls	r1, r3, #31
 800682c:	d405      	bmi.n	800683a <_vfiprintf_r+0x2a>
 800682e:	89ab      	ldrh	r3, [r5, #12]
 8006830:	059a      	lsls	r2, r3, #22
 8006832:	d402      	bmi.n	800683a <_vfiprintf_r+0x2a>
 8006834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006836:	f7ff feb8 	bl	80065aa <__retarget_lock_acquire_recursive>
 800683a:	89ab      	ldrh	r3, [r5, #12]
 800683c:	071b      	lsls	r3, r3, #28
 800683e:	d501      	bpl.n	8006844 <_vfiprintf_r+0x34>
 8006840:	692b      	ldr	r3, [r5, #16]
 8006842:	b99b      	cbnz	r3, 800686c <_vfiprintf_r+0x5c>
 8006844:	4629      	mov	r1, r5
 8006846:	4630      	mov	r0, r6
 8006848:	f000 fb70 	bl	8006f2c <__swsetup_r>
 800684c:	b170      	cbz	r0, 800686c <_vfiprintf_r+0x5c>
 800684e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006850:	07dc      	lsls	r4, r3, #31
 8006852:	d504      	bpl.n	800685e <_vfiprintf_r+0x4e>
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	b01d      	add	sp, #116	@ 0x74
 800685a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685e:	89ab      	ldrh	r3, [r5, #12]
 8006860:	0598      	lsls	r0, r3, #22
 8006862:	d4f7      	bmi.n	8006854 <_vfiprintf_r+0x44>
 8006864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006866:	f7ff fea1 	bl	80065ac <__retarget_lock_release_recursive>
 800686a:	e7f3      	b.n	8006854 <_vfiprintf_r+0x44>
 800686c:	2300      	movs	r3, #0
 800686e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006870:	2320      	movs	r3, #32
 8006872:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006876:	f8cd 800c 	str.w	r8, [sp, #12]
 800687a:	2330      	movs	r3, #48	@ 0x30
 800687c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a2c <_vfiprintf_r+0x21c>
 8006880:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006884:	f04f 0901 	mov.w	r9, #1
 8006888:	4623      	mov	r3, r4
 800688a:	469a      	mov	sl, r3
 800688c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006890:	b10a      	cbz	r2, 8006896 <_vfiprintf_r+0x86>
 8006892:	2a25      	cmp	r2, #37	@ 0x25
 8006894:	d1f9      	bne.n	800688a <_vfiprintf_r+0x7a>
 8006896:	ebba 0b04 	subs.w	fp, sl, r4
 800689a:	d00b      	beq.n	80068b4 <_vfiprintf_r+0xa4>
 800689c:	465b      	mov	r3, fp
 800689e:	4622      	mov	r2, r4
 80068a0:	4629      	mov	r1, r5
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff ffa1 	bl	80067ea <__sfputs_r>
 80068a8:	3001      	adds	r0, #1
 80068aa:	f000 80a7 	beq.w	80069fc <_vfiprintf_r+0x1ec>
 80068ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068b0:	445a      	add	r2, fp
 80068b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80068b4:	f89a 3000 	ldrb.w	r3, [sl]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 809f 	beq.w	80069fc <_vfiprintf_r+0x1ec>
 80068be:	2300      	movs	r3, #0
 80068c0:	f04f 32ff 	mov.w	r2, #4294967295
 80068c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068c8:	f10a 0a01 	add.w	sl, sl, #1
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	9307      	str	r3, [sp, #28]
 80068d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80068d6:	4654      	mov	r4, sl
 80068d8:	2205      	movs	r2, #5
 80068da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068de:	4853      	ldr	r0, [pc, #332]	@ (8006a2c <_vfiprintf_r+0x21c>)
 80068e0:	f7f9 fc7e 	bl	80001e0 <memchr>
 80068e4:	9a04      	ldr	r2, [sp, #16]
 80068e6:	b9d8      	cbnz	r0, 8006920 <_vfiprintf_r+0x110>
 80068e8:	06d1      	lsls	r1, r2, #27
 80068ea:	bf44      	itt	mi
 80068ec:	2320      	movmi	r3, #32
 80068ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068f2:	0713      	lsls	r3, r2, #28
 80068f4:	bf44      	itt	mi
 80068f6:	232b      	movmi	r3, #43	@ 0x2b
 80068f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006900:	2b2a      	cmp	r3, #42	@ 0x2a
 8006902:	d015      	beq.n	8006930 <_vfiprintf_r+0x120>
 8006904:	9a07      	ldr	r2, [sp, #28]
 8006906:	4654      	mov	r4, sl
 8006908:	2000      	movs	r0, #0
 800690a:	f04f 0c0a 	mov.w	ip, #10
 800690e:	4621      	mov	r1, r4
 8006910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006914:	3b30      	subs	r3, #48	@ 0x30
 8006916:	2b09      	cmp	r3, #9
 8006918:	d94b      	bls.n	80069b2 <_vfiprintf_r+0x1a2>
 800691a:	b1b0      	cbz	r0, 800694a <_vfiprintf_r+0x13a>
 800691c:	9207      	str	r2, [sp, #28]
 800691e:	e014      	b.n	800694a <_vfiprintf_r+0x13a>
 8006920:	eba0 0308 	sub.w	r3, r0, r8
 8006924:	fa09 f303 	lsl.w	r3, r9, r3
 8006928:	4313      	orrs	r3, r2
 800692a:	9304      	str	r3, [sp, #16]
 800692c:	46a2      	mov	sl, r4
 800692e:	e7d2      	b.n	80068d6 <_vfiprintf_r+0xc6>
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	1d19      	adds	r1, r3, #4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	9103      	str	r1, [sp, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	bfbb      	ittet	lt
 800693c:	425b      	neglt	r3, r3
 800693e:	f042 0202 	orrlt.w	r2, r2, #2
 8006942:	9307      	strge	r3, [sp, #28]
 8006944:	9307      	strlt	r3, [sp, #28]
 8006946:	bfb8      	it	lt
 8006948:	9204      	strlt	r2, [sp, #16]
 800694a:	7823      	ldrb	r3, [r4, #0]
 800694c:	2b2e      	cmp	r3, #46	@ 0x2e
 800694e:	d10a      	bne.n	8006966 <_vfiprintf_r+0x156>
 8006950:	7863      	ldrb	r3, [r4, #1]
 8006952:	2b2a      	cmp	r3, #42	@ 0x2a
 8006954:	d132      	bne.n	80069bc <_vfiprintf_r+0x1ac>
 8006956:	9b03      	ldr	r3, [sp, #12]
 8006958:	1d1a      	adds	r2, r3, #4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	9203      	str	r2, [sp, #12]
 800695e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006962:	3402      	adds	r4, #2
 8006964:	9305      	str	r3, [sp, #20]
 8006966:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a3c <_vfiprintf_r+0x22c>
 800696a:	7821      	ldrb	r1, [r4, #0]
 800696c:	2203      	movs	r2, #3
 800696e:	4650      	mov	r0, sl
 8006970:	f7f9 fc36 	bl	80001e0 <memchr>
 8006974:	b138      	cbz	r0, 8006986 <_vfiprintf_r+0x176>
 8006976:	9b04      	ldr	r3, [sp, #16]
 8006978:	eba0 000a 	sub.w	r0, r0, sl
 800697c:	2240      	movs	r2, #64	@ 0x40
 800697e:	4082      	lsls	r2, r0
 8006980:	4313      	orrs	r3, r2
 8006982:	3401      	adds	r4, #1
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800698a:	4829      	ldr	r0, [pc, #164]	@ (8006a30 <_vfiprintf_r+0x220>)
 800698c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006990:	2206      	movs	r2, #6
 8006992:	f7f9 fc25 	bl	80001e0 <memchr>
 8006996:	2800      	cmp	r0, #0
 8006998:	d03f      	beq.n	8006a1a <_vfiprintf_r+0x20a>
 800699a:	4b26      	ldr	r3, [pc, #152]	@ (8006a34 <_vfiprintf_r+0x224>)
 800699c:	bb1b      	cbnz	r3, 80069e6 <_vfiprintf_r+0x1d6>
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	3307      	adds	r3, #7
 80069a2:	f023 0307 	bic.w	r3, r3, #7
 80069a6:	3308      	adds	r3, #8
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ac:	443b      	add	r3, r7
 80069ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80069b0:	e76a      	b.n	8006888 <_vfiprintf_r+0x78>
 80069b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80069b6:	460c      	mov	r4, r1
 80069b8:	2001      	movs	r0, #1
 80069ba:	e7a8      	b.n	800690e <_vfiprintf_r+0xfe>
 80069bc:	2300      	movs	r3, #0
 80069be:	3401      	adds	r4, #1
 80069c0:	9305      	str	r3, [sp, #20]
 80069c2:	4619      	mov	r1, r3
 80069c4:	f04f 0c0a 	mov.w	ip, #10
 80069c8:	4620      	mov	r0, r4
 80069ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ce:	3a30      	subs	r2, #48	@ 0x30
 80069d0:	2a09      	cmp	r2, #9
 80069d2:	d903      	bls.n	80069dc <_vfiprintf_r+0x1cc>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0c6      	beq.n	8006966 <_vfiprintf_r+0x156>
 80069d8:	9105      	str	r1, [sp, #20]
 80069da:	e7c4      	b.n	8006966 <_vfiprintf_r+0x156>
 80069dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e0:	4604      	mov	r4, r0
 80069e2:	2301      	movs	r3, #1
 80069e4:	e7f0      	b.n	80069c8 <_vfiprintf_r+0x1b8>
 80069e6:	ab03      	add	r3, sp, #12
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	462a      	mov	r2, r5
 80069ec:	4b12      	ldr	r3, [pc, #72]	@ (8006a38 <_vfiprintf_r+0x228>)
 80069ee:	a904      	add	r1, sp, #16
 80069f0:	4630      	mov	r0, r6
 80069f2:	f3af 8000 	nop.w
 80069f6:	4607      	mov	r7, r0
 80069f8:	1c78      	adds	r0, r7, #1
 80069fa:	d1d6      	bne.n	80069aa <_vfiprintf_r+0x19a>
 80069fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069fe:	07d9      	lsls	r1, r3, #31
 8006a00:	d405      	bmi.n	8006a0e <_vfiprintf_r+0x1fe>
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	059a      	lsls	r2, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_vfiprintf_r+0x1fe>
 8006a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a0a:	f7ff fdcf 	bl	80065ac <__retarget_lock_release_recursive>
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	065b      	lsls	r3, r3, #25
 8006a12:	f53f af1f 	bmi.w	8006854 <_vfiprintf_r+0x44>
 8006a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a18:	e71e      	b.n	8006858 <_vfiprintf_r+0x48>
 8006a1a:	ab03      	add	r3, sp, #12
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4b05      	ldr	r3, [pc, #20]	@ (8006a38 <_vfiprintf_r+0x228>)
 8006a22:	a904      	add	r1, sp, #16
 8006a24:	4630      	mov	r0, r6
 8006a26:	f000 f879 	bl	8006b1c <_printf_i>
 8006a2a:	e7e4      	b.n	80069f6 <_vfiprintf_r+0x1e6>
 8006a2c:	0800726c 	.word	0x0800726c
 8006a30:	08007276 	.word	0x08007276
 8006a34:	00000000 	.word	0x00000000
 8006a38:	080067eb 	.word	0x080067eb
 8006a3c:	08007272 	.word	0x08007272

08006a40 <_printf_common>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	4616      	mov	r6, r2
 8006a46:	4698      	mov	r8, r3
 8006a48:	688a      	ldr	r2, [r1, #8]
 8006a4a:	690b      	ldr	r3, [r1, #16]
 8006a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a50:	4293      	cmp	r3, r2
 8006a52:	bfb8      	it	lt
 8006a54:	4613      	movlt	r3, r2
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b10a      	cbz	r2, 8006a66 <_printf_common+0x26>
 8006a62:	3301      	adds	r3, #1
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	0699      	lsls	r1, r3, #26
 8006a6a:	bf42      	ittt	mi
 8006a6c:	6833      	ldrmi	r3, [r6, #0]
 8006a6e:	3302      	addmi	r3, #2
 8006a70:	6033      	strmi	r3, [r6, #0]
 8006a72:	6825      	ldr	r5, [r4, #0]
 8006a74:	f015 0506 	ands.w	r5, r5, #6
 8006a78:	d106      	bne.n	8006a88 <_printf_common+0x48>
 8006a7a:	f104 0a19 	add.w	sl, r4, #25
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	6832      	ldr	r2, [r6, #0]
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	dc26      	bgt.n	8006ad6 <_printf_common+0x96>
 8006a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	3b00      	subs	r3, #0
 8006a90:	bf18      	it	ne
 8006a92:	2301      	movne	r3, #1
 8006a94:	0692      	lsls	r2, r2, #26
 8006a96:	d42b      	bmi.n	8006af0 <_printf_common+0xb0>
 8006a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	4638      	mov	r0, r7
 8006aa0:	47c8      	blx	r9
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d01e      	beq.n	8006ae4 <_printf_common+0xa4>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	6922      	ldr	r2, [r4, #16]
 8006aaa:	f003 0306 	and.w	r3, r3, #6
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	bf02      	ittt	eq
 8006ab2:	68e5      	ldreq	r5, [r4, #12]
 8006ab4:	6833      	ldreq	r3, [r6, #0]
 8006ab6:	1aed      	subeq	r5, r5, r3
 8006ab8:	68a3      	ldr	r3, [r4, #8]
 8006aba:	bf0c      	ite	eq
 8006abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ac0:	2500      	movne	r5, #0
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	bfc4      	itt	gt
 8006ac6:	1a9b      	subgt	r3, r3, r2
 8006ac8:	18ed      	addgt	r5, r5, r3
 8006aca:	2600      	movs	r6, #0
 8006acc:	341a      	adds	r4, #26
 8006ace:	42b5      	cmp	r5, r6
 8006ad0:	d11a      	bne.n	8006b08 <_printf_common+0xc8>
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	e008      	b.n	8006ae8 <_printf_common+0xa8>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4652      	mov	r2, sl
 8006ada:	4641      	mov	r1, r8
 8006adc:	4638      	mov	r0, r7
 8006ade:	47c8      	blx	r9
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d103      	bne.n	8006aec <_printf_common+0xac>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aec:	3501      	adds	r5, #1
 8006aee:	e7c6      	b.n	8006a7e <_printf_common+0x3e>
 8006af0:	18e1      	adds	r1, r4, r3
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	2030      	movs	r0, #48	@ 0x30
 8006af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006afa:	4422      	add	r2, r4
 8006afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b04:	3302      	adds	r3, #2
 8006b06:	e7c7      	b.n	8006a98 <_printf_common+0x58>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	4641      	mov	r1, r8
 8006b0e:	4638      	mov	r0, r7
 8006b10:	47c8      	blx	r9
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0e6      	beq.n	8006ae4 <_printf_common+0xa4>
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7d9      	b.n	8006ace <_printf_common+0x8e>
	...

08006b1c <_printf_i>:
 8006b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b20:	7e0f      	ldrb	r7, [r1, #24]
 8006b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b24:	2f78      	cmp	r7, #120	@ 0x78
 8006b26:	4691      	mov	r9, r2
 8006b28:	4680      	mov	r8, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	469a      	mov	sl, r3
 8006b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b32:	d807      	bhi.n	8006b44 <_printf_i+0x28>
 8006b34:	2f62      	cmp	r7, #98	@ 0x62
 8006b36:	d80a      	bhi.n	8006b4e <_printf_i+0x32>
 8006b38:	2f00      	cmp	r7, #0
 8006b3a:	f000 80d1 	beq.w	8006ce0 <_printf_i+0x1c4>
 8006b3e:	2f58      	cmp	r7, #88	@ 0x58
 8006b40:	f000 80b8 	beq.w	8006cb4 <_printf_i+0x198>
 8006b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b4c:	e03a      	b.n	8006bc4 <_printf_i+0xa8>
 8006b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b52:	2b15      	cmp	r3, #21
 8006b54:	d8f6      	bhi.n	8006b44 <_printf_i+0x28>
 8006b56:	a101      	add	r1, pc, #4	@ (adr r1, 8006b5c <_printf_i+0x40>)
 8006b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b5c:	08006bb5 	.word	0x08006bb5
 8006b60:	08006bc9 	.word	0x08006bc9
 8006b64:	08006b45 	.word	0x08006b45
 8006b68:	08006b45 	.word	0x08006b45
 8006b6c:	08006b45 	.word	0x08006b45
 8006b70:	08006b45 	.word	0x08006b45
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006b45 	.word	0x08006b45
 8006b7c:	08006b45 	.word	0x08006b45
 8006b80:	08006b45 	.word	0x08006b45
 8006b84:	08006b45 	.word	0x08006b45
 8006b88:	08006cc7 	.word	0x08006cc7
 8006b8c:	08006bf3 	.word	0x08006bf3
 8006b90:	08006c81 	.word	0x08006c81
 8006b94:	08006b45 	.word	0x08006b45
 8006b98:	08006b45 	.word	0x08006b45
 8006b9c:	08006ce9 	.word	0x08006ce9
 8006ba0:	08006b45 	.word	0x08006b45
 8006ba4:	08006bf3 	.word	0x08006bf3
 8006ba8:	08006b45 	.word	0x08006b45
 8006bac:	08006b45 	.word	0x08006b45
 8006bb0:	08006c89 	.word	0x08006c89
 8006bb4:	6833      	ldr	r3, [r6, #0]
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6032      	str	r2, [r6, #0]
 8006bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e09c      	b.n	8006d02 <_printf_i+0x1e6>
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	1d19      	adds	r1, r3, #4
 8006bce:	6031      	str	r1, [r6, #0]
 8006bd0:	0606      	lsls	r6, r0, #24
 8006bd2:	d501      	bpl.n	8006bd8 <_printf_i+0xbc>
 8006bd4:	681d      	ldr	r5, [r3, #0]
 8006bd6:	e003      	b.n	8006be0 <_printf_i+0xc4>
 8006bd8:	0645      	lsls	r5, r0, #25
 8006bda:	d5fb      	bpl.n	8006bd4 <_printf_i+0xb8>
 8006bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006be0:	2d00      	cmp	r5, #0
 8006be2:	da03      	bge.n	8006bec <_printf_i+0xd0>
 8006be4:	232d      	movs	r3, #45	@ 0x2d
 8006be6:	426d      	negs	r5, r5
 8006be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bec:	4858      	ldr	r0, [pc, #352]	@ (8006d50 <_printf_i+0x234>)
 8006bee:	230a      	movs	r3, #10
 8006bf0:	e011      	b.n	8006c16 <_printf_i+0xfa>
 8006bf2:	6821      	ldr	r1, [r4, #0]
 8006bf4:	6833      	ldr	r3, [r6, #0]
 8006bf6:	0608      	lsls	r0, r1, #24
 8006bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bfc:	d402      	bmi.n	8006c04 <_printf_i+0xe8>
 8006bfe:	0649      	lsls	r1, r1, #25
 8006c00:	bf48      	it	mi
 8006c02:	b2ad      	uxthmi	r5, r5
 8006c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c06:	4852      	ldr	r0, [pc, #328]	@ (8006d50 <_printf_i+0x234>)
 8006c08:	6033      	str	r3, [r6, #0]
 8006c0a:	bf14      	ite	ne
 8006c0c:	230a      	movne	r3, #10
 8006c0e:	2308      	moveq	r3, #8
 8006c10:	2100      	movs	r1, #0
 8006c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c16:	6866      	ldr	r6, [r4, #4]
 8006c18:	60a6      	str	r6, [r4, #8]
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	db05      	blt.n	8006c2a <_printf_i+0x10e>
 8006c1e:	6821      	ldr	r1, [r4, #0]
 8006c20:	432e      	orrs	r6, r5
 8006c22:	f021 0104 	bic.w	r1, r1, #4
 8006c26:	6021      	str	r1, [r4, #0]
 8006c28:	d04b      	beq.n	8006cc2 <_printf_i+0x1a6>
 8006c2a:	4616      	mov	r6, r2
 8006c2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c30:	fb03 5711 	mls	r7, r3, r1, r5
 8006c34:	5dc7      	ldrb	r7, [r0, r7]
 8006c36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c3a:	462f      	mov	r7, r5
 8006c3c:	42bb      	cmp	r3, r7
 8006c3e:	460d      	mov	r5, r1
 8006c40:	d9f4      	bls.n	8006c2c <_printf_i+0x110>
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d10b      	bne.n	8006c5e <_printf_i+0x142>
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	07df      	lsls	r7, r3, #31
 8006c4a:	d508      	bpl.n	8006c5e <_printf_i+0x142>
 8006c4c:	6923      	ldr	r3, [r4, #16]
 8006c4e:	6861      	ldr	r1, [r4, #4]
 8006c50:	4299      	cmp	r1, r3
 8006c52:	bfde      	ittt	le
 8006c54:	2330      	movle	r3, #48	@ 0x30
 8006c56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c5e:	1b92      	subs	r2, r2, r6
 8006c60:	6122      	str	r2, [r4, #16]
 8006c62:	f8cd a000 	str.w	sl, [sp]
 8006c66:	464b      	mov	r3, r9
 8006c68:	aa03      	add	r2, sp, #12
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	f7ff fee7 	bl	8006a40 <_printf_common>
 8006c72:	3001      	adds	r0, #1
 8006c74:	d14a      	bne.n	8006d0c <_printf_i+0x1f0>
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7a:	b004      	add	sp, #16
 8006c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	f043 0320 	orr.w	r3, r3, #32
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	4832      	ldr	r0, [pc, #200]	@ (8006d54 <_printf_i+0x238>)
 8006c8a:	2778      	movs	r7, #120	@ 0x78
 8006c8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	6831      	ldr	r1, [r6, #0]
 8006c94:	061f      	lsls	r7, r3, #24
 8006c96:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c9a:	d402      	bmi.n	8006ca2 <_printf_i+0x186>
 8006c9c:	065f      	lsls	r7, r3, #25
 8006c9e:	bf48      	it	mi
 8006ca0:	b2ad      	uxthmi	r5, r5
 8006ca2:	6031      	str	r1, [r6, #0]
 8006ca4:	07d9      	lsls	r1, r3, #31
 8006ca6:	bf44      	itt	mi
 8006ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8006cac:	6023      	strmi	r3, [r4, #0]
 8006cae:	b11d      	cbz	r5, 8006cb8 <_printf_i+0x19c>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	e7ad      	b.n	8006c10 <_printf_i+0xf4>
 8006cb4:	4826      	ldr	r0, [pc, #152]	@ (8006d50 <_printf_i+0x234>)
 8006cb6:	e7e9      	b.n	8006c8c <_printf_i+0x170>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	f023 0320 	bic.w	r3, r3, #32
 8006cbe:	6023      	str	r3, [r4, #0]
 8006cc0:	e7f6      	b.n	8006cb0 <_printf_i+0x194>
 8006cc2:	4616      	mov	r6, r2
 8006cc4:	e7bd      	b.n	8006c42 <_printf_i+0x126>
 8006cc6:	6833      	ldr	r3, [r6, #0]
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	6961      	ldr	r1, [r4, #20]
 8006ccc:	1d18      	adds	r0, r3, #4
 8006cce:	6030      	str	r0, [r6, #0]
 8006cd0:	062e      	lsls	r6, r5, #24
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	d501      	bpl.n	8006cda <_printf_i+0x1be>
 8006cd6:	6019      	str	r1, [r3, #0]
 8006cd8:	e002      	b.n	8006ce0 <_printf_i+0x1c4>
 8006cda:	0668      	lsls	r0, r5, #25
 8006cdc:	d5fb      	bpl.n	8006cd6 <_printf_i+0x1ba>
 8006cde:	8019      	strh	r1, [r3, #0]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6123      	str	r3, [r4, #16]
 8006ce4:	4616      	mov	r6, r2
 8006ce6:	e7bc      	b.n	8006c62 <_printf_i+0x146>
 8006ce8:	6833      	ldr	r3, [r6, #0]
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	6032      	str	r2, [r6, #0]
 8006cee:	681e      	ldr	r6, [r3, #0]
 8006cf0:	6862      	ldr	r2, [r4, #4]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7f9 fa73 	bl	80001e0 <memchr>
 8006cfa:	b108      	cbz	r0, 8006d00 <_printf_i+0x1e4>
 8006cfc:	1b80      	subs	r0, r0, r6
 8006cfe:	6060      	str	r0, [r4, #4]
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2300      	movs	r3, #0
 8006d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d0a:	e7aa      	b.n	8006c62 <_printf_i+0x146>
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	4632      	mov	r2, r6
 8006d10:	4649      	mov	r1, r9
 8006d12:	4640      	mov	r0, r8
 8006d14:	47d0      	blx	sl
 8006d16:	3001      	adds	r0, #1
 8006d18:	d0ad      	beq.n	8006c76 <_printf_i+0x15a>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	079b      	lsls	r3, r3, #30
 8006d1e:	d413      	bmi.n	8006d48 <_printf_i+0x22c>
 8006d20:	68e0      	ldr	r0, [r4, #12]
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	4298      	cmp	r0, r3
 8006d26:	bfb8      	it	lt
 8006d28:	4618      	movlt	r0, r3
 8006d2a:	e7a6      	b.n	8006c7a <_printf_i+0x15e>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4632      	mov	r2, r6
 8006d30:	4649      	mov	r1, r9
 8006d32:	4640      	mov	r0, r8
 8006d34:	47d0      	blx	sl
 8006d36:	3001      	adds	r0, #1
 8006d38:	d09d      	beq.n	8006c76 <_printf_i+0x15a>
 8006d3a:	3501      	adds	r5, #1
 8006d3c:	68e3      	ldr	r3, [r4, #12]
 8006d3e:	9903      	ldr	r1, [sp, #12]
 8006d40:	1a5b      	subs	r3, r3, r1
 8006d42:	42ab      	cmp	r3, r5
 8006d44:	dcf2      	bgt.n	8006d2c <_printf_i+0x210>
 8006d46:	e7eb      	b.n	8006d20 <_printf_i+0x204>
 8006d48:	2500      	movs	r5, #0
 8006d4a:	f104 0619 	add.w	r6, r4, #25
 8006d4e:	e7f5      	b.n	8006d3c <_printf_i+0x220>
 8006d50:	0800727d 	.word	0x0800727d
 8006d54:	0800728e 	.word	0x0800728e

08006d58 <__sflush_r>:
 8006d58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d60:	0716      	lsls	r6, r2, #28
 8006d62:	4605      	mov	r5, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	d454      	bmi.n	8006e12 <__sflush_r+0xba>
 8006d68:	684b      	ldr	r3, [r1, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	dc02      	bgt.n	8006d74 <__sflush_r+0x1c>
 8006d6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dd48      	ble.n	8006e06 <__sflush_r+0xae>
 8006d74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d045      	beq.n	8006e06 <__sflush_r+0xae>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d80:	682f      	ldr	r7, [r5, #0]
 8006d82:	6a21      	ldr	r1, [r4, #32]
 8006d84:	602b      	str	r3, [r5, #0]
 8006d86:	d030      	beq.n	8006dea <__sflush_r+0x92>
 8006d88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	0759      	lsls	r1, r3, #29
 8006d8e:	d505      	bpl.n	8006d9c <__sflush_r+0x44>
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d96:	b10b      	cbz	r3, 8006d9c <__sflush_r+0x44>
 8006d98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d9a:	1ad2      	subs	r2, r2, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006da0:	6a21      	ldr	r1, [r4, #32]
 8006da2:	4628      	mov	r0, r5
 8006da4:	47b0      	blx	r6
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	d106      	bne.n	8006dba <__sflush_r+0x62>
 8006dac:	6829      	ldr	r1, [r5, #0]
 8006dae:	291d      	cmp	r1, #29
 8006db0:	d82b      	bhi.n	8006e0a <__sflush_r+0xb2>
 8006db2:	4a2a      	ldr	r2, [pc, #168]	@ (8006e5c <__sflush_r+0x104>)
 8006db4:	40ca      	lsrs	r2, r1
 8006db6:	07d6      	lsls	r6, r2, #31
 8006db8:	d527      	bpl.n	8006e0a <__sflush_r+0xb2>
 8006dba:	2200      	movs	r2, #0
 8006dbc:	6062      	str	r2, [r4, #4]
 8006dbe:	04d9      	lsls	r1, r3, #19
 8006dc0:	6922      	ldr	r2, [r4, #16]
 8006dc2:	6022      	str	r2, [r4, #0]
 8006dc4:	d504      	bpl.n	8006dd0 <__sflush_r+0x78>
 8006dc6:	1c42      	adds	r2, r0, #1
 8006dc8:	d101      	bne.n	8006dce <__sflush_r+0x76>
 8006dca:	682b      	ldr	r3, [r5, #0]
 8006dcc:	b903      	cbnz	r3, 8006dd0 <__sflush_r+0x78>
 8006dce:	6560      	str	r0, [r4, #84]	@ 0x54
 8006dd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dd2:	602f      	str	r7, [r5, #0]
 8006dd4:	b1b9      	cbz	r1, 8006e06 <__sflush_r+0xae>
 8006dd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dda:	4299      	cmp	r1, r3
 8006ddc:	d002      	beq.n	8006de4 <__sflush_r+0x8c>
 8006dde:	4628      	mov	r0, r5
 8006de0:	f7ff fbf4 	bl	80065cc <_free_r>
 8006de4:	2300      	movs	r3, #0
 8006de6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006de8:	e00d      	b.n	8006e06 <__sflush_r+0xae>
 8006dea:	2301      	movs	r3, #1
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b0      	blx	r6
 8006df0:	4602      	mov	r2, r0
 8006df2:	1c50      	adds	r0, r2, #1
 8006df4:	d1c9      	bne.n	8006d8a <__sflush_r+0x32>
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0c6      	beq.n	8006d8a <__sflush_r+0x32>
 8006dfc:	2b1d      	cmp	r3, #29
 8006dfe:	d001      	beq.n	8006e04 <__sflush_r+0xac>
 8006e00:	2b16      	cmp	r3, #22
 8006e02:	d11e      	bne.n	8006e42 <__sflush_r+0xea>
 8006e04:	602f      	str	r7, [r5, #0]
 8006e06:	2000      	movs	r0, #0
 8006e08:	e022      	b.n	8006e50 <__sflush_r+0xf8>
 8006e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e0e:	b21b      	sxth	r3, r3
 8006e10:	e01b      	b.n	8006e4a <__sflush_r+0xf2>
 8006e12:	690f      	ldr	r7, [r1, #16]
 8006e14:	2f00      	cmp	r7, #0
 8006e16:	d0f6      	beq.n	8006e06 <__sflush_r+0xae>
 8006e18:	0793      	lsls	r3, r2, #30
 8006e1a:	680e      	ldr	r6, [r1, #0]
 8006e1c:	bf08      	it	eq
 8006e1e:	694b      	ldreq	r3, [r1, #20]
 8006e20:	600f      	str	r7, [r1, #0]
 8006e22:	bf18      	it	ne
 8006e24:	2300      	movne	r3, #0
 8006e26:	eba6 0807 	sub.w	r8, r6, r7
 8006e2a:	608b      	str	r3, [r1, #8]
 8006e2c:	f1b8 0f00 	cmp.w	r8, #0
 8006e30:	dde9      	ble.n	8006e06 <__sflush_r+0xae>
 8006e32:	6a21      	ldr	r1, [r4, #32]
 8006e34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e36:	4643      	mov	r3, r8
 8006e38:	463a      	mov	r2, r7
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b0      	blx	r6
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	dc08      	bgt.n	8006e54 <__sflush_r+0xfc>
 8006e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e54:	4407      	add	r7, r0
 8006e56:	eba8 0800 	sub.w	r8, r8, r0
 8006e5a:	e7e7      	b.n	8006e2c <__sflush_r+0xd4>
 8006e5c:	20400001 	.word	0x20400001

08006e60 <_fflush_r>:
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	690b      	ldr	r3, [r1, #16]
 8006e64:	4605      	mov	r5, r0
 8006e66:	460c      	mov	r4, r1
 8006e68:	b913      	cbnz	r3, 8006e70 <_fflush_r+0x10>
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	b118      	cbz	r0, 8006e7a <_fflush_r+0x1a>
 8006e72:	6a03      	ldr	r3, [r0, #32]
 8006e74:	b90b      	cbnz	r3, 8006e7a <_fflush_r+0x1a>
 8006e76:	f7ff fa93 	bl	80063a0 <__sinit>
 8006e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f3      	beq.n	8006e6a <_fflush_r+0xa>
 8006e82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e84:	07d0      	lsls	r0, r2, #31
 8006e86:	d404      	bmi.n	8006e92 <_fflush_r+0x32>
 8006e88:	0599      	lsls	r1, r3, #22
 8006e8a:	d402      	bmi.n	8006e92 <_fflush_r+0x32>
 8006e8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e8e:	f7ff fb8c 	bl	80065aa <__retarget_lock_acquire_recursive>
 8006e92:	4628      	mov	r0, r5
 8006e94:	4621      	mov	r1, r4
 8006e96:	f7ff ff5f 	bl	8006d58 <__sflush_r>
 8006e9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e9c:	07da      	lsls	r2, r3, #31
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	d4e4      	bmi.n	8006e6c <_fflush_r+0xc>
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	059b      	lsls	r3, r3, #22
 8006ea6:	d4e1      	bmi.n	8006e6c <_fflush_r+0xc>
 8006ea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eaa:	f7ff fb7f 	bl	80065ac <__retarget_lock_release_recursive>
 8006eae:	e7dd      	b.n	8006e6c <_fflush_r+0xc>

08006eb0 <__swbuf_r>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	460e      	mov	r6, r1
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	b118      	cbz	r0, 8006ec2 <__swbuf_r+0x12>
 8006eba:	6a03      	ldr	r3, [r0, #32]
 8006ebc:	b90b      	cbnz	r3, 8006ec2 <__swbuf_r+0x12>
 8006ebe:	f7ff fa6f 	bl	80063a0 <__sinit>
 8006ec2:	69a3      	ldr	r3, [r4, #24]
 8006ec4:	60a3      	str	r3, [r4, #8]
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	071a      	lsls	r2, r3, #28
 8006eca:	d501      	bpl.n	8006ed0 <__swbuf_r+0x20>
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	b943      	cbnz	r3, 8006ee2 <__swbuf_r+0x32>
 8006ed0:	4621      	mov	r1, r4
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f000 f82a 	bl	8006f2c <__swsetup_r>
 8006ed8:	b118      	cbz	r0, 8006ee2 <__swbuf_r+0x32>
 8006eda:	f04f 37ff 	mov.w	r7, #4294967295
 8006ede:	4638      	mov	r0, r7
 8006ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	6922      	ldr	r2, [r4, #16]
 8006ee6:	1a98      	subs	r0, r3, r2
 8006ee8:	6963      	ldr	r3, [r4, #20]
 8006eea:	b2f6      	uxtb	r6, r6
 8006eec:	4283      	cmp	r3, r0
 8006eee:	4637      	mov	r7, r6
 8006ef0:	dc05      	bgt.n	8006efe <__swbuf_r+0x4e>
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f7ff ffb3 	bl	8006e60 <_fflush_r>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d1ed      	bne.n	8006eda <__swbuf_r+0x2a>
 8006efe:	68a3      	ldr	r3, [r4, #8]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	60a3      	str	r3, [r4, #8]
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	6022      	str	r2, [r4, #0]
 8006f0a:	701e      	strb	r6, [r3, #0]
 8006f0c:	6962      	ldr	r2, [r4, #20]
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d004      	beq.n	8006f1e <__swbuf_r+0x6e>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	07db      	lsls	r3, r3, #31
 8006f18:	d5e1      	bpl.n	8006ede <__swbuf_r+0x2e>
 8006f1a:	2e0a      	cmp	r6, #10
 8006f1c:	d1df      	bne.n	8006ede <__swbuf_r+0x2e>
 8006f1e:	4621      	mov	r1, r4
 8006f20:	4628      	mov	r0, r5
 8006f22:	f7ff ff9d 	bl	8006e60 <_fflush_r>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d0d9      	beq.n	8006ede <__swbuf_r+0x2e>
 8006f2a:	e7d6      	b.n	8006eda <__swbuf_r+0x2a>

08006f2c <__swsetup_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4b29      	ldr	r3, [pc, #164]	@ (8006fd4 <__swsetup_r+0xa8>)
 8006f30:	4605      	mov	r5, r0
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	460c      	mov	r4, r1
 8006f36:	b118      	cbz	r0, 8006f40 <__swsetup_r+0x14>
 8006f38:	6a03      	ldr	r3, [r0, #32]
 8006f3a:	b90b      	cbnz	r3, 8006f40 <__swsetup_r+0x14>
 8006f3c:	f7ff fa30 	bl	80063a0 <__sinit>
 8006f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f44:	0719      	lsls	r1, r3, #28
 8006f46:	d422      	bmi.n	8006f8e <__swsetup_r+0x62>
 8006f48:	06da      	lsls	r2, r3, #27
 8006f4a:	d407      	bmi.n	8006f5c <__swsetup_r+0x30>
 8006f4c:	2209      	movs	r2, #9
 8006f4e:	602a      	str	r2, [r5, #0]
 8006f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f54:	81a3      	strh	r3, [r4, #12]
 8006f56:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5a:	e033      	b.n	8006fc4 <__swsetup_r+0x98>
 8006f5c:	0758      	lsls	r0, r3, #29
 8006f5e:	d512      	bpl.n	8006f86 <__swsetup_r+0x5a>
 8006f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f62:	b141      	cbz	r1, 8006f76 <__swsetup_r+0x4a>
 8006f64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f68:	4299      	cmp	r1, r3
 8006f6a:	d002      	beq.n	8006f72 <__swsetup_r+0x46>
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f7ff fb2d 	bl	80065cc <_free_r>
 8006f72:	2300      	movs	r3, #0
 8006f74:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6063      	str	r3, [r4, #4]
 8006f82:	6923      	ldr	r3, [r4, #16]
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	89a3      	ldrh	r3, [r4, #12]
 8006f88:	f043 0308 	orr.w	r3, r3, #8
 8006f8c:	81a3      	strh	r3, [r4, #12]
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	b94b      	cbnz	r3, 8006fa6 <__swsetup_r+0x7a>
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f9c:	d003      	beq.n	8006fa6 <__swsetup_r+0x7a>
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	f000 f84f 	bl	8007044 <__smakebuf_r>
 8006fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006faa:	f013 0201 	ands.w	r2, r3, #1
 8006fae:	d00a      	beq.n	8006fc6 <__swsetup_r+0x9a>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	60a2      	str	r2, [r4, #8]
 8006fb4:	6962      	ldr	r2, [r4, #20]
 8006fb6:	4252      	negs	r2, r2
 8006fb8:	61a2      	str	r2, [r4, #24]
 8006fba:	6922      	ldr	r2, [r4, #16]
 8006fbc:	b942      	cbnz	r2, 8006fd0 <__swsetup_r+0xa4>
 8006fbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fc2:	d1c5      	bne.n	8006f50 <__swsetup_r+0x24>
 8006fc4:	bd38      	pop	{r3, r4, r5, pc}
 8006fc6:	0799      	lsls	r1, r3, #30
 8006fc8:	bf58      	it	pl
 8006fca:	6962      	ldrpl	r2, [r4, #20]
 8006fcc:	60a2      	str	r2, [r4, #8]
 8006fce:	e7f4      	b.n	8006fba <__swsetup_r+0x8e>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	e7f7      	b.n	8006fc4 <__swsetup_r+0x98>
 8006fd4:	2000001c 	.word	0x2000001c

08006fd8 <_sbrk_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	@ (8006ff4 <_sbrk_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7f9 fe90 	bl	8000d08 <_sbrk>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_sbrk_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_sbrk_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20004bcc 	.word	0x20004bcc

08006ff8 <__swhatbuf_r>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007000:	2900      	cmp	r1, #0
 8007002:	b096      	sub	sp, #88	@ 0x58
 8007004:	4615      	mov	r5, r2
 8007006:	461e      	mov	r6, r3
 8007008:	da0d      	bge.n	8007026 <__swhatbuf_r+0x2e>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007010:	f04f 0100 	mov.w	r1, #0
 8007014:	bf14      	ite	ne
 8007016:	2340      	movne	r3, #64	@ 0x40
 8007018:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800701c:	2000      	movs	r0, #0
 800701e:	6031      	str	r1, [r6, #0]
 8007020:	602b      	str	r3, [r5, #0]
 8007022:	b016      	add	sp, #88	@ 0x58
 8007024:	bd70      	pop	{r4, r5, r6, pc}
 8007026:	466a      	mov	r2, sp
 8007028:	f000 f848 	bl	80070bc <_fstat_r>
 800702c:	2800      	cmp	r0, #0
 800702e:	dbec      	blt.n	800700a <__swhatbuf_r+0x12>
 8007030:	9901      	ldr	r1, [sp, #4]
 8007032:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007036:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800703a:	4259      	negs	r1, r3
 800703c:	4159      	adcs	r1, r3
 800703e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007042:	e7eb      	b.n	800701c <__swhatbuf_r+0x24>

08007044 <__smakebuf_r>:
 8007044:	898b      	ldrh	r3, [r1, #12]
 8007046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007048:	079d      	lsls	r5, r3, #30
 800704a:	4606      	mov	r6, r0
 800704c:	460c      	mov	r4, r1
 800704e:	d507      	bpl.n	8007060 <__smakebuf_r+0x1c>
 8007050:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	6123      	str	r3, [r4, #16]
 8007058:	2301      	movs	r3, #1
 800705a:	6163      	str	r3, [r4, #20]
 800705c:	b003      	add	sp, #12
 800705e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007060:	ab01      	add	r3, sp, #4
 8007062:	466a      	mov	r2, sp
 8007064:	f7ff ffc8 	bl	8006ff8 <__swhatbuf_r>
 8007068:	9f00      	ldr	r7, [sp, #0]
 800706a:	4605      	mov	r5, r0
 800706c:	4639      	mov	r1, r7
 800706e:	4630      	mov	r0, r6
 8007070:	f7ff fb18 	bl	80066a4 <_malloc_r>
 8007074:	b948      	cbnz	r0, 800708a <__smakebuf_r+0x46>
 8007076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800707a:	059a      	lsls	r2, r3, #22
 800707c:	d4ee      	bmi.n	800705c <__smakebuf_r+0x18>
 800707e:	f023 0303 	bic.w	r3, r3, #3
 8007082:	f043 0302 	orr.w	r3, r3, #2
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	e7e2      	b.n	8007050 <__smakebuf_r+0xc>
 800708a:	89a3      	ldrh	r3, [r4, #12]
 800708c:	6020      	str	r0, [r4, #0]
 800708e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800709a:	b15b      	cbz	r3, 80070b4 <__smakebuf_r+0x70>
 800709c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070a0:	4630      	mov	r0, r6
 80070a2:	f000 f81d 	bl	80070e0 <_isatty_r>
 80070a6:	b128      	cbz	r0, 80070b4 <__smakebuf_r+0x70>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f023 0303 	bic.w	r3, r3, #3
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	431d      	orrs	r5, r3
 80070b8:	81a5      	strh	r5, [r4, #12]
 80070ba:	e7cf      	b.n	800705c <__smakebuf_r+0x18>

080070bc <_fstat_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d07      	ldr	r5, [pc, #28]	@ (80070dc <_fstat_r+0x20>)
 80070c0:	2300      	movs	r3, #0
 80070c2:	4604      	mov	r4, r0
 80070c4:	4608      	mov	r0, r1
 80070c6:	4611      	mov	r1, r2
 80070c8:	602b      	str	r3, [r5, #0]
 80070ca:	f7f9 fdf4 	bl	8000cb6 <_fstat>
 80070ce:	1c43      	adds	r3, r0, #1
 80070d0:	d102      	bne.n	80070d8 <_fstat_r+0x1c>
 80070d2:	682b      	ldr	r3, [r5, #0]
 80070d4:	b103      	cbz	r3, 80070d8 <_fstat_r+0x1c>
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	bd38      	pop	{r3, r4, r5, pc}
 80070da:	bf00      	nop
 80070dc:	20004bcc 	.word	0x20004bcc

080070e0 <_isatty_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d06      	ldr	r5, [pc, #24]	@ (80070fc <_isatty_r+0x1c>)
 80070e4:	2300      	movs	r3, #0
 80070e6:	4604      	mov	r4, r0
 80070e8:	4608      	mov	r0, r1
 80070ea:	602b      	str	r3, [r5, #0]
 80070ec:	f7f9 fdf3 	bl	8000cd6 <_isatty>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_isatty_r+0x1a>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_isatty_r+0x1a>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20004bcc 	.word	0x20004bcc

08007100 <_init>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	bf00      	nop
 8007104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007106:	bc08      	pop	{r3}
 8007108:	469e      	mov	lr, r3
 800710a:	4770      	bx	lr

0800710c <_fini>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	bf00      	nop
 8007110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007112:	bc08      	pop	{r3}
 8007114:	469e      	mov	lr, r3
 8007116:	4770      	bx	lr
