
FSM_ECU_F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08006c34  08006c34  00007c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e08  08006e08  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e08  08006e08  00007e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e10  08006e10  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e10  08006e10  00007e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006e18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b38  2000006c  08006e84  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ba4  08006e84  00008ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001399b  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003547  00000000  00000000  0001ba37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c53  00000000  00000000  0001ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019543  00000000  00000000  00020c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013efe  00000000  00000000  0003a156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092400  00000000  00000000  0004e054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0454  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048fc  00000000  00000000  000e0498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e4d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c1c 	.word	0x08006c1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006c1c 	.word	0x08006c1c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <MX_FREERTOS_Init+0x18>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	4804      	ldr	r0, [pc, #16]	@ (80005e8 <MX_FREERTOS_Init+0x1c>)
 80005d6:	f002 fe13 	bl	8003200 <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a03      	ldr	r2, [pc, #12]	@ (80005ec <MX_FREERTOS_Init+0x20>)
 80005de:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08006d98 	.word	0x08006d98
 80005e8:	080005f1 	.word	0x080005f1
 80005ec:	20000088 	.word	0x20000088

080005f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f002 fe93 	bl	8003324 <osDelay>
 80005fe:	e7fb      	b.n	80005f8 <StartDefaultTask+0x8>

08000600 <vFSMTask>:


static SystemState_t currentState = STATE_OFF;

void vFSMTask(void *pvParameters)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    SystemEvent_t evt;

    printf("FSM: Task started. State = STATE_OFF\r\n");
 8000608:	485c      	ldr	r0, [pc, #368]	@ (800077c <vFSMTask+0x17c>)
 800060a:	f005 fc97 	bl	8005f3c <puts>

    for (;;) {
        if (xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdPASS) {
 800060e:	4b5c      	ldr	r3, [pc, #368]	@ (8000780 <vFSMTask+0x180>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f107 010f 	add.w	r1, r7, #15
 8000616:	f04f 32ff 	mov.w	r2, #4294967295
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fa6c 	bl	8003af8 <xQueueReceive>
 8000620:	4603      	mov	r3, r0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d1f3      	bne.n	800060e <vFSMTask+0xe>
            printf("FSM: Received event %d in state %d\r\n", (int)evt, (int)currentState);
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4619      	mov	r1, r3
 800062a:	4b56      	ldr	r3, [pc, #344]	@ (8000784 <vFSMTask+0x184>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	4855      	ldr	r0, [pc, #340]	@ (8000788 <vFSMTask+0x188>)
 8000632:	f005 fc1b 	bl	8005e6c <iprintf>

            switch (currentState) {
 8000636:	4b53      	ldr	r3, [pc, #332]	@ (8000784 <vFSMTask+0x184>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d8e7      	bhi.n	800060e <vFSMTask+0xe>
 800063e:	a201      	add	r2, pc, #4	@ (adr r2, 8000644 <vFSMTask+0x44>)
 8000640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000644:	0800065d 	.word	0x0800065d
 8000648:	0800067d 	.word	0x0800067d
 800064c:	080006b5 	.word	0x080006b5
 8000650:	080006fb 	.word	0x080006fb
 8000654:	0800072d 	.word	0x0800072d
 8000658:	0800075f 	.word	0x0800075f
                case STATE_OFF:
                    if (evt == EVENT_RESET) {
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b02      	cmp	r3, #2
 8000660:	f040 8081 	bne.w	8000766 <vFSMTask+0x166>
                        currentState = STATE_IDLE;
 8000664:	4b47      	ldr	r3, [pc, #284]	@ (8000784 <vFSMTask+0x184>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_IDLE\r\n");
 800066a:	4848      	ldr	r0, [pc, #288]	@ (800078c <vFSMTask+0x18c>)
 800066c:	f005 fc66 	bl	8005f3c <puts>
                        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // LED on = idle
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	4846      	ldr	r0, [pc, #280]	@ (8000790 <vFSMTask+0x190>)
 8000676:	f001 f80f 	bl	8001698 <HAL_GPIO_WritePin>
                    }
                    break;
 800067a:	e074      	b.n	8000766 <vFSMTask+0x166>

                case STATE_IDLE:
                    if (evt == EVENT_BTN_PRESSED || evt == EVENT_DRIVING_STARTED) {
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d002      	beq.n	8000688 <vFSMTask+0x88>
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	2b04      	cmp	r3, #4
 8000686:	d10b      	bne.n	80006a0 <vFSMTask+0xa0>
                        currentState = STATE_BUSY;
 8000688:	4b3e      	ldr	r3, [pc, #248]	@ (8000784 <vFSMTask+0x184>)
 800068a:	2202      	movs	r2, #2
 800068c:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_BUSY\r\n");
 800068e:	4841      	ldr	r0, [pc, #260]	@ (8000794 <vFSMTask+0x194>)
 8000690:	f005 fc54 	bl	8005f3c <puts>
                        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // LED off = busy
 8000694:	2200      	movs	r2, #0
 8000696:	2120      	movs	r1, #32
 8000698:	483d      	ldr	r0, [pc, #244]	@ (8000790 <vFSMTask+0x190>)
 800069a:	f000 fffd 	bl	8001698 <HAL_GPIO_WritePin>
                    } else if (evt == EVENT_FLT_DETECTED) {
                        currentState = STATE_ERROR;
                        printf("FSM: -> STATE_ERROR\r\n");
                    }
                    break;
 800069e:	e064      	b.n	800076a <vFSMTask+0x16a>
                    } else if (evt == EVENT_FLT_DETECTED) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	2b06      	cmp	r3, #6
 80006a4:	d161      	bne.n	800076a <vFSMTask+0x16a>
                        currentState = STATE_ERROR;
 80006a6:	4b37      	ldr	r3, [pc, #220]	@ (8000784 <vFSMTask+0x184>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_ERROR\r\n");
 80006ac:	483a      	ldr	r0, [pc, #232]	@ (8000798 <vFSMTask+0x198>)
 80006ae:	f005 fc45 	bl	8005f3c <puts>
                    break;
 80006b2:	e05a      	b.n	800076a <vFSMTask+0x16a>

                case STATE_BUSY:
                    if (evt == EVENT_MOTION_COMPLETED) {
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d10b      	bne.n	80006d2 <vFSMTask+0xd2>
                        currentState = STATE_IDLE;
 80006ba:	4b32      	ldr	r3, [pc, #200]	@ (8000784 <vFSMTask+0x184>)
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_IDLE\r\n");
 80006c0:	4832      	ldr	r0, [pc, #200]	@ (800078c <vFSMTask+0x18c>)
 80006c2:	f005 fc3b 	bl	8005f3c <puts>
                        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2120      	movs	r1, #32
 80006ca:	4831      	ldr	r0, [pc, #196]	@ (8000790 <vFSMTask+0x190>)
 80006cc:	f000 ffe4 	bl	8001698 <HAL_GPIO_WritePin>
                        printf("FSM: -> STATE_LOCKED\r\n");
                    } else if (evt == EVENT_FLT_DETECTED) {
                        currentState = STATE_ERROR;
                        printf("FSM: -> STATE_ERROR\r\n");
                    }
                    break;
 80006d0:	e04d      	b.n	800076e <vFSMTask+0x16e>
                    } else if (evt == EVENT_DRIVING_STARTED) {
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d106      	bne.n	80006e6 <vFSMTask+0xe6>
                        currentState = STATE_LOCKED;
 80006d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <vFSMTask+0x184>)
 80006da:	2203      	movs	r2, #3
 80006dc:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_LOCKED\r\n");
 80006de:	482f      	ldr	r0, [pc, #188]	@ (800079c <vFSMTask+0x19c>)
 80006e0:	f005 fc2c 	bl	8005f3c <puts>
                    break;
 80006e4:	e043      	b.n	800076e <vFSMTask+0x16e>
                    } else if (evt == EVENT_FLT_DETECTED) {
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	2b06      	cmp	r3, #6
 80006ea:	d140      	bne.n	800076e <vFSMTask+0x16e>
                        currentState = STATE_ERROR;
 80006ec:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <vFSMTask+0x184>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_ERROR\r\n");
 80006f2:	4829      	ldr	r0, [pc, #164]	@ (8000798 <vFSMTask+0x198>)
 80006f4:	f005 fc22 	bl	8005f3c <puts>
                    break;
 80006f8:	e039      	b.n	800076e <vFSMTask+0x16e>

                case STATE_LOCKED:
                    if (evt == EVENT_STOP) {
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	2b05      	cmp	r3, #5
 80006fe:	d10b      	bne.n	8000718 <vFSMTask+0x118>
                        currentState = STATE_IDLE;
 8000700:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <vFSMTask+0x184>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_IDLE\r\n");
 8000706:	4821      	ldr	r0, [pc, #132]	@ (800078c <vFSMTask+0x18c>)
 8000708:	f005 fc18 	bl	8005f3c <puts>
                        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2120      	movs	r1, #32
 8000710:	481f      	ldr	r0, [pc, #124]	@ (8000790 <vFSMTask+0x190>)
 8000712:	f000 ffc1 	bl	8001698 <HAL_GPIO_WritePin>
                    } else if (evt == EVENT_FLT_DETECTED) {
                        currentState = STATE_ERROR;
                        printf("FSM: -> STATE_ERROR\r\n");
                    }
                    break;
 8000716:	e02c      	b.n	8000772 <vFSMTask+0x172>
                    } else if (evt == EVENT_FLT_DETECTED) {
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b06      	cmp	r3, #6
 800071c:	d129      	bne.n	8000772 <vFSMTask+0x172>
                        currentState = STATE_ERROR;
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <vFSMTask+0x184>)
 8000720:	2204      	movs	r2, #4
 8000722:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_ERROR\r\n");
 8000724:	481c      	ldr	r0, [pc, #112]	@ (8000798 <vFSMTask+0x198>)
 8000726:	f005 fc09 	bl	8005f3c <puts>
                    break;
 800072a:	e022      	b.n	8000772 <vFSMTask+0x172>

                case STATE_ERROR:
                    if (evt == EVENT_PERM_ERROR) {
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b07      	cmp	r3, #7
 8000730:	d106      	bne.n	8000740 <vFSMTask+0x140>
                        currentState = STATE_PERM_ERROR;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <vFSMTask+0x184>)
 8000734:	2205      	movs	r2, #5
 8000736:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_PERM_ERROR\r\n");
 8000738:	4819      	ldr	r0, [pc, #100]	@ (80007a0 <vFSMTask+0x1a0>)
 800073a:	f005 fbff 	bl	8005f3c <puts>
                    } else if (evt == EVENT_RESET) {
                        currentState = STATE_IDLE;
                        printf("FSM: -> STATE_IDLE (recovered)\r\n");
                        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
                    }
                    break;
 800073e:	e01a      	b.n	8000776 <vFSMTask+0x176>
                    } else if (evt == EVENT_RESET) {
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b02      	cmp	r3, #2
 8000744:	d117      	bne.n	8000776 <vFSMTask+0x176>
                        currentState = STATE_IDLE;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <vFSMTask+0x184>)
 8000748:	2201      	movs	r2, #1
 800074a:	701a      	strb	r2, [r3, #0]
                        printf("FSM: -> STATE_IDLE (recovered)\r\n");
 800074c:	4815      	ldr	r0, [pc, #84]	@ (80007a4 <vFSMTask+0x1a4>)
 800074e:	f005 fbf5 	bl	8005f3c <puts>
                        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2120      	movs	r1, #32
 8000756:	480e      	ldr	r0, [pc, #56]	@ (8000790 <vFSMTask+0x190>)
 8000758:	f000 ff9e 	bl	8001698 <HAL_GPIO_WritePin>
                    break;
 800075c:	e00b      	b.n	8000776 <vFSMTask+0x176>

                case STATE_PERM_ERROR:
                    // Stay here until board reset
                    printf("FSM: PERM ERROR - manual reset needed\r\n");
 800075e:	4812      	ldr	r0, [pc, #72]	@ (80007a8 <vFSMTask+0x1a8>)
 8000760:	f005 fbec 	bl	8005f3c <puts>
                    break;
 8000764:	e009      	b.n	800077a <vFSMTask+0x17a>
                    break;
 8000766:	bf00      	nop
 8000768:	e751      	b.n	800060e <vFSMTask+0xe>
                    break;
 800076a:	bf00      	nop
 800076c:	e74f      	b.n	800060e <vFSMTask+0xe>
                    break;
 800076e:	bf00      	nop
 8000770:	e74d      	b.n	800060e <vFSMTask+0xe>
                    break;
 8000772:	bf00      	nop
 8000774:	e74b      	b.n	800060e <vFSMTask+0xe>
                    break;
 8000776:	bf00      	nop
 8000778:	e749      	b.n	800060e <vFSMTask+0xe>
        if (xQueueReceive(xEventQueue, &evt, portMAX_DELAY) == pdPASS) {
 800077a:	e748      	b.n	800060e <vFSMTask+0xe>
 800077c:	08006c40 	.word	0x08006c40
 8000780:	20000090 	.word	0x20000090
 8000784:	2000008c 	.word	0x2000008c
 8000788:	08006c68 	.word	0x08006c68
 800078c:	08006c90 	.word	0x08006c90
 8000790:	40020000 	.word	0x40020000
 8000794:	08006ca4 	.word	0x08006ca4
 8000798:	08006cb8 	.word	0x08006cb8
 800079c:	08006cd0 	.word	0x08006cd0
 80007a0:	08006ce8 	.word	0x08006ce8
 80007a4:	08006d04 	.word	0x08006d04
 80007a8:	08006d24 	.word	0x08006d24

080007ac <FSM_Init>:
}

QueueHandle_t xEventQueue = NULL;   // single definition here

/* initializer to be called from main before vTaskStartScheduler */
void FSM_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af02      	add	r7, sp, #8
    xEventQueue = xQueueCreate(10, sizeof(SystemEvent_t));
 80007b2:	2200      	movs	r2, #0
 80007b4:	2101      	movs	r1, #1
 80007b6:	200a      	movs	r0, #10
 80007b8:	f002 ff9f 	bl	80036fa <xQueueGenericCreate>
 80007bc:	4603      	mov	r3, r0
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <FSM_Init+0x34>)
 80007c0:	6013      	str	r3, [r2, #0]
    xTaskCreate(vFSMTask, "FSM", 256, NULL, 2, NULL);
 80007c2:	2300      	movs	r3, #0
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	2302      	movs	r3, #2
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007d0:	4904      	ldr	r1, [pc, #16]	@ (80007e4 <FSM_Init+0x38>)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <FSM_Init+0x3c>)
 80007d4:	f003 fc40 	bl	8004058 <xTaskCreate>
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000090 	.word	0x20000090
 80007e4:	08006d4c 	.word	0x08006d4c
 80007e8:	08000601 	.word	0x08000601

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	@ 0x28
 80007f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b31      	ldr	r3, [pc, #196]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a30      	ldr	r2, [pc, #192]	@ (80008cc <MX_GPIO_Init+0xe0>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a29      	ldr	r2, [pc, #164]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b27      	ldr	r3, [pc, #156]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a22      	ldr	r2, [pc, #136]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <MX_GPIO_Init+0xe0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b1c      	ldr	r3, [pc, #112]	@ (80008cc <MX_GPIO_Init+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a1b      	ldr	r2, [pc, #108]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b19      	ldr	r3, [pc, #100]	@ (80008cc <MX_GPIO_Init+0xe0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 8000878:	f000 ff0e 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000882:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	4810      	ldr	r0, [pc, #64]	@ (80008d4 <MX_GPIO_Init+0xe8>)
 8000894:	f000 fd7c 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000898:	2320      	movs	r3, #32
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4808      	ldr	r0, [pc, #32]	@ (80008d0 <MX_GPIO_Init+0xe4>)
 80008b0:	f000 fd6e 	bl	8001390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2105      	movs	r1, #5
 80008b8:	2028      	movs	r0, #40	@ 0x28
 80008ba:	f000 fca0 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008be:	2028      	movs	r0, #40	@ 0x28
 80008c0:	f000 fcb9 	bl	8001236 <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	@ 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020800 	.word	0x40020800

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fb42 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f81a 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f7ff ff82 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e8:	f000 fa98 	bl	8000e1c <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1);  // if using UART command parsing
 80008ec:	2201      	movs	r2, #1
 80008ee:	4908      	ldr	r1, [pc, #32]	@ (8000910 <main+0x38>)
 80008f0:	4808      	ldr	r0, [pc, #32]	@ (8000914 <main+0x3c>)
 80008f2:	f001 fc76 	bl	80021e2 <HAL_UART_Receive_IT>
  FSM_Init();  // create queue + task
 80008f6:	f7ff ff59 	bl	80007ac <FSM_Init>
  /* then start scheduler */
  vTaskStartScheduler();
 80008fa:	f003 fd29 	bl	8004350 <vTaskStartScheduler>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in cmsis_os2.c) */
 80008fe:	f002 fc35 	bl	800316c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000902:	f7ff fe63 	bl	80005cc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000906:	f002 fc55 	bl	80031b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800090a:	bf00      	nop
 800090c:	e7fd      	b.n	800090a <main+0x32>
 800090e:	bf00      	nop
 8000910:	20000094 	.word	0x20000094
 8000914:	200000bc 	.word	0x200000bc

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	@ 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	@ 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f005 fbe8 	bl	80060fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a27      	ldr	r2, [pc, #156]	@ (80009e4 <SystemClock_Config+0xcc>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b22      	ldr	r3, [pc, #136]	@ (80009e8 <SystemClock_Config+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a21      	ldr	r2, [pc, #132]	@ (80009e8 <SystemClock_Config+0xd0>)
 8000962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <SystemClock_Config+0xd0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800097c:	2310      	movs	r3, #16
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000980:	2302      	movs	r3, #2
 8000982:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000984:	2300      	movs	r3, #0
 8000986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000988:	2310      	movs	r3, #16
 800098a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800098c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000990:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000992:	2304      	movs	r3, #4
 8000994:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000996:	2304      	movs	r3, #4
 8000998:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0320 	add.w	r3, r7, #32
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 feac 	bl	80016fc <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009aa:	f000 f915 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	230f      	movs	r3, #15
 80009b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b2:	2302      	movs	r3, #2
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	2102      	movs	r1, #2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 f90e 	bl	8001bec <HAL_RCC_ClockConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009d6:	f000 f8ff 	bl	8000bd8 <Error_Handler>
  }
}
 80009da:	bf00      	nop
 80009dc:	3750      	adds	r7, #80	@ 0x50
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
    if (GPIO_Pin == B1_Pin) {
 80009fa:	88fb      	ldrh	r3, [r7, #6]
 80009fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a00:	d115      	bne.n	8000a2e <HAL_GPIO_EXTI_Callback+0x42>
        SystemEvent_t ev = EVENT_BTN_PRESSED;
 8000a02:	2301      	movs	r3, #1
 8000a04:	72fb      	strb	r3, [r7, #11]
        xQueueSendFromISR(xEventQueue, &ev, &xHigherPriorityTaskWoken);
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	f107 020c 	add.w	r2, r7, #12
 8000a0e:	f107 010b 	add.w	r1, r7, #11
 8000a12:	2300      	movs	r3, #0
 8000a14:	f002 ffd2 	bl	80039bc <xQueueGenericSendFromISR>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <HAL_GPIO_EXTI_Callback+0x42>
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <HAL_GPIO_EXTI_Callback+0x50>)
 8000a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	f3bf 8f4f 	dsb	sy
 8000a2a:	f3bf 8f6f 	isb	sy
    }
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000090 	.word	0x20000090
 8000a3c:	e000ed04 	.word	0xe000ed04

08000a40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
    static char cmd[32];
    static uint8_t idx = 0;

    if (huart->Instance == USART2) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a54      	ldr	r2, [pc, #336]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x164>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	f040 80a2 	bne.w	8000b9c <HAL_UART_RxCpltCallback+0x15c>
        if (uart_rx_byte == '\n' || uart_rx_byte == '\r') {
 8000a58:	4b53      	ldr	r3, [pc, #332]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x168>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d003      	beq.n	8000a68 <HAL_UART_RxCpltCallback+0x28>
 8000a60:	4b51      	ldr	r3, [pc, #324]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x168>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b0d      	cmp	r3, #13
 8000a66:	d17a      	bne.n	8000b5e <HAL_UART_RxCpltCallback+0x11e>
            cmd[idx] = '\0';
 8000a68:	4b50      	ldr	r3, [pc, #320]	@ (8000bac <HAL_UART_RxCpltCallback+0x16c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4b50      	ldr	r3, [pc, #320]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x170>)
 8000a70:	2100      	movs	r1, #0
 8000a72:	5499      	strb	r1, [r3, r2]

            if (strcmp(cmd, "start") == 0) {
 8000a74:	494f      	ldr	r1, [pc, #316]	@ (8000bb4 <HAL_UART_RxCpltCallback+0x174>)
 8000a76:	484e      	ldr	r0, [pc, #312]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x170>)
 8000a78:	f7ff fbb2 	bl	80001e0 <strcmp>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10b      	bne.n	8000a9a <HAL_UART_RxCpltCallback+0x5a>
                SystemEvent_t e = EVENT_DRIVING_STARTED;
 8000a82:	2304      	movs	r3, #4
 8000a84:	74fb      	strb	r3, [r7, #19]
                xQueueSendFromISR(xEventQueue, &e, &xHigherPriorityTaskWoken);
 8000a86:	4b4c      	ldr	r3, [pc, #304]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x178>)
 8000a88:	6818      	ldr	r0, [r3, #0]
 8000a8a:	f107 0214 	add.w	r2, r7, #20
 8000a8e:	f107 0113 	add.w	r1, r7, #19
 8000a92:	2300      	movs	r3, #0
 8000a94:	f002 ff92 	bl	80039bc <xQueueGenericSendFromISR>
 8000a98:	e05d      	b.n	8000b56 <HAL_UART_RxCpltCallback+0x116>
            } else if (strcmp(cmd, "stop") == 0) {
 8000a9a:	4948      	ldr	r1, [pc, #288]	@ (8000bbc <HAL_UART_RxCpltCallback+0x17c>)
 8000a9c:	4844      	ldr	r0, [pc, #272]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x170>)
 8000a9e:	f7ff fb9f 	bl	80001e0 <strcmp>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10b      	bne.n	8000ac0 <HAL_UART_RxCpltCallback+0x80>
                SystemEvent_t e = EVENT_STOP;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	74bb      	strb	r3, [r7, #18]
                xQueueSendFromISR(xEventQueue, &e, &xHigherPriorityTaskWoken);
 8000aac:	4b42      	ldr	r3, [pc, #264]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x178>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	f107 0214 	add.w	r2, r7, #20
 8000ab4:	f107 0112 	add.w	r1, r7, #18
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f002 ff7f 	bl	80039bc <xQueueGenericSendFromISR>
 8000abe:	e04a      	b.n	8000b56 <HAL_UART_RxCpltCallback+0x116>
            } else if (strcmp(cmd, "done") == 0) {
 8000ac0:	493f      	ldr	r1, [pc, #252]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x180>)
 8000ac2:	483b      	ldr	r0, [pc, #236]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x170>)
 8000ac4:	f7ff fb8c 	bl	80001e0 <strcmp>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10b      	bne.n	8000ae6 <HAL_UART_RxCpltCallback+0xa6>
                SystemEvent_t e = EVENT_MOTION_COMPLETED;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	747b      	strb	r3, [r7, #17]
                xQueueSendFromISR(xEventQueue, &e, &xHigherPriorityTaskWoken);
 8000ad2:	4b39      	ldr	r3, [pc, #228]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x178>)
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	f107 0214 	add.w	r2, r7, #20
 8000ada:	f107 0111 	add.w	r1, r7, #17
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f002 ff6c 	bl	80039bc <xQueueGenericSendFromISR>
 8000ae4:	e037      	b.n	8000b56 <HAL_UART_RxCpltCallback+0x116>
            } else if (strcmp(cmd, "fault") == 0) {
 8000ae6:	4937      	ldr	r1, [pc, #220]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x184>)
 8000ae8:	4831      	ldr	r0, [pc, #196]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x170>)
 8000aea:	f7ff fb79 	bl	80001e0 <strcmp>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10b      	bne.n	8000b0c <HAL_UART_RxCpltCallback+0xcc>
                SystemEvent_t e = EVENT_FLT_DETECTED;
 8000af4:	2306      	movs	r3, #6
 8000af6:	743b      	strb	r3, [r7, #16]
                xQueueSendFromISR(xEventQueue, &e, &xHigherPriorityTaskWoken);
 8000af8:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x178>)
 8000afa:	6818      	ldr	r0, [r3, #0]
 8000afc:	f107 0214 	add.w	r2, r7, #20
 8000b00:	f107 0110 	add.w	r1, r7, #16
 8000b04:	2300      	movs	r3, #0
 8000b06:	f002 ff59 	bl	80039bc <xQueueGenericSendFromISR>
 8000b0a:	e024      	b.n	8000b56 <HAL_UART_RxCpltCallback+0x116>
            } else if (strcmp(cmd, "reset") == 0) {
 8000b0c:	492e      	ldr	r1, [pc, #184]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x188>)
 8000b0e:	4828      	ldr	r0, [pc, #160]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x170>)
 8000b10:	f7ff fb66 	bl	80001e0 <strcmp>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10b      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0xf2>
                SystemEvent_t e = EVENT_RESET;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	73fb      	strb	r3, [r7, #15]
                xQueueSendFromISR(xEventQueue, &e, &xHigherPriorityTaskWoken);
 8000b1e:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x178>)
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	f107 0214 	add.w	r2, r7, #20
 8000b26:	f107 010f 	add.w	r1, r7, #15
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f002 ff46 	bl	80039bc <xQueueGenericSendFromISR>
 8000b30:	e011      	b.n	8000b56 <HAL_UART_RxCpltCallback+0x116>
            } else if (strcmp(cmd, "perm") == 0) {
 8000b32:	4926      	ldr	r1, [pc, #152]	@ (8000bcc <HAL_UART_RxCpltCallback+0x18c>)
 8000b34:	481e      	ldr	r0, [pc, #120]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x170>)
 8000b36:	f7ff fb53 	bl	80001e0 <strcmp>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d10a      	bne.n	8000b56 <HAL_UART_RxCpltCallback+0x116>
                SystemEvent_t e = EVENT_PERM_ERROR;
 8000b40:	2307      	movs	r3, #7
 8000b42:	73bb      	strb	r3, [r7, #14]
                xQueueSendFromISR(xEventQueue, &e, &xHigherPriorityTaskWoken);
 8000b44:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x178>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	f107 0214 	add.w	r2, r7, #20
 8000b4c:	f107 010e 	add.w	r1, r7, #14
 8000b50:	2300      	movs	r3, #0
 8000b52:	f002 ff33 	bl	80039bc <xQueueGenericSendFromISR>
            }

            idx = 0; // reset buffer
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <HAL_UART_RxCpltCallback+0x16c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
 8000b5c:	e00e      	b.n	8000b7c <HAL_UART_RxCpltCallback+0x13c>
        } else {
            if (idx < sizeof(cmd) - 1) cmd[idx++] = (char)uart_rx_byte;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <HAL_UART_RxCpltCallback+0x16c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b1e      	cmp	r3, #30
 8000b64:	d80a      	bhi.n	8000b7c <HAL_UART_RxCpltCallback+0x13c>
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <HAL_UART_RxCpltCallback+0x16c>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	b2d1      	uxtb	r1, r2
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <HAL_UART_RxCpltCallback+0x16c>)
 8000b70:	7011      	strb	r1, [r2, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x168>)
 8000b76:	7819      	ldrb	r1, [r3, #0]
 8000b78:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x170>)
 8000b7a:	5499      	strb	r1, [r3, r2]
        }

        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d007      	beq.n	8000b92 <HAL_UART_RxCpltCallback+0x152>
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <HAL_UART_RxCpltCallback+0x190>)
 8000b84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	f3bf 8f4f 	dsb	sy
 8000b8e:	f3bf 8f6f 	isb	sy
        HAL_UART_Receive_IT(&huart2, &uart_rx_byte, 1); // restart RX
 8000b92:	2201      	movs	r2, #1
 8000b94:	4904      	ldr	r1, [pc, #16]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x168>)
 8000b96:	480f      	ldr	r0, [pc, #60]	@ (8000bd4 <HAL_UART_RxCpltCallback+0x194>)
 8000b98:	f001 fb23 	bl	80021e2 <HAL_UART_Receive_IT>
    }
}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	20000094 	.word	0x20000094
 8000bac:	20000095 	.word	0x20000095
 8000bb0:	20000098 	.word	0x20000098
 8000bb4:	08006d50 	.word	0x08006d50
 8000bb8:	20000090 	.word	0x20000090
 8000bbc:	08006d58 	.word	0x08006d58
 8000bc0:	08006d60 	.word	0x08006d60
 8000bc4:	08006d68 	.word	0x08006d68
 8000bc8:	08006d70 	.word	0x08006d70
 8000bcc:	08006d78 	.word	0x08006d78
 8000bd0:	e000ed04 	.word	0xe000ed04
 8000bd4:	200000bc 	.word	0x200000bc

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <Error_Handler+0x8>

08000be4 <_write>:
#include "usart.h"  // provides huart2
#include "stm32f4xx_hal.h"

/* GCC/ARM newlib low-level write */
int _write(int file, char *ptr, int len)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
    /* transmit via HAL UART blocking */
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	4807      	ldr	r0, [pc, #28]	@ (8000c18 <_write+0x34>)
 8000bfc:	f001 fa66 	bl	80020cc <HAL_UART_Transmit>
 8000c00:	4603      	mov	r3, r0
 8000c02:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK) ? len : 0;
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d101      	bne.n	8000c0e <_write+0x2a>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	e000      	b.n	8000c10 <_write+0x2c>
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000bc 	.word	0x200000bc

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	4a11      	ldr	r2, [pc, #68]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c32:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_MspInit+0x54>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	f06f 0001 	mvn.w	r0, #1
 8000c62:	f000 facc 	bl	80011fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cae:	f000 f9ab 	bl	8001008 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cb2:	f003 ff9b 	bl	8004bec <xTaskGetSchedulerState>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d001      	beq.n	8000cc0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cbc:	f004 fd94 	bl	80057e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <USART2_IRQHandler+0x10>)
 8000cca:	f001 faaf 	bl	800222c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000bc 	.word	0x200000bc

08000cd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cdc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ce0:	f000 fcf4 	bl	80016cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
  }

  return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b083      	sub	sp, #12
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_isatty>:

int _isatty(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d62:	2301      	movs	r3, #1
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	@ (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f005 f9ec 	bl	8006198 <__errno>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20020000 	.word	0x20020000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	200000b8 	.word	0x200000b8
 8000df4:	20004ba8 	.word	0x20004ba8

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	@ (8000e6c <MX_USART2_UART_Init+0x50>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e26:	4b10      	ldr	r3, [pc, #64]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f001 f8ea 	bl	800202c <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5e:	f7ff febb 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000bc 	.word	0x200000bc
 8000e6c:	40004400 	.word	0x40004400

08000e70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f04 <HAL_UART_MspInit+0x94>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d133      	bne.n	8000efa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <HAL_UART_MspInit+0x98>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <HAL_UART_MspInit+0x98>)
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_UART_MspInit+0x98>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <HAL_UART_MspInit+0x98>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a14      	ldr	r2, [pc, #80]	@ (8000f08 <HAL_UART_MspInit+0x98>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <HAL_UART_MspInit+0x98>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eda:	2307      	movs	r3, #7
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <HAL_UART_MspInit+0x9c>)
 8000ee6:	f000 fa53 	bl	8001390 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	2026      	movs	r0, #38	@ 0x26
 8000ef0:	f000 f985 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef4:	2026      	movs	r0, #38	@ 0x26
 8000ef6:	f000 f99e 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	@ 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f14:	f7ff ff70 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	@ (8000f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	@ (8000f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	@ (8000f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f005 f931 	bl	80061a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fcc9 	bl	80008d8 <main>
  bx  lr    
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f54:	08006e18 	.word	0x08006e18
  ldr r2, =_sbss
 8000f58:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f5c:	20004ba4 	.word	0x20004ba4

08000f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f68:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa4 <HAL_Init+0x40>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f74:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa4 <HAL_Init+0x40>)
 8000f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <HAL_Init+0x40>)
 8000f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f92b 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	200f      	movs	r0, #15
 8000f94:	f000 f808 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fe40 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40023c00 	.word	0x40023c00

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f943 	bl	8001252 <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 f90b 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	@ (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000000 	.word	0x20000000
 8001000:	20000008 	.word	0x20000008
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008
 800102c:	20000104 	.word	0x20000104

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000104 	.word	0x20000104

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	@ (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	@ (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	@ (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	@ (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	@ 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff feda 	bl	8001030 <HAL_GetTick>
 800127c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d008      	beq.n	800129c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2280      	movs	r2, #128	@ 0x80
 800128e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e052      	b.n	8001342 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0216 	bic.w	r2, r2, #22
 80012aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	695a      	ldr	r2, [r3, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d103      	bne.n	80012cc <HAL_DMA_Abort+0x62>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d007      	beq.n	80012dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0208 	bic.w	r2, r2, #8
 80012da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ec:	e013      	b.n	8001316 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ee:	f7ff fe9f 	bl	8001030 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	d90c      	bls.n	8001316 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2220      	movs	r2, #32
 8001300:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2203      	movs	r2, #3
 8001306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e015      	b.n	8001342 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e4      	bne.n	80012ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001328:	223f      	movs	r2, #63	@ 0x3f
 800132a:	409a      	lsls	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d004      	beq.n	8001368 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2280      	movs	r2, #128	@ 0x80
 8001362:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e00c      	b.n	8001382 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2205      	movs	r2, #5
 800136c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e159      	b.n	8001660 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8148 	bne.w	800165a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d005      	beq.n	80013e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d130      	bne.n	8001444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	2203      	movs	r2, #3
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001418:	2201      	movs	r2, #1
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	091b      	lsrs	r3, r3, #4
 800142e:	f003 0201 	and.w	r2, r3, #1
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	fa02 f303 	lsl.w	r3, r2, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b03      	cmp	r3, #3
 800144e:	d017      	beq.n	8001480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a2 	beq.w	800165a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b57      	ldr	r3, [pc, #348]	@ (8001678 <HAL_GPIO_Init+0x2e8>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a56      	ldr	r2, [pc, #344]	@ (8001678 <HAL_GPIO_Init+0x2e8>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b54      	ldr	r3, [pc, #336]	@ (8001678 <HAL_GPIO_Init+0x2e8>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a52      	ldr	r2, [pc, #328]	@ (800167c <HAL_GPIO_Init+0x2ec>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a49      	ldr	r2, [pc, #292]	@ (8001680 <HAL_GPIO_Init+0x2f0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x202>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a48      	ldr	r2, [pc, #288]	@ (8001684 <HAL_GPIO_Init+0x2f4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x1fe>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a47      	ldr	r2, [pc, #284]	@ (8001688 <HAL_GPIO_Init+0x2f8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x1fa>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a46      	ldr	r2, [pc, #280]	@ (800168c <HAL_GPIO_Init+0x2fc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x1f6>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a45      	ldr	r2, [pc, #276]	@ (8001690 <HAL_GPIO_Init+0x300>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x1f2>
 800157e:	2304      	movs	r3, #4
 8001580:	e008      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001582:	2307      	movs	r3, #7
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001586:	2303      	movs	r3, #3
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x204>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x204>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x204>
 8001592:	2300      	movs	r3, #0
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f002 0203 	and.w	r2, r2, #3
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	@ (800167c <HAL_GPIO_Init+0x2ec>)
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b38      	ldr	r3, [pc, #224]	@ (8001694 <HAL_GPIO_Init+0x304>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001694 <HAL_GPIO_Init+0x304>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001694 <HAL_GPIO_Init+0x304>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001600:	4a24      	ldr	r2, [pc, #144]	@ (8001694 <HAL_GPIO_Init+0x304>)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001606:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <HAL_GPIO_Init+0x304>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800162a:	4a1a      	ldr	r2, [pc, #104]	@ (8001694 <HAL_GPIO_Init+0x304>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <HAL_GPIO_Init+0x304>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001654:	4a0f      	ldr	r2, [pc, #60]	@ (8001694 <HAL_GPIO_Init+0x304>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	2b0f      	cmp	r3, #15
 8001664:	f67f aea2 	bls.w	80013ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3724      	adds	r7, #36	@ 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40013800 	.word	0x40013800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800
 800168c:	40020c00 	.word	0x40020c00
 8001690:	40021000 	.word	0x40021000
 8001694:	40013c00 	.word	0x40013c00

08001698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
 80016a4:	4613      	mov	r3, r2
 80016a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ae:	887a      	ldrh	r2, [r7, #2]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016b4:	e003      	b.n	80016be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	041a      	lsls	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80016d6:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f97e 	bl	80009ec <HAL_GPIO_EXTI_Callback>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40013c00 	.word	0x40013c00

080016fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e267      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d075      	beq.n	8001806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800171a:	4b88      	ldr	r3, [pc, #544]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b04      	cmp	r3, #4
 8001724:	d00c      	beq.n	8001740 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001726:	4b85      	ldr	r3, [pc, #532]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800172e:	2b08      	cmp	r3, #8
 8001730:	d112      	bne.n	8001758 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001732:	4b82      	ldr	r3, [pc, #520]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800173e:	d10b      	bne.n	8001758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	4b7e      	ldr	r3, [pc, #504]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d05b      	beq.n	8001804 <HAL_RCC_OscConfig+0x108>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d157      	bne.n	8001804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e242      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001760:	d106      	bne.n	8001770 <HAL_RCC_OscConfig+0x74>
 8001762:	4b76      	ldr	r3, [pc, #472]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a75      	ldr	r2, [pc, #468]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xb0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x98>
 800177a:	4b70      	ldr	r3, [pc, #448]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6f      	ldr	r2, [pc, #444]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b6d      	ldr	r3, [pc, #436]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6c      	ldr	r2, [pc, #432]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xb0>
 8001794:	4b69      	ldr	r3, [pc, #420]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a68      	ldr	r2, [pc, #416]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b66      	ldr	r3, [pc, #408]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a65      	ldr	r2, [pc, #404]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fc3c 	bl	8001030 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fc38 	bl	8001030 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	@ 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e207      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b5b      	ldr	r3, [pc, #364]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xc0>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fc28 	bl	8001030 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fc24 	bl	8001030 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	@ 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1f3      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b51      	ldr	r3, [pc, #324]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0xe8>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001812:	4b4a      	ldr	r3, [pc, #296]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181e:	4b47      	ldr	r3, [pc, #284]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001826:	2b08      	cmp	r3, #8
 8001828:	d11c      	bne.n	8001864 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182a:	4b44      	ldr	r3, [pc, #272]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	4b41      	ldr	r3, [pc, #260]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x152>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1c7      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b3b      	ldr	r3, [pc, #236]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4937      	ldr	r1, [pc, #220]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e03a      	b.n	80018da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186c:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <HAL_RCC_OscConfig+0x244>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fbdd 	bl	8001030 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fbd9 	bl	8001030 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1a8      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b28      	ldr	r3, [pc, #160]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4925      	ldr	r1, [pc, #148]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b24      	ldr	r3, [pc, #144]	@ (8001940 <HAL_RCC_OscConfig+0x244>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fbbc 	bl	8001030 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fbb8 	bl	8001030 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e187      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d036      	beq.n	8001954 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d016      	beq.n	800191c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <HAL_RCC_OscConfig+0x248>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fb9c 	bl	8001030 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fb98 	bl	8001030 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e167      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_RCC_OscConfig+0x240>)
 8001910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x200>
 800191a:	e01b      	b.n	8001954 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_RCC_OscConfig+0x248>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fb85 	bl	8001030 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001928:	e00e      	b.n	8001948 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192a:	f7ff fb81 	bl	8001030 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d907      	bls.n	8001948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e150      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
 800193c:	40023800 	.word	0x40023800
 8001940:	42470000 	.word	0x42470000
 8001944:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	4b88      	ldr	r3, [pc, #544]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 800194a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ea      	bne.n	800192a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 8097 	beq.w	8001a90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001966:	4b81      	ldr	r3, [pc, #516]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10f      	bne.n	8001992 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	4b7d      	ldr	r3, [pc, #500]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 800197c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001980:	6413      	str	r3, [r2, #64]	@ 0x40
 8001982:	4b7a      	ldr	r3, [pc, #488]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198e:	2301      	movs	r3, #1
 8001990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b77      	ldr	r3, [pc, #476]	@ (8001b70 <HAL_RCC_OscConfig+0x474>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d118      	bne.n	80019d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800199e:	4b74      	ldr	r3, [pc, #464]	@ (8001b70 <HAL_RCC_OscConfig+0x474>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a73      	ldr	r2, [pc, #460]	@ (8001b70 <HAL_RCC_OscConfig+0x474>)
 80019a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb41 	bl	8001030 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b2:	f7ff fb3d 	bl	8001030 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e10c      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b70 <HAL_RCC_OscConfig+0x474>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d106      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2ea>
 80019d8:	4b64      	ldr	r3, [pc, #400]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019dc:	4a63      	ldr	r2, [pc, #396]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e4:	e01c      	b.n	8001a20 <HAL_RCC_OscConfig+0x324>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0x30c>
 80019ee:	4b5f      	ldr	r3, [pc, #380]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f2:	4a5e      	ldr	r2, [pc, #376]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019fa:	4b5c      	ldr	r3, [pc, #368]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fe:	4a5b      	ldr	r2, [pc, #364]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0x324>
 8001a08:	4b58      	ldr	r3, [pc, #352]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0c:	4a57      	ldr	r2, [pc, #348]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a14:	4b55      	ldr	r3, [pc, #340]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a18:	4a54      	ldr	r2, [pc, #336]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a1a:	f023 0304 	bic.w	r3, r3, #4
 8001a1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d015      	beq.n	8001a54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff fb02 	bl	8001030 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2e:	e00a      	b.n	8001a46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff fafe 	bl	8001030 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e0cb      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0ee      	beq.n	8001a30 <HAL_RCC_OscConfig+0x334>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff faec 	bl	8001030 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fae8 	bl	8001030 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0b5      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a72:	4b3e      	ldr	r3, [pc, #248]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ee      	bne.n	8001a5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a84:	4b39      	ldr	r3, [pc, #228]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	4a38      	ldr	r2, [pc, #224]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a1 	beq.w	8001bdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a9a:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d05c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d141      	bne.n	8001b32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b31      	ldr	r3, [pc, #196]	@ (8001b74 <HAL_RCC_OscConfig+0x478>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fabc 	bl	8001030 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fab8 	bl	8001030 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e087      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ace:	4b27      	ldr	r3, [pc, #156]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69da      	ldr	r2, [r3, #28]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a1b      	ldr	r3, [r3, #32]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae8:	019b      	lsls	r3, r3, #6
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	3b01      	subs	r3, #1
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	061b      	lsls	r3, r3, #24
 8001afe:	491b      	ldr	r1, [pc, #108]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b04:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <HAL_RCC_OscConfig+0x478>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fa91 	bl	8001030 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b12:	f7ff fa8d 	bl	8001030 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e05c      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b24:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d0f0      	beq.n	8001b12 <HAL_RCC_OscConfig+0x416>
 8001b30:	e054      	b.n	8001bdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <HAL_RCC_OscConfig+0x478>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fa7a 	bl	8001030 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff fa76 	bl	8001030 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e045      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_RCC_OscConfig+0x470>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x444>
 8001b5e:	e03d      	b.n	8001bdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e038      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40007000 	.word	0x40007000
 8001b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_RCC_OscConfig+0x4ec>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d028      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d121      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11a      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ba8:	4013      	ands	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d111      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbe:	085b      	lsrs	r3, r3, #1
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cc      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b68      	ldr	r3, [pc, #416]	@ (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d90c      	bls.n	8001c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b65      	ldr	r3, [pc, #404]	@ (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0b8      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	4b59      	ldr	r3, [pc, #356]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a58      	ldr	r2, [pc, #352]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c58:	4b53      	ldr	r3, [pc, #332]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a52      	ldr	r2, [pc, #328]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c64:	4b50      	ldr	r3, [pc, #320]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	494d      	ldr	r1, [pc, #308]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d044      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	4b47      	ldr	r3, [pc, #284]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e07f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	4b3f      	ldr	r3, [pc, #252]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e06f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cba:	4b3b      	ldr	r3, [pc, #236]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e067      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cca:	4b37      	ldr	r3, [pc, #220]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f023 0203 	bic.w	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4934      	ldr	r1, [pc, #208]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cdc:	f7ff f9a8 	bl	8001030 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	e00a      	b.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce4:	f7ff f9a4 	bl	8001030 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e04f      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 020c 	and.w	r2, r3, #12
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1eb      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d20c      	bcs.n	8001d34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b22      	ldr	r3, [pc, #136]	@ (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b20      	ldr	r3, [pc, #128]	@ (8001da4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0307 	and.w	r3, r3, #7
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e032      	b.n	8001d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d40:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4916      	ldr	r1, [pc, #88]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	490e      	ldr	r1, [pc, #56]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d72:	f000 f821 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	490a      	ldr	r1, [pc, #40]	@ (8001dac <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	5ccb      	ldrb	r3, [r1, r3]
 8001d86:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d8e:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f908 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08006dbc 	.word	0x08006dbc
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dbc:	b094      	sub	sp, #80	@ 0x50
 8001dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dd0:	4b79      	ldr	r3, [pc, #484]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d00d      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	f200 80e1 	bhi.w	8001fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x34>
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dea:	e0db      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dec:	4b73      	ldr	r3, [pc, #460]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8001dee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df0:	e0db      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001df2:	4b73      	ldr	r3, [pc, #460]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001df4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df6:	e0d8      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df8:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e00:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e02:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	099b      	lsrs	r3, r3, #6
 8001e14:	2200      	movs	r2, #0
 8001e16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e22:	2300      	movs	r3, #0
 8001e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	462b      	mov	r3, r5
 8001e2e:	f04f 0000 	mov.w	r0, #0
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	0159      	lsls	r1, r3, #5
 8001e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e3c:	0150      	lsls	r0, r2, #5
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4621      	mov	r1, r4
 8001e44:	1a51      	subs	r1, r2, r1
 8001e46:	6139      	str	r1, [r7, #16]
 8001e48:	4629      	mov	r1, r5
 8001e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e5c:	4659      	mov	r1, fp
 8001e5e:	018b      	lsls	r3, r1, #6
 8001e60:	4651      	mov	r1, sl
 8001e62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e66:	4651      	mov	r1, sl
 8001e68:	018a      	lsls	r2, r1, #6
 8001e6a:	4651      	mov	r1, sl
 8001e6c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e70:	4659      	mov	r1, fp
 8001e72:	eb63 0901 	sbc.w	r9, r3, r1
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e8a:	4690      	mov	r8, r2
 8001e8c:	4699      	mov	r9, r3
 8001e8e:	4623      	mov	r3, r4
 8001e90:	eb18 0303 	adds.w	r3, r8, r3
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	462b      	mov	r3, r5
 8001e98:	eb49 0303 	adc.w	r3, r9, r3
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eaa:	4629      	mov	r1, r5
 8001eac:	024b      	lsls	r3, r1, #9
 8001eae:	4621      	mov	r1, r4
 8001eb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	024a      	lsls	r2, r1, #9
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ec2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ec4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ec8:	f7fe f9ea 	bl	80002a0 <__aeabi_uldivmod>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ed4:	e058      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed6:	4b38      	ldr	r3, [pc, #224]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	099b      	lsrs	r3, r3, #6
 8001edc:	2200      	movs	r2, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ee6:	623b      	str	r3, [r7, #32]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ef0:	4642      	mov	r2, r8
 8001ef2:	464b      	mov	r3, r9
 8001ef4:	f04f 0000 	mov.w	r0, #0
 8001ef8:	f04f 0100 	mov.w	r1, #0
 8001efc:	0159      	lsls	r1, r3, #5
 8001efe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f02:	0150      	lsls	r0, r2, #5
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4641      	mov	r1, r8
 8001f0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f0e:	4649      	mov	r1, r9
 8001f10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f28:	ebb2 040a 	subs.w	r4, r2, sl
 8001f2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	00eb      	lsls	r3, r5, #3
 8001f3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f3e:	00e2      	lsls	r2, r4, #3
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4643      	mov	r3, r8
 8001f46:	18e3      	adds	r3, r4, r3
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	464b      	mov	r3, r9
 8001f4c:	eb45 0303 	adc.w	r3, r5, r3
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f5e:	4629      	mov	r1, r5
 8001f60:	028b      	lsls	r3, r1, #10
 8001f62:	4621      	mov	r1, r4
 8001f64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f68:	4621      	mov	r1, r4
 8001f6a:	028a      	lsls	r2, r1, #10
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f72:	2200      	movs	r2, #0
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	61fa      	str	r2, [r7, #28]
 8001f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f7c:	f7fe f990 	bl	80002a0 <__aeabi_uldivmod>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4613      	mov	r3, r2
 8001f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	0c1b      	lsrs	r3, r3, #16
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	3301      	adds	r3, #1
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fa2:	e002      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3750      	adds	r7, #80	@ 0x50
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	00f42400 	.word	0x00f42400
 8001fc0:	007a1200 	.word	0x007a1200

08001fc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000000 	.word	0x20000000

08001fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe0:	f7ff fff0 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0a9b      	lsrs	r3, r3, #10
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	@ (8002000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	08006dcc 	.word	0x08006dcc

08002004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002008:	f7ff ffdc 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 800200c:	4602      	mov	r2, r0
 800200e:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	0b5b      	lsrs	r3, r3, #13
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	4903      	ldr	r1, [pc, #12]	@ (8002028 <HAL_RCC_GetPCLK2Freq+0x24>)
 800201a:	5ccb      	ldrb	r3, [r1, r3]
 800201c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002020:	4618      	mov	r0, r3
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	08006dcc 	.word	0x08006dcc

0800202c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e042      	b.n	80020c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe ff0c 	bl	8000e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	@ 0x24
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800206e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fdd3 	bl	8002c1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80020a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d175      	bne.n	80021d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_UART_Transmit+0x2c>
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e06e      	b.n	80021da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2221      	movs	r2, #33	@ 0x21
 8002106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800210a:	f7fe ff91 	bl	8001030 <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002124:	d108      	bne.n	8002138 <HAL_UART_Transmit+0x6c>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d104      	bne.n	8002138 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e003      	b.n	8002140 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002140:	e02e      	b.n	80021a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2200      	movs	r2, #0
 800214a:	2180      	movs	r1, #128	@ 0x80
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fb37 	bl	80027c0 <UART_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2220      	movs	r2, #32
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e03a      	b.n	80021da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10b      	bne.n	8002182 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	461a      	mov	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002178:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	3302      	adds	r3, #2
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	e007      	b.n	8002192 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	781a      	ldrb	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	3301      	adds	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1cb      	bne.n	8002142 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2200      	movs	r2, #0
 80021b2:	2140      	movs	r1, #64	@ 0x40
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fb03 	bl	80027c0 <UART_WaitOnFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2220      	movs	r2, #32
 80021c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e006      	b.n	80021da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
  }
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	4613      	mov	r3, r2
 80021ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d112      	bne.n	8002222 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <HAL_UART_Receive_IT+0x26>
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e00b      	b.n	8002224 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002212:	88fb      	ldrh	r3, [r7, #6]
 8002214:	461a      	mov	r2, r3
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 fb2a 	bl	8002872 <UART_Start_Receive_IT>
 800221e:	4603      	mov	r3, r0
 8002220:	e000      	b.n	8002224 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b0ba      	sub	sp, #232	@ 0xe8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800225e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800226a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002276:	f003 0320 	and.w	r3, r3, #32
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_UART_IRQHandler+0x66>
 800227e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fc07 	bl	8002a9e <UART_Receive_IT>
      return;
 8002290:	e273      	b.n	800277a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80de 	beq.w	8002458 <HAL_UART_IRQHandler+0x22c>
 800229c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d106      	bne.n	80022b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80d1 	beq.w	8002458 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_UART_IRQHandler+0xae>
 80022c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00b      	beq.n	80022fe <HAL_UART_IRQHandler+0xd2>
 80022e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d005      	beq.n	80022fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	f043 0202 	orr.w	r2, r3, #2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_UART_IRQHandler+0xf6>
 800230a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f043 0204 	orr.w	r2, r3, #4
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d011      	beq.n	8002352 <HAL_UART_IRQHandler+0x126>
 800232e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800233a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	f043 0208 	orr.w	r2, r3, #8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 820a 	beq.w	8002770 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800235c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d008      	beq.n	800237a <HAL_UART_IRQHandler+0x14e>
 8002368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fb92 	bl	8002a9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002384:	2b40      	cmp	r3, #64	@ 0x40
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d103      	bne.n	80023a6 <HAL_UART_IRQHandler+0x17a>
 800239e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d04f      	beq.n	8002446 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fa9d 	bl	80028e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b6:	2b40      	cmp	r3, #64	@ 0x40
 80023b8:	d141      	bne.n	800243e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	3314      	adds	r3, #20
 80023c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023c8:	e853 3f00 	ldrex	r3, [r3]
 80023cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80023d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3314      	adds	r3, #20
 80023e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80023ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80023f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80023f6:	e841 2300 	strex	r3, r2, [r1]
 80023fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80023fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1d9      	bne.n	80023ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240a:	2b00      	cmp	r3, #0
 800240c:	d013      	beq.n	8002436 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002412:	4a8a      	ldr	r2, [pc, #552]	@ (800263c <HAL_UART_IRQHandler+0x410>)
 8002414:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe ff95 	bl	800134a <HAL_DMA_Abort_IT>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d016      	beq.n	8002454 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002430:	4610      	mov	r0, r2
 8002432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002434:	e00e      	b.n	8002454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f9ac 	bl	8002794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800243c:	e00a      	b.n	8002454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f9a8 	bl	8002794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	e006      	b.n	8002454 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9a4 	bl	8002794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002452:	e18d      	b.n	8002770 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002454:	bf00      	nop
    return;
 8002456:	e18b      	b.n	8002770 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	2b01      	cmp	r3, #1
 800245e:	f040 8167 	bne.w	8002730 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8160 	beq.w	8002730 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002474:	f003 0310 	and.w	r3, r3, #16
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8159 	beq.w	8002730 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249e:	2b40      	cmp	r3, #64	@ 0x40
 80024a0:	f040 80ce 	bne.w	8002640 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a9 	beq.w	800260c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024c2:	429a      	cmp	r2, r3
 80024c4:	f080 80a2 	bcs.w	800260c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024da:	f000 8088 	beq.w	80025ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80024f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800250a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800250e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002512:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002516:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800251a:	e841 2300 	strex	r3, r2, [r1]
 800251e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1d9      	bne.n	80024de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3314      	adds	r3, #20
 8002530:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002532:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002534:	e853 3f00 	ldrex	r3, [r3]
 8002538:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800253a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3314      	adds	r3, #20
 800254a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800254e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002552:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002554:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002556:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800255a:	e841 2300 	strex	r3, r2, [r1]
 800255e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1e1      	bne.n	800252a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3314      	adds	r3, #20
 800256c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002570:	e853 3f00 	ldrex	r3, [r3]
 8002574:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800257c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3314      	adds	r3, #20
 8002586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800258a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800258c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002590:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002592:	e841 2300 	strex	r3, r2, [r1]
 8002596:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002598:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1e3      	bne.n	8002566 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025b6:	e853 3f00 	ldrex	r3, [r3]
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025be:	f023 0310 	bic.w	r3, r3, #16
 80025c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	330c      	adds	r3, #12
 80025cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80025d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025d8:	e841 2300 	strex	r3, r2, [r1]
 80025dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80025de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e3      	bne.n	80025ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fe3e 	bl	800126a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	b29b      	uxth	r3, r3
 8002602:	4619      	mov	r1, r3
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f8cf 	bl	80027a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800260a:	e0b3      	b.n	8002774 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002610:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002614:	429a      	cmp	r2, r3
 8002616:	f040 80ad 	bne.w	8002774 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002624:	f040 80a6 	bne.w	8002774 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002632:	4619      	mov	r1, r3
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 f8b7 	bl	80027a8 <HAL_UARTEx_RxEventCallback>
      return;
 800263a:	e09b      	b.n	8002774 <HAL_UART_IRQHandler+0x548>
 800263c:	080029ad 	.word	0x080029ad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002648:	b29b      	uxth	r3, r3
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 808e 	beq.w	8002778 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800265c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8089 	beq.w	8002778 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	330c      	adds	r3, #12
 800266c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	e853 3f00 	ldrex	r3, [r3]
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800267c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	330c      	adds	r3, #12
 8002686:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800268a:	647a      	str	r2, [r7, #68]	@ 0x44
 800268c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800268e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002692:	e841 2300 	strex	r3, r2, [r1]
 8002696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e3      	bne.n	8002666 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3314      	adds	r3, #20
 80026a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	e853 3f00 	ldrex	r3, [r3]
 80026ac:	623b      	str	r3, [r7, #32]
   return(result);
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	3314      	adds	r3, #20
 80026be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80026c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80026c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026ca:	e841 2300 	strex	r3, r2, [r1]
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e3      	bne.n	800269e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	330c      	adds	r3, #12
 80026ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	e853 3f00 	ldrex	r3, [r3]
 80026f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 0310 	bic.w	r3, r3, #16
 80026fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	330c      	adds	r3, #12
 8002704:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002708:	61fa      	str	r2, [r7, #28]
 800270a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270c:	69b9      	ldr	r1, [r7, #24]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	e841 2300 	strex	r3, r2, [r1]
 8002714:	617b      	str	r3, [r7, #20]
   return(result);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e3      	bne.n	80026e4 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f83d 	bl	80027a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800272e:	e023      	b.n	8002778 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <HAL_UART_IRQHandler+0x524>
 800273c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f940 	bl	80029ce <UART_Transmit_IT>
    return;
 800274e:	e014      	b.n	800277a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00e      	beq.n	800277a <HAL_UART_IRQHandler+0x54e>
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f980 	bl	8002a6e <UART_EndTransmit_IT>
    return;
 800276e:	e004      	b.n	800277a <HAL_UART_IRQHandler+0x54e>
    return;
 8002770:	bf00      	nop
 8002772:	e002      	b.n	800277a <HAL_UART_IRQHandler+0x54e>
      return;
 8002774:	bf00      	nop
 8002776:	e000      	b.n	800277a <HAL_UART_IRQHandler+0x54e>
      return;
 8002778:	bf00      	nop
  }
}
 800277a:	37e8      	adds	r7, #232	@ 0xe8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d0:	e03b      	b.n	800284a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d8:	d037      	beq.n	800284a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027da:	f7fe fc29 	bl	8001030 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d302      	bcc.n	80027f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e03a      	b.n	800286a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d023      	beq.n	800284a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b80      	cmp	r3, #128	@ 0x80
 8002806:	d020      	beq.n	800284a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b40      	cmp	r3, #64	@ 0x40
 800280c:	d01d      	beq.n	800284a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b08      	cmp	r3, #8
 800281a:	d116      	bne.n	800284a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f857 	bl	80028e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2208      	movs	r2, #8
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e00f      	b.n	800286a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4013      	ands	r3, r2
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	429a      	cmp	r2, r3
 8002858:	bf0c      	ite	eq
 800285a:	2301      	moveq	r3, #1
 800285c:	2300      	movne	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	429a      	cmp	r2, r3
 8002866:	d0b4      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	4613      	mov	r3, r2
 800287e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	88fa      	ldrh	r2, [r7, #6]
 8002890:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2222      	movs	r2, #34	@ 0x22
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028b6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0220 	orr.w	r2, r2, #32
 80028d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b095      	sub	sp, #84	@ 0x54
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	330c      	adds	r3, #12
 80028f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800290e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002910:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002914:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800291c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e5      	bne.n	80028ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3314      	adds	r3, #20
 8002928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	61fb      	str	r3, [r7, #28]
   return(result);
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	64bb      	str	r3, [r7, #72]	@ 0x48
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3314      	adds	r3, #20
 8002940:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002942:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002944:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002948:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e5      	bne.n	8002922 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	2b01      	cmp	r3, #1
 800295c:	d119      	bne.n	8002992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	330c      	adds	r3, #12
 8002964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	e853 3f00 	ldrex	r3, [r3]
 800296c:	60bb      	str	r3, [r7, #8]
   return(result);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f023 0310 	bic.w	r3, r3, #16
 8002974:	647b      	str	r3, [r7, #68]	@ 0x44
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	330c      	adds	r3, #12
 800297c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800297e:	61ba      	str	r2, [r7, #24]
 8002980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002982:	6979      	ldr	r1, [r7, #20]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	e841 2300 	strex	r3, r2, [r1]
 800298a:	613b      	str	r3, [r7, #16]
   return(result);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1e5      	bne.n	800295e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2220      	movs	r2, #32
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029a0:	bf00      	nop
 80029a2:	3754      	adds	r7, #84	@ 0x54
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff fee7 	bl	8002794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b21      	cmp	r3, #33	@ 0x21
 80029e0:	d13e      	bne.n	8002a60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ea:	d114      	bne.n	8002a16 <UART_Transmit_IT+0x48>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d110      	bne.n	8002a16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	1c9a      	adds	r2, r3, #2
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	621a      	str	r2, [r3, #32]
 8002a14:	e008      	b.n	8002a28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	1c59      	adds	r1, r3, #1
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6211      	str	r1, [r2, #32]
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	4619      	mov	r1, r3
 8002a36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	e000      	b.n	8002a62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a60:	2302      	movs	r3, #2
  }
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fe76 	bl	8002780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b08c      	sub	sp, #48	@ 0x30
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b22      	cmp	r3, #34	@ 0x22
 8002ab8:	f040 80aa 	bne.w	8002c10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac4:	d115      	bne.n	8002af2 <UART_Receive_IT+0x54>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d111      	bne.n	8002af2 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aea:	1c9a      	adds	r2, r3, #2
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	@ 0x28
 8002af0:	e024      	b.n	8002b3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b00:	d007      	beq.n	8002b12 <UART_Receive_IT+0x74>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <UART_Receive_IT+0x82>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e008      	b.n	8002b32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	3b01      	subs	r3, #1
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d15d      	bne.n	8002c0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0220 	bic.w	r2, r2, #32
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d135      	bne.n	8002c02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	330c      	adds	r3, #12
 8002ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	613b      	str	r3, [r7, #16]
   return(result);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f023 0310 	bic.w	r3, r3, #16
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	330c      	adds	r3, #12
 8002bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bbc:	623a      	str	r2, [r7, #32]
 8002bbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc0:	69f9      	ldr	r1, [r7, #28]
 8002bc2:	6a3a      	ldr	r2, [r7, #32]
 8002bc4:	e841 2300 	strex	r3, r2, [r1]
 8002bc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e5      	bne.n	8002b9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d10a      	bne.n	8002bf4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fdd4 	bl	80027a8 <HAL_UARTEx_RxEventCallback>
 8002c00:	e002      	b.n	8002c08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fd ff1c 	bl	8000a40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e002      	b.n	8002c12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e000      	b.n	8002c12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c10:	2302      	movs	r3, #2
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3730      	adds	r7, #48	@ 0x30
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b0c0      	sub	sp, #256	@ 0x100
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	68d9      	ldr	r1, [r3, #12]
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	ea40 0301 	orr.w	r3, r0, r1
 8002c44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c74:	f021 010c 	bic.w	r1, r1, #12
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c82:	430b      	orrs	r3, r1
 8002c84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c96:	6999      	ldr	r1, [r3, #24]
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	ea40 0301 	orr.w	r3, r0, r1
 8002ca2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b8f      	ldr	r3, [pc, #572]	@ (8002ee8 <UART_SetConfig+0x2cc>)
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d005      	beq.n	8002cbc <UART_SetConfig+0xa0>
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b8d      	ldr	r3, [pc, #564]	@ (8002eec <UART_SetConfig+0x2d0>)
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d104      	bne.n	8002cc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cbc:	f7ff f9a2 	bl	8002004 <HAL_RCC_GetPCLK2Freq>
 8002cc0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002cc4:	e003      	b.n	8002cce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cc6:	f7ff f989 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 8002cca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd8:	f040 810c 	bne.w	8002ef4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002cea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002cee:	4622      	mov	r2, r4
 8002cf0:	462b      	mov	r3, r5
 8002cf2:	1891      	adds	r1, r2, r2
 8002cf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002cf6:	415b      	adcs	r3, r3
 8002cf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cfe:	4621      	mov	r1, r4
 8002d00:	eb12 0801 	adds.w	r8, r2, r1
 8002d04:	4629      	mov	r1, r5
 8002d06:	eb43 0901 	adc.w	r9, r3, r1
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d1e:	4690      	mov	r8, r2
 8002d20:	4699      	mov	r9, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	eb18 0303 	adds.w	r3, r8, r3
 8002d28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d2c:	462b      	mov	r3, r5
 8002d2e:	eb49 0303 	adc.w	r3, r9, r3
 8002d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	18db      	adds	r3, r3, r3
 8002d4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d50:	4613      	mov	r3, r2
 8002d52:	eb42 0303 	adc.w	r3, r2, r3
 8002d56:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d60:	f7fd fa9e 	bl	80002a0 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <UART_SetConfig+0x2d4>)
 8002d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	011c      	lsls	r4, r3, #4
 8002d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	1891      	adds	r1, r2, r2
 8002d8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d8c:	415b      	adcs	r3, r3
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d94:	4641      	mov	r1, r8
 8002d96:	eb12 0a01 	adds.w	sl, r2, r1
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	eb43 0b01 	adc.w	fp, r3, r1
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002db4:	4692      	mov	sl, r2
 8002db6:	469b      	mov	fp, r3
 8002db8:	4643      	mov	r3, r8
 8002dba:	eb1a 0303 	adds.w	r3, sl, r3
 8002dbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dc2:	464b      	mov	r3, r9
 8002dc4:	eb4b 0303 	adc.w	r3, fp, r3
 8002dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002dd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ddc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002de0:	460b      	mov	r3, r1
 8002de2:	18db      	adds	r3, r3, r3
 8002de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002de6:	4613      	mov	r3, r2
 8002de8:	eb42 0303 	adc.w	r3, r2, r3
 8002dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002df2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002df6:	f7fd fa53 	bl	80002a0 <__aeabi_uldivmod>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef0 <UART_SetConfig+0x2d4>)
 8002e02:	fba3 2301 	umull	r2, r3, r3, r1
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2264      	movs	r2, #100	@ 0x64
 8002e0a:	fb02 f303 	mul.w	r3, r2, r3
 8002e0e:	1acb      	subs	r3, r1, r3
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e16:	4b36      	ldr	r3, [pc, #216]	@ (8002ef0 <UART_SetConfig+0x2d4>)
 8002e18:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e24:	441c      	add	r4, r3
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e38:	4642      	mov	r2, r8
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e40:	415b      	adcs	r3, r3
 8002e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e48:	4641      	mov	r1, r8
 8002e4a:	1851      	adds	r1, r2, r1
 8002e4c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e4e:	4649      	mov	r1, r9
 8002e50:	414b      	adcs	r3, r1
 8002e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e60:	4659      	mov	r1, fp
 8002e62:	00cb      	lsls	r3, r1, #3
 8002e64:	4651      	mov	r1, sl
 8002e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e6a:	4651      	mov	r1, sl
 8002e6c:	00ca      	lsls	r2, r1, #3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	4603      	mov	r3, r0
 8002e74:	4642      	mov	r2, r8
 8002e76:	189b      	adds	r3, r3, r2
 8002e78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	460a      	mov	r2, r1
 8002e80:	eb42 0303 	adc.w	r3, r2, r3
 8002e84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	18db      	adds	r3, r3, r3
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	eb42 0303 	adc.w	r3, r2, r3
 8002ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002eb2:	f7fd f9f5 	bl	80002a0 <__aeabi_uldivmod>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <UART_SetConfig+0x2d4>)
 8002ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	2164      	movs	r1, #100	@ 0x64
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	3332      	adds	r3, #50	@ 0x32
 8002ece:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <UART_SetConfig+0x2d4>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	f003 0207 	and.w	r2, r3, #7
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4422      	add	r2, r4
 8002ee2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ee4:	e106      	b.n	80030f4 <UART_SetConfig+0x4d8>
 8002ee6:	bf00      	nop
 8002ee8:	40011000 	.word	0x40011000
 8002eec:	40011400 	.word	0x40011400
 8002ef0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002efe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f06:	4642      	mov	r2, r8
 8002f08:	464b      	mov	r3, r9
 8002f0a:	1891      	adds	r1, r2, r2
 8002f0c:	6239      	str	r1, [r7, #32]
 8002f0e:	415b      	adcs	r3, r3
 8002f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f16:	4641      	mov	r1, r8
 8002f18:	1854      	adds	r4, r2, r1
 8002f1a:	4649      	mov	r1, r9
 8002f1c:	eb43 0501 	adc.w	r5, r3, r1
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	00eb      	lsls	r3, r5, #3
 8002f2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2e:	00e2      	lsls	r2, r4, #3
 8002f30:	4614      	mov	r4, r2
 8002f32:	461d      	mov	r5, r3
 8002f34:	4643      	mov	r3, r8
 8002f36:	18e3      	adds	r3, r4, r3
 8002f38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	eb45 0303 	adc.w	r3, r5, r3
 8002f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	f04f 0300 	mov.w	r3, #0
 8002f5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f62:	4629      	mov	r1, r5
 8002f64:	008b      	lsls	r3, r1, #2
 8002f66:	4621      	mov	r1, r4
 8002f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	008a      	lsls	r2, r1, #2
 8002f70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f74:	f7fd f994 	bl	80002a0 <__aeabi_uldivmod>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4b60      	ldr	r3, [pc, #384]	@ (8003100 <UART_SetConfig+0x4e4>)
 8002f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	011c      	lsls	r4, r3, #4
 8002f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	1891      	adds	r1, r2, r2
 8002f9e:	61b9      	str	r1, [r7, #24]
 8002fa0:	415b      	adcs	r3, r3
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fa8:	4641      	mov	r1, r8
 8002faa:	1851      	adds	r1, r2, r1
 8002fac:	6139      	str	r1, [r7, #16]
 8002fae:	4649      	mov	r1, r9
 8002fb0:	414b      	adcs	r3, r1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	00cb      	lsls	r3, r1, #3
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fca:	4651      	mov	r1, sl
 8002fcc:	00ca      	lsls	r2, r1, #3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fdc:	464b      	mov	r3, r9
 8002fde:	460a      	mov	r2, r1
 8002fe0:	eb42 0303 	adc.w	r3, r2, r3
 8002fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ff2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003000:	4649      	mov	r1, r9
 8003002:	008b      	lsls	r3, r1, #2
 8003004:	4641      	mov	r1, r8
 8003006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800300a:	4641      	mov	r1, r8
 800300c:	008a      	lsls	r2, r1, #2
 800300e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003012:	f7fd f945 	bl	80002a0 <__aeabi_uldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4611      	mov	r1, r2
 800301c:	4b38      	ldr	r3, [pc, #224]	@ (8003100 <UART_SetConfig+0x4e4>)
 800301e:	fba3 2301 	umull	r2, r3, r3, r1
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2264      	movs	r2, #100	@ 0x64
 8003026:	fb02 f303 	mul.w	r3, r2, r3
 800302a:	1acb      	subs	r3, r1, r3
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	3332      	adds	r3, #50	@ 0x32
 8003030:	4a33      	ldr	r2, [pc, #204]	@ (8003100 <UART_SetConfig+0x4e4>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800303c:	441c      	add	r4, r3
 800303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003042:	2200      	movs	r2, #0
 8003044:	673b      	str	r3, [r7, #112]	@ 0x70
 8003046:	677a      	str	r2, [r7, #116]	@ 0x74
 8003048:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	415b      	adcs	r3, r3
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800305c:	4641      	mov	r1, r8
 800305e:	1851      	adds	r1, r2, r1
 8003060:	6039      	str	r1, [r7, #0]
 8003062:	4649      	mov	r1, r9
 8003064:	414b      	adcs	r3, r1
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003074:	4659      	mov	r1, fp
 8003076:	00cb      	lsls	r3, r1, #3
 8003078:	4651      	mov	r1, sl
 800307a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307e:	4651      	mov	r1, sl
 8003080:	00ca      	lsls	r2, r1, #3
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	4603      	mov	r3, r0
 8003088:	4642      	mov	r2, r8
 800308a:	189b      	adds	r3, r3, r2
 800308c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800308e:	464b      	mov	r3, r9
 8003090:	460a      	mov	r2, r1
 8003092:	eb42 0303 	adc.w	r3, r2, r3
 8003096:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80030b0:	4649      	mov	r1, r9
 80030b2:	008b      	lsls	r3, r1, #2
 80030b4:	4641      	mov	r1, r8
 80030b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ba:	4641      	mov	r1, r8
 80030bc:	008a      	lsls	r2, r1, #2
 80030be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80030c2:	f7fd f8ed 	bl	80002a0 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003100 <UART_SetConfig+0x4e4>)
 80030cc:	fba3 1302 	umull	r1, r3, r3, r2
 80030d0:	095b      	lsrs	r3, r3, #5
 80030d2:	2164      	movs	r1, #100	@ 0x64
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	3332      	adds	r3, #50	@ 0x32
 80030de:	4a08      	ldr	r2, [pc, #32]	@ (8003100 <UART_SetConfig+0x4e4>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	f003 020f 	and.w	r2, r3, #15
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4422      	add	r2, r4
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030fa:	46bd      	mov	sp, r7
 80030fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003100:	51eb851f 	.word	0x51eb851f

08003104 <__NVIC_SetPriority>:
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003114:	2b00      	cmp	r3, #0
 8003116:	db0a      	blt.n	800312e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	490c      	ldr	r1, [pc, #48]	@ (8003150 <__NVIC_SetPriority+0x4c>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	440b      	add	r3, r1
 8003128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800312c:	e00a      	b.n	8003144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4908      	ldr	r1, [pc, #32]	@ (8003154 <__NVIC_SetPriority+0x50>)
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	3b04      	subs	r3, #4
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	440b      	add	r3, r1
 8003142:	761a      	strb	r2, [r3, #24]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000e100 	.word	0xe000e100
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800315c:	2100      	movs	r1, #0
 800315e:	f06f 0004 	mvn.w	r0, #4
 8003162:	f7ff ffcf 	bl	8003104 <__NVIC_SetPriority>
#endif
}
 8003166:	bf00      	nop
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003172:	f3ef 8305 	mrs	r3, IPSR
 8003176:	603b      	str	r3, [r7, #0]
  return(result);
 8003178:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800317e:	f06f 0305 	mvn.w	r3, #5
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	e00c      	b.n	80031a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <osKernelInitialize+0x44>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d105      	bne.n	800319a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800318e:	4b08      	ldr	r3, [pc, #32]	@ (80031b0 <osKernelInitialize+0x44>)
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003194:	2300      	movs	r3, #0
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	e002      	b.n	80031a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800319a:	f04f 33ff 	mov.w	r3, #4294967295
 800319e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031a0:	687b      	ldr	r3, [r7, #4]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000108 	.word	0x20000108

080031b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ba:	f3ef 8305 	mrs	r3, IPSR
 80031be:	603b      	str	r3, [r7, #0]
  return(result);
 80031c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80031c6:	f06f 0305 	mvn.w	r3, #5
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	e010      	b.n	80031f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80031ce:	4b0b      	ldr	r3, [pc, #44]	@ (80031fc <osKernelStart+0x48>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d109      	bne.n	80031ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80031d6:	f7ff ffbf 	bl	8003158 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <osKernelStart+0x48>)
 80031dc:	2202      	movs	r2, #2
 80031de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80031e0:	f001 f8b6 	bl	8004350 <vTaskStartScheduler>
      stat = osOK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	e002      	b.n	80031f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80031f0:	687b      	ldr	r3, [r7, #4]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000108 	.word	0x20000108

08003200 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003200:	b580      	push	{r7, lr}
 8003202:	b08e      	sub	sp, #56	@ 0x38
 8003204:	af04      	add	r7, sp, #16
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003210:	f3ef 8305 	mrs	r3, IPSR
 8003214:	617b      	str	r3, [r7, #20]
  return(result);
 8003216:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003218:	2b00      	cmp	r3, #0
 800321a:	d17e      	bne.n	800331a <osThreadNew+0x11a>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d07b      	beq.n	800331a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003222:	2380      	movs	r3, #128	@ 0x80
 8003224:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003226:	2318      	movs	r3, #24
 8003228:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d045      	beq.n	80032c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <osThreadNew+0x48>
        name = attr->name;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <osThreadNew+0x6e>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b38      	cmp	r3, #56	@ 0x38
 8003260:	d805      	bhi.n	800326e <osThreadNew+0x6e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <osThreadNew+0x72>
        return (NULL);
 800326e:	2300      	movs	r3, #0
 8003270:	e054      	b.n	800331c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00e      	beq.n	80032a8 <osThreadNew+0xa8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003290:	d90a      	bls.n	80032a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	d006      	beq.n	80032a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <osThreadNew+0xa8>
        mem = 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	e010      	b.n	80032ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10c      	bne.n	80032ca <osThreadNew+0xca>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d108      	bne.n	80032ca <osThreadNew+0xca>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <osThreadNew+0xca>
          mem = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	61bb      	str	r3, [r7, #24]
 80032c4:	e001      	b.n	80032ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d110      	bne.n	80032f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80032d8:	9202      	str	r2, [sp, #8]
 80032da:	9301      	str	r3, [sp, #4]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fe56 	bl	8003f98 <xTaskCreateStatic>
 80032ec:	4603      	mov	r3, r0
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	e013      	b.n	800331a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d110      	bne.n	800331a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 fea4 	bl	8004058 <xTaskCreate>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d001      	beq.n	800331a <osThreadNew+0x11a>
            hTask = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800331a:	693b      	ldr	r3, [r7, #16]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3728      	adds	r7, #40	@ 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800332c:	f3ef 8305 	mrs	r3, IPSR
 8003330:	60bb      	str	r3, [r7, #8]
  return(result);
 8003332:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <osDelay+0x1c>
    stat = osErrorISR;
 8003338:	f06f 0305 	mvn.w	r3, #5
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e007      	b.n	8003350 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <osDelay+0x2c>
      vTaskDelay(ticks);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 ffca 	bl	80042e4 <vTaskDelay>
    }
  }

  return (stat);
 8003350:	68fb      	ldr	r3, [r7, #12]
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a07      	ldr	r2, [pc, #28]	@ (8003388 <vApplicationGetIdleTaskMemory+0x2c>)
 800336c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4a06      	ldr	r2, [pc, #24]	@ (800338c <vApplicationGetIdleTaskMemory+0x30>)
 8003372:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2280      	movs	r2, #128	@ 0x80
 8003378:	601a      	str	r2, [r3, #0]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	2000010c 	.word	0x2000010c
 800338c:	20000168 	.word	0x20000168

08003390 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a07      	ldr	r2, [pc, #28]	@ (80033bc <vApplicationGetTimerTaskMemory+0x2c>)
 80033a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4a06      	ldr	r2, [pc, #24]	@ (80033c0 <vApplicationGetTimerTaskMemory+0x30>)
 80033a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033ae:	601a      	str	r2, [r3, #0]
}
 80033b0:	bf00      	nop
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	20000368 	.word	0x20000368
 80033c0:	200003c4 	.word	0x200003c4

080033c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f103 0208 	add.w	r2, r3, #8
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f04f 32ff 	mov.w	r2, #4294967295
 80033dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f103 0208 	add.w	r2, r3, #8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f103 0208 	add.w	r2, r3, #8
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	601a      	str	r2, [r3, #0]
}
 800345a:	bf00      	nop
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003466:	b480      	push	{r7}
 8003468:	b085      	sub	sp, #20
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
 800346e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d103      	bne.n	8003486 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e00c      	b.n	80034a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3308      	adds	r3, #8
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e002      	b.n	8003494 <vListInsert+0x2e>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d2f6      	bcs.n	800348e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6892      	ldr	r2, [r2, #8]
 80034ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6852      	ldr	r2, [r2, #4]
 80034f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	d103      	bne.n	800350c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1e5a      	subs	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10b      	bne.n	8003558 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003558:	f002 f8b6 	bl	80056c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	68f9      	ldr	r1, [r7, #12]
 8003566:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	441a      	add	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	3b01      	subs	r3, #1
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	441a      	add	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	22ff      	movs	r2, #255	@ 0xff
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	22ff      	movs	r2, #255	@ 0xff
 80035a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d114      	bne.n	80035d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01a      	beq.n	80035ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3310      	adds	r3, #16
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 f956 	bl	800486c <xTaskRemoveFromEventList>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d012      	beq.n	80035ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <xQueueGenericReset+0xd0>)
 80035c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	e009      	b.n	80035ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	3310      	adds	r3, #16
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fef1 	bl	80033c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3324      	adds	r3, #36	@ 0x24
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff feec 	bl	80033c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035ec:	f002 f89e 	bl	800572c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035f0:	2301      	movs	r3, #1
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003600:	b580      	push	{r7, lr}
 8003602:	b08e      	sub	sp, #56	@ 0x38
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d10b      	bne.n	800362c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	e7fd      	b.n	8003628 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10b      	bne.n	800364a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop
 8003648:	e7fd      	b.n	8003646 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <xQueueGenericCreateStatic+0x56>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <xQueueGenericCreateStatic+0x5a>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <xQueueGenericCreateStatic+0x5c>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10b      	bne.n	8003678 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	623b      	str	r3, [r7, #32]
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <xQueueGenericCreateStatic+0x84>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <xQueueGenericCreateStatic+0x88>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <xQueueGenericCreateStatic+0x8a>
 8003688:	2300      	movs	r3, #0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	61fb      	str	r3, [r7, #28]
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	e7fd      	b.n	80036a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80036a6:	2350      	movs	r3, #80	@ 0x50
 80036a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b50      	cmp	r3, #80	@ 0x50
 80036ae:	d00b      	beq.n	80036c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80036b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	61bb      	str	r3, [r7, #24]
}
 80036c2:	bf00      	nop
 80036c4:	bf00      	nop
 80036c6:	e7fd      	b.n	80036c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80036c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80036ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00d      	beq.n	80036f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80036d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	9300      	str	r3, [sp, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f840 	bl	8003770 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3730      	adds	r7, #48	@ 0x30
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b08a      	sub	sp, #40	@ 0x28
 80036fe:	af02      	add	r7, sp, #8
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	4613      	mov	r3, r2
 8003706:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <xQueueGenericCreate+0x2c>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	613b      	str	r3, [r7, #16]
}
 8003720:	bf00      	nop
 8003722:	bf00      	nop
 8003724:	e7fd      	b.n	8003722 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	fb02 f303 	mul.w	r3, r2, r3
 800372e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	3350      	adds	r3, #80	@ 0x50
 8003734:	4618      	mov	r0, r3
 8003736:	f002 f8e9 	bl	800590c <pvPortMalloc>
 800373a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d011      	beq.n	8003766 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	3350      	adds	r3, #80	@ 0x50
 800374a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003754:	79fa      	ldrb	r2, [r7, #7]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f805 	bl	8003770 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003766:	69bb      	ldr	r3, [r7, #24]
	}
 8003768:	4618      	mov	r0, r3
 800376a:	3720      	adds	r7, #32
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
 800377c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e002      	b.n	8003792 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800379e:	2101      	movs	r1, #1
 80037a0:	69b8      	ldr	r0, [r7, #24]
 80037a2:	f7ff fec3 	bl	800352c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b08e      	sub	sp, #56	@ 0x38
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037c6:	2300      	movs	r3, #0
 80037c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <xQueueGenericSend+0x34>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d103      	bne.n	80037fa <xQueueGenericSend+0x42>
 80037f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <xQueueGenericSend+0x46>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <xQueueGenericSend+0x48>
 80037fe:	2300      	movs	r3, #0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <xQueueGenericSend+0x64>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d103      	bne.n	800382a <xQueueGenericSend+0x72>
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <xQueueGenericSend+0x76>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGenericSend+0x78>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <xQueueGenericSend+0x94>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	623b      	str	r3, [r7, #32]
}
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	e7fd      	b.n	8003848 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800384c:	f001 f9ce 	bl	8004bec <xTaskGetSchedulerState>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <xQueueGenericSend+0xa4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <xQueueGenericSend+0xa8>
 800385c:	2301      	movs	r3, #1
 800385e:	e000      	b.n	8003862 <xQueueGenericSend+0xaa>
 8003860:	2300      	movs	r3, #0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <xQueueGenericSend+0xc6>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	61fb      	str	r3, [r7, #28]
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	e7fd      	b.n	800387a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800387e:	f001 ff23 	bl	80056c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003884:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <xQueueGenericSend+0xdc>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d129      	bne.n	80038e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800389a:	f000 fa0f 	bl	8003cbc <prvCopyDataToQueue>
 800389e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d010      	beq.n	80038ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038aa:	3324      	adds	r3, #36	@ 0x24
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 ffdd 	bl	800486c <xTaskRemoveFromEventList>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038b8:	4b3f      	ldr	r3, [pc, #252]	@ (80039b8 <xQueueGenericSend+0x200>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	e00a      	b.n	80038e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038d0:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <xQueueGenericSend+0x200>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80038e0:	f001 ff24 	bl	800572c <vPortExitCritical>
				return pdPASS;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e063      	b.n	80039b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038ee:	f001 ff1d 	bl	800572c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e05c      	b.n	80039b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d106      	bne.n	800390a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f817 	bl	8004934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003906:	2301      	movs	r3, #1
 8003908:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800390a:	f001 ff0f 	bl	800572c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800390e:	f000 fd87 	bl	8004420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003912:	f001 fed9 	bl	80056c8 <vPortEnterCritical>
 8003916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800391c:	b25b      	sxtb	r3, r3
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d103      	bne.n	800392c <xQueueGenericSend+0x174>
 8003924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003932:	b25b      	sxtb	r3, r3
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d103      	bne.n	8003942 <xQueueGenericSend+0x18a>
 800393a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003942:	f001 fef3 	bl	800572c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003946:	1d3a      	adds	r2, r7, #4
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f001 f806 	bl	8004960 <xTaskCheckForTimeOut>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d124      	bne.n	80039a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800395a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800395c:	f000 faa6 	bl	8003eac <prvIsQueueFull>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d018      	beq.n	8003998 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	3310      	adds	r3, #16
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 ff2a 	bl	80047c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003974:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003976:	f000 fa31 	bl	8003ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800397a:	f000 fd5f 	bl	800443c <xTaskResumeAll>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	f47f af7c 	bne.w	800387e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003986:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <xQueueGenericSend+0x200>)
 8003988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	e772      	b.n	800387e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800399a:	f000 fa1f 	bl	8003ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800399e:	f000 fd4d 	bl	800443c <xTaskResumeAll>
 80039a2:	e76c      	b.n	800387e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039a6:	f000 fa19 	bl	8003ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039aa:	f000 fd47 	bl	800443c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3738      	adds	r7, #56	@ 0x38
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b090      	sub	sp, #64	@ 0x40
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80039ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10b      	bne.n	80039ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <xQueueGenericSendFromISR+0x3e>
 80039f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <xQueueGenericSendFromISR+0x42>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <xQueueGenericSendFromISR+0x44>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a16:	bf00      	nop
 8003a18:	bf00      	nop
 8003a1a:	e7fd      	b.n	8003a18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d103      	bne.n	8003a2a <xQueueGenericSendFromISR+0x6e>
 8003a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <xQueueGenericSendFromISR+0x72>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <xQueueGenericSendFromISR+0x74>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	623b      	str	r3, [r7, #32]
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a4c:	f001 ff1c 	bl	8005888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a50:	f3ef 8211 	mrs	r2, BASEPRI
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	61fa      	str	r2, [r7, #28]
 8003a66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d302      	bcc.n	8003a7e <xQueueGenericSendFromISR+0xc2>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d12f      	bne.n	8003ade <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	68b9      	ldr	r1, [r7, #8]
 8003a92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003a94:	f000 f912 	bl	8003cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d112      	bne.n	8003ac8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d016      	beq.n	8003ad8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	3324      	adds	r3, #36	@ 0x24
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fedc 	bl	800486c <xTaskRemoveFromEventList>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00e      	beq.n	8003ad8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	e007      	b.n	8003ad8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003acc:	3301      	adds	r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	b25a      	sxtb	r2, r3
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003adc:	e001      	b.n	8003ae2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003aec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3740      	adds	r7, #64	@ 0x40
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	@ 0x30
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <xQueueReceive+0x32>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	623b      	str	r3, [r7, #32]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d103      	bne.n	8003b38 <xQueueReceive+0x40>
 8003b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <xQueueReceive+0x44>
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <xQueueReceive+0x46>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <xQueueReceive+0x62>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	61fb      	str	r3, [r7, #28]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b5a:	f001 f847 	bl	8004bec <xTaskGetSchedulerState>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <xQueueReceive+0x72>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <xQueueReceive+0x76>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <xQueueReceive+0x78>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <xQueueReceive+0x94>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	61bb      	str	r3, [r7, #24]
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	e7fd      	b.n	8003b88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b8c:	f001 fd9c 	bl	80056c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01f      	beq.n	8003bdc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ba0:	f000 f8f6 	bl	8003d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba6:	1e5a      	subs	r2, r3, #1
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00f      	beq.n	8003bd4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb6:	3310      	adds	r3, #16
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fe57 	bl	800486c <xTaskRemoveFromEventList>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8003cb8 <xQueueReceive+0x1c0>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bd4:	f001 fdaa 	bl	800572c <vPortExitCritical>
				return pdPASS;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e069      	b.n	8003cb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003be2:	f001 fda3 	bl	800572c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e062      	b.n	8003cb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bf0:	f107 0310 	add.w	r3, r7, #16
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fe9d 	bl	8004934 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bfe:	f001 fd95 	bl	800572c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c02:	f000 fc0d 	bl	8004420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c06:	f001 fd5f 	bl	80056c8 <vPortEnterCritical>
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c16:	d103      	bne.n	8003c20 <xQueueReceive+0x128>
 8003c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d103      	bne.n	8003c36 <xQueueReceive+0x13e>
 8003c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c36:	f001 fd79 	bl	800572c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c3a:	1d3a      	adds	r2, r7, #4
 8003c3c:	f107 0310 	add.w	r3, r7, #16
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fe8c 	bl	8004960 <xTaskCheckForTimeOut>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d123      	bne.n	8003c96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c50:	f000 f916 	bl	8003e80 <prvIsQueueEmpty>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d017      	beq.n	8003c8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5c:	3324      	adds	r3, #36	@ 0x24
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fdb0 	bl	80047c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c6a:	f000 f8b7 	bl	8003ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c6e:	f000 fbe5 	bl	800443c <xTaskResumeAll>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d189      	bne.n	8003b8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003c78:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <xQueueReceive+0x1c0>)
 8003c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	e780      	b.n	8003b8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c8c:	f000 f8a6 	bl	8003ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c90:	f000 fbd4 	bl	800443c <xTaskResumeAll>
 8003c94:	e77a      	b.n	8003b8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003c96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c98:	f000 f8a0 	bl	8003ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c9c:	f000 fbce 	bl	800443c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ca2:	f000 f8ed 	bl	8003e80 <prvIsQueueEmpty>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f43f af6f 	beq.w	8003b8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3730      	adds	r7, #48	@ 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d14d      	bne.n	8003d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 ff9e 	bl	8004c28 <xTaskPriorityDisinherit>
 8003cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	e043      	b.n	8003d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d119      	bne.n	8003d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6858      	ldr	r0, [r3, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	461a      	mov	r2, r3
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	f002 fa73 	bl	80061f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	441a      	add	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d32b      	bcc.n	8003d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e026      	b.n	8003d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68d8      	ldr	r0, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	f002 fa59 	bl	80061f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	425b      	negs	r3, r3
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d207      	bcs.n	8003d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	425b      	negs	r3, r3
 8003d66:	441a      	add	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d105      	bne.n	8003d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003d86:	697b      	ldr	r3, [r7, #20]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d303      	bcc.n	8003dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68d9      	ldr	r1, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f002 fa0f 	bl	80061f2 <memcpy>
	}
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003de4:	f001 fc70 	bl	80056c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003df0:	e011      	b.n	8003e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d012      	beq.n	8003e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3324      	adds	r3, #36	@ 0x24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fd34 	bl	800486c <xTaskRemoveFromEventList>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e0a:	f000 fe0d 	bl	8004a28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dce9      	bgt.n	8003df2 <prvUnlockQueue+0x16>
 8003e1e:	e000      	b.n	8003e22 <prvUnlockQueue+0x46>
					break;
 8003e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	22ff      	movs	r2, #255	@ 0xff
 8003e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003e2a:	f001 fc7f 	bl	800572c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e2e:	f001 fc4b 	bl	80056c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e3a:	e011      	b.n	8003e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3310      	adds	r3, #16
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fd0f 	bl	800486c <xTaskRemoveFromEventList>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e54:	f000 fde8 	bl	8004a28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e58:	7bbb      	ldrb	r3, [r7, #14]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dce9      	bgt.n	8003e3c <prvUnlockQueue+0x60>
 8003e68:	e000      	b.n	8003e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	22ff      	movs	r2, #255	@ 0xff
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003e74:	f001 fc5a 	bl	800572c <vPortExitCritical>
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e88:	f001 fc1e 	bl	80056c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e001      	b.n	8003e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e9e:	f001 fc45 	bl	800572c <vPortExitCritical>

	return xReturn;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eb4:	f001 fc08 	bl	80056c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d102      	bne.n	8003eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e001      	b.n	8003ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ece:	f001 fc2d 	bl	800572c <vPortExitCritical>

	return xReturn;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	e014      	b.n	8003f16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003eec:	4a0f      	ldr	r2, [pc, #60]	@ (8003f2c <vQueueAddToRegistry+0x50>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003ef8:	490c      	ldr	r1, [pc, #48]	@ (8003f2c <vQueueAddToRegistry+0x50>)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f02:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <vQueueAddToRegistry+0x50>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4413      	add	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f0e:	e006      	b.n	8003f1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3301      	adds	r3, #1
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b07      	cmp	r3, #7
 8003f1a:	d9e7      	bls.n	8003eec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	200007c4 	.word	0x200007c4

08003f30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f40:	f001 fbc2 	bl	80056c8 <vPortEnterCritical>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d103      	bne.n	8003f5a <vQueueWaitForMessageRestricted+0x2a>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d103      	bne.n	8003f70 <vQueueWaitForMessageRestricted+0x40>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f70:	f001 fbdc 	bl	800572c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	3324      	adds	r3, #36	@ 0x24
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fc45 	bl	8004814 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f7ff ff26 	bl	8003ddc <prvUnlockQueue>
	}
 8003f90:	bf00      	nop
 8003f92:	3718      	adds	r7, #24
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08e      	sub	sp, #56	@ 0x38
 8003f9c:	af04      	add	r7, sp, #16
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	623b      	str	r3, [r7, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10b      	bne.n	8003fe2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	61fb      	str	r3, [r7, #28]
}
 8003fdc:	bf00      	nop
 8003fde:	bf00      	nop
 8003fe0:	e7fd      	b.n	8003fde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fe2:	235c      	movs	r3, #92	@ 0x5c
 8003fe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b5c      	cmp	r3, #92	@ 0x5c
 8003fea:	d00b      	beq.n	8004004 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	61bb      	str	r3, [r7, #24]
}
 8003ffe:	bf00      	nop
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004004:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01e      	beq.n	800404a <xTaskCreateStatic+0xb2>
 800400c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01b      	beq.n	800404a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	2202      	movs	r2, #2
 8004020:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004024:	2300      	movs	r3, #0
 8004026:	9303      	str	r3, [sp, #12]
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	9302      	str	r3, [sp, #8]
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f850 	bl	80040e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004042:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004044:	f000 f8de 	bl	8004204 <prvAddNewTaskToReadyList>
 8004048:	e001      	b.n	800404e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800404e:	697b      	ldr	r3, [r7, #20]
	}
 8004050:	4618      	mov	r0, r3
 8004052:	3728      	adds	r7, #40	@ 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	@ 0x30
 800405c:	af04      	add	r7, sp, #16
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4618      	mov	r0, r3
 800406e:	f001 fc4d 	bl	800590c <pvPortMalloc>
 8004072:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00e      	beq.n	8004098 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800407a:	205c      	movs	r0, #92	@ 0x5c
 800407c:	f001 fc46 	bl	800590c <pvPortMalloc>
 8004080:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	631a      	str	r2, [r3, #48]	@ 0x30
 800408e:	e005      	b.n	800409c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004090:	6978      	ldr	r0, [r7, #20]
 8004092:	f001 fd09 	bl	8005aa8 <vPortFree>
 8004096:	e001      	b.n	800409c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d017      	beq.n	80040d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040aa:	88fa      	ldrh	r2, [r7, #6]
 80040ac:	2300      	movs	r3, #0
 80040ae:	9303      	str	r3, [sp, #12]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b6:	9301      	str	r3, [sp, #4]
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f80e 	bl	80040e2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040c6:	69f8      	ldr	r0, [r7, #28]
 80040c8:	f000 f89c 	bl	8004204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040cc:	2301      	movs	r3, #1
 80040ce:	61bb      	str	r3, [r7, #24]
 80040d0:	e002      	b.n	80040d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295
 80040d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040d8:	69bb      	ldr	r3, [r7, #24]
	}
 80040da:	4618      	mov	r0, r3
 80040dc:	3720      	adds	r7, #32
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b088      	sub	sp, #32
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	461a      	mov	r2, r3
 80040fa:	21a5      	movs	r1, #165	@ 0xa5
 80040fc:	f001 fffe 	bl	80060fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800410a:	3b01      	subs	r3, #1
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f023 0307 	bic.w	r3, r3, #7
 8004118:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00b      	beq.n	800413c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	617b      	str	r3, [r7, #20]
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01f      	beq.n	8004182 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	e012      	b.n	800416e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	7819      	ldrb	r1, [r3, #0]
 8004150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	3334      	adds	r3, #52	@ 0x34
 8004158:	460a      	mov	r2, r1
 800415a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b0f      	cmp	r3, #15
 8004172:	d9e9      	bls.n	8004148 <prvInitialiseNewTask+0x66>
 8004174:	e000      	b.n	8004178 <prvInitialiseNewTask+0x96>
			{
				break;
 8004176:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004180:	e003      	b.n	800418a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800418a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418c:	2b37      	cmp	r3, #55	@ 0x37
 800418e:	d901      	bls.n	8004194 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004190:	2337      	movs	r3, #55	@ 0x37
 8004192:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004198:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800419e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	2200      	movs	r2, #0
 80041a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	3304      	adds	r3, #4
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff f92a 	bl	8003404 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	3318      	adds	r3, #24
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff f925 	bl	8003404 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80041c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	68f9      	ldr	r1, [r7, #12]
 80041e2:	69b8      	ldr	r0, [r7, #24]
 80041e4:	f001 f93e 	bl	8005464 <pxPortInitialiseStack>
 80041e8:	4602      	mov	r2, r0
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041fa:	bf00      	nop
 80041fc:	3720      	adds	r7, #32
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800420c:	f001 fa5c 	bl	80056c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004210:	4b2d      	ldr	r3, [pc, #180]	@ (80042c8 <prvAddNewTaskToReadyList+0xc4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	4a2c      	ldr	r2, [pc, #176]	@ (80042c8 <prvAddNewTaskToReadyList+0xc4>)
 8004218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800421a:	4b2c      	ldr	r3, [pc, #176]	@ (80042cc <prvAddNewTaskToReadyList+0xc8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004222:	4a2a      	ldr	r2, [pc, #168]	@ (80042cc <prvAddNewTaskToReadyList+0xc8>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004228:	4b27      	ldr	r3, [pc, #156]	@ (80042c8 <prvAddNewTaskToReadyList+0xc4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d110      	bne.n	8004252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004230:	f000 fc1e 	bl	8004a70 <prvInitialiseTaskLists>
 8004234:	e00d      	b.n	8004252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004236:	4b26      	ldr	r3, [pc, #152]	@ (80042d0 <prvAddNewTaskToReadyList+0xcc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800423e:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <prvAddNewTaskToReadyList+0xc8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	429a      	cmp	r2, r3
 800424a:	d802      	bhi.n	8004252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800424c:	4a1f      	ldr	r2, [pc, #124]	@ (80042cc <prvAddNewTaskToReadyList+0xc8>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004252:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <prvAddNewTaskToReadyList+0xd0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	4a1e      	ldr	r2, [pc, #120]	@ (80042d4 <prvAddNewTaskToReadyList+0xd0>)
 800425a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800425c:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <prvAddNewTaskToReadyList+0xd0>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004268:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <prvAddNewTaskToReadyList+0xd4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d903      	bls.n	8004278 <prvAddNewTaskToReadyList+0x74>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	4a18      	ldr	r2, [pc, #96]	@ (80042d8 <prvAddNewTaskToReadyList+0xd4>)
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4a15      	ldr	r2, [pc, #84]	@ (80042dc <prvAddNewTaskToReadyList+0xd8>)
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f7ff f8c5 	bl	800341e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004294:	f001 fa4a 	bl	800572c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004298:	4b0d      	ldr	r3, [pc, #52]	@ (80042d0 <prvAddNewTaskToReadyList+0xcc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042a0:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <prvAddNewTaskToReadyList+0xc8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d207      	bcs.n	80042be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042ae:	4b0c      	ldr	r3, [pc, #48]	@ (80042e0 <prvAddNewTaskToReadyList+0xdc>)
 80042b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000cd8 	.word	0x20000cd8
 80042cc:	20000804 	.word	0x20000804
 80042d0:	20000ce4 	.word	0x20000ce4
 80042d4:	20000cf4 	.word	0x20000cf4
 80042d8:	20000ce0 	.word	0x20000ce0
 80042dc:	20000808 	.word	0x20000808
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d018      	beq.n	8004328 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042f6:	4b14      	ldr	r3, [pc, #80]	@ (8004348 <vTaskDelay+0x64>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <vTaskDelay+0x32>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	60bb      	str	r3, [r7, #8]
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	e7fd      	b.n	8004312 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004316:	f000 f883 	bl	8004420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800431a:	2100      	movs	r1, #0
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fcf3 	bl	8004d08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004322:	f000 f88b 	bl	800443c <xTaskResumeAll>
 8004326:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d107      	bne.n	800433e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800432e:	4b07      	ldr	r3, [pc, #28]	@ (800434c <vTaskDelay+0x68>)
 8004330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800433e:	bf00      	nop
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	20000d00 	.word	0x20000d00
 800434c:	e000ed04 	.word	0xe000ed04

08004350 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	@ 0x28
 8004354:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800435e:	463a      	mov	r2, r7
 8004360:	1d39      	adds	r1, r7, #4
 8004362:	f107 0308 	add.w	r3, r7, #8
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe fff8 	bl	800335c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	9202      	str	r2, [sp, #8]
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	2300      	movs	r3, #0
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	2300      	movs	r3, #0
 800437c:	460a      	mov	r2, r1
 800437e:	4922      	ldr	r1, [pc, #136]	@ (8004408 <vTaskStartScheduler+0xb8>)
 8004380:	4822      	ldr	r0, [pc, #136]	@ (800440c <vTaskStartScheduler+0xbc>)
 8004382:	f7ff fe09 	bl	8003f98 <xTaskCreateStatic>
 8004386:	4603      	mov	r3, r0
 8004388:	4a21      	ldr	r2, [pc, #132]	@ (8004410 <vTaskStartScheduler+0xc0>)
 800438a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800438c:	4b20      	ldr	r3, [pc, #128]	@ (8004410 <vTaskStartScheduler+0xc0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004394:	2301      	movs	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e001      	b.n	800439e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80043a4:	f000 fd04 	bl	8004db0 <xTimerCreateTimerTask>
 80043a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d116      	bne.n	80043de <vTaskStartScheduler+0x8e>
	__asm volatile
 80043b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b4:	f383 8811 	msr	BASEPRI, r3
 80043b8:	f3bf 8f6f 	isb	sy
 80043bc:	f3bf 8f4f 	dsb	sy
 80043c0:	613b      	str	r3, [r7, #16]
}
 80043c2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043c4:	4b13      	ldr	r3, [pc, #76]	@ (8004414 <vTaskStartScheduler+0xc4>)
 80043c6:	f04f 32ff 	mov.w	r2, #4294967295
 80043ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043cc:	4b12      	ldr	r3, [pc, #72]	@ (8004418 <vTaskStartScheduler+0xc8>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043d2:	4b12      	ldr	r3, [pc, #72]	@ (800441c <vTaskStartScheduler+0xcc>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043d8:	f001 f8d2 	bl	8005580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043dc:	e00f      	b.n	80043fe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d10b      	bne.n	80043fe <vTaskStartScheduler+0xae>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	60fb      	str	r3, [r7, #12]
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	e7fd      	b.n	80043fa <vTaskStartScheduler+0xaa>
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	08006d80 	.word	0x08006d80
 800440c:	08004a41 	.word	0x08004a41
 8004410:	20000cfc 	.word	0x20000cfc
 8004414:	20000cf8 	.word	0x20000cf8
 8004418:	20000ce4 	.word	0x20000ce4
 800441c:	20000cdc 	.word	0x20000cdc

08004420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004424:	4b04      	ldr	r3, [pc, #16]	@ (8004438 <vTaskSuspendAll+0x18>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	4a03      	ldr	r2, [pc, #12]	@ (8004438 <vTaskSuspendAll+0x18>)
 800442c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800442e:	bf00      	nop
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	20000d00 	.word	0x20000d00

0800443c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800444a:	4b42      	ldr	r3, [pc, #264]	@ (8004554 <xTaskResumeAll+0x118>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <xTaskResumeAll+0x2e>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	603b      	str	r3, [r7, #0]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800446a:	f001 f92d 	bl	80056c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800446e:	4b39      	ldr	r3, [pc, #228]	@ (8004554 <xTaskResumeAll+0x118>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3b01      	subs	r3, #1
 8004474:	4a37      	ldr	r2, [pc, #220]	@ (8004554 <xTaskResumeAll+0x118>)
 8004476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004478:	4b36      	ldr	r3, [pc, #216]	@ (8004554 <xTaskResumeAll+0x118>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d162      	bne.n	8004546 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004480:	4b35      	ldr	r3, [pc, #212]	@ (8004558 <xTaskResumeAll+0x11c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d05e      	beq.n	8004546 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004488:	e02f      	b.n	80044ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448a:	4b34      	ldr	r3, [pc, #208]	@ (800455c <xTaskResumeAll+0x120>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3318      	adds	r3, #24
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff f81e 	bl	80034d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3304      	adds	r3, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff f819 	bl	80034d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044aa:	4b2d      	ldr	r3, [pc, #180]	@ (8004560 <xTaskResumeAll+0x124>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d903      	bls.n	80044ba <xTaskResumeAll+0x7e>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004560 <xTaskResumeAll+0x124>)
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4a27      	ldr	r2, [pc, #156]	@ (8004564 <xTaskResumeAll+0x128>)
 80044c8:	441a      	add	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3304      	adds	r3, #4
 80044ce:	4619      	mov	r1, r3
 80044d0:	4610      	mov	r0, r2
 80044d2:	f7fe ffa4 	bl	800341e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044da:	4b23      	ldr	r3, [pc, #140]	@ (8004568 <xTaskResumeAll+0x12c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80044e4:	4b21      	ldr	r3, [pc, #132]	@ (800456c <xTaskResumeAll+0x130>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044ea:	4b1c      	ldr	r3, [pc, #112]	@ (800455c <xTaskResumeAll+0x120>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1cb      	bne.n	800448a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d001      	beq.n	80044fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044f8:	f000 fb58 	bl	8004bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004570 <xTaskResumeAll+0x134>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004508:	f000 f846 	bl	8004598 <xTaskIncrementTick>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004512:	4b16      	ldr	r3, [pc, #88]	@ (800456c <xTaskResumeAll+0x130>)
 8004514:	2201      	movs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f1      	bne.n	8004508 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004524:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <xTaskResumeAll+0x134>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800452a:	4b10      	ldr	r3, [pc, #64]	@ (800456c <xTaskResumeAll+0x130>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004532:	2301      	movs	r3, #1
 8004534:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004536:	4b0f      	ldr	r3, [pc, #60]	@ (8004574 <xTaskResumeAll+0x138>)
 8004538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004546:	f001 f8f1 	bl	800572c <vPortExitCritical>

	return xAlreadyYielded;
 800454a:	68bb      	ldr	r3, [r7, #8]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000d00 	.word	0x20000d00
 8004558:	20000cd8 	.word	0x20000cd8
 800455c:	20000c98 	.word	0x20000c98
 8004560:	20000ce0 	.word	0x20000ce0
 8004564:	20000808 	.word	0x20000808
 8004568:	20000804 	.word	0x20000804
 800456c:	20000cec 	.word	0x20000cec
 8004570:	20000ce8 	.word	0x20000ce8
 8004574:	e000ed04 	.word	0xe000ed04

08004578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800457e:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <xTaskGetTickCount+0x1c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004584:	687b      	ldr	r3, [r7, #4]
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000cdc 	.word	0x20000cdc

08004598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a2:	4b4f      	ldr	r3, [pc, #316]	@ (80046e0 <xTaskIncrementTick+0x148>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f040 8090 	bne.w	80046cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045ac:	4b4d      	ldr	r3, [pc, #308]	@ (80046e4 <xTaskIncrementTick+0x14c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045b4:	4a4b      	ldr	r2, [pc, #300]	@ (80046e4 <xTaskIncrementTick+0x14c>)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d121      	bne.n	8004604 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80045c0:	4b49      	ldr	r3, [pc, #292]	@ (80046e8 <xTaskIncrementTick+0x150>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	603b      	str	r3, [r7, #0]
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <xTaskIncrementTick+0x46>
 80045e2:	4b41      	ldr	r3, [pc, #260]	@ (80046e8 <xTaskIncrementTick+0x150>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60fb      	str	r3, [r7, #12]
 80045e8:	4b40      	ldr	r3, [pc, #256]	@ (80046ec <xTaskIncrementTick+0x154>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3e      	ldr	r2, [pc, #248]	@ (80046e8 <xTaskIncrementTick+0x150>)
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4a3e      	ldr	r2, [pc, #248]	@ (80046ec <xTaskIncrementTick+0x154>)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	4b3e      	ldr	r3, [pc, #248]	@ (80046f0 <xTaskIncrementTick+0x158>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a3c      	ldr	r2, [pc, #240]	@ (80046f0 <xTaskIncrementTick+0x158>)
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	f000 fad4 	bl	8004bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004604:	4b3b      	ldr	r3, [pc, #236]	@ (80046f4 <xTaskIncrementTick+0x15c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d349      	bcc.n	80046a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800460e:	4b36      	ldr	r3, [pc, #216]	@ (80046e8 <xTaskIncrementTick+0x150>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004618:	4b36      	ldr	r3, [pc, #216]	@ (80046f4 <xTaskIncrementTick+0x15c>)
 800461a:	f04f 32ff 	mov.w	r2, #4294967295
 800461e:	601a      	str	r2, [r3, #0]
					break;
 8004620:	e03f      	b.n	80046a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004622:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <xTaskIncrementTick+0x150>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	429a      	cmp	r2, r3
 8004638:	d203      	bcs.n	8004642 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800463a:	4a2e      	ldr	r2, [pc, #184]	@ (80046f4 <xTaskIncrementTick+0x15c>)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004640:	e02f      	b.n	80046a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	3304      	adds	r3, #4
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe ff46 	bl	80034d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3318      	adds	r3, #24
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe ff3d 	bl	80034d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004662:	4b25      	ldr	r3, [pc, #148]	@ (80046f8 <xTaskIncrementTick+0x160>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d903      	bls.n	8004672 <xTaskIncrementTick+0xda>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	4a22      	ldr	r2, [pc, #136]	@ (80046f8 <xTaskIncrementTick+0x160>)
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4a1f      	ldr	r2, [pc, #124]	@ (80046fc <xTaskIncrementTick+0x164>)
 8004680:	441a      	add	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	3304      	adds	r3, #4
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fe fec8 	bl	800341e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004692:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <xTaskIncrementTick+0x168>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	429a      	cmp	r2, r3
 800469a:	d3b8      	bcc.n	800460e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a0:	e7b5      	b.n	800460e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046a2:	4b17      	ldr	r3, [pc, #92]	@ (8004700 <xTaskIncrementTick+0x168>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a8:	4914      	ldr	r1, [pc, #80]	@ (80046fc <xTaskIncrementTick+0x164>)
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d901      	bls.n	80046be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80046ba:	2301      	movs	r3, #1
 80046bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046be:	4b11      	ldr	r3, [pc, #68]	@ (8004704 <xTaskIncrementTick+0x16c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80046c6:	2301      	movs	r3, #1
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	e004      	b.n	80046d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004708 <xTaskIncrementTick+0x170>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004708 <xTaskIncrementTick+0x170>)
 80046d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046d6:	697b      	ldr	r3, [r7, #20]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000d00 	.word	0x20000d00
 80046e4:	20000cdc 	.word	0x20000cdc
 80046e8:	20000c90 	.word	0x20000c90
 80046ec:	20000c94 	.word	0x20000c94
 80046f0:	20000cf0 	.word	0x20000cf0
 80046f4:	20000cf8 	.word	0x20000cf8
 80046f8:	20000ce0 	.word	0x20000ce0
 80046fc:	20000808 	.word	0x20000808
 8004700:	20000804 	.word	0x20000804
 8004704:	20000cec 	.word	0x20000cec
 8004708:	20000ce8 	.word	0x20000ce8

0800470c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004712:	4b28      	ldr	r3, [pc, #160]	@ (80047b4 <vTaskSwitchContext+0xa8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800471a:	4b27      	ldr	r3, [pc, #156]	@ (80047b8 <vTaskSwitchContext+0xac>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004720:	e042      	b.n	80047a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004722:	4b25      	ldr	r3, [pc, #148]	@ (80047b8 <vTaskSwitchContext+0xac>)
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004728:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <vTaskSwitchContext+0xb0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e011      	b.n	8004754 <vTaskSwitchContext+0x48>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <vTaskSwitchContext+0x42>
	__asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	607b      	str	r3, [r7, #4]
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	e7fd      	b.n	800474a <vTaskSwitchContext+0x3e>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	3b01      	subs	r3, #1
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	491a      	ldr	r1, [pc, #104]	@ (80047c0 <vTaskSwitchContext+0xb4>)
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0e3      	beq.n	8004730 <vTaskSwitchContext+0x24>
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4a13      	ldr	r2, [pc, #76]	@ (80047c0 <vTaskSwitchContext+0xb4>)
 8004774:	4413      	add	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	605a      	str	r2, [r3, #4]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	3308      	adds	r3, #8
 800478a:	429a      	cmp	r2, r3
 800478c:	d104      	bne.n	8004798 <vTaskSwitchContext+0x8c>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	605a      	str	r2, [r3, #4]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	4a09      	ldr	r2, [pc, #36]	@ (80047c4 <vTaskSwitchContext+0xb8>)
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4a06      	ldr	r2, [pc, #24]	@ (80047bc <vTaskSwitchContext+0xb0>)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6013      	str	r3, [r2, #0]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	20000d00 	.word	0x20000d00
 80047b8:	20000cec 	.word	0x20000cec
 80047bc:	20000ce0 	.word	0x20000ce0
 80047c0:	20000808 	.word	0x20000808
 80047c4:	20000804 	.word	0x20000804

080047c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80047d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047dc:	f383 8811 	msr	BASEPRI, r3
 80047e0:	f3bf 8f6f 	isb	sy
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	60fb      	str	r3, [r7, #12]
}
 80047ea:	bf00      	nop
 80047ec:	bf00      	nop
 80047ee:	e7fd      	b.n	80047ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047f0:	4b07      	ldr	r3, [pc, #28]	@ (8004810 <vTaskPlaceOnEventList+0x48>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3318      	adds	r3, #24
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fe fe34 	bl	8003466 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047fe:	2101      	movs	r1, #1
 8004800:	6838      	ldr	r0, [r7, #0]
 8004802:	f000 fa81 	bl	8004d08 <prvAddCurrentTaskToDelayedList>
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000804 	.word	0x20000804

08004814 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10b      	bne.n	800483e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	617b      	str	r3, [r7, #20]
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	e7fd      	b.n	800483a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800483e:	4b0a      	ldr	r3, [pc, #40]	@ (8004868 <vTaskPlaceOnEventListRestricted+0x54>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3318      	adds	r3, #24
 8004844:	4619      	mov	r1, r3
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7fe fde9 	bl	800341e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	68b8      	ldr	r0, [r7, #8]
 800485c:	f000 fa54 	bl	8004d08 <prvAddCurrentTaskToDelayedList>
	}
 8004860:	bf00      	nop
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	20000804 	.word	0x20000804

0800486c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10b      	bne.n	800489a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60fb      	str	r3, [r7, #12]
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop
 8004898:	e7fd      	b.n	8004896 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	3318      	adds	r3, #24
 800489e:	4618      	mov	r0, r3
 80048a0:	f7fe fe1a 	bl	80034d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a4:	4b1d      	ldr	r3, [pc, #116]	@ (800491c <xTaskRemoveFromEventList+0xb0>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d11d      	bne.n	80048e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7fe fe11 	bl	80034d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ba:	4b19      	ldr	r3, [pc, #100]	@ (8004920 <xTaskRemoveFromEventList+0xb4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d903      	bls.n	80048ca <xTaskRemoveFromEventList+0x5e>
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4a16      	ldr	r2, [pc, #88]	@ (8004920 <xTaskRemoveFromEventList+0xb4>)
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4a13      	ldr	r2, [pc, #76]	@ (8004924 <xTaskRemoveFromEventList+0xb8>)
 80048d8:	441a      	add	r2, r3
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	3304      	adds	r3, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f7fe fd9c 	bl	800341e <vListInsertEnd>
 80048e6:	e005      	b.n	80048f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3318      	adds	r3, #24
 80048ec:	4619      	mov	r1, r3
 80048ee:	480e      	ldr	r0, [pc, #56]	@ (8004928 <xTaskRemoveFromEventList+0xbc>)
 80048f0:	f7fe fd95 	bl	800341e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f8:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <xTaskRemoveFromEventList+0xc0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fe:	429a      	cmp	r2, r3
 8004900:	d905      	bls.n	800490e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004906:	4b0a      	ldr	r3, [pc, #40]	@ (8004930 <xTaskRemoveFromEventList+0xc4>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e001      	b.n	8004912 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000d00 	.word	0x20000d00
 8004920:	20000ce0 	.word	0x20000ce0
 8004924:	20000808 	.word	0x20000808
 8004928:	20000c98 	.word	0x20000c98
 800492c:	20000804 	.word	0x20000804
 8004930:	20000cec 	.word	0x20000cec

08004934 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800493c:	4b06      	ldr	r3, [pc, #24]	@ (8004958 <vTaskInternalSetTimeOutState+0x24>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004944:	4b05      	ldr	r3, [pc, #20]	@ (800495c <vTaskInternalSetTimeOutState+0x28>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	20000cf0 	.word	0x20000cf0
 800495c:	20000cdc 	.word	0x20000cdc

08004960 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10b      	bne.n	8004988 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	613b      	str	r3, [r7, #16]
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	60fb      	str	r3, [r7, #12]
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	e7fd      	b.n	80049a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80049a6:	f000 fe8f 	bl	80056c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004a20 <xTaskCheckForTimeOut+0xc0>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d102      	bne.n	80049ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e023      	b.n	8004a12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b15      	ldr	r3, [pc, #84]	@ (8004a24 <xTaskCheckForTimeOut+0xc4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d007      	beq.n	80049e6 <xTaskCheckForTimeOut+0x86>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	e015      	b.n	8004a12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d20b      	bcs.n	8004a08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1ad2      	subs	r2, r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff ff99 	bl	8004934 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	e004      	b.n	8004a12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a12:	f000 fe8b 	bl	800572c <vPortExitCritical>

	return xReturn;
 8004a16:	69fb      	ldr	r3, [r7, #28]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000cdc 	.word	0x20000cdc
 8004a24:	20000cf0 	.word	0x20000cf0

08004a28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	@ (8004a3c <vTaskMissedYield+0x14>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	20000cec 	.word	0x20000cec

08004a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a48:	f000 f852 	bl	8004af0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a4c:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <prvIdleTask+0x28>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d9f9      	bls.n	8004a48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a54:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <prvIdleTask+0x2c>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a64:	e7f0      	b.n	8004a48 <prvIdleTask+0x8>
 8004a66:	bf00      	nop
 8004a68:	20000808 	.word	0x20000808
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	e00c      	b.n	8004a96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4a12      	ldr	r2, [pc, #72]	@ (8004ad0 <prvInitialiseTaskLists+0x60>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fc9a 	bl	80033c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3301      	adds	r3, #1
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b37      	cmp	r3, #55	@ 0x37
 8004a9a:	d9ef      	bls.n	8004a7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a9c:	480d      	ldr	r0, [pc, #52]	@ (8004ad4 <prvInitialiseTaskLists+0x64>)
 8004a9e:	f7fe fc91 	bl	80033c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aa2:	480d      	ldr	r0, [pc, #52]	@ (8004ad8 <prvInitialiseTaskLists+0x68>)
 8004aa4:	f7fe fc8e 	bl	80033c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004aa8:	480c      	ldr	r0, [pc, #48]	@ (8004adc <prvInitialiseTaskLists+0x6c>)
 8004aaa:	f7fe fc8b 	bl	80033c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aae:	480c      	ldr	r0, [pc, #48]	@ (8004ae0 <prvInitialiseTaskLists+0x70>)
 8004ab0:	f7fe fc88 	bl	80033c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ab4:	480b      	ldr	r0, [pc, #44]	@ (8004ae4 <prvInitialiseTaskLists+0x74>)
 8004ab6:	f7fe fc85 	bl	80033c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <prvInitialiseTaskLists+0x78>)
 8004abc:	4a05      	ldr	r2, [pc, #20]	@ (8004ad4 <prvInitialiseTaskLists+0x64>)
 8004abe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <prvInitialiseTaskLists+0x7c>)
 8004ac2:	4a05      	ldr	r2, [pc, #20]	@ (8004ad8 <prvInitialiseTaskLists+0x68>)
 8004ac4:	601a      	str	r2, [r3, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000808 	.word	0x20000808
 8004ad4:	20000c68 	.word	0x20000c68
 8004ad8:	20000c7c 	.word	0x20000c7c
 8004adc:	20000c98 	.word	0x20000c98
 8004ae0:	20000cac 	.word	0x20000cac
 8004ae4:	20000cc4 	.word	0x20000cc4
 8004ae8:	20000c90 	.word	0x20000c90
 8004aec:	20000c94 	.word	0x20000c94

08004af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af6:	e019      	b.n	8004b2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004af8:	f000 fde6 	bl	80056c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afc:	4b10      	ldr	r3, [pc, #64]	@ (8004b40 <prvCheckTasksWaitingTermination+0x50>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fce5 	bl	80034d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b44 <prvCheckTasksWaitingTermination+0x54>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	4a0b      	ldr	r2, [pc, #44]	@ (8004b44 <prvCheckTasksWaitingTermination+0x54>)
 8004b16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b22:	f000 fe03 	bl	800572c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f810 	bl	8004b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e1      	bne.n	8004af8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000cac 	.word	0x20000cac
 8004b44:	20000cd8 	.word	0x20000cd8
 8004b48:	20000cc0 	.word	0x20000cc0

08004b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ffa0 	bl	8005aa8 <vPortFree>
				vPortFree( pxTCB );
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 ff9d 	bl	8005aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b6e:	e019      	b.n	8004ba4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d103      	bne.n	8004b82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 ff94 	bl	8005aa8 <vPortFree>
	}
 8004b80:	e010      	b.n	8004ba4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d00b      	beq.n	8004ba4 <prvDeleteTCB+0x58>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <prvDeleteTCB+0x54>
	}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <prvResetNextTaskUnblockTime+0x38>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004be8 <prvResetNextTaskUnblockTime+0x3c>)
 8004bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bc4:	e008      	b.n	8004bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc6:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <prvResetNextTaskUnblockTime+0x38>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a04      	ldr	r2, [pc, #16]	@ (8004be8 <prvResetNextTaskUnblockTime+0x3c>)
 8004bd6:	6013      	str	r3, [r2, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	20000c90 	.word	0x20000c90
 8004be8:	20000cf8 	.word	0x20000cf8

08004bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <xTaskGetSchedulerState+0x34>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	e008      	b.n	8004c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c00:	4b08      	ldr	r3, [pc, #32]	@ (8004c24 <xTaskGetSchedulerState+0x38>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e001      	b.n	8004c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c12:	687b      	ldr	r3, [r7, #4]
	}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	20000ce4 	.word	0x20000ce4
 8004c24:	20000d00 	.word	0x20000d00

08004c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d058      	beq.n	8004cf0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8004cfc <xTaskPriorityDisinherit+0xd4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d00b      	beq.n	8004c60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	60bb      	str	r3, [r7, #8]
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	e7fd      	b.n	8004c7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c84:	1e5a      	subs	r2, r3, #1
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d02c      	beq.n	8004cf0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d128      	bne.n	8004cf0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fc18 	bl	80034d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <xTaskPriorityDisinherit+0xd8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d903      	bls.n	8004cd0 <xTaskPriorityDisinherit+0xa8>
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8004d00 <xTaskPriorityDisinherit+0xd8>)
 8004cce:	6013      	str	r3, [r2, #0]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4a09      	ldr	r2, [pc, #36]	@ (8004d04 <xTaskPriorityDisinherit+0xdc>)
 8004cde:	441a      	add	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	f7fe fb99 	bl	800341e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cec:	2301      	movs	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cf0:	697b      	ldr	r3, [r7, #20]
	}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000804 	.word	0x20000804
 8004d00:	20000ce0 	.word	0x20000ce0
 8004d04:	20000808 	.word	0x20000808

08004d08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d12:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d18:	4b20      	ldr	r3, [pc, #128]	@ (8004d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fbda 	bl	80034d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2a:	d10a      	bne.n	8004d42 <prvAddCurrentTaskToDelayedList+0x3a>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d32:	4b1a      	ldr	r3, [pc, #104]	@ (8004d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3304      	adds	r3, #4
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4819      	ldr	r0, [pc, #100]	@ (8004da0 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d3c:	f7fe fb6f 	bl	800341e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d40:	e026      	b.n	8004d90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4413      	add	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d4a:	4b14      	ldr	r3, [pc, #80]	@ (8004d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d209      	bcs.n	8004d6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d5a:	4b12      	ldr	r3, [pc, #72]	@ (8004da4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3304      	adds	r3, #4
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f7fe fb7d 	bl	8003466 <vListInsert>
}
 8004d6c:	e010      	b.n	8004d90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004da8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <prvAddCurrentTaskToDelayedList+0x94>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f7fe fb73 	bl	8003466 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d80:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d202      	bcs.n	8004d90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d8a:	4a08      	ldr	r2, [pc, #32]	@ (8004dac <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6013      	str	r3, [r2, #0]
}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000cdc 	.word	0x20000cdc
 8004d9c:	20000804 	.word	0x20000804
 8004da0:	20000cc4 	.word	0x20000cc4
 8004da4:	20000c94 	.word	0x20000c94
 8004da8:	20000c90 	.word	0x20000c90
 8004dac:	20000cf8 	.word	0x20000cf8

08004db0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	@ 0x28
 8004db4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004dba:	f000 fb13 	bl	80053e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8004e34 <xTimerCreateTimerTask+0x84>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d021      	beq.n	8004e0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004dce:	1d3a      	adds	r2, r7, #4
 8004dd0:	f107 0108 	add.w	r1, r7, #8
 8004dd4:	f107 030c 	add.w	r3, r7, #12
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fe fad9 	bl	8003390 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	9202      	str	r2, [sp, #8]
 8004de6:	9301      	str	r3, [sp, #4]
 8004de8:	2302      	movs	r3, #2
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	2300      	movs	r3, #0
 8004dee:	460a      	mov	r2, r1
 8004df0:	4911      	ldr	r1, [pc, #68]	@ (8004e38 <xTimerCreateTimerTask+0x88>)
 8004df2:	4812      	ldr	r0, [pc, #72]	@ (8004e3c <xTimerCreateTimerTask+0x8c>)
 8004df4:	f7ff f8d0 	bl	8003f98 <xTaskCreateStatic>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4a11      	ldr	r2, [pc, #68]	@ (8004e40 <xTimerCreateTimerTask+0x90>)
 8004dfc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dfe:	4b10      	ldr	r3, [pc, #64]	@ (8004e40 <xTimerCreateTimerTask+0x90>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e06:	2301      	movs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	613b      	str	r3, [r7, #16]
}
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	e7fd      	b.n	8004e24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e28:	697b      	ldr	r3, [r7, #20]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000d34 	.word	0x20000d34
 8004e38:	08006d88 	.word	0x08006d88
 8004e3c:	08004f7d 	.word	0x08004f7d
 8004e40:	20000d38 	.word	0x20000d38

08004e44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b08a      	sub	sp, #40	@ 0x28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <xTimerGenericCommand+0x30>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	623b      	str	r3, [r7, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e74:	4b19      	ldr	r3, [pc, #100]	@ (8004edc <xTimerGenericCommand+0x98>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d02a      	beq.n	8004ed2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	dc18      	bgt.n	8004ec0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e8e:	f7ff fead 	bl	8004bec <xTaskGetSchedulerState>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d109      	bne.n	8004eac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e98:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <xTimerGenericCommand+0x98>)
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	f107 0110 	add.w	r1, r7, #16
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea4:	f7fe fc88 	bl	80037b8 <xQueueGenericSend>
 8004ea8:	6278      	str	r0, [r7, #36]	@ 0x24
 8004eaa:	e012      	b.n	8004ed2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004eac:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <xTimerGenericCommand+0x98>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	f107 0110 	add.w	r1, r7, #16
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f7fe fc7e 	bl	80037b8 <xQueueGenericSend>
 8004ebc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ebe:	e008      	b.n	8004ed2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ec0:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <xTimerGenericCommand+0x98>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	f107 0110 	add.w	r1, r7, #16
 8004ec8:	2300      	movs	r3, #0
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	f7fe fd76 	bl	80039bc <xQueueGenericSendFromISR>
 8004ed0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3728      	adds	r7, #40	@ 0x28
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000d34 	.word	0x20000d34

08004ee0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eea:	4b23      	ldr	r3, [pc, #140]	@ (8004f78 <prvProcessExpiredTimer+0x98>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe faed 	bl	80034d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d023      	beq.n	8004f54 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	699a      	ldr	r2, [r3, #24]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	18d1      	adds	r1, r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	6978      	ldr	r0, [r7, #20]
 8004f1a:	f000 f8d5 	bl	80050c8 <prvInsertTimerInActiveList>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d020      	beq.n	8004f66 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f24:	2300      	movs	r3, #0
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	6978      	ldr	r0, [r7, #20]
 8004f30:	f7ff ff88 	bl	8004e44 <xTimerGenericCommand>
 8004f34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d114      	bne.n	8004f66 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60fb      	str	r3, [r7, #12]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	6978      	ldr	r0, [r7, #20]
 8004f6c:	4798      	blx	r3
}
 8004f6e:	bf00      	nop
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000d2c 	.word	0x20000d2c

08004f7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f84:	f107 0308 	add.w	r3, r7, #8
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f000 f859 	bl	8005040 <prvGetNextExpireTime>
 8004f8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4619      	mov	r1, r3
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f805 	bl	8004fa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f9a:	f000 f8d7 	bl	800514c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f9e:	bf00      	nop
 8004fa0:	e7f0      	b.n	8004f84 <prvTimerTask+0x8>
	...

08004fa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004fae:	f7ff fa37 	bl	8004420 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 f866 	bl	8005088 <prvSampleTimeNow>
 8004fbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d130      	bne.n	8005026 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10a      	bne.n	8004fe0 <prvProcessTimerOrBlockTask+0x3c>
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d806      	bhi.n	8004fe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fd2:	f7ff fa33 	bl	800443c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fd6:	68f9      	ldr	r1, [r7, #12]
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f7ff ff81 	bl	8004ee0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fde:	e024      	b.n	800502a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fe6:	4b13      	ldr	r3, [pc, #76]	@ (8005034 <prvProcessTimerOrBlockTask+0x90>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <prvProcessTimerOrBlockTask+0x50>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <prvProcessTimerOrBlockTask+0x52>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8005038 <prvProcessTimerOrBlockTask+0x94>)
 8004ffa:	6818      	ldr	r0, [r3, #0]
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	4619      	mov	r1, r3
 8005006:	f7fe ff93 	bl	8003f30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800500a:	f7ff fa17 	bl	800443c <xTaskResumeAll>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005014:	4b09      	ldr	r3, [pc, #36]	@ (800503c <prvProcessTimerOrBlockTask+0x98>)
 8005016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	f3bf 8f6f 	isb	sy
}
 8005024:	e001      	b.n	800502a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005026:	f7ff fa09 	bl	800443c <xTaskResumeAll>
}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000d30 	.word	0x20000d30
 8005038:	20000d34 	.word	0x20000d34
 800503c:	e000ed04 	.word	0xe000ed04

08005040 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005048:	4b0e      	ldr	r3, [pc, #56]	@ (8005084 <prvGetNextExpireTime+0x44>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <prvGetNextExpireTime+0x16>
 8005052:	2201      	movs	r2, #1
 8005054:	e000      	b.n	8005058 <prvGetNextExpireTime+0x18>
 8005056:	2200      	movs	r2, #0
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d105      	bne.n	8005070 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005064:	4b07      	ldr	r3, [pc, #28]	@ (8005084 <prvGetNextExpireTime+0x44>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e001      	b.n	8005074 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005074:	68fb      	ldr	r3, [r7, #12]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000d2c 	.word	0x20000d2c

08005088 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005090:	f7ff fa72 	bl	8004578 <xTaskGetTickCount>
 8005094:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005096:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <prvSampleTimeNow+0x3c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	429a      	cmp	r2, r3
 800509e:	d205      	bcs.n	80050ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80050a0:	f000 f93a 	bl	8005318 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050b2:	4a04      	ldr	r2, [pc, #16]	@ (80050c4 <prvSampleTimeNow+0x3c>)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050b8:	68fb      	ldr	r3, [r7, #12]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	20000d3c 	.word	0x20000d3c

080050c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68fa      	ldr	r2, [r7, #12]
 80050e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d812      	bhi.n	8005114 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	1ad2      	subs	r2, r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e01b      	b.n	800513a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005102:	4b10      	ldr	r3, [pc, #64]	@ (8005144 <prvInsertTimerInActiveList+0x7c>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3304      	adds	r3, #4
 800510a:	4619      	mov	r1, r3
 800510c:	4610      	mov	r0, r2
 800510e:	f7fe f9aa 	bl	8003466 <vListInsert>
 8005112:	e012      	b.n	800513a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d206      	bcs.n	800512a <prvInsertTimerInActiveList+0x62>
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d302      	bcc.n	800512a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005124:	2301      	movs	r3, #1
 8005126:	617b      	str	r3, [r7, #20]
 8005128:	e007      	b.n	800513a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800512a:	4b07      	ldr	r3, [pc, #28]	@ (8005148 <prvInsertTimerInActiveList+0x80>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f7fe f996 	bl	8003466 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800513a:	697b      	ldr	r3, [r7, #20]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20000d30 	.word	0x20000d30
 8005148:	20000d2c 	.word	0x20000d2c

0800514c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08e      	sub	sp, #56	@ 0x38
 8005150:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005152:	e0ce      	b.n	80052f2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	da19      	bge.n	800518e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	3304      	adds	r3, #4
 800515e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10b      	bne.n	800517e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	61fb      	str	r3, [r7, #28]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800517e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005184:	6850      	ldr	r0, [r2, #4]
 8005186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005188:	6892      	ldr	r2, [r2, #8]
 800518a:	4611      	mov	r1, r2
 800518c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f2c0 80ae 	blt.w	80052f2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800519a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a4:	3304      	adds	r3, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe f996 	bl	80034d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80051ac:	463b      	mov	r3, r7
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff ff6a 	bl	8005088 <prvSampleTimeNow>
 80051b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b09      	cmp	r3, #9
 80051ba:	f200 8097 	bhi.w	80052ec <prvProcessReceivedCommands+0x1a0>
 80051be:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <prvProcessReceivedCommands+0x78>)
 80051c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051ed 	.word	0x080051ed
 80051d0:	08005263 	.word	0x08005263
 80051d4:	08005277 	.word	0x08005277
 80051d8:	080052c3 	.word	0x080052c3
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051ed 	.word	0x080051ed
 80051e4:	08005263 	.word	0x08005263
 80051e8:	08005277 	.word	0x08005277
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	18d1      	adds	r1, r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800520c:	f7ff ff5c 	bl	80050c8 <prvInsertTimerInActiveList>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d06c      	beq.n	80052f0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800521c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d061      	beq.n	80052f0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	441a      	add	r2, r3
 8005234:	2300      	movs	r3, #0
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	2300      	movs	r3, #0
 800523a:	2100      	movs	r1, #0
 800523c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800523e:	f7ff fe01 	bl	8004e44 <xTimerGenericCommand>
 8005242:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d152      	bne.n	80052f0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	61bb      	str	r3, [r7, #24]
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	b2da      	uxtb	r2, r3
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005274:	e03d      	b.n	80052f2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800527c:	f043 0301 	orr.w	r3, r3, #1
 8005280:	b2da      	uxtb	r2, r3
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800528e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10b      	bne.n	80052ae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	617b      	str	r3, [r7, #20]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80052ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	18d1      	adds	r1, r2, r3
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052bc:	f7ff ff04 	bl	80050c8 <prvInsertTimerInActiveList>
					break;
 80052c0:	e017      	b.n	80052f2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d103      	bne.n	80052d8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80052d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d2:	f000 fbe9 	bl	8005aa8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80052d6:	e00c      	b.n	80052f2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80052ea:	e002      	b.n	80052f2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <prvProcessReceivedCommands+0x1a6>
					break;
 80052f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <prvProcessReceivedCommands+0x1c8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	1d39      	adds	r1, r7, #4
 80052f8:	2200      	movs	r2, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fbfc 	bl	8003af8 <xQueueReceive>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	f47f af26 	bne.w	8005154 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	3730      	adds	r7, #48	@ 0x30
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000d34 	.word	0x20000d34

08005318 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800531e:	e049      	b.n	80053b4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005320:	4b2e      	ldr	r3, [pc, #184]	@ (80053dc <prvSwitchTimerLists+0xc4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800532a:	4b2c      	ldr	r3, [pc, #176]	@ (80053dc <prvSwitchTimerLists+0xc4>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3304      	adds	r3, #4
 8005338:	4618      	mov	r0, r3
 800533a:	f7fe f8cd 	bl	80034d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02f      	beq.n	80053b4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4413      	add	r3, r2
 800535c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d90e      	bls.n	8005384 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005372:	4b1a      	ldr	r3, [pc, #104]	@ (80053dc <prvSwitchTimerLists+0xc4>)
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3304      	adds	r3, #4
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f7fe f872 	bl	8003466 <vListInsert>
 8005382:	e017      	b.n	80053b4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005384:	2300      	movs	r3, #0
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	2300      	movs	r3, #0
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	2100      	movs	r1, #0
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff fd58 	bl	8004e44 <xTimerGenericCommand>
 8005394:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	603b      	str	r3, [r7, #0]
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	e7fd      	b.n	80053b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053b4:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <prvSwitchTimerLists+0xc4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1b0      	bne.n	8005320 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053be:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <prvSwitchTimerLists+0xc4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053c4:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <prvSwitchTimerLists+0xc8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a04      	ldr	r2, [pc, #16]	@ (80053dc <prvSwitchTimerLists+0xc4>)
 80053ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053cc:	4a04      	ldr	r2, [pc, #16]	@ (80053e0 <prvSwitchTimerLists+0xc8>)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	6013      	str	r3, [r2, #0]
}
 80053d2:	bf00      	nop
 80053d4:	3718      	adds	r7, #24
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000d2c 	.word	0x20000d2c
 80053e0:	20000d30 	.word	0x20000d30

080053e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053ea:	f000 f96d 	bl	80056c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053ee:	4b15      	ldr	r3, [pc, #84]	@ (8005444 <prvCheckForValidListAndQueue+0x60>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d120      	bne.n	8005438 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80053f6:	4814      	ldr	r0, [pc, #80]	@ (8005448 <prvCheckForValidListAndQueue+0x64>)
 80053f8:	f7fd ffe4 	bl	80033c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80053fc:	4813      	ldr	r0, [pc, #76]	@ (800544c <prvCheckForValidListAndQueue+0x68>)
 80053fe:	f7fd ffe1 	bl	80033c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005402:	4b13      	ldr	r3, [pc, #76]	@ (8005450 <prvCheckForValidListAndQueue+0x6c>)
 8005404:	4a10      	ldr	r2, [pc, #64]	@ (8005448 <prvCheckForValidListAndQueue+0x64>)
 8005406:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005408:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <prvCheckForValidListAndQueue+0x70>)
 800540a:	4a10      	ldr	r2, [pc, #64]	@ (800544c <prvCheckForValidListAndQueue+0x68>)
 800540c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800540e:	2300      	movs	r3, #0
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	4b11      	ldr	r3, [pc, #68]	@ (8005458 <prvCheckForValidListAndQueue+0x74>)
 8005414:	4a11      	ldr	r2, [pc, #68]	@ (800545c <prvCheckForValidListAndQueue+0x78>)
 8005416:	2110      	movs	r1, #16
 8005418:	200a      	movs	r0, #10
 800541a:	f7fe f8f1 	bl	8003600 <xQueueGenericCreateStatic>
 800541e:	4603      	mov	r3, r0
 8005420:	4a08      	ldr	r2, [pc, #32]	@ (8005444 <prvCheckForValidListAndQueue+0x60>)
 8005422:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005424:	4b07      	ldr	r3, [pc, #28]	@ (8005444 <prvCheckForValidListAndQueue+0x60>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800542c:	4b05      	ldr	r3, [pc, #20]	@ (8005444 <prvCheckForValidListAndQueue+0x60>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	490b      	ldr	r1, [pc, #44]	@ (8005460 <prvCheckForValidListAndQueue+0x7c>)
 8005432:	4618      	mov	r0, r3
 8005434:	f7fe fd52 	bl	8003edc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005438:	f000 f978 	bl	800572c <vPortExitCritical>
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000d34 	.word	0x20000d34
 8005448:	20000d04 	.word	0x20000d04
 800544c:	20000d18 	.word	0x20000d18
 8005450:	20000d2c 	.word	0x20000d2c
 8005454:	20000d30 	.word	0x20000d30
 8005458:	20000de0 	.word	0x20000de0
 800545c:	20000d40 	.word	0x20000d40
 8005460:	08006d90 	.word	0x08006d90

08005464 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3b04      	subs	r3, #4
 8005474:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800547c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3b04      	subs	r3, #4
 8005482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 0201 	bic.w	r2, r3, #1
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3b04      	subs	r3, #4
 8005492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005494:	4a0c      	ldr	r2, [pc, #48]	@ (80054c8 <pxPortInitialiseStack+0x64>)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3b14      	subs	r3, #20
 800549e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3b04      	subs	r3, #4
 80054aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f06f 0202 	mvn.w	r2, #2
 80054b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b20      	subs	r3, #32
 80054b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054ba:	68fb      	ldr	r3, [r7, #12]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	080054cd 	.word	0x080054cd

080054cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054d6:	4b13      	ldr	r3, [pc, #76]	@ (8005524 <prvTaskExitError+0x58>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d00b      	beq.n	80054f8 <prvTaskExitError+0x2c>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <prvTaskExitError+0x28>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	60bb      	str	r3, [r7, #8]
}
 800550a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800550c:	bf00      	nop
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0fc      	beq.n	800550e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	2000000c 	.word	0x2000000c
	...

08005530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005530:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <pxCurrentTCBConst2>)
 8005532:	6819      	ldr	r1, [r3, #0]
 8005534:	6808      	ldr	r0, [r1, #0]
 8005536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553a:	f380 8809 	msr	PSP, r0
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f04f 0000 	mov.w	r0, #0
 8005546:	f380 8811 	msr	BASEPRI, r0
 800554a:	4770      	bx	lr
 800554c:	f3af 8000 	nop.w

08005550 <pxCurrentTCBConst2>:
 8005550:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop

08005558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005558:	4808      	ldr	r0, [pc, #32]	@ (800557c <prvPortStartFirstTask+0x24>)
 800555a:	6800      	ldr	r0, [r0, #0]
 800555c:	6800      	ldr	r0, [r0, #0]
 800555e:	f380 8808 	msr	MSP, r0
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8814 	msr	CONTROL, r0
 800556a:	b662      	cpsie	i
 800556c:	b661      	cpsie	f
 800556e:	f3bf 8f4f 	dsb	sy
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	df00      	svc	0
 8005578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800557a:	bf00      	nop
 800557c:	e000ed08 	.word	0xe000ed08

08005580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005586:	4b47      	ldr	r3, [pc, #284]	@ (80056a4 <xPortStartScheduler+0x124>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a47      	ldr	r2, [pc, #284]	@ (80056a8 <xPortStartScheduler+0x128>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d10b      	bne.n	80055a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	bf00      	nop
 80055a6:	e7fd      	b.n	80055a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80055a8:	4b3e      	ldr	r3, [pc, #248]	@ (80056a4 <xPortStartScheduler+0x124>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a3f      	ldr	r2, [pc, #252]	@ (80056ac <xPortStartScheduler+0x12c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10b      	bne.n	80055ca <xPortStartScheduler+0x4a>
	__asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	613b      	str	r3, [r7, #16]
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	e7fd      	b.n	80055c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055ca:	4b39      	ldr	r3, [pc, #228]	@ (80056b0 <xPortStartScheduler+0x130>)
 80055cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	22ff      	movs	r2, #255	@ 0xff
 80055da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4b31      	ldr	r3, [pc, #196]	@ (80056b4 <xPortStartScheduler+0x134>)
 80055f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055f2:	4b31      	ldr	r3, [pc, #196]	@ (80056b8 <xPortStartScheduler+0x138>)
 80055f4:	2207      	movs	r2, #7
 80055f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055f8:	e009      	b.n	800560e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80055fa:	4b2f      	ldr	r3, [pc, #188]	@ (80056b8 <xPortStartScheduler+0x138>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3b01      	subs	r3, #1
 8005600:	4a2d      	ldr	r2, [pc, #180]	@ (80056b8 <xPortStartScheduler+0x138>)
 8005602:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	b2db      	uxtb	r3, r3
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	b2db      	uxtb	r3, r3
 800560c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b80      	cmp	r3, #128	@ 0x80
 8005618:	d0ef      	beq.n	80055fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800561a:	4b27      	ldr	r3, [pc, #156]	@ (80056b8 <xPortStartScheduler+0x138>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1c3 0307 	rsb	r3, r3, #7
 8005622:	2b04      	cmp	r3, #4
 8005624:	d00b      	beq.n	800563e <xPortStartScheduler+0xbe>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60bb      	str	r3, [r7, #8]
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	e7fd      	b.n	800563a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800563e:	4b1e      	ldr	r3, [pc, #120]	@ (80056b8 <xPortStartScheduler+0x138>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	4a1c      	ldr	r2, [pc, #112]	@ (80056b8 <xPortStartScheduler+0x138>)
 8005646:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005648:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <xPortStartScheduler+0x138>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005650:	4a19      	ldr	r2, [pc, #100]	@ (80056b8 <xPortStartScheduler+0x138>)
 8005652:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800565c:	4b17      	ldr	r3, [pc, #92]	@ (80056bc <xPortStartScheduler+0x13c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a16      	ldr	r2, [pc, #88]	@ (80056bc <xPortStartScheduler+0x13c>)
 8005662:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005666:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005668:	4b14      	ldr	r3, [pc, #80]	@ (80056bc <xPortStartScheduler+0x13c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a13      	ldr	r2, [pc, #76]	@ (80056bc <xPortStartScheduler+0x13c>)
 800566e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005672:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005674:	f000 f8da 	bl	800582c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005678:	4b11      	ldr	r3, [pc, #68]	@ (80056c0 <xPortStartScheduler+0x140>)
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800567e:	f000 f8f9 	bl	8005874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005682:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <xPortStartScheduler+0x144>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a0f      	ldr	r2, [pc, #60]	@ (80056c4 <xPortStartScheduler+0x144>)
 8005688:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800568c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800568e:	f7ff ff63 	bl	8005558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005692:	f7ff f83b 	bl	800470c <vTaskSwitchContext>
	prvTaskExitError();
 8005696:	f7ff ff19 	bl	80054cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	e000ed00 	.word	0xe000ed00
 80056a8:	410fc271 	.word	0x410fc271
 80056ac:	410fc270 	.word	0x410fc270
 80056b0:	e000e400 	.word	0xe000e400
 80056b4:	20000e30 	.word	0x20000e30
 80056b8:	20000e34 	.word	0x20000e34
 80056bc:	e000ed20 	.word	0xe000ed20
 80056c0:	2000000c 	.word	0x2000000c
 80056c4:	e000ef34 	.word	0xe000ef34

080056c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	607b      	str	r3, [r7, #4]
}
 80056e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056e2:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <vPortEnterCritical+0x5c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3301      	adds	r3, #1
 80056e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005724 <vPortEnterCritical+0x5c>)
 80056ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005724 <vPortEnterCritical+0x5c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d110      	bne.n	8005716 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005728 <vPortEnterCritical+0x60>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00b      	beq.n	8005716 <vPortEnterCritical+0x4e>
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	603b      	str	r3, [r7, #0]
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <vPortEnterCritical+0x4a>
	}
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	2000000c 	.word	0x2000000c
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005732:	4b12      	ldr	r3, [pc, #72]	@ (800577c <vPortExitCritical+0x50>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10b      	bne.n	8005752 <vPortExitCritical+0x26>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	607b      	str	r3, [r7, #4]
}
 800574c:	bf00      	nop
 800574e:	bf00      	nop
 8005750:	e7fd      	b.n	800574e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005752:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <vPortExitCritical+0x50>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3b01      	subs	r3, #1
 8005758:	4a08      	ldr	r2, [pc, #32]	@ (800577c <vPortExitCritical+0x50>)
 800575a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800575c:	4b07      	ldr	r3, [pc, #28]	@ (800577c <vPortExitCritical+0x50>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d105      	bne.n	8005770 <vPortExitCritical+0x44>
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f383 8811 	msr	BASEPRI, r3
}
 800576e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	2000000c 	.word	0x2000000c

08005780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005780:	f3ef 8009 	mrs	r0, PSP
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <pxCurrentTCBConst>)
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	f01e 0f10 	tst.w	lr, #16
 8005790:	bf08      	it	eq
 8005792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800579a:	6010      	str	r0, [r2, #0]
 800579c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80057a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80057a4:	f380 8811 	msr	BASEPRI, r0
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f7fe ffac 	bl	800470c <vTaskSwitchContext>
 80057b4:	f04f 0000 	mov.w	r0, #0
 80057b8:	f380 8811 	msr	BASEPRI, r0
 80057bc:	bc09      	pop	{r0, r3}
 80057be:	6819      	ldr	r1, [r3, #0]
 80057c0:	6808      	ldr	r0, [r1, #0]
 80057c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c6:	f01e 0f10 	tst.w	lr, #16
 80057ca:	bf08      	it	eq
 80057cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057d0:	f380 8809 	msr	PSP, r0
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	f3af 8000 	nop.w

080057e0 <pxCurrentTCBConst>:
 80057e0:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop

080057e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	607b      	str	r3, [r7, #4]
}
 8005800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005802:	f7fe fec9 	bl	8004598 <xTaskIncrementTick>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800580c:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <xPortSysTickHandler+0x40>)
 800580e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	2300      	movs	r3, #0
 8005816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	f383 8811 	msr	BASEPRI, r3
}
 800581e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <vPortSetupTimerInterrupt+0x34>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005836:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <vPortSetupTimerInterrupt+0x38>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <vPortSetupTimerInterrupt+0x3c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a0a      	ldr	r2, [pc, #40]	@ (800586c <vPortSetupTimerInterrupt+0x40>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	099b      	lsrs	r3, r3, #6
 8005848:	4a09      	ldr	r2, [pc, #36]	@ (8005870 <vPortSetupTimerInterrupt+0x44>)
 800584a:	3b01      	subs	r3, #1
 800584c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800584e:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <vPortSetupTimerInterrupt+0x34>)
 8005850:	2207      	movs	r2, #7
 8005852:	601a      	str	r2, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	e000e010 	.word	0xe000e010
 8005864:	e000e018 	.word	0xe000e018
 8005868:	20000000 	.word	0x20000000
 800586c:	10624dd3 	.word	0x10624dd3
 8005870:	e000e014 	.word	0xe000e014

08005874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005874:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005884 <vPortEnableVFP+0x10>
 8005878:	6801      	ldr	r1, [r0, #0]
 800587a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800587e:	6001      	str	r1, [r0, #0]
 8005880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005882:	bf00      	nop
 8005884:	e000ed88 	.word	0xe000ed88

08005888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800588e:	f3ef 8305 	mrs	r3, IPSR
 8005892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	d915      	bls.n	80058c6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800589a:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <vPortValidateInterruptPriority+0x74>)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80058a4:	4b16      	ldr	r3, [pc, #88]	@ (8005900 <vPortValidateInterruptPriority+0x78>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	7afa      	ldrb	r2, [r7, #11]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d20b      	bcs.n	80058c6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80058ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	607b      	str	r3, [r7, #4]
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	e7fd      	b.n	80058c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005904 <vPortValidateInterruptPriority+0x7c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80058ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005908 <vPortValidateInterruptPriority+0x80>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d90b      	bls.n	80058ee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	603b      	str	r3, [r7, #0]
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <vPortValidateInterruptPriority+0x62>
	}
 80058ee:	bf00      	nop
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	e000e3f0 	.word	0xe000e3f0
 8005900:	20000e30 	.word	0x20000e30
 8005904:	e000ed0c 	.word	0xe000ed0c
 8005908:	20000e34 	.word	0x20000e34

0800590c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08a      	sub	sp, #40	@ 0x28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005918:	f7fe fd82 	bl	8004420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800591c:	4b5c      	ldr	r3, [pc, #368]	@ (8005a90 <pvPortMalloc+0x184>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005924:	f000 f924 	bl	8005b70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005928:	4b5a      	ldr	r3, [pc, #360]	@ (8005a94 <pvPortMalloc+0x188>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4013      	ands	r3, r2
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 8095 	bne.w	8005a60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01e      	beq.n	800597a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800593c:	2208      	movs	r2, #8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4413      	add	r3, r2
 8005942:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b00      	cmp	r3, #0
 800594c:	d015      	beq.n	800597a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f023 0307 	bic.w	r3, r3, #7
 8005954:	3308      	adds	r3, #8
 8005956:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00b      	beq.n	800597a <pvPortMalloc+0x6e>
	__asm volatile
 8005962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	617b      	str	r3, [r7, #20]
}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	e7fd      	b.n	8005976 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d06f      	beq.n	8005a60 <pvPortMalloc+0x154>
 8005980:	4b45      	ldr	r3, [pc, #276]	@ (8005a98 <pvPortMalloc+0x18c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	429a      	cmp	r2, r3
 8005988:	d86a      	bhi.n	8005a60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800598a:	4b44      	ldr	r3, [pc, #272]	@ (8005a9c <pvPortMalloc+0x190>)
 800598c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800598e:	4b43      	ldr	r3, [pc, #268]	@ (8005a9c <pvPortMalloc+0x190>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005994:	e004      	b.n	80059a0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d903      	bls.n	80059b2 <pvPortMalloc+0xa6>
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f1      	bne.n	8005996 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80059b2:	4b37      	ldr	r3, [pc, #220]	@ (8005a90 <pvPortMalloc+0x184>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d051      	beq.n	8005a60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2208      	movs	r2, #8
 80059c2:	4413      	add	r3, r2
 80059c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	1ad2      	subs	r2, r2, r3
 80059d6:	2308      	movs	r3, #8
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	429a      	cmp	r2, r3
 80059dc:	d920      	bls.n	8005a20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4413      	add	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	f003 0307 	and.w	r3, r3, #7
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00b      	beq.n	8005a08 <pvPortMalloc+0xfc>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	613b      	str	r3, [r7, #16]
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	e7fd      	b.n	8005a04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005a1a:	69b8      	ldr	r0, [r7, #24]
 8005a1c:	f000 f90a 	bl	8005c34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a20:	4b1d      	ldr	r3, [pc, #116]	@ (8005a98 <pvPortMalloc+0x18c>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a98 <pvPortMalloc+0x18c>)
 8005a2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005a98 <pvPortMalloc+0x18c>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa0 <pvPortMalloc+0x194>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d203      	bcs.n	8005a42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a3a:	4b17      	ldr	r3, [pc, #92]	@ (8005a98 <pvPortMalloc+0x18c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a18      	ldr	r2, [pc, #96]	@ (8005aa0 <pvPortMalloc+0x194>)
 8005a40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	4b13      	ldr	r3, [pc, #76]	@ (8005a94 <pvPortMalloc+0x188>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a56:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <pvPortMalloc+0x198>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	4a11      	ldr	r2, [pc, #68]	@ (8005aa4 <pvPortMalloc+0x198>)
 8005a5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a60:	f7fe fcec 	bl	800443c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00b      	beq.n	8005a86 <pvPortMalloc+0x17a>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	60fb      	str	r3, [r7, #12]
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	e7fd      	b.n	8005a82 <pvPortMalloc+0x176>
	return pvReturn;
 8005a86:	69fb      	ldr	r3, [r7, #28]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3728      	adds	r7, #40	@ 0x28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20004a40 	.word	0x20004a40
 8005a94:	20004a54 	.word	0x20004a54
 8005a98:	20004a44 	.word	0x20004a44
 8005a9c:	20004a38 	.word	0x20004a38
 8005aa0:	20004a48 	.word	0x20004a48
 8005aa4:	20004a4c 	.word	0x20004a4c

08005aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d04f      	beq.n	8005b5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005aba:	2308      	movs	r3, #8
 8005abc:	425b      	negs	r3, r3
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	4b25      	ldr	r3, [pc, #148]	@ (8005b64 <vPortFree+0xbc>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <vPortFree+0x46>
	__asm volatile
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	60fb      	str	r3, [r7, #12]
}
 8005ae8:	bf00      	nop
 8005aea:	bf00      	nop
 8005aec:	e7fd      	b.n	8005aea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <vPortFree+0x66>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	60bb      	str	r3, [r7, #8]
}
 8005b08:	bf00      	nop
 8005b0a:	bf00      	nop
 8005b0c:	e7fd      	b.n	8005b0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	4b14      	ldr	r3, [pc, #80]	@ (8005b64 <vPortFree+0xbc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4013      	ands	r3, r2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01e      	beq.n	8005b5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11a      	bne.n	8005b5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	4b0e      	ldr	r3, [pc, #56]	@ (8005b64 <vPortFree+0xbc>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	401a      	ands	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b34:	f7fe fc74 	bl	8004420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b68 <vPortFree+0xc0>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4413      	add	r3, r2
 8005b42:	4a09      	ldr	r2, [pc, #36]	@ (8005b68 <vPortFree+0xc0>)
 8005b44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b46:	6938      	ldr	r0, [r7, #16]
 8005b48:	f000 f874 	bl	8005c34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b4c:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <vPortFree+0xc4>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	4a06      	ldr	r2, [pc, #24]	@ (8005b6c <vPortFree+0xc4>)
 8005b54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b56:	f7fe fc71 	bl	800443c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b5a:	bf00      	nop
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20004a54 	.word	0x20004a54
 8005b68:	20004a44 	.word	0x20004a44
 8005b6c:	20004a50 	.word	0x20004a50

08005b70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005b7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b7c:	4b27      	ldr	r3, [pc, #156]	@ (8005c1c <prvHeapInit+0xac>)
 8005b7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00c      	beq.n	8005ba4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3307      	adds	r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c1c <prvHeapInit+0xac>)
 8005ba0:	4413      	add	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c20 <prvHeapInit+0xb0>)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005bae:	4b1c      	ldr	r3, [pc, #112]	@ (8005c20 <prvHeapInit+0xb0>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	4413      	add	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1a9b      	subs	r3, r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0307 	bic.w	r3, r3, #7
 8005bca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <prvHeapInit+0xb4>)
 8005bd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005bd2:	4b14      	ldr	r3, [pc, #80]	@ (8005c24 <prvHeapInit+0xb4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bda:	4b12      	ldr	r3, [pc, #72]	@ (8005c24 <prvHeapInit+0xb4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	1ad2      	subs	r2, r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005c24 <prvHeapInit+0xb4>)
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8005c28 <prvHeapInit+0xb8>)
 8005bfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a09      	ldr	r2, [pc, #36]	@ (8005c2c <prvHeapInit+0xbc>)
 8005c06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005c08:	4b09      	ldr	r3, [pc, #36]	@ (8005c30 <prvHeapInit+0xc0>)
 8005c0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c0e:	601a      	str	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	20000e38 	.word	0x20000e38
 8005c20:	20004a38 	.word	0x20004a38
 8005c24:	20004a40 	.word	0x20004a40
 8005c28:	20004a48 	.word	0x20004a48
 8005c2c:	20004a44 	.word	0x20004a44
 8005c30:	20004a54 	.word	0x20004a54

08005c34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c3c:	4b28      	ldr	r3, [pc, #160]	@ (8005ce0 <prvInsertBlockIntoFreeList+0xac>)
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e002      	b.n	8005c48 <prvInsertBlockIntoFreeList+0x14>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d8f7      	bhi.n	8005c42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d108      	bne.n	8005c76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	441a      	add	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	441a      	add	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d118      	bne.n	8005cbc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4b15      	ldr	r3, [pc, #84]	@ (8005ce4 <prvInsertBlockIntoFreeList+0xb0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d00d      	beq.n	8005cb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	441a      	add	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	601a      	str	r2, [r3, #0]
 8005cb0:	e008      	b.n	8005cc4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ce4 <prvInsertBlockIntoFreeList+0xb0>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	e003      	b.n	8005cc4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d002      	beq.n	8005cd2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd2:	bf00      	nop
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	20004a38 	.word	0x20004a38
 8005ce4:	20004a40 	.word	0x20004a40

08005ce8 <std>:
 8005ce8:	2300      	movs	r3, #0
 8005cea:	b510      	push	{r4, lr}
 8005cec:	4604      	mov	r4, r0
 8005cee:	e9c0 3300 	strd	r3, r3, [r0]
 8005cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cf6:	6083      	str	r3, [r0, #8]
 8005cf8:	8181      	strh	r1, [r0, #12]
 8005cfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cfc:	81c2      	strh	r2, [r0, #14]
 8005cfe:	6183      	str	r3, [r0, #24]
 8005d00:	4619      	mov	r1, r3
 8005d02:	2208      	movs	r2, #8
 8005d04:	305c      	adds	r0, #92	@ 0x5c
 8005d06:	f000 f9f9 	bl	80060fc <memset>
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d40 <std+0x58>)
 8005d0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <std+0x5c>)
 8005d10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d12:	4b0d      	ldr	r3, [pc, #52]	@ (8005d48 <std+0x60>)
 8005d14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d16:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <std+0x64>)
 8005d18:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d50 <std+0x68>)
 8005d1c:	6224      	str	r4, [r4, #32]
 8005d1e:	429c      	cmp	r4, r3
 8005d20:	d006      	beq.n	8005d30 <std+0x48>
 8005d22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d26:	4294      	cmp	r4, r2
 8005d28:	d002      	beq.n	8005d30 <std+0x48>
 8005d2a:	33d0      	adds	r3, #208	@ 0xd0
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	d105      	bne.n	8005d3c <std+0x54>
 8005d30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d38:	f000 ba58 	b.w	80061ec <__retarget_lock_init_recursive>
 8005d3c:	bd10      	pop	{r4, pc}
 8005d3e:	bf00      	nop
 8005d40:	08005f4d 	.word	0x08005f4d
 8005d44:	08005f6f 	.word	0x08005f6f
 8005d48:	08005fa7 	.word	0x08005fa7
 8005d4c:	08005fcb 	.word	0x08005fcb
 8005d50:	20004a58 	.word	0x20004a58

08005d54 <stdio_exit_handler>:
 8005d54:	4a02      	ldr	r2, [pc, #8]	@ (8005d60 <stdio_exit_handler+0xc>)
 8005d56:	4903      	ldr	r1, [pc, #12]	@ (8005d64 <stdio_exit_handler+0x10>)
 8005d58:	4803      	ldr	r0, [pc, #12]	@ (8005d68 <stdio_exit_handler+0x14>)
 8005d5a:	f000 b869 	b.w	8005e30 <_fwalk_sglue>
 8005d5e:	bf00      	nop
 8005d60:	20000010 	.word	0x20000010
 8005d64:	08006aa5 	.word	0x08006aa5
 8005d68:	20000020 	.word	0x20000020

08005d6c <cleanup_stdio>:
 8005d6c:	6841      	ldr	r1, [r0, #4]
 8005d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005da0 <cleanup_stdio+0x34>)
 8005d70:	4299      	cmp	r1, r3
 8005d72:	b510      	push	{r4, lr}
 8005d74:	4604      	mov	r4, r0
 8005d76:	d001      	beq.n	8005d7c <cleanup_stdio+0x10>
 8005d78:	f000 fe94 	bl	8006aa4 <_fflush_r>
 8005d7c:	68a1      	ldr	r1, [r4, #8]
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <cleanup_stdio+0x38>)
 8005d80:	4299      	cmp	r1, r3
 8005d82:	d002      	beq.n	8005d8a <cleanup_stdio+0x1e>
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fe8d 	bl	8006aa4 <_fflush_r>
 8005d8a:	68e1      	ldr	r1, [r4, #12]
 8005d8c:	4b06      	ldr	r3, [pc, #24]	@ (8005da8 <cleanup_stdio+0x3c>)
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	d004      	beq.n	8005d9c <cleanup_stdio+0x30>
 8005d92:	4620      	mov	r0, r4
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f000 be84 	b.w	8006aa4 <_fflush_r>
 8005d9c:	bd10      	pop	{r4, pc}
 8005d9e:	bf00      	nop
 8005da0:	20004a58 	.word	0x20004a58
 8005da4:	20004ac0 	.word	0x20004ac0
 8005da8:	20004b28 	.word	0x20004b28

08005dac <global_stdio_init.part.0>:
 8005dac:	b510      	push	{r4, lr}
 8005dae:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <global_stdio_init.part.0+0x30>)
 8005db0:	4c0b      	ldr	r4, [pc, #44]	@ (8005de0 <global_stdio_init.part.0+0x34>)
 8005db2:	4a0c      	ldr	r2, [pc, #48]	@ (8005de4 <global_stdio_init.part.0+0x38>)
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	4620      	mov	r0, r4
 8005db8:	2200      	movs	r2, #0
 8005dba:	2104      	movs	r1, #4
 8005dbc:	f7ff ff94 	bl	8005ce8 <std>
 8005dc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	2109      	movs	r1, #9
 8005dc8:	f7ff ff8e 	bl	8005ce8 <std>
 8005dcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd6:	2112      	movs	r1, #18
 8005dd8:	f7ff bf86 	b.w	8005ce8 <std>
 8005ddc:	20004b90 	.word	0x20004b90
 8005de0:	20004a58 	.word	0x20004a58
 8005de4:	08005d55 	.word	0x08005d55

08005de8 <__sfp_lock_acquire>:
 8005de8:	4801      	ldr	r0, [pc, #4]	@ (8005df0 <__sfp_lock_acquire+0x8>)
 8005dea:	f000 ba00 	b.w	80061ee <__retarget_lock_acquire_recursive>
 8005dee:	bf00      	nop
 8005df0:	20004b99 	.word	0x20004b99

08005df4 <__sfp_lock_release>:
 8005df4:	4801      	ldr	r0, [pc, #4]	@ (8005dfc <__sfp_lock_release+0x8>)
 8005df6:	f000 b9fb 	b.w	80061f0 <__retarget_lock_release_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	20004b99 	.word	0x20004b99

08005e00 <__sinit>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	4604      	mov	r4, r0
 8005e04:	f7ff fff0 	bl	8005de8 <__sfp_lock_acquire>
 8005e08:	6a23      	ldr	r3, [r4, #32]
 8005e0a:	b11b      	cbz	r3, 8005e14 <__sinit+0x14>
 8005e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e10:	f7ff bff0 	b.w	8005df4 <__sfp_lock_release>
 8005e14:	4b04      	ldr	r3, [pc, #16]	@ (8005e28 <__sinit+0x28>)
 8005e16:	6223      	str	r3, [r4, #32]
 8005e18:	4b04      	ldr	r3, [pc, #16]	@ (8005e2c <__sinit+0x2c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1f5      	bne.n	8005e0c <__sinit+0xc>
 8005e20:	f7ff ffc4 	bl	8005dac <global_stdio_init.part.0>
 8005e24:	e7f2      	b.n	8005e0c <__sinit+0xc>
 8005e26:	bf00      	nop
 8005e28:	08005d6d 	.word	0x08005d6d
 8005e2c:	20004b90 	.word	0x20004b90

08005e30 <_fwalk_sglue>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4607      	mov	r7, r0
 8005e36:	4688      	mov	r8, r1
 8005e38:	4614      	mov	r4, r2
 8005e3a:	2600      	movs	r6, #0
 8005e3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e40:	f1b9 0901 	subs.w	r9, r9, #1
 8005e44:	d505      	bpl.n	8005e52 <_fwalk_sglue+0x22>
 8005e46:	6824      	ldr	r4, [r4, #0]
 8005e48:	2c00      	cmp	r4, #0
 8005e4a:	d1f7      	bne.n	8005e3c <_fwalk_sglue+0xc>
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e52:	89ab      	ldrh	r3, [r5, #12]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d907      	bls.n	8005e68 <_fwalk_sglue+0x38>
 8005e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	d003      	beq.n	8005e68 <_fwalk_sglue+0x38>
 8005e60:	4629      	mov	r1, r5
 8005e62:	4638      	mov	r0, r7
 8005e64:	47c0      	blx	r8
 8005e66:	4306      	orrs	r6, r0
 8005e68:	3568      	adds	r5, #104	@ 0x68
 8005e6a:	e7e9      	b.n	8005e40 <_fwalk_sglue+0x10>

08005e6c <iprintf>:
 8005e6c:	b40f      	push	{r0, r1, r2, r3}
 8005e6e:	b507      	push	{r0, r1, r2, lr}
 8005e70:	4906      	ldr	r1, [pc, #24]	@ (8005e8c <iprintf+0x20>)
 8005e72:	ab04      	add	r3, sp, #16
 8005e74:	6808      	ldr	r0, [r1, #0]
 8005e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e7a:	6881      	ldr	r1, [r0, #8]
 8005e7c:	9301      	str	r3, [sp, #4]
 8005e7e:	f000 fae9 	bl	8006454 <_vfiprintf_r>
 8005e82:	b003      	add	sp, #12
 8005e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e88:	b004      	add	sp, #16
 8005e8a:	4770      	bx	lr
 8005e8c:	2000001c 	.word	0x2000001c

08005e90 <_puts_r>:
 8005e90:	6a03      	ldr	r3, [r0, #32]
 8005e92:	b570      	push	{r4, r5, r6, lr}
 8005e94:	6884      	ldr	r4, [r0, #8]
 8005e96:	4605      	mov	r5, r0
 8005e98:	460e      	mov	r6, r1
 8005e9a:	b90b      	cbnz	r3, 8005ea0 <_puts_r+0x10>
 8005e9c:	f7ff ffb0 	bl	8005e00 <__sinit>
 8005ea0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ea2:	07db      	lsls	r3, r3, #31
 8005ea4:	d405      	bmi.n	8005eb2 <_puts_r+0x22>
 8005ea6:	89a3      	ldrh	r3, [r4, #12]
 8005ea8:	0598      	lsls	r0, r3, #22
 8005eaa:	d402      	bmi.n	8005eb2 <_puts_r+0x22>
 8005eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eae:	f000 f99e 	bl	80061ee <__retarget_lock_acquire_recursive>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	0719      	lsls	r1, r3, #28
 8005eb6:	d502      	bpl.n	8005ebe <_puts_r+0x2e>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d135      	bne.n	8005f2a <_puts_r+0x9a>
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	f000 f8c5 	bl	8006050 <__swsetup_r>
 8005ec6:	b380      	cbz	r0, 8005f2a <_puts_r+0x9a>
 8005ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8005ecc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ece:	07da      	lsls	r2, r3, #31
 8005ed0:	d405      	bmi.n	8005ede <_puts_r+0x4e>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	059b      	lsls	r3, r3, #22
 8005ed6:	d402      	bmi.n	8005ede <_puts_r+0x4e>
 8005ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eda:	f000 f989 	bl	80061f0 <__retarget_lock_release_recursive>
 8005ede:	4628      	mov	r0, r5
 8005ee0:	bd70      	pop	{r4, r5, r6, pc}
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	da04      	bge.n	8005ef0 <_puts_r+0x60>
 8005ee6:	69a2      	ldr	r2, [r4, #24]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	dc17      	bgt.n	8005f1c <_puts_r+0x8c>
 8005eec:	290a      	cmp	r1, #10
 8005eee:	d015      	beq.n	8005f1c <_puts_r+0x8c>
 8005ef0:	6823      	ldr	r3, [r4, #0]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	6022      	str	r2, [r4, #0]
 8005ef6:	7019      	strb	r1, [r3, #0]
 8005ef8:	68a3      	ldr	r3, [r4, #8]
 8005efa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005efe:	3b01      	subs	r3, #1
 8005f00:	60a3      	str	r3, [r4, #8]
 8005f02:	2900      	cmp	r1, #0
 8005f04:	d1ed      	bne.n	8005ee2 <_puts_r+0x52>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da11      	bge.n	8005f2e <_puts_r+0x9e>
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	210a      	movs	r1, #10
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f85f 	bl	8005fd2 <__swbuf_r>
 8005f14:	3001      	adds	r0, #1
 8005f16:	d0d7      	beq.n	8005ec8 <_puts_r+0x38>
 8005f18:	250a      	movs	r5, #10
 8005f1a:	e7d7      	b.n	8005ecc <_puts_r+0x3c>
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	4628      	mov	r0, r5
 8005f20:	f000 f857 	bl	8005fd2 <__swbuf_r>
 8005f24:	3001      	adds	r0, #1
 8005f26:	d1e7      	bne.n	8005ef8 <_puts_r+0x68>
 8005f28:	e7ce      	b.n	8005ec8 <_puts_r+0x38>
 8005f2a:	3e01      	subs	r6, #1
 8005f2c:	e7e4      	b.n	8005ef8 <_puts_r+0x68>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	6022      	str	r2, [r4, #0]
 8005f34:	220a      	movs	r2, #10
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e7ee      	b.n	8005f18 <_puts_r+0x88>
	...

08005f3c <puts>:
 8005f3c:	4b02      	ldr	r3, [pc, #8]	@ (8005f48 <puts+0xc>)
 8005f3e:	4601      	mov	r1, r0
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	f7ff bfa5 	b.w	8005e90 <_puts_r>
 8005f46:	bf00      	nop
 8005f48:	2000001c 	.word	0x2000001c

08005f4c <__sread>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	460c      	mov	r4, r1
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	f000 f8fc 	bl	8006150 <_read_r>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	bfab      	itete	ge
 8005f5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f60:	181b      	addge	r3, r3, r0
 8005f62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f66:	bfac      	ite	ge
 8005f68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f6a:	81a3      	strhlt	r3, [r4, #12]
 8005f6c:	bd10      	pop	{r4, pc}

08005f6e <__swrite>:
 8005f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f72:	461f      	mov	r7, r3
 8005f74:	898b      	ldrh	r3, [r1, #12]
 8005f76:	05db      	lsls	r3, r3, #23
 8005f78:	4605      	mov	r5, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	4616      	mov	r6, r2
 8005f7e:	d505      	bpl.n	8005f8c <__swrite+0x1e>
 8005f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f84:	2302      	movs	r3, #2
 8005f86:	2200      	movs	r2, #0
 8005f88:	f000 f8d0 	bl	800612c <_lseek_r>
 8005f8c:	89a3      	ldrh	r3, [r4, #12]
 8005f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	4632      	mov	r2, r6
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa2:	f000 b8e7 	b.w	8006174 <_write_r>

08005fa6 <__sseek>:
 8005fa6:	b510      	push	{r4, lr}
 8005fa8:	460c      	mov	r4, r1
 8005faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fae:	f000 f8bd 	bl	800612c <_lseek_r>
 8005fb2:	1c43      	adds	r3, r0, #1
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	bf15      	itete	ne
 8005fb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fc2:	81a3      	strheq	r3, [r4, #12]
 8005fc4:	bf18      	it	ne
 8005fc6:	81a3      	strhne	r3, [r4, #12]
 8005fc8:	bd10      	pop	{r4, pc}

08005fca <__sclose>:
 8005fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fce:	f000 b89d 	b.w	800610c <_close_r>

08005fd2 <__swbuf_r>:
 8005fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	4614      	mov	r4, r2
 8005fd8:	4605      	mov	r5, r0
 8005fda:	b118      	cbz	r0, 8005fe4 <__swbuf_r+0x12>
 8005fdc:	6a03      	ldr	r3, [r0, #32]
 8005fde:	b90b      	cbnz	r3, 8005fe4 <__swbuf_r+0x12>
 8005fe0:	f7ff ff0e 	bl	8005e00 <__sinit>
 8005fe4:	69a3      	ldr	r3, [r4, #24]
 8005fe6:	60a3      	str	r3, [r4, #8]
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	071a      	lsls	r2, r3, #28
 8005fec:	d501      	bpl.n	8005ff2 <__swbuf_r+0x20>
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	b943      	cbnz	r3, 8006004 <__swbuf_r+0x32>
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f000 f82b 	bl	8006050 <__swsetup_r>
 8005ffa:	b118      	cbz	r0, 8006004 <__swbuf_r+0x32>
 8005ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8006000:	4638      	mov	r0, r7
 8006002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	6922      	ldr	r2, [r4, #16]
 8006008:	1a98      	subs	r0, r3, r2
 800600a:	6963      	ldr	r3, [r4, #20]
 800600c:	b2f6      	uxtb	r6, r6
 800600e:	4283      	cmp	r3, r0
 8006010:	4637      	mov	r7, r6
 8006012:	dc05      	bgt.n	8006020 <__swbuf_r+0x4e>
 8006014:	4621      	mov	r1, r4
 8006016:	4628      	mov	r0, r5
 8006018:	f000 fd44 	bl	8006aa4 <_fflush_r>
 800601c:	2800      	cmp	r0, #0
 800601e:	d1ed      	bne.n	8005ffc <__swbuf_r+0x2a>
 8006020:	68a3      	ldr	r3, [r4, #8]
 8006022:	3b01      	subs	r3, #1
 8006024:	60a3      	str	r3, [r4, #8]
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	6022      	str	r2, [r4, #0]
 800602c:	701e      	strb	r6, [r3, #0]
 800602e:	6962      	ldr	r2, [r4, #20]
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	429a      	cmp	r2, r3
 8006034:	d004      	beq.n	8006040 <__swbuf_r+0x6e>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	07db      	lsls	r3, r3, #31
 800603a:	d5e1      	bpl.n	8006000 <__swbuf_r+0x2e>
 800603c:	2e0a      	cmp	r6, #10
 800603e:	d1df      	bne.n	8006000 <__swbuf_r+0x2e>
 8006040:	4621      	mov	r1, r4
 8006042:	4628      	mov	r0, r5
 8006044:	f000 fd2e 	bl	8006aa4 <_fflush_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	d0d9      	beq.n	8006000 <__swbuf_r+0x2e>
 800604c:	e7d6      	b.n	8005ffc <__swbuf_r+0x2a>
	...

08006050 <__swsetup_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4b29      	ldr	r3, [pc, #164]	@ (80060f8 <__swsetup_r+0xa8>)
 8006054:	4605      	mov	r5, r0
 8006056:	6818      	ldr	r0, [r3, #0]
 8006058:	460c      	mov	r4, r1
 800605a:	b118      	cbz	r0, 8006064 <__swsetup_r+0x14>
 800605c:	6a03      	ldr	r3, [r0, #32]
 800605e:	b90b      	cbnz	r3, 8006064 <__swsetup_r+0x14>
 8006060:	f7ff fece 	bl	8005e00 <__sinit>
 8006064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006068:	0719      	lsls	r1, r3, #28
 800606a:	d422      	bmi.n	80060b2 <__swsetup_r+0x62>
 800606c:	06da      	lsls	r2, r3, #27
 800606e:	d407      	bmi.n	8006080 <__swsetup_r+0x30>
 8006070:	2209      	movs	r2, #9
 8006072:	602a      	str	r2, [r5, #0]
 8006074:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	f04f 30ff 	mov.w	r0, #4294967295
 800607e:	e033      	b.n	80060e8 <__swsetup_r+0x98>
 8006080:	0758      	lsls	r0, r3, #29
 8006082:	d512      	bpl.n	80060aa <__swsetup_r+0x5a>
 8006084:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006086:	b141      	cbz	r1, 800609a <__swsetup_r+0x4a>
 8006088:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800608c:	4299      	cmp	r1, r3
 800608e:	d002      	beq.n	8006096 <__swsetup_r+0x46>
 8006090:	4628      	mov	r0, r5
 8006092:	f000 f8bd 	bl	8006210 <_free_r>
 8006096:	2300      	movs	r3, #0
 8006098:	6363      	str	r3, [r4, #52]	@ 0x34
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80060a0:	81a3      	strh	r3, [r4, #12]
 80060a2:	2300      	movs	r3, #0
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	6923      	ldr	r3, [r4, #16]
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	89a3      	ldrh	r3, [r4, #12]
 80060ac:	f043 0308 	orr.w	r3, r3, #8
 80060b0:	81a3      	strh	r3, [r4, #12]
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	b94b      	cbnz	r3, 80060ca <__swsetup_r+0x7a>
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80060bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060c0:	d003      	beq.n	80060ca <__swsetup_r+0x7a>
 80060c2:	4621      	mov	r1, r4
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 fd3b 	bl	8006b40 <__smakebuf_r>
 80060ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ce:	f013 0201 	ands.w	r2, r3, #1
 80060d2:	d00a      	beq.n	80060ea <__swsetup_r+0x9a>
 80060d4:	2200      	movs	r2, #0
 80060d6:	60a2      	str	r2, [r4, #8]
 80060d8:	6962      	ldr	r2, [r4, #20]
 80060da:	4252      	negs	r2, r2
 80060dc:	61a2      	str	r2, [r4, #24]
 80060de:	6922      	ldr	r2, [r4, #16]
 80060e0:	b942      	cbnz	r2, 80060f4 <__swsetup_r+0xa4>
 80060e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060e6:	d1c5      	bne.n	8006074 <__swsetup_r+0x24>
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
 80060ea:	0799      	lsls	r1, r3, #30
 80060ec:	bf58      	it	pl
 80060ee:	6962      	ldrpl	r2, [r4, #20]
 80060f0:	60a2      	str	r2, [r4, #8]
 80060f2:	e7f4      	b.n	80060de <__swsetup_r+0x8e>
 80060f4:	2000      	movs	r0, #0
 80060f6:	e7f7      	b.n	80060e8 <__swsetup_r+0x98>
 80060f8:	2000001c 	.word	0x2000001c

080060fc <memset>:
 80060fc:	4402      	add	r2, r0
 80060fe:	4603      	mov	r3, r0
 8006100:	4293      	cmp	r3, r2
 8006102:	d100      	bne.n	8006106 <memset+0xa>
 8006104:	4770      	bx	lr
 8006106:	f803 1b01 	strb.w	r1, [r3], #1
 800610a:	e7f9      	b.n	8006100 <memset+0x4>

0800610c <_close_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d06      	ldr	r5, [pc, #24]	@ (8006128 <_close_r+0x1c>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fa fe03 	bl	8000d22 <_close>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_close_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_close_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20004b94 	.word	0x20004b94

0800612c <_lseek_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d07      	ldr	r5, [pc, #28]	@ (800614c <_lseek_r+0x20>)
 8006130:	4604      	mov	r4, r0
 8006132:	4608      	mov	r0, r1
 8006134:	4611      	mov	r1, r2
 8006136:	2200      	movs	r2, #0
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fa fe18 	bl	8000d70 <_lseek>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_lseek_r+0x1e>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_lseek_r+0x1e>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	20004b94 	.word	0x20004b94

08006150 <_read_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d07      	ldr	r5, [pc, #28]	@ (8006170 <_read_r+0x20>)
 8006154:	4604      	mov	r4, r0
 8006156:	4608      	mov	r0, r1
 8006158:	4611      	mov	r1, r2
 800615a:	2200      	movs	r2, #0
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fa fdc2 	bl	8000ce8 <_read>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_read_r+0x1e>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_read_r+0x1e>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20004b94 	.word	0x20004b94

08006174 <_write_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4d07      	ldr	r5, [pc, #28]	@ (8006194 <_write_r+0x20>)
 8006178:	4604      	mov	r4, r0
 800617a:	4608      	mov	r0, r1
 800617c:	4611      	mov	r1, r2
 800617e:	2200      	movs	r2, #0
 8006180:	602a      	str	r2, [r5, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	f7fa fd2e 	bl	8000be4 <_write>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	d102      	bne.n	8006192 <_write_r+0x1e>
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	b103      	cbz	r3, 8006192 <_write_r+0x1e>
 8006190:	6023      	str	r3, [r4, #0]
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	20004b94 	.word	0x20004b94

08006198 <__errno>:
 8006198:	4b01      	ldr	r3, [pc, #4]	@ (80061a0 <__errno+0x8>)
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	2000001c 	.word	0x2000001c

080061a4 <__libc_init_array>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	4d0d      	ldr	r5, [pc, #52]	@ (80061dc <__libc_init_array+0x38>)
 80061a8:	4c0d      	ldr	r4, [pc, #52]	@ (80061e0 <__libc_init_array+0x3c>)
 80061aa:	1b64      	subs	r4, r4, r5
 80061ac:	10a4      	asrs	r4, r4, #2
 80061ae:	2600      	movs	r6, #0
 80061b0:	42a6      	cmp	r6, r4
 80061b2:	d109      	bne.n	80061c8 <__libc_init_array+0x24>
 80061b4:	4d0b      	ldr	r5, [pc, #44]	@ (80061e4 <__libc_init_array+0x40>)
 80061b6:	4c0c      	ldr	r4, [pc, #48]	@ (80061e8 <__libc_init_array+0x44>)
 80061b8:	f000 fd30 	bl	8006c1c <_init>
 80061bc:	1b64      	subs	r4, r4, r5
 80061be:	10a4      	asrs	r4, r4, #2
 80061c0:	2600      	movs	r6, #0
 80061c2:	42a6      	cmp	r6, r4
 80061c4:	d105      	bne.n	80061d2 <__libc_init_array+0x2e>
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061cc:	4798      	blx	r3
 80061ce:	3601      	adds	r6, #1
 80061d0:	e7ee      	b.n	80061b0 <__libc_init_array+0xc>
 80061d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d6:	4798      	blx	r3
 80061d8:	3601      	adds	r6, #1
 80061da:	e7f2      	b.n	80061c2 <__libc_init_array+0x1e>
 80061dc:	08006e10 	.word	0x08006e10
 80061e0:	08006e10 	.word	0x08006e10
 80061e4:	08006e10 	.word	0x08006e10
 80061e8:	08006e14 	.word	0x08006e14

080061ec <__retarget_lock_init_recursive>:
 80061ec:	4770      	bx	lr

080061ee <__retarget_lock_acquire_recursive>:
 80061ee:	4770      	bx	lr

080061f0 <__retarget_lock_release_recursive>:
 80061f0:	4770      	bx	lr

080061f2 <memcpy>:
 80061f2:	440a      	add	r2, r1
 80061f4:	4291      	cmp	r1, r2
 80061f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80061fa:	d100      	bne.n	80061fe <memcpy+0xc>
 80061fc:	4770      	bx	lr
 80061fe:	b510      	push	{r4, lr}
 8006200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006208:	4291      	cmp	r1, r2
 800620a:	d1f9      	bne.n	8006200 <memcpy+0xe>
 800620c:	bd10      	pop	{r4, pc}
	...

08006210 <_free_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	2900      	cmp	r1, #0
 8006216:	d041      	beq.n	800629c <_free_r+0x8c>
 8006218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621c:	1f0c      	subs	r4, r1, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfb8      	it	lt
 8006222:	18e4      	addlt	r4, r4, r3
 8006224:	f000 f8e0 	bl	80063e8 <__malloc_lock>
 8006228:	4a1d      	ldr	r2, [pc, #116]	@ (80062a0 <_free_r+0x90>)
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	b933      	cbnz	r3, 800623c <_free_r+0x2c>
 800622e:	6063      	str	r3, [r4, #4]
 8006230:	6014      	str	r4, [r2, #0]
 8006232:	4628      	mov	r0, r5
 8006234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006238:	f000 b8dc 	b.w	80063f4 <__malloc_unlock>
 800623c:	42a3      	cmp	r3, r4
 800623e:	d908      	bls.n	8006252 <_free_r+0x42>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428b      	cmp	r3, r1
 8006246:	bf01      	itttt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	1809      	addeq	r1, r1, r0
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	e7ed      	b.n	800622e <_free_r+0x1e>
 8006252:	461a      	mov	r2, r3
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b10b      	cbz	r3, 800625c <_free_r+0x4c>
 8006258:	42a3      	cmp	r3, r4
 800625a:	d9fa      	bls.n	8006252 <_free_r+0x42>
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	1850      	adds	r0, r2, r1
 8006260:	42a0      	cmp	r0, r4
 8006262:	d10b      	bne.n	800627c <_free_r+0x6c>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	4401      	add	r1, r0
 8006268:	1850      	adds	r0, r2, r1
 800626a:	4283      	cmp	r3, r0
 800626c:	6011      	str	r1, [r2, #0]
 800626e:	d1e0      	bne.n	8006232 <_free_r+0x22>
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	6053      	str	r3, [r2, #4]
 8006276:	4408      	add	r0, r1
 8006278:	6010      	str	r0, [r2, #0]
 800627a:	e7da      	b.n	8006232 <_free_r+0x22>
 800627c:	d902      	bls.n	8006284 <_free_r+0x74>
 800627e:	230c      	movs	r3, #12
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	e7d6      	b.n	8006232 <_free_r+0x22>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	1821      	adds	r1, r4, r0
 8006288:	428b      	cmp	r3, r1
 800628a:	bf04      	itt	eq
 800628c:	6819      	ldreq	r1, [r3, #0]
 800628e:	685b      	ldreq	r3, [r3, #4]
 8006290:	6063      	str	r3, [r4, #4]
 8006292:	bf04      	itt	eq
 8006294:	1809      	addeq	r1, r1, r0
 8006296:	6021      	streq	r1, [r4, #0]
 8006298:	6054      	str	r4, [r2, #4]
 800629a:	e7ca      	b.n	8006232 <_free_r+0x22>
 800629c:	bd38      	pop	{r3, r4, r5, pc}
 800629e:	bf00      	nop
 80062a0:	20004ba0 	.word	0x20004ba0

080062a4 <sbrk_aligned>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	4e0f      	ldr	r6, [pc, #60]	@ (80062e4 <sbrk_aligned+0x40>)
 80062a8:	460c      	mov	r4, r1
 80062aa:	6831      	ldr	r1, [r6, #0]
 80062ac:	4605      	mov	r5, r0
 80062ae:	b911      	cbnz	r1, 80062b6 <sbrk_aligned+0x12>
 80062b0:	f000 fca4 	bl	8006bfc <_sbrk_r>
 80062b4:	6030      	str	r0, [r6, #0]
 80062b6:	4621      	mov	r1, r4
 80062b8:	4628      	mov	r0, r5
 80062ba:	f000 fc9f 	bl	8006bfc <_sbrk_r>
 80062be:	1c43      	adds	r3, r0, #1
 80062c0:	d103      	bne.n	80062ca <sbrk_aligned+0x26>
 80062c2:	f04f 34ff 	mov.w	r4, #4294967295
 80062c6:	4620      	mov	r0, r4
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	1cc4      	adds	r4, r0, #3
 80062cc:	f024 0403 	bic.w	r4, r4, #3
 80062d0:	42a0      	cmp	r0, r4
 80062d2:	d0f8      	beq.n	80062c6 <sbrk_aligned+0x22>
 80062d4:	1a21      	subs	r1, r4, r0
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 fc90 	bl	8006bfc <_sbrk_r>
 80062dc:	3001      	adds	r0, #1
 80062de:	d1f2      	bne.n	80062c6 <sbrk_aligned+0x22>
 80062e0:	e7ef      	b.n	80062c2 <sbrk_aligned+0x1e>
 80062e2:	bf00      	nop
 80062e4:	20004b9c 	.word	0x20004b9c

080062e8 <_malloc_r>:
 80062e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062ec:	1ccd      	adds	r5, r1, #3
 80062ee:	f025 0503 	bic.w	r5, r5, #3
 80062f2:	3508      	adds	r5, #8
 80062f4:	2d0c      	cmp	r5, #12
 80062f6:	bf38      	it	cc
 80062f8:	250c      	movcc	r5, #12
 80062fa:	2d00      	cmp	r5, #0
 80062fc:	4606      	mov	r6, r0
 80062fe:	db01      	blt.n	8006304 <_malloc_r+0x1c>
 8006300:	42a9      	cmp	r1, r5
 8006302:	d904      	bls.n	800630e <_malloc_r+0x26>
 8006304:	230c      	movs	r3, #12
 8006306:	6033      	str	r3, [r6, #0]
 8006308:	2000      	movs	r0, #0
 800630a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063e4 <_malloc_r+0xfc>
 8006312:	f000 f869 	bl	80063e8 <__malloc_lock>
 8006316:	f8d8 3000 	ldr.w	r3, [r8]
 800631a:	461c      	mov	r4, r3
 800631c:	bb44      	cbnz	r4, 8006370 <_malloc_r+0x88>
 800631e:	4629      	mov	r1, r5
 8006320:	4630      	mov	r0, r6
 8006322:	f7ff ffbf 	bl	80062a4 <sbrk_aligned>
 8006326:	1c43      	adds	r3, r0, #1
 8006328:	4604      	mov	r4, r0
 800632a:	d158      	bne.n	80063de <_malloc_r+0xf6>
 800632c:	f8d8 4000 	ldr.w	r4, [r8]
 8006330:	4627      	mov	r7, r4
 8006332:	2f00      	cmp	r7, #0
 8006334:	d143      	bne.n	80063be <_malloc_r+0xd6>
 8006336:	2c00      	cmp	r4, #0
 8006338:	d04b      	beq.n	80063d2 <_malloc_r+0xea>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	4639      	mov	r1, r7
 800633e:	4630      	mov	r0, r6
 8006340:	eb04 0903 	add.w	r9, r4, r3
 8006344:	f000 fc5a 	bl	8006bfc <_sbrk_r>
 8006348:	4581      	cmp	r9, r0
 800634a:	d142      	bne.n	80063d2 <_malloc_r+0xea>
 800634c:	6821      	ldr	r1, [r4, #0]
 800634e:	1a6d      	subs	r5, r5, r1
 8006350:	4629      	mov	r1, r5
 8006352:	4630      	mov	r0, r6
 8006354:	f7ff ffa6 	bl	80062a4 <sbrk_aligned>
 8006358:	3001      	adds	r0, #1
 800635a:	d03a      	beq.n	80063d2 <_malloc_r+0xea>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	442b      	add	r3, r5
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	f8d8 3000 	ldr.w	r3, [r8]
 8006366:	685a      	ldr	r2, [r3, #4]
 8006368:	bb62      	cbnz	r2, 80063c4 <_malloc_r+0xdc>
 800636a:	f8c8 7000 	str.w	r7, [r8]
 800636e:	e00f      	b.n	8006390 <_malloc_r+0xa8>
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	1b52      	subs	r2, r2, r5
 8006374:	d420      	bmi.n	80063b8 <_malloc_r+0xd0>
 8006376:	2a0b      	cmp	r2, #11
 8006378:	d917      	bls.n	80063aa <_malloc_r+0xc2>
 800637a:	1961      	adds	r1, r4, r5
 800637c:	42a3      	cmp	r3, r4
 800637e:	6025      	str	r5, [r4, #0]
 8006380:	bf18      	it	ne
 8006382:	6059      	strne	r1, [r3, #4]
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	bf08      	it	eq
 8006388:	f8c8 1000 	streq.w	r1, [r8]
 800638c:	5162      	str	r2, [r4, r5]
 800638e:	604b      	str	r3, [r1, #4]
 8006390:	4630      	mov	r0, r6
 8006392:	f000 f82f 	bl	80063f4 <__malloc_unlock>
 8006396:	f104 000b 	add.w	r0, r4, #11
 800639a:	1d23      	adds	r3, r4, #4
 800639c:	f020 0007 	bic.w	r0, r0, #7
 80063a0:	1ac2      	subs	r2, r0, r3
 80063a2:	bf1c      	itt	ne
 80063a4:	1a1b      	subne	r3, r3, r0
 80063a6:	50a3      	strne	r3, [r4, r2]
 80063a8:	e7af      	b.n	800630a <_malloc_r+0x22>
 80063aa:	6862      	ldr	r2, [r4, #4]
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	bf0c      	ite	eq
 80063b0:	f8c8 2000 	streq.w	r2, [r8]
 80063b4:	605a      	strne	r2, [r3, #4]
 80063b6:	e7eb      	b.n	8006390 <_malloc_r+0xa8>
 80063b8:	4623      	mov	r3, r4
 80063ba:	6864      	ldr	r4, [r4, #4]
 80063bc:	e7ae      	b.n	800631c <_malloc_r+0x34>
 80063be:	463c      	mov	r4, r7
 80063c0:	687f      	ldr	r7, [r7, #4]
 80063c2:	e7b6      	b.n	8006332 <_malloc_r+0x4a>
 80063c4:	461a      	mov	r2, r3
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d1fb      	bne.n	80063c4 <_malloc_r+0xdc>
 80063cc:	2300      	movs	r3, #0
 80063ce:	6053      	str	r3, [r2, #4]
 80063d0:	e7de      	b.n	8006390 <_malloc_r+0xa8>
 80063d2:	230c      	movs	r3, #12
 80063d4:	6033      	str	r3, [r6, #0]
 80063d6:	4630      	mov	r0, r6
 80063d8:	f000 f80c 	bl	80063f4 <__malloc_unlock>
 80063dc:	e794      	b.n	8006308 <_malloc_r+0x20>
 80063de:	6005      	str	r5, [r0, #0]
 80063e0:	e7d6      	b.n	8006390 <_malloc_r+0xa8>
 80063e2:	bf00      	nop
 80063e4:	20004ba0 	.word	0x20004ba0

080063e8 <__malloc_lock>:
 80063e8:	4801      	ldr	r0, [pc, #4]	@ (80063f0 <__malloc_lock+0x8>)
 80063ea:	f7ff bf00 	b.w	80061ee <__retarget_lock_acquire_recursive>
 80063ee:	bf00      	nop
 80063f0:	20004b98 	.word	0x20004b98

080063f4 <__malloc_unlock>:
 80063f4:	4801      	ldr	r0, [pc, #4]	@ (80063fc <__malloc_unlock+0x8>)
 80063f6:	f7ff befb 	b.w	80061f0 <__retarget_lock_release_recursive>
 80063fa:	bf00      	nop
 80063fc:	20004b98 	.word	0x20004b98

08006400 <__sfputc_r>:
 8006400:	6893      	ldr	r3, [r2, #8]
 8006402:	3b01      	subs	r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	b410      	push	{r4}
 8006408:	6093      	str	r3, [r2, #8]
 800640a:	da08      	bge.n	800641e <__sfputc_r+0x1e>
 800640c:	6994      	ldr	r4, [r2, #24]
 800640e:	42a3      	cmp	r3, r4
 8006410:	db01      	blt.n	8006416 <__sfputc_r+0x16>
 8006412:	290a      	cmp	r1, #10
 8006414:	d103      	bne.n	800641e <__sfputc_r+0x1e>
 8006416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800641a:	f7ff bdda 	b.w	8005fd2 <__swbuf_r>
 800641e:	6813      	ldr	r3, [r2, #0]
 8006420:	1c58      	adds	r0, r3, #1
 8006422:	6010      	str	r0, [r2, #0]
 8006424:	7019      	strb	r1, [r3, #0]
 8006426:	4608      	mov	r0, r1
 8006428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800642c:	4770      	bx	lr

0800642e <__sfputs_r>:
 800642e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006430:	4606      	mov	r6, r0
 8006432:	460f      	mov	r7, r1
 8006434:	4614      	mov	r4, r2
 8006436:	18d5      	adds	r5, r2, r3
 8006438:	42ac      	cmp	r4, r5
 800643a:	d101      	bne.n	8006440 <__sfputs_r+0x12>
 800643c:	2000      	movs	r0, #0
 800643e:	e007      	b.n	8006450 <__sfputs_r+0x22>
 8006440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006444:	463a      	mov	r2, r7
 8006446:	4630      	mov	r0, r6
 8006448:	f7ff ffda 	bl	8006400 <__sfputc_r>
 800644c:	1c43      	adds	r3, r0, #1
 800644e:	d1f3      	bne.n	8006438 <__sfputs_r+0xa>
 8006450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006454 <_vfiprintf_r>:
 8006454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006458:	460d      	mov	r5, r1
 800645a:	b09d      	sub	sp, #116	@ 0x74
 800645c:	4614      	mov	r4, r2
 800645e:	4698      	mov	r8, r3
 8006460:	4606      	mov	r6, r0
 8006462:	b118      	cbz	r0, 800646c <_vfiprintf_r+0x18>
 8006464:	6a03      	ldr	r3, [r0, #32]
 8006466:	b90b      	cbnz	r3, 800646c <_vfiprintf_r+0x18>
 8006468:	f7ff fcca 	bl	8005e00 <__sinit>
 800646c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800646e:	07d9      	lsls	r1, r3, #31
 8006470:	d405      	bmi.n	800647e <_vfiprintf_r+0x2a>
 8006472:	89ab      	ldrh	r3, [r5, #12]
 8006474:	059a      	lsls	r2, r3, #22
 8006476:	d402      	bmi.n	800647e <_vfiprintf_r+0x2a>
 8006478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800647a:	f7ff feb8 	bl	80061ee <__retarget_lock_acquire_recursive>
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	071b      	lsls	r3, r3, #28
 8006482:	d501      	bpl.n	8006488 <_vfiprintf_r+0x34>
 8006484:	692b      	ldr	r3, [r5, #16]
 8006486:	b99b      	cbnz	r3, 80064b0 <_vfiprintf_r+0x5c>
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff fde0 	bl	8006050 <__swsetup_r>
 8006490:	b170      	cbz	r0, 80064b0 <_vfiprintf_r+0x5c>
 8006492:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006494:	07dc      	lsls	r4, r3, #31
 8006496:	d504      	bpl.n	80064a2 <_vfiprintf_r+0x4e>
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	b01d      	add	sp, #116	@ 0x74
 800649e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a2:	89ab      	ldrh	r3, [r5, #12]
 80064a4:	0598      	lsls	r0, r3, #22
 80064a6:	d4f7      	bmi.n	8006498 <_vfiprintf_r+0x44>
 80064a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064aa:	f7ff fea1 	bl	80061f0 <__retarget_lock_release_recursive>
 80064ae:	e7f3      	b.n	8006498 <_vfiprintf_r+0x44>
 80064b0:	2300      	movs	r3, #0
 80064b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064b4:	2320      	movs	r3, #32
 80064b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80064be:	2330      	movs	r3, #48	@ 0x30
 80064c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006670 <_vfiprintf_r+0x21c>
 80064c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064c8:	f04f 0901 	mov.w	r9, #1
 80064cc:	4623      	mov	r3, r4
 80064ce:	469a      	mov	sl, r3
 80064d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064d4:	b10a      	cbz	r2, 80064da <_vfiprintf_r+0x86>
 80064d6:	2a25      	cmp	r2, #37	@ 0x25
 80064d8:	d1f9      	bne.n	80064ce <_vfiprintf_r+0x7a>
 80064da:	ebba 0b04 	subs.w	fp, sl, r4
 80064de:	d00b      	beq.n	80064f8 <_vfiprintf_r+0xa4>
 80064e0:	465b      	mov	r3, fp
 80064e2:	4622      	mov	r2, r4
 80064e4:	4629      	mov	r1, r5
 80064e6:	4630      	mov	r0, r6
 80064e8:	f7ff ffa1 	bl	800642e <__sfputs_r>
 80064ec:	3001      	adds	r0, #1
 80064ee:	f000 80a7 	beq.w	8006640 <_vfiprintf_r+0x1ec>
 80064f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064f4:	445a      	add	r2, fp
 80064f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80064f8:	f89a 3000 	ldrb.w	r3, [sl]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 809f 	beq.w	8006640 <_vfiprintf_r+0x1ec>
 8006502:	2300      	movs	r3, #0
 8006504:	f04f 32ff 	mov.w	r2, #4294967295
 8006508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800650c:	f10a 0a01 	add.w	sl, sl, #1
 8006510:	9304      	str	r3, [sp, #16]
 8006512:	9307      	str	r3, [sp, #28]
 8006514:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006518:	931a      	str	r3, [sp, #104]	@ 0x68
 800651a:	4654      	mov	r4, sl
 800651c:	2205      	movs	r2, #5
 800651e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006522:	4853      	ldr	r0, [pc, #332]	@ (8006670 <_vfiprintf_r+0x21c>)
 8006524:	f7f9 fe6c 	bl	8000200 <memchr>
 8006528:	9a04      	ldr	r2, [sp, #16]
 800652a:	b9d8      	cbnz	r0, 8006564 <_vfiprintf_r+0x110>
 800652c:	06d1      	lsls	r1, r2, #27
 800652e:	bf44      	itt	mi
 8006530:	2320      	movmi	r3, #32
 8006532:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006536:	0713      	lsls	r3, r2, #28
 8006538:	bf44      	itt	mi
 800653a:	232b      	movmi	r3, #43	@ 0x2b
 800653c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006540:	f89a 3000 	ldrb.w	r3, [sl]
 8006544:	2b2a      	cmp	r3, #42	@ 0x2a
 8006546:	d015      	beq.n	8006574 <_vfiprintf_r+0x120>
 8006548:	9a07      	ldr	r2, [sp, #28]
 800654a:	4654      	mov	r4, sl
 800654c:	2000      	movs	r0, #0
 800654e:	f04f 0c0a 	mov.w	ip, #10
 8006552:	4621      	mov	r1, r4
 8006554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006558:	3b30      	subs	r3, #48	@ 0x30
 800655a:	2b09      	cmp	r3, #9
 800655c:	d94b      	bls.n	80065f6 <_vfiprintf_r+0x1a2>
 800655e:	b1b0      	cbz	r0, 800658e <_vfiprintf_r+0x13a>
 8006560:	9207      	str	r2, [sp, #28]
 8006562:	e014      	b.n	800658e <_vfiprintf_r+0x13a>
 8006564:	eba0 0308 	sub.w	r3, r0, r8
 8006568:	fa09 f303 	lsl.w	r3, r9, r3
 800656c:	4313      	orrs	r3, r2
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	46a2      	mov	sl, r4
 8006572:	e7d2      	b.n	800651a <_vfiprintf_r+0xc6>
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	1d19      	adds	r1, r3, #4
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	9103      	str	r1, [sp, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	bfbb      	ittet	lt
 8006580:	425b      	neglt	r3, r3
 8006582:	f042 0202 	orrlt.w	r2, r2, #2
 8006586:	9307      	strge	r3, [sp, #28]
 8006588:	9307      	strlt	r3, [sp, #28]
 800658a:	bfb8      	it	lt
 800658c:	9204      	strlt	r2, [sp, #16]
 800658e:	7823      	ldrb	r3, [r4, #0]
 8006590:	2b2e      	cmp	r3, #46	@ 0x2e
 8006592:	d10a      	bne.n	80065aa <_vfiprintf_r+0x156>
 8006594:	7863      	ldrb	r3, [r4, #1]
 8006596:	2b2a      	cmp	r3, #42	@ 0x2a
 8006598:	d132      	bne.n	8006600 <_vfiprintf_r+0x1ac>
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	1d1a      	adds	r2, r3, #4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	9203      	str	r2, [sp, #12]
 80065a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065a6:	3402      	adds	r4, #2
 80065a8:	9305      	str	r3, [sp, #20]
 80065aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006680 <_vfiprintf_r+0x22c>
 80065ae:	7821      	ldrb	r1, [r4, #0]
 80065b0:	2203      	movs	r2, #3
 80065b2:	4650      	mov	r0, sl
 80065b4:	f7f9 fe24 	bl	8000200 <memchr>
 80065b8:	b138      	cbz	r0, 80065ca <_vfiprintf_r+0x176>
 80065ba:	9b04      	ldr	r3, [sp, #16]
 80065bc:	eba0 000a 	sub.w	r0, r0, sl
 80065c0:	2240      	movs	r2, #64	@ 0x40
 80065c2:	4082      	lsls	r2, r0
 80065c4:	4313      	orrs	r3, r2
 80065c6:	3401      	adds	r4, #1
 80065c8:	9304      	str	r3, [sp, #16]
 80065ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065ce:	4829      	ldr	r0, [pc, #164]	@ (8006674 <_vfiprintf_r+0x220>)
 80065d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065d4:	2206      	movs	r2, #6
 80065d6:	f7f9 fe13 	bl	8000200 <memchr>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d03f      	beq.n	800665e <_vfiprintf_r+0x20a>
 80065de:	4b26      	ldr	r3, [pc, #152]	@ (8006678 <_vfiprintf_r+0x224>)
 80065e0:	bb1b      	cbnz	r3, 800662a <_vfiprintf_r+0x1d6>
 80065e2:	9b03      	ldr	r3, [sp, #12]
 80065e4:	3307      	adds	r3, #7
 80065e6:	f023 0307 	bic.w	r3, r3, #7
 80065ea:	3308      	adds	r3, #8
 80065ec:	9303      	str	r3, [sp, #12]
 80065ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f0:	443b      	add	r3, r7
 80065f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80065f4:	e76a      	b.n	80064cc <_vfiprintf_r+0x78>
 80065f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80065fa:	460c      	mov	r4, r1
 80065fc:	2001      	movs	r0, #1
 80065fe:	e7a8      	b.n	8006552 <_vfiprintf_r+0xfe>
 8006600:	2300      	movs	r3, #0
 8006602:	3401      	adds	r4, #1
 8006604:	9305      	str	r3, [sp, #20]
 8006606:	4619      	mov	r1, r3
 8006608:	f04f 0c0a 	mov.w	ip, #10
 800660c:	4620      	mov	r0, r4
 800660e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006612:	3a30      	subs	r2, #48	@ 0x30
 8006614:	2a09      	cmp	r2, #9
 8006616:	d903      	bls.n	8006620 <_vfiprintf_r+0x1cc>
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0c6      	beq.n	80065aa <_vfiprintf_r+0x156>
 800661c:	9105      	str	r1, [sp, #20]
 800661e:	e7c4      	b.n	80065aa <_vfiprintf_r+0x156>
 8006620:	fb0c 2101 	mla	r1, ip, r1, r2
 8006624:	4604      	mov	r4, r0
 8006626:	2301      	movs	r3, #1
 8006628:	e7f0      	b.n	800660c <_vfiprintf_r+0x1b8>
 800662a:	ab03      	add	r3, sp, #12
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	462a      	mov	r2, r5
 8006630:	4b12      	ldr	r3, [pc, #72]	@ (800667c <_vfiprintf_r+0x228>)
 8006632:	a904      	add	r1, sp, #16
 8006634:	4630      	mov	r0, r6
 8006636:	f3af 8000 	nop.w
 800663a:	4607      	mov	r7, r0
 800663c:	1c78      	adds	r0, r7, #1
 800663e:	d1d6      	bne.n	80065ee <_vfiprintf_r+0x19a>
 8006640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006642:	07d9      	lsls	r1, r3, #31
 8006644:	d405      	bmi.n	8006652 <_vfiprintf_r+0x1fe>
 8006646:	89ab      	ldrh	r3, [r5, #12]
 8006648:	059a      	lsls	r2, r3, #22
 800664a:	d402      	bmi.n	8006652 <_vfiprintf_r+0x1fe>
 800664c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800664e:	f7ff fdcf 	bl	80061f0 <__retarget_lock_release_recursive>
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	065b      	lsls	r3, r3, #25
 8006656:	f53f af1f 	bmi.w	8006498 <_vfiprintf_r+0x44>
 800665a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800665c:	e71e      	b.n	800649c <_vfiprintf_r+0x48>
 800665e:	ab03      	add	r3, sp, #12
 8006660:	9300      	str	r3, [sp, #0]
 8006662:	462a      	mov	r2, r5
 8006664:	4b05      	ldr	r3, [pc, #20]	@ (800667c <_vfiprintf_r+0x228>)
 8006666:	a904      	add	r1, sp, #16
 8006668:	4630      	mov	r0, r6
 800666a:	f000 f879 	bl	8006760 <_printf_i>
 800666e:	e7e4      	b.n	800663a <_vfiprintf_r+0x1e6>
 8006670:	08006dd4 	.word	0x08006dd4
 8006674:	08006dde 	.word	0x08006dde
 8006678:	00000000 	.word	0x00000000
 800667c:	0800642f 	.word	0x0800642f
 8006680:	08006dda 	.word	0x08006dda

08006684 <_printf_common>:
 8006684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006688:	4616      	mov	r6, r2
 800668a:	4698      	mov	r8, r3
 800668c:	688a      	ldr	r2, [r1, #8]
 800668e:	690b      	ldr	r3, [r1, #16]
 8006690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006694:	4293      	cmp	r3, r2
 8006696:	bfb8      	it	lt
 8006698:	4613      	movlt	r3, r2
 800669a:	6033      	str	r3, [r6, #0]
 800669c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066a0:	4607      	mov	r7, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	b10a      	cbz	r2, 80066aa <_printf_common+0x26>
 80066a6:	3301      	adds	r3, #1
 80066a8:	6033      	str	r3, [r6, #0]
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	0699      	lsls	r1, r3, #26
 80066ae:	bf42      	ittt	mi
 80066b0:	6833      	ldrmi	r3, [r6, #0]
 80066b2:	3302      	addmi	r3, #2
 80066b4:	6033      	strmi	r3, [r6, #0]
 80066b6:	6825      	ldr	r5, [r4, #0]
 80066b8:	f015 0506 	ands.w	r5, r5, #6
 80066bc:	d106      	bne.n	80066cc <_printf_common+0x48>
 80066be:	f104 0a19 	add.w	sl, r4, #25
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	6832      	ldr	r2, [r6, #0]
 80066c6:	1a9b      	subs	r3, r3, r2
 80066c8:	42ab      	cmp	r3, r5
 80066ca:	dc26      	bgt.n	800671a <_printf_common+0x96>
 80066cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	3b00      	subs	r3, #0
 80066d4:	bf18      	it	ne
 80066d6:	2301      	movne	r3, #1
 80066d8:	0692      	lsls	r2, r2, #26
 80066da:	d42b      	bmi.n	8006734 <_printf_common+0xb0>
 80066dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066e0:	4641      	mov	r1, r8
 80066e2:	4638      	mov	r0, r7
 80066e4:	47c8      	blx	r9
 80066e6:	3001      	adds	r0, #1
 80066e8:	d01e      	beq.n	8006728 <_printf_common+0xa4>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	6922      	ldr	r2, [r4, #16]
 80066ee:	f003 0306 	and.w	r3, r3, #6
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	bf02      	ittt	eq
 80066f6:	68e5      	ldreq	r5, [r4, #12]
 80066f8:	6833      	ldreq	r3, [r6, #0]
 80066fa:	1aed      	subeq	r5, r5, r3
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	bf0c      	ite	eq
 8006700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006704:	2500      	movne	r5, #0
 8006706:	4293      	cmp	r3, r2
 8006708:	bfc4      	itt	gt
 800670a:	1a9b      	subgt	r3, r3, r2
 800670c:	18ed      	addgt	r5, r5, r3
 800670e:	2600      	movs	r6, #0
 8006710:	341a      	adds	r4, #26
 8006712:	42b5      	cmp	r5, r6
 8006714:	d11a      	bne.n	800674c <_printf_common+0xc8>
 8006716:	2000      	movs	r0, #0
 8006718:	e008      	b.n	800672c <_printf_common+0xa8>
 800671a:	2301      	movs	r3, #1
 800671c:	4652      	mov	r2, sl
 800671e:	4641      	mov	r1, r8
 8006720:	4638      	mov	r0, r7
 8006722:	47c8      	blx	r9
 8006724:	3001      	adds	r0, #1
 8006726:	d103      	bne.n	8006730 <_printf_common+0xac>
 8006728:	f04f 30ff 	mov.w	r0, #4294967295
 800672c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006730:	3501      	adds	r5, #1
 8006732:	e7c6      	b.n	80066c2 <_printf_common+0x3e>
 8006734:	18e1      	adds	r1, r4, r3
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	2030      	movs	r0, #48	@ 0x30
 800673a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800673e:	4422      	add	r2, r4
 8006740:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006744:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006748:	3302      	adds	r3, #2
 800674a:	e7c7      	b.n	80066dc <_printf_common+0x58>
 800674c:	2301      	movs	r3, #1
 800674e:	4622      	mov	r2, r4
 8006750:	4641      	mov	r1, r8
 8006752:	4638      	mov	r0, r7
 8006754:	47c8      	blx	r9
 8006756:	3001      	adds	r0, #1
 8006758:	d0e6      	beq.n	8006728 <_printf_common+0xa4>
 800675a:	3601      	adds	r6, #1
 800675c:	e7d9      	b.n	8006712 <_printf_common+0x8e>
	...

08006760 <_printf_i>:
 8006760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	7e0f      	ldrb	r7, [r1, #24]
 8006766:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006768:	2f78      	cmp	r7, #120	@ 0x78
 800676a:	4691      	mov	r9, r2
 800676c:	4680      	mov	r8, r0
 800676e:	460c      	mov	r4, r1
 8006770:	469a      	mov	sl, r3
 8006772:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006776:	d807      	bhi.n	8006788 <_printf_i+0x28>
 8006778:	2f62      	cmp	r7, #98	@ 0x62
 800677a:	d80a      	bhi.n	8006792 <_printf_i+0x32>
 800677c:	2f00      	cmp	r7, #0
 800677e:	f000 80d1 	beq.w	8006924 <_printf_i+0x1c4>
 8006782:	2f58      	cmp	r7, #88	@ 0x58
 8006784:	f000 80b8 	beq.w	80068f8 <_printf_i+0x198>
 8006788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800678c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006790:	e03a      	b.n	8006808 <_printf_i+0xa8>
 8006792:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006796:	2b15      	cmp	r3, #21
 8006798:	d8f6      	bhi.n	8006788 <_printf_i+0x28>
 800679a:	a101      	add	r1, pc, #4	@ (adr r1, 80067a0 <_printf_i+0x40>)
 800679c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067a0:	080067f9 	.word	0x080067f9
 80067a4:	0800680d 	.word	0x0800680d
 80067a8:	08006789 	.word	0x08006789
 80067ac:	08006789 	.word	0x08006789
 80067b0:	08006789 	.word	0x08006789
 80067b4:	08006789 	.word	0x08006789
 80067b8:	0800680d 	.word	0x0800680d
 80067bc:	08006789 	.word	0x08006789
 80067c0:	08006789 	.word	0x08006789
 80067c4:	08006789 	.word	0x08006789
 80067c8:	08006789 	.word	0x08006789
 80067cc:	0800690b 	.word	0x0800690b
 80067d0:	08006837 	.word	0x08006837
 80067d4:	080068c5 	.word	0x080068c5
 80067d8:	08006789 	.word	0x08006789
 80067dc:	08006789 	.word	0x08006789
 80067e0:	0800692d 	.word	0x0800692d
 80067e4:	08006789 	.word	0x08006789
 80067e8:	08006837 	.word	0x08006837
 80067ec:	08006789 	.word	0x08006789
 80067f0:	08006789 	.word	0x08006789
 80067f4:	080068cd 	.word	0x080068cd
 80067f8:	6833      	ldr	r3, [r6, #0]
 80067fa:	1d1a      	adds	r2, r3, #4
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	6032      	str	r2, [r6, #0]
 8006800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006804:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006808:	2301      	movs	r3, #1
 800680a:	e09c      	b.n	8006946 <_printf_i+0x1e6>
 800680c:	6833      	ldr	r3, [r6, #0]
 800680e:	6820      	ldr	r0, [r4, #0]
 8006810:	1d19      	adds	r1, r3, #4
 8006812:	6031      	str	r1, [r6, #0]
 8006814:	0606      	lsls	r6, r0, #24
 8006816:	d501      	bpl.n	800681c <_printf_i+0xbc>
 8006818:	681d      	ldr	r5, [r3, #0]
 800681a:	e003      	b.n	8006824 <_printf_i+0xc4>
 800681c:	0645      	lsls	r5, r0, #25
 800681e:	d5fb      	bpl.n	8006818 <_printf_i+0xb8>
 8006820:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006824:	2d00      	cmp	r5, #0
 8006826:	da03      	bge.n	8006830 <_printf_i+0xd0>
 8006828:	232d      	movs	r3, #45	@ 0x2d
 800682a:	426d      	negs	r5, r5
 800682c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006830:	4858      	ldr	r0, [pc, #352]	@ (8006994 <_printf_i+0x234>)
 8006832:	230a      	movs	r3, #10
 8006834:	e011      	b.n	800685a <_printf_i+0xfa>
 8006836:	6821      	ldr	r1, [r4, #0]
 8006838:	6833      	ldr	r3, [r6, #0]
 800683a:	0608      	lsls	r0, r1, #24
 800683c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006840:	d402      	bmi.n	8006848 <_printf_i+0xe8>
 8006842:	0649      	lsls	r1, r1, #25
 8006844:	bf48      	it	mi
 8006846:	b2ad      	uxthmi	r5, r5
 8006848:	2f6f      	cmp	r7, #111	@ 0x6f
 800684a:	4852      	ldr	r0, [pc, #328]	@ (8006994 <_printf_i+0x234>)
 800684c:	6033      	str	r3, [r6, #0]
 800684e:	bf14      	ite	ne
 8006850:	230a      	movne	r3, #10
 8006852:	2308      	moveq	r3, #8
 8006854:	2100      	movs	r1, #0
 8006856:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800685a:	6866      	ldr	r6, [r4, #4]
 800685c:	60a6      	str	r6, [r4, #8]
 800685e:	2e00      	cmp	r6, #0
 8006860:	db05      	blt.n	800686e <_printf_i+0x10e>
 8006862:	6821      	ldr	r1, [r4, #0]
 8006864:	432e      	orrs	r6, r5
 8006866:	f021 0104 	bic.w	r1, r1, #4
 800686a:	6021      	str	r1, [r4, #0]
 800686c:	d04b      	beq.n	8006906 <_printf_i+0x1a6>
 800686e:	4616      	mov	r6, r2
 8006870:	fbb5 f1f3 	udiv	r1, r5, r3
 8006874:	fb03 5711 	mls	r7, r3, r1, r5
 8006878:	5dc7      	ldrb	r7, [r0, r7]
 800687a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800687e:	462f      	mov	r7, r5
 8006880:	42bb      	cmp	r3, r7
 8006882:	460d      	mov	r5, r1
 8006884:	d9f4      	bls.n	8006870 <_printf_i+0x110>
 8006886:	2b08      	cmp	r3, #8
 8006888:	d10b      	bne.n	80068a2 <_printf_i+0x142>
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	07df      	lsls	r7, r3, #31
 800688e:	d508      	bpl.n	80068a2 <_printf_i+0x142>
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	6861      	ldr	r1, [r4, #4]
 8006894:	4299      	cmp	r1, r3
 8006896:	bfde      	ittt	le
 8006898:	2330      	movle	r3, #48	@ 0x30
 800689a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800689e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068a2:	1b92      	subs	r2, r2, r6
 80068a4:	6122      	str	r2, [r4, #16]
 80068a6:	f8cd a000 	str.w	sl, [sp]
 80068aa:	464b      	mov	r3, r9
 80068ac:	aa03      	add	r2, sp, #12
 80068ae:	4621      	mov	r1, r4
 80068b0:	4640      	mov	r0, r8
 80068b2:	f7ff fee7 	bl	8006684 <_printf_common>
 80068b6:	3001      	adds	r0, #1
 80068b8:	d14a      	bne.n	8006950 <_printf_i+0x1f0>
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	b004      	add	sp, #16
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	f043 0320 	orr.w	r3, r3, #32
 80068ca:	6023      	str	r3, [r4, #0]
 80068cc:	4832      	ldr	r0, [pc, #200]	@ (8006998 <_printf_i+0x238>)
 80068ce:	2778      	movs	r7, #120	@ 0x78
 80068d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	6831      	ldr	r1, [r6, #0]
 80068d8:	061f      	lsls	r7, r3, #24
 80068da:	f851 5b04 	ldr.w	r5, [r1], #4
 80068de:	d402      	bmi.n	80068e6 <_printf_i+0x186>
 80068e0:	065f      	lsls	r7, r3, #25
 80068e2:	bf48      	it	mi
 80068e4:	b2ad      	uxthmi	r5, r5
 80068e6:	6031      	str	r1, [r6, #0]
 80068e8:	07d9      	lsls	r1, r3, #31
 80068ea:	bf44      	itt	mi
 80068ec:	f043 0320 	orrmi.w	r3, r3, #32
 80068f0:	6023      	strmi	r3, [r4, #0]
 80068f2:	b11d      	cbz	r5, 80068fc <_printf_i+0x19c>
 80068f4:	2310      	movs	r3, #16
 80068f6:	e7ad      	b.n	8006854 <_printf_i+0xf4>
 80068f8:	4826      	ldr	r0, [pc, #152]	@ (8006994 <_printf_i+0x234>)
 80068fa:	e7e9      	b.n	80068d0 <_printf_i+0x170>
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	f023 0320 	bic.w	r3, r3, #32
 8006902:	6023      	str	r3, [r4, #0]
 8006904:	e7f6      	b.n	80068f4 <_printf_i+0x194>
 8006906:	4616      	mov	r6, r2
 8006908:	e7bd      	b.n	8006886 <_printf_i+0x126>
 800690a:	6833      	ldr	r3, [r6, #0]
 800690c:	6825      	ldr	r5, [r4, #0]
 800690e:	6961      	ldr	r1, [r4, #20]
 8006910:	1d18      	adds	r0, r3, #4
 8006912:	6030      	str	r0, [r6, #0]
 8006914:	062e      	lsls	r6, r5, #24
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	d501      	bpl.n	800691e <_printf_i+0x1be>
 800691a:	6019      	str	r1, [r3, #0]
 800691c:	e002      	b.n	8006924 <_printf_i+0x1c4>
 800691e:	0668      	lsls	r0, r5, #25
 8006920:	d5fb      	bpl.n	800691a <_printf_i+0x1ba>
 8006922:	8019      	strh	r1, [r3, #0]
 8006924:	2300      	movs	r3, #0
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	4616      	mov	r6, r2
 800692a:	e7bc      	b.n	80068a6 <_printf_i+0x146>
 800692c:	6833      	ldr	r3, [r6, #0]
 800692e:	1d1a      	adds	r2, r3, #4
 8006930:	6032      	str	r2, [r6, #0]
 8006932:	681e      	ldr	r6, [r3, #0]
 8006934:	6862      	ldr	r2, [r4, #4]
 8006936:	2100      	movs	r1, #0
 8006938:	4630      	mov	r0, r6
 800693a:	f7f9 fc61 	bl	8000200 <memchr>
 800693e:	b108      	cbz	r0, 8006944 <_printf_i+0x1e4>
 8006940:	1b80      	subs	r0, r0, r6
 8006942:	6060      	str	r0, [r4, #4]
 8006944:	6863      	ldr	r3, [r4, #4]
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	2300      	movs	r3, #0
 800694a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800694e:	e7aa      	b.n	80068a6 <_printf_i+0x146>
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	4632      	mov	r2, r6
 8006954:	4649      	mov	r1, r9
 8006956:	4640      	mov	r0, r8
 8006958:	47d0      	blx	sl
 800695a:	3001      	adds	r0, #1
 800695c:	d0ad      	beq.n	80068ba <_printf_i+0x15a>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	079b      	lsls	r3, r3, #30
 8006962:	d413      	bmi.n	800698c <_printf_i+0x22c>
 8006964:	68e0      	ldr	r0, [r4, #12]
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	4298      	cmp	r0, r3
 800696a:	bfb8      	it	lt
 800696c:	4618      	movlt	r0, r3
 800696e:	e7a6      	b.n	80068be <_printf_i+0x15e>
 8006970:	2301      	movs	r3, #1
 8006972:	4632      	mov	r2, r6
 8006974:	4649      	mov	r1, r9
 8006976:	4640      	mov	r0, r8
 8006978:	47d0      	blx	sl
 800697a:	3001      	adds	r0, #1
 800697c:	d09d      	beq.n	80068ba <_printf_i+0x15a>
 800697e:	3501      	adds	r5, #1
 8006980:	68e3      	ldr	r3, [r4, #12]
 8006982:	9903      	ldr	r1, [sp, #12]
 8006984:	1a5b      	subs	r3, r3, r1
 8006986:	42ab      	cmp	r3, r5
 8006988:	dcf2      	bgt.n	8006970 <_printf_i+0x210>
 800698a:	e7eb      	b.n	8006964 <_printf_i+0x204>
 800698c:	2500      	movs	r5, #0
 800698e:	f104 0619 	add.w	r6, r4, #25
 8006992:	e7f5      	b.n	8006980 <_printf_i+0x220>
 8006994:	08006de5 	.word	0x08006de5
 8006998:	08006df6 	.word	0x08006df6

0800699c <__sflush_r>:
 800699c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a4:	0716      	lsls	r6, r2, #28
 80069a6:	4605      	mov	r5, r0
 80069a8:	460c      	mov	r4, r1
 80069aa:	d454      	bmi.n	8006a56 <__sflush_r+0xba>
 80069ac:	684b      	ldr	r3, [r1, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc02      	bgt.n	80069b8 <__sflush_r+0x1c>
 80069b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dd48      	ble.n	8006a4a <__sflush_r+0xae>
 80069b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	d045      	beq.n	8006a4a <__sflush_r+0xae>
 80069be:	2300      	movs	r3, #0
 80069c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80069c4:	682f      	ldr	r7, [r5, #0]
 80069c6:	6a21      	ldr	r1, [r4, #32]
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	d030      	beq.n	8006a2e <__sflush_r+0x92>
 80069cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	0759      	lsls	r1, r3, #29
 80069d2:	d505      	bpl.n	80069e0 <__sflush_r+0x44>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80069da:	b10b      	cbz	r3, 80069e0 <__sflush_r+0x44>
 80069dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	2300      	movs	r3, #0
 80069e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b0      	blx	r6
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	d106      	bne.n	80069fe <__sflush_r+0x62>
 80069f0:	6829      	ldr	r1, [r5, #0]
 80069f2:	291d      	cmp	r1, #29
 80069f4:	d82b      	bhi.n	8006a4e <__sflush_r+0xb2>
 80069f6:	4a2a      	ldr	r2, [pc, #168]	@ (8006aa0 <__sflush_r+0x104>)
 80069f8:	40ca      	lsrs	r2, r1
 80069fa:	07d6      	lsls	r6, r2, #31
 80069fc:	d527      	bpl.n	8006a4e <__sflush_r+0xb2>
 80069fe:	2200      	movs	r2, #0
 8006a00:	6062      	str	r2, [r4, #4]
 8006a02:	04d9      	lsls	r1, r3, #19
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	6022      	str	r2, [r4, #0]
 8006a08:	d504      	bpl.n	8006a14 <__sflush_r+0x78>
 8006a0a:	1c42      	adds	r2, r0, #1
 8006a0c:	d101      	bne.n	8006a12 <__sflush_r+0x76>
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	b903      	cbnz	r3, 8006a14 <__sflush_r+0x78>
 8006a12:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a16:	602f      	str	r7, [r5, #0]
 8006a18:	b1b9      	cbz	r1, 8006a4a <__sflush_r+0xae>
 8006a1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	d002      	beq.n	8006a28 <__sflush_r+0x8c>
 8006a22:	4628      	mov	r0, r5
 8006a24:	f7ff fbf4 	bl	8006210 <_free_r>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a2c:	e00d      	b.n	8006a4a <__sflush_r+0xae>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b0      	blx	r6
 8006a34:	4602      	mov	r2, r0
 8006a36:	1c50      	adds	r0, r2, #1
 8006a38:	d1c9      	bne.n	80069ce <__sflush_r+0x32>
 8006a3a:	682b      	ldr	r3, [r5, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0c6      	beq.n	80069ce <__sflush_r+0x32>
 8006a40:	2b1d      	cmp	r3, #29
 8006a42:	d001      	beq.n	8006a48 <__sflush_r+0xac>
 8006a44:	2b16      	cmp	r3, #22
 8006a46:	d11e      	bne.n	8006a86 <__sflush_r+0xea>
 8006a48:	602f      	str	r7, [r5, #0]
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	e022      	b.n	8006a94 <__sflush_r+0xf8>
 8006a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	e01b      	b.n	8006a8e <__sflush_r+0xf2>
 8006a56:	690f      	ldr	r7, [r1, #16]
 8006a58:	2f00      	cmp	r7, #0
 8006a5a:	d0f6      	beq.n	8006a4a <__sflush_r+0xae>
 8006a5c:	0793      	lsls	r3, r2, #30
 8006a5e:	680e      	ldr	r6, [r1, #0]
 8006a60:	bf08      	it	eq
 8006a62:	694b      	ldreq	r3, [r1, #20]
 8006a64:	600f      	str	r7, [r1, #0]
 8006a66:	bf18      	it	ne
 8006a68:	2300      	movne	r3, #0
 8006a6a:	eba6 0807 	sub.w	r8, r6, r7
 8006a6e:	608b      	str	r3, [r1, #8]
 8006a70:	f1b8 0f00 	cmp.w	r8, #0
 8006a74:	dde9      	ble.n	8006a4a <__sflush_r+0xae>
 8006a76:	6a21      	ldr	r1, [r4, #32]
 8006a78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a7a:	4643      	mov	r3, r8
 8006a7c:	463a      	mov	r2, r7
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b0      	blx	r6
 8006a82:	2800      	cmp	r0, #0
 8006a84:	dc08      	bgt.n	8006a98 <__sflush_r+0xfc>
 8006a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a98:	4407      	add	r7, r0
 8006a9a:	eba8 0800 	sub.w	r8, r8, r0
 8006a9e:	e7e7      	b.n	8006a70 <__sflush_r+0xd4>
 8006aa0:	20400001 	.word	0x20400001

08006aa4 <_fflush_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	690b      	ldr	r3, [r1, #16]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b913      	cbnz	r3, 8006ab4 <_fflush_r+0x10>
 8006aae:	2500      	movs	r5, #0
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	b118      	cbz	r0, 8006abe <_fflush_r+0x1a>
 8006ab6:	6a03      	ldr	r3, [r0, #32]
 8006ab8:	b90b      	cbnz	r3, 8006abe <_fflush_r+0x1a>
 8006aba:	f7ff f9a1 	bl	8005e00 <__sinit>
 8006abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f3      	beq.n	8006aae <_fflush_r+0xa>
 8006ac6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ac8:	07d0      	lsls	r0, r2, #31
 8006aca:	d404      	bmi.n	8006ad6 <_fflush_r+0x32>
 8006acc:	0599      	lsls	r1, r3, #22
 8006ace:	d402      	bmi.n	8006ad6 <_fflush_r+0x32>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ad2:	f7ff fb8c 	bl	80061ee <__retarget_lock_acquire_recursive>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	4621      	mov	r1, r4
 8006ada:	f7ff ff5f 	bl	800699c <__sflush_r>
 8006ade:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ae0:	07da      	lsls	r2, r3, #31
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	d4e4      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	059b      	lsls	r3, r3, #22
 8006aea:	d4e1      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006aec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006aee:	f7ff fb7f 	bl	80061f0 <__retarget_lock_release_recursive>
 8006af2:	e7dd      	b.n	8006ab0 <_fflush_r+0xc>

08006af4 <__swhatbuf_r>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	460c      	mov	r4, r1
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	2900      	cmp	r1, #0
 8006afe:	b096      	sub	sp, #88	@ 0x58
 8006b00:	4615      	mov	r5, r2
 8006b02:	461e      	mov	r6, r3
 8006b04:	da0d      	bge.n	8006b22 <__swhatbuf_r+0x2e>
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b0c:	f04f 0100 	mov.w	r1, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2340      	movne	r3, #64	@ 0x40
 8006b14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b18:	2000      	movs	r0, #0
 8006b1a:	6031      	str	r1, [r6, #0]
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	b016      	add	sp, #88	@ 0x58
 8006b20:	bd70      	pop	{r4, r5, r6, pc}
 8006b22:	466a      	mov	r2, sp
 8006b24:	f000 f848 	bl	8006bb8 <_fstat_r>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	dbec      	blt.n	8006b06 <__swhatbuf_r+0x12>
 8006b2c:	9901      	ldr	r1, [sp, #4]
 8006b2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b36:	4259      	negs	r1, r3
 8006b38:	4159      	adcs	r1, r3
 8006b3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b3e:	e7eb      	b.n	8006b18 <__swhatbuf_r+0x24>

08006b40 <__smakebuf_r>:
 8006b40:	898b      	ldrh	r3, [r1, #12]
 8006b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b44:	079d      	lsls	r5, r3, #30
 8006b46:	4606      	mov	r6, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	d507      	bpl.n	8006b5c <__smakebuf_r+0x1c>
 8006b4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	2301      	movs	r3, #1
 8006b56:	6163      	str	r3, [r4, #20]
 8006b58:	b003      	add	sp, #12
 8006b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b5c:	ab01      	add	r3, sp, #4
 8006b5e:	466a      	mov	r2, sp
 8006b60:	f7ff ffc8 	bl	8006af4 <__swhatbuf_r>
 8006b64:	9f00      	ldr	r7, [sp, #0]
 8006b66:	4605      	mov	r5, r0
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4630      	mov	r0, r6
 8006b6c:	f7ff fbbc 	bl	80062e8 <_malloc_r>
 8006b70:	b948      	cbnz	r0, 8006b86 <__smakebuf_r+0x46>
 8006b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b76:	059a      	lsls	r2, r3, #22
 8006b78:	d4ee      	bmi.n	8006b58 <__smakebuf_r+0x18>
 8006b7a:	f023 0303 	bic.w	r3, r3, #3
 8006b7e:	f043 0302 	orr.w	r3, r3, #2
 8006b82:	81a3      	strh	r3, [r4, #12]
 8006b84:	e7e2      	b.n	8006b4c <__smakebuf_r+0xc>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	6020      	str	r0, [r4, #0]
 8006b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b96:	b15b      	cbz	r3, 8006bb0 <__smakebuf_r+0x70>
 8006b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 f81d 	bl	8006bdc <_isatty_r>
 8006ba2:	b128      	cbz	r0, 8006bb0 <__smakebuf_r+0x70>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	f023 0303 	bic.w	r3, r3, #3
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	431d      	orrs	r5, r3
 8006bb4:	81a5      	strh	r5, [r4, #12]
 8006bb6:	e7cf      	b.n	8006b58 <__smakebuf_r+0x18>

08006bb8 <_fstat_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4d07      	ldr	r5, [pc, #28]	@ (8006bd8 <_fstat_r+0x20>)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	4608      	mov	r0, r1
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	602b      	str	r3, [r5, #0]
 8006bc6:	f7fa f8b8 	bl	8000d3a <_fstat>
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	d102      	bne.n	8006bd4 <_fstat_r+0x1c>
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	b103      	cbz	r3, 8006bd4 <_fstat_r+0x1c>
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	bd38      	pop	{r3, r4, r5, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20004b94 	.word	0x20004b94

08006bdc <_isatty_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d06      	ldr	r5, [pc, #24]	@ (8006bf8 <_isatty_r+0x1c>)
 8006be0:	2300      	movs	r3, #0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	f7fa f8b7 	bl	8000d5a <_isatty>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_isatty_r+0x1a>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_isatty_r+0x1a>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20004b94 	.word	0x20004b94

08006bfc <_sbrk_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4d06      	ldr	r5, [pc, #24]	@ (8006c18 <_sbrk_r+0x1c>)
 8006c00:	2300      	movs	r3, #0
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	f7fa f8c0 	bl	8000d8c <_sbrk>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_sbrk_r+0x1a>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_sbrk_r+0x1a>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20004b94 	.word	0x20004b94

08006c1c <_init>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	bf00      	nop
 8006c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c22:	bc08      	pop	{r3}
 8006c24:	469e      	mov	lr, r3
 8006c26:	4770      	bx	lr

08006c28 <_fini>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr
