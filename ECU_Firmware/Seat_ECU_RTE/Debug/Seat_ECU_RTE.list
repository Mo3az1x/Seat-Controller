
Seat_ECU_RTE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000553c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800564c  0800564c  0000664c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005754  08005754  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005754  08005754  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005754  08005754  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005754  08005754  00006754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800575c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001068  20000060  080057bc  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010c8  080057bc  000070c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018922  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000364d  00000000  00000000  0001f9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  00022ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000120a  00000000  00000000  00024728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037c4  00000000  00000000  00025932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019df5  00000000  00000000  000290f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b45e  00000000  00000000  00042eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de349  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000659c  00000000  00000000  000de38c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e4928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005634 	.word	0x08005634

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005634 	.word	0x08005634

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fbec 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f846 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f936 	bl	80003cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f892 	bl	8000288 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f8ce 	bl	8000304 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000168:	f000 f8fa 	bl	8000360 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f002 fd38 	bl	8002be0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_Control */
  Task_ControlHandle = osThreadNew(ControlTask, NULL, &Task_Control_attributes);
 8000170:	4a11      	ldr	r2, [pc, #68]	@ (80001b8 <main+0x68>)
 8000172:	2100      	movs	r1, #0
 8000174:	4811      	ldr	r0, [pc, #68]	@ (80001bc <main+0x6c>)
 8000176:	f002 fd7b 	bl	8002c70 <osThreadNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a10      	ldr	r2, [pc, #64]	@ (80001c0 <main+0x70>)
 800017e:	6013      	str	r3, [r2, #0]

  /* creation of Task_Input */
  Task_InputHandle = osThreadNew(InputTask, NULL, &Task_Input_attributes);
 8000180:	4a10      	ldr	r2, [pc, #64]	@ (80001c4 <main+0x74>)
 8000182:	2100      	movs	r1, #0
 8000184:	4810      	ldr	r0, [pc, #64]	@ (80001c8 <main+0x78>)
 8000186:	f002 fd73 	bl	8002c70 <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a0f      	ldr	r2, [pc, #60]	@ (80001cc <main+0x7c>)
 800018e:	6013      	str	r3, [r2, #0]

  /* creation of Task_Comm */
  Task_CommHandle = osThreadNew(CommTask, NULL, &Task_Comm_attributes);
 8000190:	4a0f      	ldr	r2, [pc, #60]	@ (80001d0 <main+0x80>)
 8000192:	2100      	movs	r1, #0
 8000194:	480f      	ldr	r0, [pc, #60]	@ (80001d4 <main+0x84>)
 8000196:	f002 fd6b 	bl	8002c70 <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a0e      	ldr	r2, [pc, #56]	@ (80001d8 <main+0x88>)
 800019e:	6013      	str	r3, [r2, #0]

  /* creation of Task_Nvm */
  Task_NvmHandle = osThreadNew(NvmTask, NULL, &Task_Nvm_attributes);
 80001a0:	4a0e      	ldr	r2, [pc, #56]	@ (80001dc <main+0x8c>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	480e      	ldr	r0, [pc, #56]	@ (80001e0 <main+0x90>)
 80001a6:	f002 fd63 	bl	8002c70 <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a0d      	ldr	r2, [pc, #52]	@ (80001e4 <main+0x94>)
 80001ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001b0:	f002 fd38 	bl	8002c24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b4:	bf00      	nop
 80001b6:	e7fd      	b.n	80001b4 <main+0x64>
 80001b8:	08005698 	.word	0x08005698
 80001bc:	080004b5 	.word	0x080004b5
 80001c0:	20000158 	.word	0x20000158
 80001c4:	080056bc 	.word	0x080056bc
 80001c8:	080004e5 	.word	0x080004e5
 80001cc:	2000015c 	.word	0x2000015c
 80001d0:	080056e0 	.word	0x080056e0
 80001d4:	080004f5 	.word	0x080004f5
 80001d8:	20000160 	.word	0x20000160
 80001dc:	08005704 	.word	0x08005704
 80001e0:	08000505 	.word	0x08000505
 80001e4:	20000164 	.word	0x20000164

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b094      	sub	sp, #80	@ 0x50
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001f2:	2228      	movs	r2, #40	@ 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f005 f924 	bl	8005444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	f107 0314 	add.w	r3, r7, #20
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
 800020a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000218:	2302      	movs	r3, #2
 800021a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000220:	2310      	movs	r3, #16
 8000222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000224:	2300      	movs	r3, #0
 8000226:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fcdb 	bl	8001be8 <HAL_RCC_OscConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000238:	f000 f97e 	bl	8000538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023c:	230f      	movs	r3, #15
 800023e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000240:	2300      	movs	r3, #0
 8000242:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 ff48 	bl	80020ec <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000262:	f000 f969 	bl	8000538 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000266:	2302      	movs	r3, #2
 8000268:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800026a:	2300      	movs	r3, #0
 800026c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f002 f8f9 	bl	8002468 <HAL_RCCEx_PeriphCLKConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800027c:	f000 f95c 	bl	8000538 <Error_Handler>
  }
}
 8000280:	bf00      	nop
 8000282:	3750      	adds	r7, #80	@ 0x50
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	605a      	str	r2, [r3, #4]
 8000296:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000298:	4b18      	ldr	r3, [pc, #96]	@ (80002fc <MX_ADC1_Init+0x74>)
 800029a:	4a19      	ldr	r2, [pc, #100]	@ (8000300 <MX_ADC1_Init+0x78>)
 800029c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800029e:	4b17      	ldr	r3, [pc, #92]	@ (80002fc <MX_ADC1_Init+0x74>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002a4:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <MX_ADC1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002aa:	4b14      	ldr	r3, [pc, #80]	@ (80002fc <MX_ADC1_Init+0x74>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b0:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <MX_ADC1_Init+0x74>)
 80002b2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b8:	4b10      	ldr	r3, [pc, #64]	@ (80002fc <MX_ADC1_Init+0x74>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002be:	4b0f      	ldr	r3, [pc, #60]	@ (80002fc <MX_ADC1_Init+0x74>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002c4:	480d      	ldr	r0, [pc, #52]	@ (80002fc <MX_ADC1_Init+0x74>)
 80002c6:	f000 fb65 	bl	8000994 <HAL_ADC_Init>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d0:	f000 f932 	bl	8000538 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d8:	2301      	movs	r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4619      	mov	r1, r3
 80002e4:	4805      	ldr	r0, [pc, #20]	@ (80002fc <MX_ADC1_Init+0x74>)
 80002e6:	f000 fc2d 	bl	8000b44 <HAL_ADC_ConfigChannel>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f0:	f000 f922 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000007c 	.word	0x2000007c
 8000300:	40012400 	.word	0x40012400

08000304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000308:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <MX_I2C1_Init+0x50>)
 800030a:	4a13      	ldr	r2, [pc, #76]	@ (8000358 <MX_I2C1_Init+0x54>)
 800030c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800030e:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000310:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_I2C1_Init+0x58>)
 8000312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000314:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800031a:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000322:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000326:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <MX_I2C1_Init+0x50>)
 800032a:	2200      	movs	r2, #0
 800032c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000334:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <MX_I2C1_Init+0x50>)
 8000342:	f000 ffb5 	bl	80012b0 <HAL_I2C_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800034c:	f000 f8f4 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	200000ac 	.word	0x200000ac
 8000358:	40005400 	.word	0x40005400
 800035c:	000186a0 	.word	0x000186a0

08000360 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000364:	4b17      	ldr	r3, [pc, #92]	@ (80003c4 <MX_SPI2_Init+0x64>)
 8000366:	4a18      	ldr	r2, [pc, #96]	@ (80003c8 <MX_SPI2_Init+0x68>)
 8000368:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800036a:	4b16      	ldr	r3, [pc, #88]	@ (80003c4 <MX_SPI2_Init+0x64>)
 800036c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000370:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000372:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <MX_SPI2_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000378:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <MX_SPI2_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037e:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <MX_SPI2_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000384:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <MX_SPI2_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <MX_SPI2_Init+0x64>)
 800038c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000390:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_SPI2_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <MX_SPI2_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_SPI2_Init+0x64>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a4:	4b07      	ldr	r3, [pc, #28]	@ (80003c4 <MX_SPI2_Init+0x64>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003aa:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_SPI2_Init+0x64>)
 80003ac:	220a      	movs	r2, #10
 80003ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003b0:	4804      	ldr	r0, [pc, #16]	@ (80003c4 <MX_SPI2_Init+0x64>)
 80003b2:	f002 f90f 	bl	80025d4 <HAL_SPI_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80003bc:	f000 f8bc 	bl	8000538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000100 	.word	0x20000100
 80003c8:	40003800 	.word	0x40003800

080003cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d2:	f107 0310 	add.w	r3, r7, #16
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e0:	4b30      	ldr	r3, [pc, #192]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a2f      	ldr	r2, [pc, #188]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b2d      	ldr	r3, [pc, #180]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0310 	and.w	r3, r3, #16
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f8:	4b2a      	ldr	r3, [pc, #168]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a29      	ldr	r2, [pc, #164]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 80003fe:	f043 0320 	orr.w	r3, r3, #32
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0320 	and.w	r3, r3, #32
 800040c:	60bb      	str	r3, [r7, #8]
 800040e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000410:	4b24      	ldr	r3, [pc, #144]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a23      	ldr	r2, [pc, #140]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 8000416:	f043 0304 	orr.w	r3, r3, #4
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000428:	4b1e      	ldr	r3, [pc, #120]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a1d      	ldr	r2, [pc, #116]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_GPIO_Init+0xd8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0308 	and.w	r3, r3, #8
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000446:	4818      	ldr	r0, [pc, #96]	@ (80004a8 <MX_GPIO_Init+0xdc>)
 8000448:	f000 ff1a 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800044c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2302      	movs	r3, #2
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	4810      	ldr	r0, [pc, #64]	@ (80004a8 <MX_GPIO_Init+0xdc>)
 8000466:	f000 fd87 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : Height_up_Pin Height_Down_Pin Slide_up_Pin Slide_down_Pin
                           Incline_up_Pin */
  GPIO_InitStruct.Pin = Height_up_Pin|Height_Down_Pin|Slide_up_Pin|Slide_down_Pin
 800046a:	23f8      	movs	r3, #248	@ 0xf8
 800046c:	613b      	str	r3, [r7, #16]
                          |Incline_up_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	480b      	ldr	r0, [pc, #44]	@ (80004ac <MX_GPIO_Init+0xe0>)
 800047e:	f000 fd7b 	bl	8000f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : Incline_down_Pin */
  GPIO_InitStruct.Pin = Incline_down_Pin;
 8000482:	2301      	movs	r3, #1
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Incline_down_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4806      	ldr	r0, [pc, #24]	@ (80004b0 <MX_GPIO_Init+0xe4>)
 8000496:	f000 fd6f 	bl	8000f78 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	bf00      	nop
 800049c:	3720      	adds	r7, #32
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40011000 	.word	0x40011000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	40010c00 	.word	0x40010c00

080004b4 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t testData = 0xAB;
 80004bc:	23ab      	movs	r3, #171	@ 0xab
 80004be:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	HAL_I2C_Master_Transmit(&hi2c1,
 80004c0:	f107 020f 	add.w	r2, r7, #15
 80004c4:	f04f 33ff 	mov.w	r3, #4294967295
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2301      	movs	r3, #1
 80004cc:	2110      	movs	r1, #16
 80004ce:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <ControlTask+0x2c>)
 80004d0:	f001 f832 	bl	8001538 <HAL_I2C_Master_Transmit>
							I2C_SLAVE_ADDR,
							&testData,
							sizeof(testData),
							HAL_MAX_DELAY);
    osDelay(100);
 80004d4:	2064      	movs	r0, #100	@ 0x64
 80004d6:	f002 fc5d 	bl	8002d94 <osDelay>
	HAL_I2C_Master_Transmit(&hi2c1,
 80004da:	bf00      	nop
 80004dc:	e7f0      	b.n	80004c0 <ControlTask+0xc>
 80004de:	bf00      	nop
 80004e0:	200000ac 	.word	0x200000ac

080004e4 <InputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InputTask */
void InputTask(void *argument)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN InputTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f002 fc51 	bl	8002d94 <osDelay>
 80004f2:	e7fb      	b.n	80004ec <InputTask+0x8>

080004f4 <CommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CommTask */
void CommTask(void *argument)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CommTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004fc:	2001      	movs	r0, #1
 80004fe:	f002 fc49 	bl	8002d94 <osDelay>
 8000502:	e7fb      	b.n	80004fc <CommTask+0x8>

08000504 <NvmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NvmTask */
void NvmTask(void *argument)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NvmTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f002 fc41 	bl	8002d94 <osDelay>
 8000512:	e7fb      	b.n	800050c <NvmTask+0x8>

08000514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000526:	f000 fa19 	bl	800095c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40012c00 	.word	0x40012c00

08000538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800053c:	b672      	cpsid	i
}
 800053e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <Error_Handler+0x8>

08000544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800054a:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <HAL_MspInit+0x68>)
 800054c:	699b      	ldr	r3, [r3, #24]
 800054e:	4a17      	ldr	r2, [pc, #92]	@ (80005ac <HAL_MspInit+0x68>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6193      	str	r3, [r2, #24]
 8000556:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <HAL_MspInit+0x68>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	f003 0301 	and.w	r3, r3, #1
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <HAL_MspInit+0x68>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a11      	ldr	r2, [pc, #68]	@ (80005ac <HAL_MspInit+0x68>)
 8000568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <HAL_MspInit+0x68>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	210f      	movs	r1, #15
 800057e:	f06f 0001 	mvn.w	r0, #1
 8000582:	f000 fcce 	bl	8000f22 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000586:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <HAL_MspInit+0x6c>)
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4a04      	ldr	r2, [pc, #16]	@ (80005b0 <HAL_MspInit+0x6c>)
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40010000 	.word	0x40010000

080005b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <HAL_ADC_MspInit+0x6c>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d121      	bne.n	8000618 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a12      	ldr	r2, [pc, #72]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_ADC_MspInit+0x70>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000604:	2307      	movs	r3, #7
 8000606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000608:	2303      	movs	r3, #3
 800060a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 0310 	add.w	r3, r7, #16
 8000610:	4619      	mov	r1, r3
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <HAL_ADC_MspInit+0x74>)
 8000614:	f000 fcb0 	bl	8000f78 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000618:	bf00      	nop
 800061a:	3720      	adds	r7, #32
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40012400 	.word	0x40012400
 8000624:	40021000 	.word	0x40021000
 8000628:	40010800 	.word	0x40010800

0800062c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a15      	ldr	r2, [pc, #84]	@ (800069c <HAL_I2C_MspInit+0x70>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d123      	bne.n	8000694 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <HAL_I2C_MspInit+0x74>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <HAL_I2C_MspInit+0x74>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <HAL_I2C_MspInit+0x74>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000664:	23c0      	movs	r3, #192	@ 0xc0
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000668:	2312      	movs	r3, #18
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066c:	2303      	movs	r3, #3
 800066e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <HAL_I2C_MspInit+0x78>)
 8000678:	f000 fc7e 	bl	8000f78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <HAL_I2C_MspInit+0x74>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <HAL_I2C_MspInit+0x74>)
 8000682:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000686:	61d3      	str	r3, [r2, #28]
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <HAL_I2C_MspInit+0x74>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000694:	bf00      	nop
 8000696:	3720      	adds	r7, #32
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40005400 	.word	0x40005400
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010c00 	.word	0x40010c00

080006a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <HAL_SPI_MspInit+0x8c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d131      	bne.n	800072c <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <HAL_SPI_MspInit+0x90>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000738 <HAL_SPI_MspInit+0x90>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d2:	61d3      	str	r3, [r2, #28]
 80006d4:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <HAL_SPI_MspInit+0x90>)
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <HAL_SPI_MspInit+0x90>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <HAL_SPI_MspInit+0x90>)
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <HAL_SPI_MspInit+0x90>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0308 	and.w	r3, r3, #8
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80006f8:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80006fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000706:	f107 0310 	add.w	r3, r7, #16
 800070a:	4619      	mov	r1, r3
 800070c:	480b      	ldr	r0, [pc, #44]	@ (800073c <HAL_SPI_MspInit+0x94>)
 800070e:	f000 fc33 	bl	8000f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000712:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000716:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4619      	mov	r1, r3
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <HAL_SPI_MspInit+0x94>)
 8000728:	f000 fc26 	bl	8000f78 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40003800 	.word	0x40003800
 8000738:	40021000 	.word	0x40021000
 800073c:	40010c00 	.word	0x40010c00

08000740 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000748:	2300      	movs	r3, #0
 800074a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000756:	4b2e      	ldr	r3, [pc, #184]	@ (8000810 <HAL_InitTick+0xd0>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a2d      	ldr	r2, [pc, #180]	@ (8000810 <HAL_InitTick+0xd0>)
 800075c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000760:	6193      	str	r3, [r2, #24]
 8000762:	4b2b      	ldr	r3, [pc, #172]	@ (8000810 <HAL_InitTick+0xd0>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800076e:	f107 020c 	add.w	r2, r7, #12
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fe27 	bl	80023cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800077e:	f001 fe11 	bl	80023a4 <HAL_RCC_GetPCLK2Freq>
 8000782:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000786:	4a23      	ldr	r2, [pc, #140]	@ (8000814 <HAL_InitTick+0xd4>)
 8000788:	fba2 2303 	umull	r2, r3, r2, r3
 800078c:	0c9b      	lsrs	r3, r3, #18
 800078e:	3b01      	subs	r3, #1
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000792:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <HAL_InitTick+0xd8>)
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <HAL_InitTick+0xdc>)
 8000796:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000798:	4b1f      	ldr	r3, [pc, #124]	@ (8000818 <HAL_InitTick+0xd8>)
 800079a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800079e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000818 <HAL_InitTick+0xd8>)
 80007a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <HAL_InitTick+0xd8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <HAL_InitTick+0xd8>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <HAL_InitTick+0xd8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80007b8:	4817      	ldr	r0, [pc, #92]	@ (8000818 <HAL_InitTick+0xd8>)
 80007ba:	f001 ff8f 	bl	80026dc <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80007c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d11b      	bne.n	8000804 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007cc:	4812      	ldr	r0, [pc, #72]	@ (8000818 <HAL_InitTick+0xd8>)
 80007ce:	f001 ffdd 	bl	800278c <HAL_TIM_Base_Start_IT>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80007d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d111      	bne.n	8000804 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80007e0:	2019      	movs	r0, #25
 80007e2:	f000 fbba 	bl	8000f5a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d808      	bhi.n	80007fe <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	2019      	movs	r0, #25
 80007f2:	f000 fb96 	bl	8000f22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <HAL_InitTick+0xe0>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	e002      	b.n	8000804 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000804:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000808:	4618      	mov	r0, r3
 800080a:	3730      	adds	r7, #48	@ 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000
 8000814:	431bde83 	.word	0x431bde83
 8000818:	20000168 	.word	0x20000168
 800081c:	40012c00 	.word	0x40012c00
 8000820:	20000004 	.word	0x20000004

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <NMI_Handler+0x4>

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <MemManage_Handler+0x4>

0800083c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <UsageFault_Handler+0x4>

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800085c:	4802      	ldr	r0, [pc, #8]	@ (8000868 <TIM1_UP_IRQHandler+0x10>)
 800085e:	f001 ffe7 	bl	8002830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000168 	.word	0x20000168

0800086c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000874:	4a14      	ldr	r2, [pc, #80]	@ (80008c8 <_sbrk+0x5c>)
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <_sbrk+0x60>)
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <_sbrk+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000888:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <_sbrk+0x64>)
 800088a:	4a12      	ldr	r2, [pc, #72]	@ (80008d4 <_sbrk+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <_sbrk+0x64>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4413      	add	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d207      	bcs.n	80008ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800089c:	f004 fe48 	bl	8005530 <__errno>
 80008a0:	4603      	mov	r3, r0
 80008a2:	220c      	movs	r2, #12
 80008a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008a6:	f04f 33ff 	mov.w	r3, #4294967295
 80008aa:	e009      	b.n	80008c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b2:	4b07      	ldr	r3, [pc, #28]	@ (80008d0 <_sbrk+0x64>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4413      	add	r3, r2
 80008ba:	4a05      	ldr	r2, [pc, #20]	@ (80008d0 <_sbrk+0x64>)
 80008bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20005000 	.word	0x20005000
 80008cc:	00000400 	.word	0x00000400
 80008d0:	200001b0 	.word	0x200001b0
 80008d4:	200010c8 	.word	0x200010c8

080008d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e4:	f7ff fff8 	bl	80008d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ea:	490c      	ldr	r1, [pc, #48]	@ (800091c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000920 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a09      	ldr	r2, [pc, #36]	@ (8000924 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000900:	4c09      	ldr	r4, [pc, #36]	@ (8000928 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f004 fe15 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000912:	f7ff fc1d 	bl	8000150 <main>
  bx lr
 8000916:	4770      	bx	lr
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000920:	0800575c 	.word	0x0800575c
  ldr r2, =_sbss
 8000924:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000928:	200010c8 	.word	0x200010c8

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <HAL_Init+0x28>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a07      	ldr	r2, [pc, #28]	@ (8000958 <HAL_Init+0x28>)
 800093a:	f043 0310 	orr.w	r3, r3, #16
 800093e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000940:	2003      	movs	r0, #3
 8000942:	f000 fae3 	bl	8000f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000946:	200f      	movs	r0, #15
 8000948:	f7ff fefa 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800094c:	f7ff fdfa 	bl	8000544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40022000 	.word	0x40022000

0800095c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000960:	4b05      	ldr	r3, [pc, #20]	@ (8000978 <HAL_IncTick+0x1c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b05      	ldr	r3, [pc, #20]	@ (800097c <HAL_IncTick+0x20>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a03      	ldr	r2, [pc, #12]	@ (800097c <HAL_IncTick+0x20>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	200001b4 	.word	0x200001b4

08000980 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b02      	ldr	r3, [pc, #8]	@ (8000990 <HAL_GetTick+0x10>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	200001b4 	.word	0x200001b4

08000994 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009a0:	2300      	movs	r3, #0
 80009a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d101      	bne.n	80009b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e0be      	b.n	8000b34 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d109      	bne.n	80009d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fdee 	bl	80005b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f000 f9ab 	bl	8000d34 <ADC_ConversionStop_Disable>
 80009de:	4603      	mov	r3, r0
 80009e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009e6:	f003 0310 	and.w	r3, r3, #16
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 8099 	bne.w	8000b22 <HAL_ADC_Init+0x18e>
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f040 8095 	bne.w	8000b22 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a00:	f023 0302 	bic.w	r3, r3, #2
 8000a04:	f043 0202 	orr.w	r2, r3, #2
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a14:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7b1b      	ldrb	r3, [r3, #12]
 8000a1a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a1c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a2c:	d003      	beq.n	8000a36 <HAL_ADC_Init+0xa2>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d102      	bne.n	8000a3c <HAL_ADC_Init+0xa8>
 8000a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a3a:	e000      	b.n	8000a3e <HAL_ADC_Init+0xaa>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7d1b      	ldrb	r3, [r3, #20]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d119      	bne.n	8000a80 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7b1b      	ldrb	r3, [r3, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d109      	bne.n	8000a68 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	035a      	lsls	r2, r3, #13
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	e00b      	b.n	8000a80 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a6c:	f043 0220 	orr.w	r2, r3, #32
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a78:	f043 0201 	orr.w	r2, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <HAL_ADC_Init+0x1a8>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	6812      	ldr	r2, [r2, #0]
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ab0:	d003      	beq.n	8000aba <HAL_ADC_Init+0x126>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d104      	bne.n	8000ac4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	691b      	ldr	r3, [r3, #16]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	051b      	lsls	r3, r3, #20
 8000ac2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aca:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4b18      	ldr	r3, [pc, #96]	@ (8000b40 <HAL_ADC_Init+0x1ac>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d10b      	bne.n	8000b00 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af2:	f023 0303 	bic.w	r3, r3, #3
 8000af6:	f043 0201 	orr.w	r2, r3, #1
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000afe:	e018      	b.n	8000b32 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b04:	f023 0312 	bic.w	r3, r3, #18
 8000b08:	f043 0210 	orr.w	r2, r3, #16
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b14:	f043 0201 	orr.w	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b20:	e007      	b.n	8000b32 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b26:	f043 0210 	orr.w	r2, r3, #16
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	ffe1f7fd 	.word	0xffe1f7fd
 8000b40:	ff1f0efe 	.word	0xff1f0efe

08000b44 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <HAL_ADC_ConfigChannel+0x20>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e0dc      	b.n	8000d1e <HAL_ADC_ConfigChannel+0x1da>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d81c      	bhi.n	8000bae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	4613      	mov	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	3b05      	subs	r3, #5
 8000b86:	221f      	movs	r2, #31
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4019      	ands	r1, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	6818      	ldr	r0, [r3, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	3b05      	subs	r3, #5
 8000ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bac:	e03c      	b.n	8000c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b0c      	cmp	r3, #12
 8000bb4:	d81c      	bhi.n	8000bf0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685a      	ldr	r2, [r3, #4]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3b23      	subs	r3, #35	@ 0x23
 8000bc8:	221f      	movs	r2, #31
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43db      	mvns	r3, r3
 8000bd0:	4019      	ands	r1, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	3b23      	subs	r3, #35	@ 0x23
 8000be2:	fa00 f203 	lsl.w	r2, r0, r3
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	430a      	orrs	r2, r1
 8000bec:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bee:	e01b      	b.n	8000c28 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4413      	add	r3, r2
 8000c00:	3b41      	subs	r3, #65	@ 0x41
 8000c02:	221f      	movs	r2, #31
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	4019      	ands	r1, r3
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	4613      	mov	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	4413      	add	r3, r2
 8000c1a:	3b41      	subs	r3, #65	@ 0x41
 8000c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b09      	cmp	r3, #9
 8000c2e:	d91c      	bls.n	8000c6a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68d9      	ldr	r1, [r3, #12]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	3b1e      	subs	r3, #30
 8000c42:	2207      	movs	r2, #7
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4019      	ands	r1, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	6898      	ldr	r0, [r3, #8]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	3b1e      	subs	r3, #30
 8000c5c:	fa00 f203 	lsl.w	r2, r0, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	e019      	b.n	8000c9e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6919      	ldr	r1, [r3, #16]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4019      	ands	r1, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	6898      	ldr	r0, [r3, #8]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	fa00 f203 	lsl.w	r2, r0, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b10      	cmp	r3, #16
 8000ca4:	d003      	beq.n	8000cae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000caa:	2b11      	cmp	r3, #17
 8000cac:	d132      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8000d28 <HAL_ADC_ConfigChannel+0x1e4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d125      	bne.n	8000d04 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d126      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000cd4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	d11a      	bne.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <HAL_ADC_ConfigChannel+0x1e8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a13      	ldr	r2, [pc, #76]	@ (8000d30 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	0c9a      	lsrs	r2, r3, #18
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cf4:	e002      	b.n	8000cfc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f9      	bne.n	8000cf6 <HAL_ADC_ConfigChannel+0x1b2>
 8000d02:	e007      	b.n	8000d14 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d08:	f043 0220 	orr.w	r2, r3, #32
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	40012400 	.word	0x40012400
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	431bde83 	.word	0x431bde83

08000d34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d12e      	bne.n	8000dac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 0201 	bic.w	r2, r2, #1
 8000d5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d5e:	f7ff fe0f 	bl	8000980 <HAL_GetTick>
 8000d62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d64:	e01b      	b.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d66:	f7ff fe0b 	bl	8000980 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d914      	bls.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10d      	bne.n	8000d9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d86:	f043 0210 	orr.w	r2, r3, #16
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d92:	f043 0201 	orr.w	r2, r3, #1
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e007      	b.n	8000dae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d0dc      	beq.n	8000d66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dea:	4a04      	ldr	r2, [pc, #16]	@ (8000dfc <__NVIC_SetPriorityGrouping+0x44>)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	@ (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4906      	ldr	r1, [pc, #24]	@ (8000e50 <__NVIC_EnableIRQ+0x34>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	@ (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	@ (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	@ 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	@ 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ff4f 	bl	8000db8 <__NVIC_SetPriorityGrouping>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	4603      	mov	r3, r0
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
 8000f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f34:	f7ff ff64 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8000f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	68b9      	ldr	r1, [r7, #8]
 8000f3e:	6978      	ldr	r0, [r7, #20]
 8000f40:	f7ff ffb2 	bl	8000ea8 <NVIC_EncodePriority>
 8000f44:	4602      	mov	r2, r0
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff81 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f52:	bf00      	nop
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff57 	bl	8000e1c <__NVIC_EnableIRQ>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e169      	b.n	8001260 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 8158 	bne.w	800125a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	4a9a      	ldr	r2, [pc, #616]	@ (8001218 <HAL_GPIO_Init+0x2a0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d05e      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fb4:	4a98      	ldr	r2, [pc, #608]	@ (8001218 <HAL_GPIO_Init+0x2a0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d875      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fba:	4a98      	ldr	r2, [pc, #608]	@ (800121c <HAL_GPIO_Init+0x2a4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d058      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fc0:	4a96      	ldr	r2, [pc, #600]	@ (800121c <HAL_GPIO_Init+0x2a4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d86f      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fc6:	4a96      	ldr	r2, [pc, #600]	@ (8001220 <HAL_GPIO_Init+0x2a8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d052      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fcc:	4a94      	ldr	r2, [pc, #592]	@ (8001220 <HAL_GPIO_Init+0x2a8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d869      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fd2:	4a94      	ldr	r2, [pc, #592]	@ (8001224 <HAL_GPIO_Init+0x2ac>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d04c      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fd8:	4a92      	ldr	r2, [pc, #584]	@ (8001224 <HAL_GPIO_Init+0x2ac>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d863      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fde:	4a92      	ldr	r2, [pc, #584]	@ (8001228 <HAL_GPIO_Init+0x2b0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d046      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
 8000fe4:	4a90      	ldr	r2, [pc, #576]	@ (8001228 <HAL_GPIO_Init+0x2b0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d85d      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000fea:	2b12      	cmp	r3, #18
 8000fec:	d82a      	bhi.n	8001044 <HAL_GPIO_Init+0xcc>
 8000fee:	2b12      	cmp	r3, #18
 8000ff0:	d859      	bhi.n	80010a6 <HAL_GPIO_Init+0x12e>
 8000ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff8 <HAL_GPIO_Init+0x80>)
 8000ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff8:	08001073 	.word	0x08001073
 8000ffc:	0800104d 	.word	0x0800104d
 8001000:	0800105f 	.word	0x0800105f
 8001004:	080010a1 	.word	0x080010a1
 8001008:	080010a7 	.word	0x080010a7
 800100c:	080010a7 	.word	0x080010a7
 8001010:	080010a7 	.word	0x080010a7
 8001014:	080010a7 	.word	0x080010a7
 8001018:	080010a7 	.word	0x080010a7
 800101c:	080010a7 	.word	0x080010a7
 8001020:	080010a7 	.word	0x080010a7
 8001024:	080010a7 	.word	0x080010a7
 8001028:	080010a7 	.word	0x080010a7
 800102c:	080010a7 	.word	0x080010a7
 8001030:	080010a7 	.word	0x080010a7
 8001034:	080010a7 	.word	0x080010a7
 8001038:	080010a7 	.word	0x080010a7
 800103c:	08001055 	.word	0x08001055
 8001040:	08001069 	.word	0x08001069
 8001044:	4a79      	ldr	r2, [pc, #484]	@ (800122c <HAL_GPIO_Init+0x2b4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d013      	beq.n	8001072 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800104a:	e02c      	b.n	80010a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e029      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	3304      	adds	r3, #4
 800105a:	623b      	str	r3, [r7, #32]
          break;
 800105c:	e024      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	3308      	adds	r3, #8
 8001064:	623b      	str	r3, [r7, #32]
          break;
 8001066:	e01f      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	330c      	adds	r3, #12
 800106e:	623b      	str	r3, [r7, #32]
          break;
 8001070:	e01a      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d102      	bne.n	8001080 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800107a:	2304      	movs	r3, #4
 800107c:	623b      	str	r3, [r7, #32]
          break;
 800107e:	e013      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d105      	bne.n	8001094 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001088:	2308      	movs	r3, #8
 800108a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	611a      	str	r2, [r3, #16]
          break;
 8001092:	e009      	b.n	80010a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001094:	2308      	movs	r3, #8
 8001096:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	615a      	str	r2, [r3, #20]
          break;
 800109e:	e003      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
          break;
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x130>
          break;
 80010a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2bff      	cmp	r3, #255	@ 0xff
 80010ac:	d801      	bhi.n	80010b2 <HAL_GPIO_Init+0x13a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	e001      	b.n	80010b6 <HAL_GPIO_Init+0x13e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	3304      	adds	r3, #4
 80010b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2bff      	cmp	r3, #255	@ 0xff
 80010bc:	d802      	bhi.n	80010c4 <HAL_GPIO_Init+0x14c>
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	e002      	b.n	80010ca <HAL_GPIO_Init+0x152>
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	3b08      	subs	r3, #8
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	210f      	movs	r1, #15
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	401a      	ands	r2, r3
 80010dc:	6a39      	ldr	r1, [r7, #32]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	fa01 f303 	lsl.w	r3, r1, r3
 80010e4:	431a      	orrs	r2, r3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 80b1 	beq.w	800125a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b4a      	ldr	r3, [pc, #296]	@ (8001230 <HAL_GPIO_Init+0x2b8>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001110:	4a48      	ldr	r2, [pc, #288]	@ (8001234 <HAL_GPIO_Init+0x2bc>)
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3302      	adds	r3, #2
 8001118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	f003 0303 	and.w	r3, r3, #3
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a40      	ldr	r2, [pc, #256]	@ (8001238 <HAL_GPIO_Init+0x2c0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d013      	beq.n	8001164 <HAL_GPIO_Init+0x1ec>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a3f      	ldr	r2, [pc, #252]	@ (800123c <HAL_GPIO_Init+0x2c4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d00d      	beq.n	8001160 <HAL_GPIO_Init+0x1e8>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a3e      	ldr	r2, [pc, #248]	@ (8001240 <HAL_GPIO_Init+0x2c8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d007      	beq.n	800115c <HAL_GPIO_Init+0x1e4>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3d      	ldr	r2, [pc, #244]	@ (8001244 <HAL_GPIO_Init+0x2cc>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d101      	bne.n	8001158 <HAL_GPIO_Init+0x1e0>
 8001154:	2303      	movs	r3, #3
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001158:	2304      	movs	r3, #4
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 800115c:	2302      	movs	r3, #2
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x1ee>
 8001164:	2300      	movs	r3, #0
 8001166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001168:	f002 0203 	and.w	r2, r2, #3
 800116c:	0092      	lsls	r2, r2, #2
 800116e:	4093      	lsls	r3, r2
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001176:	492f      	ldr	r1, [pc, #188]	@ (8001234 <HAL_GPIO_Init+0x2bc>)
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d006      	beq.n	800119e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001190:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	492c      	ldr	r1, [pc, #176]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
 800119c:	e006      	b.n	80011ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800119e:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4928      	ldr	r1, [pc, #160]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011b8:	4b23      	ldr	r3, [pc, #140]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	4922      	ldr	r1, [pc, #136]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60cb      	str	r3, [r1, #12]
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	491e      	ldr	r1, [pc, #120]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d006      	beq.n	80011ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	4918      	ldr	r1, [pc, #96]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ee:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4914      	ldr	r1, [pc, #80]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d021      	beq.n	800124c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	490e      	ldr	r1, [pc, #56]	@ (8001248 <HAL_GPIO_Init+0x2d0>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
 8001214:	e021      	b.n	800125a <HAL_GPIO_Init+0x2e2>
 8001216:	bf00      	nop
 8001218:	10320000 	.word	0x10320000
 800121c:	10310000 	.word	0x10310000
 8001220:	10220000 	.word	0x10220000
 8001224:	10210000 	.word	0x10210000
 8001228:	10120000 	.word	0x10120000
 800122c:	10110000 	.word	0x10110000
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00
 8001240:	40011000 	.word	0x40011000
 8001244:	40011400 	.word	0x40011400
 8001248:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800124c:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_GPIO_Init+0x304>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	43db      	mvns	r3, r3
 8001254:	4909      	ldr	r1, [pc, #36]	@ (800127c <HAL_GPIO_Init+0x304>)
 8001256:	4013      	ands	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	3301      	adds	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001266:	fa22 f303 	lsr.w	r3, r2, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	f47f ae8e 	bne.w	8000f8c <HAL_GPIO_Init+0x14>
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	372c      	adds	r7, #44	@ 0x2c
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40010400 	.word	0x40010400

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	611a      	str	r2, [r3, #16]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e12b      	b.n	800151a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff f9a8 	bl	800062c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2224      	movs	r2, #36	@ 0x24
 80012e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001314:	f001 f832 	bl	800237c <HAL_RCC_GetPCLK1Freq>
 8001318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a81      	ldr	r2, [pc, #516]	@ (8001524 <HAL_I2C_Init+0x274>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d807      	bhi.n	8001334 <HAL_I2C_Init+0x84>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4a80      	ldr	r2, [pc, #512]	@ (8001528 <HAL_I2C_Init+0x278>)
 8001328:	4293      	cmp	r3, r2
 800132a:	bf94      	ite	ls
 800132c:	2301      	movls	r3, #1
 800132e:	2300      	movhi	r3, #0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	e006      	b.n	8001342 <HAL_I2C_Init+0x92>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4a7d      	ldr	r2, [pc, #500]	@ (800152c <HAL_I2C_Init+0x27c>)
 8001338:	4293      	cmp	r3, r2
 800133a:	bf94      	ite	ls
 800133c:	2301      	movls	r3, #1
 800133e:	2300      	movhi	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e0e7      	b.n	800151a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	4a78      	ldr	r2, [pc, #480]	@ (8001530 <HAL_I2C_Init+0x280>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	0c9b      	lsrs	r3, r3, #18
 8001354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	430a      	orrs	r2, r1
 8001368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a6a      	ldr	r2, [pc, #424]	@ (8001524 <HAL_I2C_Init+0x274>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d802      	bhi.n	8001384 <HAL_I2C_Init+0xd4>
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3301      	adds	r3, #1
 8001382:	e009      	b.n	8001398 <HAL_I2C_Init+0xe8>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800138a:	fb02 f303 	mul.w	r3, r2, r3
 800138e:	4a69      	ldr	r2, [pc, #420]	@ (8001534 <HAL_I2C_Init+0x284>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	099b      	lsrs	r3, r3, #6
 8001396:	3301      	adds	r3, #1
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	430b      	orrs	r3, r1
 800139e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	495c      	ldr	r1, [pc, #368]	@ (8001524 <HAL_I2C_Init+0x274>)
 80013b4:	428b      	cmp	r3, r1
 80013b6:	d819      	bhi.n	80013ec <HAL_I2C_Init+0x13c>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1e59      	subs	r1, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80013c6:	1c59      	adds	r1, r3, #1
 80013c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013cc:	400b      	ands	r3, r1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00a      	beq.n	80013e8 <HAL_I2C_Init+0x138>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1e59      	subs	r1, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e0:	3301      	adds	r3, #1
 80013e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e6:	e051      	b.n	800148c <HAL_I2C_Init+0x1dc>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e04f      	b.n	800148c <HAL_I2C_Init+0x1dc>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d111      	bne.n	8001418 <HAL_I2C_Init+0x168>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1e58      	subs	r0, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	440b      	add	r3, r1
 8001402:	fbb0 f3f3 	udiv	r3, r0, r3
 8001406:	3301      	adds	r3, #1
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140c:	2b00      	cmp	r3, #0
 800140e:	bf0c      	ite	eq
 8001410:	2301      	moveq	r3, #1
 8001412:	2300      	movne	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	e012      	b.n	800143e <HAL_I2C_Init+0x18e>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1e58      	subs	r0, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	0099      	lsls	r1, r3, #2
 8001428:	440b      	add	r3, r1
 800142a:	fbb0 f3f3 	udiv	r3, r0, r3
 800142e:	3301      	adds	r3, #1
 8001430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf0c      	ite	eq
 8001438:	2301      	moveq	r3, #1
 800143a:	2300      	movne	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_I2C_Init+0x196>
 8001442:	2301      	movs	r3, #1
 8001444:	e022      	b.n	800148c <HAL_I2C_Init+0x1dc>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10e      	bne.n	800146c <HAL_I2C_Init+0x1bc>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1e58      	subs	r0, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6859      	ldr	r1, [r3, #4]
 8001456:	460b      	mov	r3, r1
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	440b      	add	r3, r1
 800145c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001460:	3301      	adds	r3, #1
 8001462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001466:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800146a:	e00f      	b.n	800148c <HAL_I2C_Init+0x1dc>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e58      	subs	r0, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	0099      	lsls	r1, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	6809      	ldr	r1, [r1, #0]
 8001490:	4313      	orrs	r3, r2
 8001492:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6911      	ldr	r1, [r2, #16]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68d2      	ldr	r2, [r2, #12]
 80014c6:	4311      	orrs	r1, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695a      	ldr	r2, [r3, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2220      	movs	r2, #32
 8001506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	000186a0 	.word	0x000186a0
 8001528:	001e847f 	.word	0x001e847f
 800152c:	003d08ff 	.word	0x003d08ff
 8001530:	431bde83 	.word	0x431bde83
 8001534:	10624dd3 	.word	0x10624dd3

08001538 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	461a      	mov	r2, r3
 8001544:	460b      	mov	r3, r1
 8001546:	817b      	strh	r3, [r7, #10]
 8001548:	4613      	mov	r3, r2
 800154a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff fa18 	bl	8000980 <HAL_GetTick>
 8001550:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b20      	cmp	r3, #32
 800155c:	f040 80e0 	bne.w	8001720 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2319      	movs	r3, #25
 8001566:	2201      	movs	r2, #1
 8001568:	4970      	ldr	r1, [pc, #448]	@ (800172c <HAL_I2C_Master_Transmit+0x1f4>)
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f964 	bl	8001838 <I2C_WaitOnFlagUntilTimeout>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001576:	2302      	movs	r3, #2
 8001578:	e0d3      	b.n	8001722 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_I2C_Master_Transmit+0x50>
 8001584:	2302      	movs	r3, #2
 8001586:	e0cc      	b.n	8001722 <HAL_I2C_Master_Transmit+0x1ea>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	d007      	beq.n	80015ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f042 0201 	orr.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2221      	movs	r2, #33	@ 0x21
 80015c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2210      	movs	r2, #16
 80015ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	893a      	ldrh	r2, [r7, #8]
 80015de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4a50      	ldr	r2, [pc, #320]	@ (8001730 <HAL_I2C_Master_Transmit+0x1f8>)
 80015ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015f0:	8979      	ldrh	r1, [r7, #10]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 f89c 	bl	8001734 <I2C_MasterRequestWrite>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e08d      	b.n	8001722 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800161c:	e066      	b.n	80016ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	6a39      	ldr	r1, [r7, #32]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 fa22 	bl	8001a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00d      	beq.n	800164a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	2b04      	cmp	r3, #4
 8001634:	d107      	bne.n	8001646 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001644:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e06b      	b.n	8001722 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	3b01      	subs	r3, #1
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001672:	3b01      	subs	r3, #1
 8001674:	b29a      	uxth	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b04      	cmp	r3, #4
 8001686:	d11b      	bne.n	80016c0 <HAL_I2C_Master_Transmit+0x188>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168c:	2b00      	cmp	r3, #0
 800168e:	d017      	beq.n	80016c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	6a39      	ldr	r1, [r7, #32]
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fa19 	bl	8001afc <I2C_WaitOnBTFFlagUntilTimeout>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00d      	beq.n	80016ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d107      	bne.n	80016e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e01a      	b.n	8001722 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d194      	bne.n	800161e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001720:	2302      	movs	r3, #2
  }
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	00100002 	.word	0x00100002
 8001730:	ffff0000 	.word	0xffff0000

08001734 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af02      	add	r7, sp, #8
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	460b      	mov	r3, r1
 8001742:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001748:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b08      	cmp	r3, #8
 800174e:	d006      	beq.n	800175e <I2C_MasterRequestWrite+0x2a>
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d003      	beq.n	800175e <I2C_MasterRequestWrite+0x2a>
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800175c:	d108      	bne.n	8001770 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e00b      	b.n	8001788 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	2b12      	cmp	r3, #18
 8001776:	d107      	bne.n	8001788 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001786:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 f84f 	bl	8001838 <I2C_WaitOnFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00d      	beq.n	80017bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ae:	d103      	bne.n	80017b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e035      	b.n	8001828 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017c4:	d108      	bne.n	80017d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017c6:	897b      	ldrh	r3, [r7, #10]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80017d4:	611a      	str	r2, [r3, #16]
 80017d6:	e01b      	b.n	8001810 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017d8:	897b      	ldrh	r3, [r7, #10]
 80017da:	11db      	asrs	r3, r3, #7
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f003 0306 	and.w	r3, r3, #6
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f063 030f 	orn	r3, r3, #15
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	490e      	ldr	r1, [pc, #56]	@ (8001830 <I2C_MasterRequestWrite+0xfc>)
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f898 	bl	800192c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e010      	b.n	8001828 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001806:	897b      	ldrh	r3, [r7, #10]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4907      	ldr	r1, [pc, #28]	@ (8001834 <I2C_MasterRequestWrite+0x100>)
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f000 f888 	bl	800192c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	00010008 	.word	0x00010008
 8001834:	00010002 	.word	0x00010002

08001838 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001848:	e048      	b.n	80018dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d044      	beq.n	80018dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001852:	f7ff f895 	bl	8000980 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d302      	bcc.n	8001868 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d139      	bne.n	80018dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b01      	cmp	r3, #1
 8001870:	d10d      	bne.n	800188e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	43da      	mvns	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	4013      	ands	r3, r2
 800187e:	b29b      	uxth	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf0c      	ite	eq
 8001884:	2301      	moveq	r3, #1
 8001886:	2300      	movne	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
 800188c:	e00c      	b.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	43da      	mvns	r2, r3
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4013      	ands	r3, r2
 800189a:	b29b      	uxth	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf0c      	ite	eq
 80018a0:	2301      	moveq	r3, #1
 80018a2:	2300      	movne	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d116      	bne.n	80018dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f043 0220 	orr.w	r2, r3, #32
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e023      	b.n	8001924 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d10d      	bne.n	8001902 <I2C_WaitOnFlagUntilTimeout+0xca>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	43da      	mvns	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	4013      	ands	r3, r2
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	bf0c      	ite	eq
 80018f8:	2301      	moveq	r3, #1
 80018fa:	2300      	movne	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	461a      	mov	r2, r3
 8001900:	e00c      	b.n	800191c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	43da      	mvns	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	4013      	ands	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	429a      	cmp	r2, r3
 8001920:	d093      	beq.n	800184a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
 8001938:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800193a:	e071      	b.n	8001a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800194a:	d123      	bne.n	8001994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800195a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001964:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	f043 0204 	orr.w	r2, r3, #4
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e067      	b.n	8001a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199a:	d041      	beq.n	8001a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800199c:	f7fe fff0 	bl	8000980 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d302      	bcc.n	80019b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d136      	bne.n	8001a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	0c1b      	lsrs	r3, r3, #16
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d10c      	bne.n	80019d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4013      	ands	r3, r2
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	e00b      	b.n	80019ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	43da      	mvns	r2, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	4013      	ands	r3, r2
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d016      	beq.n	8001a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	f043 0220 	orr.w	r2, r3, #32
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e021      	b.n	8001a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	0c1b      	lsrs	r3, r3, #16
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d10c      	bne.n	8001a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	43da      	mvns	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	4013      	ands	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e00b      	b.n	8001a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f47f af6d 	bne.w	800193c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a78:	e034      	b.n	8001ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f886 	bl	8001b8c <I2C_IsAcknowledgeFailed>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e034      	b.n	8001af4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d028      	beq.n	8001ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a92:	f7fe ff75 	bl	8000980 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d302      	bcc.n	8001aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d11d      	bne.n	8001ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ab2:	2b80      	cmp	r3, #128	@ 0x80
 8001ab4:	d016      	beq.n	8001ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad0:	f043 0220 	orr.w	r2, r3, #32
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e007      	b.n	8001af4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aee:	2b80      	cmp	r3, #128	@ 0x80
 8001af0:	d1c3      	bne.n	8001a7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b08:	e034      	b.n	8001b74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f83e 	bl	8001b8c <I2C_IsAcknowledgeFailed>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e034      	b.n	8001b84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d028      	beq.n	8001b74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b22:	f7fe ff2d 	bl	8000980 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d11d      	bne.n	8001b74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d016      	beq.n	8001b74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2220      	movs	r2, #32
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	f043 0220 	orr.w	r2, r3, #32
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e007      	b.n	8001b84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d1c3      	bne.n	8001b0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba2:	d11b      	bne.n	8001bdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001bac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	f043 0204 	orr.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e272      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 8087 	beq.w	8001d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c08:	4b92      	ldr	r3, [pc, #584]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d00c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c14:	4b8f      	ldr	r3, [pc, #572]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 030c 	and.w	r3, r3, #12
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d112      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
 8001c20:	4b8c      	ldr	r3, [pc, #560]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c2c:	d10b      	bne.n	8001c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2e:	4b89      	ldr	r3, [pc, #548]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d06c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x12c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d168      	bne.n	8001d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e24c      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4e:	d106      	bne.n	8001c5e <HAL_RCC_OscConfig+0x76>
 8001c50:	4b80      	ldr	r3, [pc, #512]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a7f      	ldr	r2, [pc, #508]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	e02e      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x98>
 8001c66:	4b7b      	ldr	r3, [pc, #492]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b78      	ldr	r3, [pc, #480]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a77      	ldr	r2, [pc, #476]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e01d      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c88:	d10c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0xbc>
 8001c8a:	4b72      	ldr	r3, [pc, #456]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a71      	ldr	r2, [pc, #452]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b6f      	ldr	r3, [pc, #444]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_RCC_OscConfig+0xd4>
 8001ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b68      	ldr	r3, [pc, #416]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a67      	ldr	r2, [pc, #412]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fe5c 	bl	8000980 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7fe fe58 	bl	8000980 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e200      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cde:	4b5d      	ldr	r3, [pc, #372]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0xe4>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7fe fe48 	bl	8000980 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7fe fe44 	bl	8000980 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1ec      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	4b53      	ldr	r3, [pc, #332]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x10c>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d063      	beq.n	8001dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d22:	4b4c      	ldr	r3, [pc, #304]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d2e:	4b49      	ldr	r3, [pc, #292]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b08      	cmp	r3, #8
 8001d38:	d11c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
 8001d3a:	4b46      	ldr	r3, [pc, #280]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d116      	bne.n	8001d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	4b43      	ldr	r3, [pc, #268]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d001      	beq.n	8001d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e1c0      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4939      	ldr	r1, [pc, #228]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d72:	e03a      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d020      	beq.n	8001dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7c:	4b36      	ldr	r3, [pc, #216]	@ (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7fe fdfd 	bl	8000980 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8a:	f7fe fdf9 	bl	8000980 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e1a1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0f0      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4927      	ldr	r1, [pc, #156]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
 8001dbc:	e015      	b.n	8001dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fddc 	bl	8000980 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7fe fdd8 	bl	8000980 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e180      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dde:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d03a      	beq.n	8001e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7fe fdbc 	bl	8000980 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7fe fdb8 	bl	8000980 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e160      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_RCC_OscConfig+0x26c>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fafe 	bl	800242c <RCC_Delay>
 8001e30:	e01c      	b.n	8001e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <HAL_RCC_OscConfig+0x274>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e38:	f7fe fda2 	bl	8000980 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3e:	e00f      	b.n	8001e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e40:	f7fe fd9e 	bl	8000980 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d908      	bls.n	8001e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e146      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	42420000 	.word	0x42420000
 8001e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1e9      	bne.n	8001e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 80a6 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b88      	ldr	r3, [pc, #544]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	4a87      	ldr	r2, [pc, #540]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	61d3      	str	r3, [r2, #28]
 8001e96:	4b85      	ldr	r3, [pc, #532]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b82      	ldr	r3, [pc, #520]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d118      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebe:	f7fe fd5f 	bl	8000980 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec6:	f7fe fd5b 	bl	8000980 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b64      	cmp	r3, #100	@ 0x64
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e103      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b75      	ldr	r3, [pc, #468]	@ (80020b0 <HAL_RCC_OscConfig+0x4c8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x312>
 8001eec:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	6213      	str	r3, [r2, #32]
 8001ef8:	e02d      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x334>
 8001f02:	4b6a      	ldr	r3, [pc, #424]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	4a69      	ldr	r2, [pc, #420]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	f023 0301 	bic.w	r3, r3, #1
 8001f0c:	6213      	str	r3, [r2, #32]
 8001f0e:	4b67      	ldr	r3, [pc, #412]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a66      	ldr	r2, [pc, #408]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 0304 	bic.w	r3, r3, #4
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	e01c      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b05      	cmp	r3, #5
 8001f22:	d10c      	bne.n	8001f3e <HAL_RCC_OscConfig+0x356>
 8001f24:	4b61      	ldr	r3, [pc, #388]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a60      	ldr	r2, [pc, #384]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b5e      	ldr	r3, [pc, #376]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a5d      	ldr	r2, [pc, #372]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6213      	str	r3, [r2, #32]
 8001f3c:	e00b      	b.n	8001f56 <HAL_RCC_OscConfig+0x36e>
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a5a      	ldr	r2, [pc, #360]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f023 0301 	bic.w	r3, r3, #1
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	4b58      	ldr	r3, [pc, #352]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	4a57      	ldr	r2, [pc, #348]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	f023 0304 	bic.w	r3, r3, #4
 8001f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d015      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fd0f 	bl	8000980 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7fe fd0b 	bl	8000980 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e0b1      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ee      	beq.n	8001f66 <HAL_RCC_OscConfig+0x37e>
 8001f88:	e014      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8a:	f7fe fcf9 	bl	8000980 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f90:	e00a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f92:	f7fe fcf5 	bl	8000980 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e09b      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ee      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d105      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fba:	4b3c      	ldr	r3, [pc, #240]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fd0:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d061      	beq.n	80020a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d146      	bne.n	8002072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b33      	ldr	r3, [pc, #204]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7fe fcc9 	bl	8000980 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7fe fcc5 	bl	8000980 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e06d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002004:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002018:	d108      	bne.n	800202c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800201a:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	4921      	ldr	r1, [pc, #132]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800202c:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a19      	ldr	r1, [r3, #32]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	430b      	orrs	r3, r1
 800203e:	491b      	ldr	r1, [pc, #108]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b1b      	ldr	r3, [pc, #108]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe fc99 	bl	8000980 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe fc95 	bl	8000980 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e03d      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x46a>
 8002070:	e035      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <HAL_RCC_OscConfig+0x4cc>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7fe fc82 	bl	8000980 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe fc7e 	bl	8000980 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e026      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <HAL_RCC_OscConfig+0x4c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x498>
 800209e:	e01e      	b.n	80020de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e019      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_RCC_OscConfig+0x500>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d106      	bne.n	80020da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fbd0 	bl	8000980 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fbcc 	bl	8000980 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	@ (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	@ (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fa50 	bl	8000740 <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08005728 	.word	0x08005728
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022da:	4b1e      	ldr	r3, [pc, #120]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x94>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d002      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d003      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x36>
 80022ee:	e027      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022f0:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f2:	613b      	str	r3, [r7, #16]
      break;
 80022f4:	e027      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0c9b      	lsrs	r3, r3, #18
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4a17      	ldr	r2, [pc, #92]	@ (800235c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d010      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x94>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	0c5b      	lsrs	r3, r3, #17
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	4a11      	ldr	r2, [pc, #68]	@ (8002360 <HAL_RCC_GetSysClockFreq+0xa0>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a0d      	ldr	r2, [pc, #52]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 8002322:	fb03 f202 	mul.w	r2, r3, r2
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e004      	b.n	800233a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0c      	ldr	r2, [pc, #48]	@ (8002364 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002334:	fb02 f303 	mul.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	613b      	str	r3, [r7, #16]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x98>)
 8002342:	613b      	str	r3, [r7, #16]
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	693b      	ldr	r3, [r7, #16]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	08005740 	.word	0x08005740
 8002360:	08005750 	.word	0x08005750
 8002364:	003d0900 	.word	0x003d0900

08002368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800236c:	4b02      	ldr	r3, [pc, #8]	@ (8002378 <HAL_RCC_GetHCLKFreq+0x10>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	20000000 	.word	0x20000000

0800237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002380:	f7ff fff2 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 8002384:	4602      	mov	r2, r0
 8002386:	4b05      	ldr	r3, [pc, #20]	@ (800239c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	4903      	ldr	r1, [pc, #12]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002392:	5ccb      	ldrb	r3, [r1, r3]
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002398:	4618      	mov	r0, r3
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40021000 	.word	0x40021000
 80023a0:	08005738 	.word	0x08005738

080023a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a8:	f7ff ffde 	bl	8002368 <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	0adb      	lsrs	r3, r3, #11
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	@ (80023c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	08005738 	.word	0x08005738

080023cc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	220f      	movs	r2, #15
 80023da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <HAL_RCC_GetClockConfig+0x58>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <HAL_RCC_GetClockConfig+0x58>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <HAL_RCC_GetClockConfig+0x58>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HAL_RCC_GetClockConfig+0x58>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_RCC_GetClockConfig+0x5c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0207 	and.w	r2, r3, #7
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40021000 	.word	0x40021000
 8002428:	40022000 	.word	0x40022000

0800242c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002434:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <RCC_Delay+0x34>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0a      	ldr	r2, [pc, #40]	@ (8002464 <RCC_Delay+0x38>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0a5b      	lsrs	r3, r3, #9
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002448:	bf00      	nop
  }
  while (Delay --);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	60fa      	str	r2, [r7, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1f9      	bne.n	8002448 <RCC_Delay+0x1c>
}
 8002454:	bf00      	nop
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	20000000 	.word	0x20000000
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d07d      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002484:	2300      	movs	r3, #0
 8002486:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002488:	4b4f      	ldr	r3, [pc, #316]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10d      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002494:	4b4c      	ldr	r3, [pc, #304]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	4a4b      	ldr	r2, [pc, #300]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249e:	61d3      	str	r3, [r2, #28]
 80024a0:	4b49      	ldr	r3, [pc, #292]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ac:	2301      	movs	r3, #1
 80024ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b46      	ldr	r3, [pc, #280]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d118      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024bc:	4b43      	ldr	r3, [pc, #268]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a42      	ldr	r2, [pc, #264]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c8:	f7fe fa5a 	bl	8000980 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ce:	e008      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d0:	f7fe fa56 	bl	8000980 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	@ 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e06d      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e2:	4b3a      	ldr	r3, [pc, #232]	@ (80025cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024ee:	4b36      	ldr	r3, [pc, #216]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02e      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	429a      	cmp	r2, r3
 800250a:	d027      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800250c:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002514:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002516:	4b2e      	ldr	r3, [pc, #184]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800251c:	4b2c      	ldr	r3, [pc, #176]	@ (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002522:	4a29      	ldr	r2, [pc, #164]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d014      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002532:	f7fe fa25 	bl	8000980 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe fa21 	bl	8000980 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e036      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800255c:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4917      	ldr	r1, [pc, #92]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256a:	4313      	orrs	r3, r2
 800256c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4a13      	ldr	r2, [pc, #76]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800257e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	490b      	ldr	r1, [pc, #44]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d008      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025aa:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	4904      	ldr	r1, [pc, #16]	@ (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	42420440 	.word	0x42420440

080025d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e076      	b.n	80026d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d108      	bne.n	8002600 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025f6:	d009      	beq.n	800260c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
 80025fe:	e005      	b.n	800260c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe f83e 	bl	80006a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2202      	movs	r2, #2
 8002630:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002642:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002690:	ea42 0103 	orr.w	r1, r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002698:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	0c1a      	lsrs	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f002 0204 	and.w	r2, r2, #4
 80026b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e041      	b.n	8002772 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f839 	bl	800277a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	3304      	adds	r3, #4
 8002718:	4619      	mov	r1, r3
 800271a:	4610      	mov	r0, r2
 800271c:	f000 f99c 	bl	8002a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d001      	beq.n	80027a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e03a      	b.n	800281a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a18      	ldr	r2, [pc, #96]	@ (8002824 <HAL_TIM_Base_Start_IT+0x98>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00e      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ce:	d009      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a14      	ldr	r2, [pc, #80]	@ (8002828 <HAL_TIM_Base_Start_IT+0x9c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0x58>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a13      	ldr	r2, [pc, #76]	@ (800282c <HAL_TIM_Base_Start_IT+0xa0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d111      	bne.n	8002808 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d010      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002806:	e007      	b.n	8002818 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40000400 	.word	0x40000400
 800282c:	40000800 	.word	0x40000800

08002830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d020      	beq.n	8002894 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0202 	mvn.w	r2, #2
 8002864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8d1 	bl	8002a22 <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8c4 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8d3 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	d020      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0204 	mvn.w	r2, #4
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2202      	movs	r2, #2
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8ab 	bl	8002a22 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f89e 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8ad 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0308 	and.w	r3, r3, #8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d020      	beq.n	800292c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0308 	and.w	r3, r3, #8
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0208 	mvn.w	r2, #8
 80028fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2204      	movs	r2, #4
 8002902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f885 	bl	8002a22 <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f878 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f887 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d020      	beq.n	8002978 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0210 	mvn.w	r2, #16
 8002948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2208      	movs	r2, #8
 800294e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f85f 	bl	8002a22 <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f852 	bl	8002a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f861 	bl	8002a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00c      	beq.n	800299c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0201 	mvn.w	r2, #1
 8002994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7fd fdbc 	bl	8000514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8c3 	bl	8002b46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00c      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f831 	bl	8002a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0220 	mvn.w	r2, #32
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f896 	bl	8002b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002b28 <TIM_Base_SetConfig+0xd0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <TIM_Base_SetConfig+0x30>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a76:	d007      	beq.n	8002a88 <TIM_Base_SetConfig+0x30>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b2c <TIM_Base_SetConfig+0xd4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_Base_SetConfig+0x30>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a2b      	ldr	r2, [pc, #172]	@ (8002b30 <TIM_Base_SetConfig+0xd8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d108      	bne.n	8002a9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a22      	ldr	r2, [pc, #136]	@ (8002b28 <TIM_Base_SetConfig+0xd0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00b      	beq.n	8002aba <TIM_Base_SetConfig+0x62>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa8:	d007      	beq.n	8002aba <TIM_Base_SetConfig+0x62>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a1f      	ldr	r2, [pc, #124]	@ (8002b2c <TIM_Base_SetConfig+0xd4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_Base_SetConfig+0x62>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b30 <TIM_Base_SetConfig+0xd8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d108      	bne.n	8002acc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b28 <TIM_Base_SetConfig+0xd0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d103      	bne.n	8002b00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	f023 0201 	bic.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	611a      	str	r2, [r3, #16]
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800

08002b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <__NVIC_SetPriority>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	@ (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	@ (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <SysTick_Handler+0x1c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bb4:	f001 fd38 	bl	8004628 <xTaskGetSchedulerState>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d001      	beq.n	8002bc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002bbe:	f002 fadb 	bl	8005178 <xPortSysTickHandler>
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	f06f 0004 	mvn.w	r0, #4
 8002bd6:	f7ff ffbf 	bl	8002b58 <__NVIC_SetPriority>
#endif
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002be6:	f3ef 8305 	mrs	r3, IPSR
 8002bea:	603b      	str	r3, [r7, #0]
  return(result);
 8002bec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002bf2:	f06f 0305 	mvn.w	r3, #5
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	e00c      	b.n	8002c14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bfa:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <osKernelInitialize+0x40>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c02:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <osKernelInitialize+0x40>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	e002      	b.n	8002c14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c14:	687b      	ldr	r3, [r7, #4]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	200001b8 	.word	0x200001b8

08002c24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c2a:	f3ef 8305 	mrs	r3, IPSR
 8002c2e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c36:	f06f 0305 	mvn.w	r3, #5
 8002c3a:	607b      	str	r3, [r7, #4]
 8002c3c:	e010      	b.n	8002c60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <osKernelStart+0x48>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d109      	bne.n	8002c5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c46:	f7ff ffc1 	bl	8002bcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <osKernelStart+0x48>)
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c50:	f001 f88a 	bl	8003d68 <vTaskStartScheduler>
      stat = osOK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e002      	b.n	8002c60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c60:	687b      	ldr	r3, [r7, #4]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200001b8 	.word	0x200001b8

08002c70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08e      	sub	sp, #56	@ 0x38
 8002c74:	af04      	add	r7, sp, #16
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c80:	f3ef 8305 	mrs	r3, IPSR
 8002c84:	617b      	str	r3, [r7, #20]
  return(result);
 8002c86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d17e      	bne.n	8002d8a <osThreadNew+0x11a>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d07b      	beq.n	8002d8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c96:	2318      	movs	r3, #24
 8002c98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d045      	beq.n	8002d36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <osThreadNew+0x48>
        name = attr->name;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <osThreadNew+0x6e>
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b38      	cmp	r3, #56	@ 0x38
 8002cd0:	d805      	bhi.n	8002cde <osThreadNew+0x6e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <osThreadNew+0x72>
        return (NULL);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e054      	b.n	8002d8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00e      	beq.n	8002d18 <osThreadNew+0xa8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2ba7      	cmp	r3, #167	@ 0xa7
 8002d00:	d90a      	bls.n	8002d18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <osThreadNew+0xa8>
        mem = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	e010      	b.n	8002d3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10c      	bne.n	8002d3a <osThreadNew+0xca>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d108      	bne.n	8002d3a <osThreadNew+0xca>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d104      	bne.n	8002d3a <osThreadNew+0xca>
          mem = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
 8002d34:	e001      	b.n	8002d3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d110      	bne.n	8002d62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d48:	9202      	str	r2, [sp, #8]
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	6a3a      	ldr	r2, [r7, #32]
 8002d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fe12 	bl	8003980 <xTaskCreateStatic>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	e013      	b.n	8002d8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d110      	bne.n	8002d8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fe60 	bl	8003a40 <xTaskCreate>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d001      	beq.n	8002d8a <osThreadNew+0x11a>
            hTask = NULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d8a:	693b      	ldr	r3, [r7, #16]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3728      	adds	r7, #40	@ 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d9c:	f3ef 8305 	mrs	r3, IPSR
 8002da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002da2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <osDelay+0x1c>
    stat = osErrorISR;
 8002da8:	f06f 0305 	mvn.w	r3, #5
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e007      	b.n	8002dc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 ff9e 	bl	8003cfc <vTaskDelay>
    }
  }

  return (stat);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a06      	ldr	r2, [pc, #24]	@ (8002df4 <vApplicationGetIdleTaskMemory+0x28>)
 8002ddc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4a05      	ldr	r2, [pc, #20]	@ (8002df8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002de2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2280      	movs	r2, #128	@ 0x80
 8002de8:	601a      	str	r2, [r3, #0]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr
 8002df4:	200001bc 	.word	0x200001bc
 8002df8:	20000264 	.word	0x20000264

08002dfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a07      	ldr	r2, [pc, #28]	@ (8002e28 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4a06      	ldr	r2, [pc, #24]	@ (8002e2c <vApplicationGetTimerTaskMemory+0x30>)
 8002e12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e1a:	601a      	str	r2, [r3, #0]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000464 	.word	0x20000464
 8002e2c:	2000050c 	.word	0x2000050c

08002e30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f103 0208 	add.w	r2, r3, #8
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f103 0208 	add.w	r2, r3, #8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f103 0208 	add.w	r2, r3, #8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d103      	bne.n	8002eec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	e00c      	b.n	8002f06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	e002      	b.n	8002efa <vListInsert+0x2e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d2f6      	bcs.n	8002ef4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	601a      	str	r2, [r3, #0]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6892      	ldr	r2, [r2, #8]
 8002f52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6852      	ldr	r2, [r2, #4]
 8002f5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d103      	bne.n	8002f70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	1e5a      	subs	r2, r3, #1
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
	...

08002f90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fbc:	f002 f85e 	bl	800507c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fc8:	68f9      	ldr	r1, [r7, #12]
 8002fca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	441a      	add	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	3b01      	subs	r3, #1
 8002fee:	68f9      	ldr	r1, [r7, #12]
 8002ff0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	441a      	add	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	22ff      	movs	r2, #255	@ 0xff
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	22ff      	movs	r2, #255	@ 0xff
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d114      	bne.n	800303c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d01a      	beq.n	8003050 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3310      	adds	r3, #16
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f93c 	bl	800429c <xTaskRemoveFromEventList>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d012      	beq.n	8003050 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800302a:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <xQueueGenericReset+0xd0>)
 800302c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	e009      	b.n	8003050 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3310      	adds	r3, #16
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fef5 	bl	8002e30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3324      	adds	r3, #36	@ 0x24
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fef0 	bl	8002e30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003050:	f002 f844 	bl	80050dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003054:	2301      	movs	r3, #1
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000ed04 	.word	0xe000ed04

08003064 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08e      	sub	sp, #56	@ 0x38
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
 8003070:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	e7fd      	b.n	80030aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <xQueueGenericCreateStatic+0x56>
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <xQueueGenericCreateStatic+0x5a>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueGenericCreateStatic+0x5c>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	623b      	str	r3, [r7, #32]
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d102      	bne.n	80030e8 <xQueueGenericCreateStatic+0x84>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <xQueueGenericCreateStatic+0x88>
 80030e8:	2301      	movs	r3, #1
 80030ea:	e000      	b.n	80030ee <xQueueGenericCreateStatic+0x8a>
 80030ec:	2300      	movs	r3, #0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	61fb      	str	r3, [r7, #28]
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	e7fd      	b.n	8003106 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800310a:	2350      	movs	r3, #80	@ 0x50
 800310c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b50      	cmp	r3, #80	@ 0x50
 8003112:	d00b      	beq.n	800312c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	61bb      	str	r3, [r7, #24]
}
 8003126:	bf00      	nop
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800312c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00d      	beq.n	8003154 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003140:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f805 	bl	800315e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003156:	4618      	mov	r0, r3
 8003158:	3730      	adds	r7, #48	@ 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
 800316a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e002      	b.n	8003180 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800318c:	2101      	movs	r1, #1
 800318e:	69b8      	ldr	r0, [r7, #24]
 8003190:	f7ff fefe 	bl	8002f90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08e      	sub	sp, #56	@ 0x38
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031b2:	2300      	movs	r3, #0
 80031b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80031ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10b      	bne.n	80031d8 <xQueueGenericSend+0x34>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d103      	bne.n	80031e6 <xQueueGenericSend+0x42>
 80031de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <xQueueGenericSend+0x46>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueGenericSend+0x48>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10b      	bne.n	8003208 <xQueueGenericSend+0x64>
	__asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d103      	bne.n	8003216 <xQueueGenericSend+0x72>
 800320e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <xQueueGenericSend+0x76>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <xQueueGenericSend+0x78>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10b      	bne.n	8003238 <xQueueGenericSend+0x94>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003224:	f383 8811 	msr	BASEPRI, r3
 8003228:	f3bf 8f6f 	isb	sy
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	623b      	str	r3, [r7, #32]
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	e7fd      	b.n	8003234 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003238:	f001 f9f6 	bl	8004628 <xTaskGetSchedulerState>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <xQueueGenericSend+0xa4>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <xQueueGenericSend+0xa8>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <xQueueGenericSend+0xaa>
 800324c:	2300      	movs	r3, #0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <xQueueGenericSend+0xc6>
	__asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	61fb      	str	r3, [r7, #28]
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800326a:	f001 ff07 	bl	800507c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800326e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <xQueueGenericSend+0xdc>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d129      	bne.n	80032d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003286:	f000 fa0f 	bl	80036a8 <prvCopyDataToQueue>
 800328a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800328c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	3324      	adds	r3, #36	@ 0x24
 8003298:	4618      	mov	r0, r3
 800329a:	f000 ffff 	bl	800429c <xTaskRemoveFromEventList>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d013      	beq.n	80032cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032a4:	4b3f      	ldr	r3, [pc, #252]	@ (80033a4 <xQueueGenericSend+0x200>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	e00a      	b.n	80032cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032bc:	4b39      	ldr	r3, [pc, #228]	@ (80033a4 <xQueueGenericSend+0x200>)
 80032be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032cc:	f001 ff06 	bl	80050dc <vPortExitCritical>
				return pdPASS;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e063      	b.n	800339c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d103      	bne.n	80032e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032da:	f001 feff 	bl	80050dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	e05c      	b.n	800339c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d106      	bne.n	80032f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	4618      	mov	r0, r3
 80032ee:	f001 f839 	bl	8004364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032f6:	f001 fef1 	bl	80050dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032fa:	f000 fda5 	bl	8003e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032fe:	f001 febd 	bl	800507c <vPortEnterCritical>
 8003302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003308:	b25b      	sxtb	r3, r3
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d103      	bne.n	8003318 <xQueueGenericSend+0x174>
 8003310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800331e:	b25b      	sxtb	r3, r3
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d103      	bne.n	800332e <xQueueGenericSend+0x18a>
 8003326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800332e:	f001 fed5 	bl	80050dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003332:	1d3a      	adds	r2, r7, #4
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f001 f828 	bl	8004390 <xTaskCheckForTimeOut>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d124      	bne.n	8003390 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003348:	f000 faa6 	bl	8003898 <prvIsQueueFull>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d018      	beq.n	8003384 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003354:	3310      	adds	r3, #16
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f000 ff4c 	bl	80041f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003362:	f000 fa31 	bl	80037c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003366:	f000 fd7d 	bl	8003e64 <xTaskResumeAll>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	f47f af7c 	bne.w	800326a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003372:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <xQueueGenericSend+0x200>)
 8003374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	e772      	b.n	800326a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003386:	f000 fa1f 	bl	80037c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800338a:	f000 fd6b 	bl	8003e64 <xTaskResumeAll>
 800338e:	e76c      	b.n	800326a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003392:	f000 fa19 	bl	80037c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003396:	f000 fd65 	bl	8003e64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800339a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800339c:	4618      	mov	r0, r3
 800339e:	3738      	adds	r7, #56	@ 0x38
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b090      	sub	sp, #64	@ 0x40
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80033ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033d2:	bf00      	nop
 80033d4:	bf00      	nop
 80033d6:	e7fd      	b.n	80033d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <xQueueGenericSendFromISR+0x3e>
 80033de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <xQueueGenericSendFromISR+0x42>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <xQueueGenericSendFromISR+0x44>
 80033ea:	2300      	movs	r3, #0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80033f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f4:	f383 8811 	msr	BASEPRI, r3
 80033f8:	f3bf 8f6f 	isb	sy
 80033fc:	f3bf 8f4f 	dsb	sy
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003402:	bf00      	nop
 8003404:	bf00      	nop
 8003406:	e7fd      	b.n	8003404 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d103      	bne.n	8003416 <xQueueGenericSendFromISR+0x6e>
 800340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <xQueueGenericSendFromISR+0x72>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <xQueueGenericSendFromISR+0x74>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	623b      	str	r3, [r7, #32]
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003438:	f001 fee2 	bl	8005200 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800343c:	f3ef 8211 	mrs	r2, BASEPRI
 8003440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	61fa      	str	r2, [r7, #28]
 8003452:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003454:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003456:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800345c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003460:	429a      	cmp	r2, r3
 8003462:	d302      	bcc.n	800346a <xQueueGenericSendFromISR+0xc2>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d12f      	bne.n	80034ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800346a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003470:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003480:	f000 f912 	bl	80036a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003484:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d112      	bne.n	80034b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800348e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d016      	beq.n	80034c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003498:	3324      	adds	r3, #36	@ 0x24
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fefe 	bl	800429c <xTaskRemoveFromEventList>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00e      	beq.n	80034c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e007      	b.n	80034c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80034b8:	3301      	adds	r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	b25a      	sxtb	r2, r3
 80034be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80034c4:	2301      	movs	r3, #1
 80034c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80034c8:	e001      	b.n	80034ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034ca:	2300      	movs	r3, #0
 80034cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3740      	adds	r7, #64	@ 0x40
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	@ 0x30
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <xQueueReceive+0x32>
	__asm volatile
 80034fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003502:	f383 8811 	msr	BASEPRI, r3
 8003506:	f3bf 8f6f 	isb	sy
 800350a:	f3bf 8f4f 	dsb	sy
 800350e:	623b      	str	r3, [r7, #32]
}
 8003510:	bf00      	nop
 8003512:	bf00      	nop
 8003514:	e7fd      	b.n	8003512 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d103      	bne.n	8003524 <xQueueReceive+0x40>
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <xQueueReceive+0x44>
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <xQueueReceive+0x46>
 8003528:	2300      	movs	r3, #0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <xQueueReceive+0x62>
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	61fb      	str	r3, [r7, #28]
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	e7fd      	b.n	8003542 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003546:	f001 f86f 	bl	8004628 <xTaskGetSchedulerState>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d102      	bne.n	8003556 <xQueueReceive+0x72>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <xQueueReceive+0x76>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <xQueueReceive+0x78>
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <xQueueReceive+0x94>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	61bb      	str	r3, [r7, #24]
}
 8003572:	bf00      	nop
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003578:	f001 fd80 	bl	800507c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01f      	beq.n	80035c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800358c:	f000 f8f6 	bl	800377c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	1e5a      	subs	r2, r3, #1
 8003594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003596:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00f      	beq.n	80035c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a2:	3310      	adds	r3, #16
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 fe79 	bl	800429c <xTaskRemoveFromEventList>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035b0:	4b3c      	ldr	r3, [pc, #240]	@ (80036a4 <xQueueReceive+0x1c0>)
 80035b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035c0:	f001 fd8c 	bl	80050dc <vPortExitCritical>
				return pdPASS;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e069      	b.n	800369c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d103      	bne.n	80035d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035ce:	f001 fd85 	bl	80050dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e062      	b.n	800369c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035dc:	f107 0310 	add.w	r3, r7, #16
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 febf 	bl	8004364 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035e6:	2301      	movs	r3, #1
 80035e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035ea:	f001 fd77 	bl	80050dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ee:	f000 fc2b 	bl	8003e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035f2:	f001 fd43 	bl	800507c <vPortEnterCritical>
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d103      	bne.n	800360c <xQueueReceive+0x128>
 8003604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003612:	b25b      	sxtb	r3, r3
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d103      	bne.n	8003622 <xQueueReceive+0x13e>
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003622:	f001 fd5b 	bl	80050dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003626:	1d3a      	adds	r2, r7, #4
 8003628:	f107 0310 	add.w	r3, r7, #16
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f000 feae 	bl	8004390 <xTaskCheckForTimeOut>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d123      	bne.n	8003682 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800363a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800363c:	f000 f916 	bl	800386c <prvIsQueueEmpty>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d017      	beq.n	8003676 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	3324      	adds	r3, #36	@ 0x24
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fdd2 	bl	80041f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003656:	f000 f8b7 	bl	80037c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800365a:	f000 fc03 	bl	8003e64 <xTaskResumeAll>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d189      	bne.n	8003578 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003664:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <xQueueReceive+0x1c0>)
 8003666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	e780      	b.n	8003578 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003678:	f000 f8a6 	bl	80037c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800367c:	f000 fbf2 	bl	8003e64 <xTaskResumeAll>
 8003680:	e77a      	b.n	8003578 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003684:	f000 f8a0 	bl	80037c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003688:	f000 fbec 	bl	8003e64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800368c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800368e:	f000 f8ed 	bl	800386c <prvIsQueueEmpty>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	f43f af6f 	beq.w	8003578 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800369a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800369c:	4618      	mov	r0, r3
 800369e:	3730      	adds	r7, #48	@ 0x30
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d14d      	bne.n	800376a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 ffc6 	bl	8004664 <xTaskPriorityDisinherit>
 80036d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	e043      	b.n	800376a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d119      	bne.n	800371c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6858      	ldr	r0, [r3, #4]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	461a      	mov	r2, r3
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	f001 ff48 	bl	8005588 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	441a      	add	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d32b      	bcc.n	800376a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e026      	b.n	800376a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	68d8      	ldr	r0, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	461a      	mov	r2, r3
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	f001 ff2e 	bl	8005588 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	425b      	negs	r3, r3
 8003736:	441a      	add	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d207      	bcs.n	8003758 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	425b      	negs	r3, r3
 8003752:	441a      	add	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d105      	bne.n	800376a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	3b01      	subs	r3, #1
 8003768:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003772:	697b      	ldr	r3, [r7, #20]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d018      	beq.n	80037c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	441a      	add	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d303      	bcc.n	80037b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68d9      	ldr	r1, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	461a      	mov	r2, r3
 80037ba:	6838      	ldr	r0, [r7, #0]
 80037bc:	f001 fee4 	bl	8005588 <memcpy>
	}
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037d0:	f001 fc54 	bl	800507c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037dc:	e011      	b.n	8003802 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d012      	beq.n	800380c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	3324      	adds	r3, #36	@ 0x24
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fd56 	bl	800429c <xTaskRemoveFromEventList>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037f6:	f000 fe2f 	bl	8004458 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003806:	2b00      	cmp	r3, #0
 8003808:	dce9      	bgt.n	80037de <prvUnlockQueue+0x16>
 800380a:	e000      	b.n	800380e <prvUnlockQueue+0x46>
					break;
 800380c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	22ff      	movs	r2, #255	@ 0xff
 8003812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003816:	f001 fc61 	bl	80050dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800381a:	f001 fc2f 	bl	800507c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003824:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003826:	e011      	b.n	800384c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d012      	beq.n	8003856 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3310      	adds	r3, #16
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fd31 	bl	800429c <xTaskRemoveFromEventList>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003840:	f000 fe0a 	bl	8004458 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003844:	7bbb      	ldrb	r3, [r7, #14]
 8003846:	3b01      	subs	r3, #1
 8003848:	b2db      	uxtb	r3, r3
 800384a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800384c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003850:	2b00      	cmp	r3, #0
 8003852:	dce9      	bgt.n	8003828 <prvUnlockQueue+0x60>
 8003854:	e000      	b.n	8003858 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003856:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	22ff      	movs	r2, #255	@ 0xff
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003860:	f001 fc3c 	bl	80050dc <vPortExitCritical>
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003874:	f001 fc02 	bl	800507c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e001      	b.n	800388a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800388a:	f001 fc27 	bl	80050dc <vPortExitCritical>

	return xReturn;
 800388e:	68fb      	ldr	r3, [r7, #12]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038a0:	f001 fbec 	bl	800507c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d102      	bne.n	80038b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	e001      	b.n	80038ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038ba:	f001 fc0f 	bl	80050dc <vPortExitCritical>

	return xReturn;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e014      	b.n	8003902 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003914 <vQueueAddToRegistry+0x4c>)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038e4:	490b      	ldr	r1, [pc, #44]	@ (8003914 <vQueueAddToRegistry+0x4c>)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038ee:	4a09      	ldr	r2, [pc, #36]	@ (8003914 <vQueueAddToRegistry+0x4c>)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038fa:	e006      	b.n	800390a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b07      	cmp	r3, #7
 8003906:	d9e7      	bls.n	80038d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003908:	bf00      	nop
 800390a:	bf00      	nop
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	2000090c 	.word	0x2000090c

08003918 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003928:	f001 fba8 	bl	800507c <vPortEnterCritical>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003932:	b25b      	sxtb	r3, r3
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d103      	bne.n	8003942 <vQueueWaitForMessageRestricted+0x2a>
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003948:	b25b      	sxtb	r3, r3
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d103      	bne.n	8003958 <vQueueWaitForMessageRestricted+0x40>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003958:	f001 fbc0 	bl	80050dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	3324      	adds	r3, #36	@ 0x24
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fc69 	bl	8004244 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff28 	bl	80037c8 <prvUnlockQueue>
	}
 8003978:	bf00      	nop
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08e      	sub	sp, #56	@ 0x38
 8003984:	af04      	add	r7, sp, #16
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	623b      	str	r3, [r7, #32]
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10b      	bne.n	80039ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	61fb      	str	r3, [r7, #28]
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039ca:	23a8      	movs	r3, #168	@ 0xa8
 80039cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2ba8      	cmp	r3, #168	@ 0xa8
 80039d2:	d00b      	beq.n	80039ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	61bb      	str	r3, [r7, #24]
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01e      	beq.n	8003a32 <xTaskCreateStatic+0xb2>
 80039f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01b      	beq.n	8003a32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9303      	str	r3, [sp, #12]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f851 	bl	8003acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a2c:	f000 f8f6 	bl	8003c1c <prvAddNewTaskToReadyList>
 8003a30:	e001      	b.n	8003a36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a36:	697b      	ldr	r3, [r7, #20]
	}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	@ 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08c      	sub	sp, #48	@ 0x30
 8003a44:	af04      	add	r7, sp, #16
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f001 fc13 	bl	8005280 <pvPortMalloc>
 8003a5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00e      	beq.n	8003a80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a62:	20a8      	movs	r0, #168	@ 0xa8
 8003a64:	f001 fc0c 	bl	8005280 <pvPortMalloc>
 8003a68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a76:	e005      	b.n	8003a84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a78:	6978      	ldr	r0, [r7, #20]
 8003a7a:	f001 fc13 	bl	80052a4 <vPortFree>
 8003a7e:	e001      	b.n	8003a84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d017      	beq.n	8003aba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a92:	88fa      	ldrh	r2, [r7, #6]
 8003a94:	2300      	movs	r3, #0
 8003a96:	9303      	str	r3, [sp, #12]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	68b9      	ldr	r1, [r7, #8]
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f80f 	bl	8003acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003aae:	69f8      	ldr	r0, [r7, #28]
 8003ab0:	f000 f8b4 	bl	8003c1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	e002      	b.n	8003ac0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003adc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	21a5      	movs	r1, #165	@ 0xa5
 8003ae6:	f001 fcad 	bl	8005444 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003af4:	3b01      	subs	r3, #1
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f023 0307 	bic.w	r3, r3, #7
 8003b02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	617b      	str	r3, [r7, #20]
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	e7fd      	b.n	8003b22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01f      	beq.n	8003b6c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	e012      	b.n	8003b58 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	7819      	ldrb	r1, [r3, #0]
 8003b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	3334      	adds	r3, #52	@ 0x34
 8003b42:	460a      	mov	r2, r1
 8003b44:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b0f      	cmp	r3, #15
 8003b5c:	d9e9      	bls.n	8003b32 <prvInitialiseNewTask+0x66>
 8003b5e:	e000      	b.n	8003b62 <prvInitialiseNewTask+0x96>
			{
				break;
 8003b60:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b6a:	e003      	b.n	8003b74 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b76:	2b37      	cmp	r3, #55	@ 0x37
 8003b78:	d901      	bls.n	8003b7e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b7a:	2337      	movs	r3, #55	@ 0x37
 8003b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b82:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b88:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	3304      	adds	r3, #4
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff f96a 	bl	8002e6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9c:	3318      	adds	r3, #24
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff f965 	bl	8002e6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	3354      	adds	r3, #84	@ 0x54
 8003bce:	224c      	movs	r2, #76	@ 0x4c
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 fc36 	bl	8005444 <memset>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	4a0d      	ldr	r2, [pc, #52]	@ (8003c10 <prvInitialiseNewTask+0x144>)
 8003bdc:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	4a0c      	ldr	r2, [pc, #48]	@ (8003c14 <prvInitialiseNewTask+0x148>)
 8003be2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	4a0c      	ldr	r2, [pc, #48]	@ (8003c18 <prvInitialiseNewTask+0x14c>)
 8003be8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	69b8      	ldr	r0, [r7, #24]
 8003bf0:	f001 f954 	bl	8004e9c <pxPortInitialiseStack>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c06:	bf00      	nop
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000f88 	.word	0x20000f88
 8003c14:	20000ff0 	.word	0x20000ff0
 8003c18:	20001058 	.word	0x20001058

08003c1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c24:	f001 fa2a 	bl	800507c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c28:	4b2d      	ldr	r3, [pc, #180]	@ (8003ce0 <prvAddNewTaskToReadyList+0xc4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce0 <prvAddNewTaskToReadyList+0xc4>)
 8003c30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c32:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce4 <prvAddNewTaskToReadyList+0xc8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce4 <prvAddNewTaskToReadyList+0xc8>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c40:	4b27      	ldr	r3, [pc, #156]	@ (8003ce0 <prvAddNewTaskToReadyList+0xc4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d110      	bne.n	8003c6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c48:	f000 fc2a 	bl	80044a0 <prvInitialiseTaskLists>
 8003c4c:	e00d      	b.n	8003c6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c4e:	4b26      	ldr	r3, [pc, #152]	@ (8003ce8 <prvAddNewTaskToReadyList+0xcc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d109      	bne.n	8003c6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c56:	4b23      	ldr	r3, [pc, #140]	@ (8003ce4 <prvAddNewTaskToReadyList+0xc8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d802      	bhi.n	8003c6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce4 <prvAddNewTaskToReadyList+0xc8>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c6a:	4b20      	ldr	r3, [pc, #128]	@ (8003cec <prvAddNewTaskToReadyList+0xd0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	4a1e      	ldr	r2, [pc, #120]	@ (8003cec <prvAddNewTaskToReadyList+0xd0>)
 8003c72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c74:	4b1d      	ldr	r3, [pc, #116]	@ (8003cec <prvAddNewTaskToReadyList+0xd0>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c80:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf0 <prvAddNewTaskToReadyList+0xd4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d903      	bls.n	8003c90 <prvAddNewTaskToReadyList+0x74>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	4a18      	ldr	r2, [pc, #96]	@ (8003cf0 <prvAddNewTaskToReadyList+0xd4>)
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4a15      	ldr	r2, [pc, #84]	@ (8003cf4 <prvAddNewTaskToReadyList+0xd8>)
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7ff f8ed 	bl	8002e86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cac:	f001 fa16 	bl	80050dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <prvAddNewTaskToReadyList+0xcc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <prvAddNewTaskToReadyList+0xc8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d207      	bcs.n	8003cd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cf8 <prvAddNewTaskToReadyList+0xdc>)
 8003cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	20000e20 	.word	0x20000e20
 8003ce4:	2000094c 	.word	0x2000094c
 8003ce8:	20000e2c 	.word	0x20000e2c
 8003cec:	20000e3c 	.word	0x20000e3c
 8003cf0:	20000e28 	.word	0x20000e28
 8003cf4:	20000950 	.word	0x20000950
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d018      	beq.n	8003d40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d0e:	4b14      	ldr	r3, [pc, #80]	@ (8003d60 <vTaskDelay+0x64>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <vTaskDelay+0x32>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	60bb      	str	r3, [r7, #8]
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d2e:	f000 f88b 	bl	8003e48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d32:	2100      	movs	r1, #0
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fd05 	bl	8004744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d3a:	f000 f893 	bl	8003e64 <xTaskResumeAll>
 8003d3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d107      	bne.n	8003d56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d46:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <vTaskDelay+0x68>)
 8003d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d56:	bf00      	nop
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000e48 	.word	0x20000e48
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08a      	sub	sp, #40	@ 0x28
 8003d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d76:	463a      	mov	r2, r7
 8003d78:	1d39      	adds	r1, r7, #4
 8003d7a:	f107 0308 	add.w	r3, r7, #8
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff f824 	bl	8002dcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d84:	6839      	ldr	r1, [r7, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	9202      	str	r2, [sp, #8]
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	460a      	mov	r2, r1
 8003d96:	4924      	ldr	r1, [pc, #144]	@ (8003e28 <vTaskStartScheduler+0xc0>)
 8003d98:	4824      	ldr	r0, [pc, #144]	@ (8003e2c <vTaskStartScheduler+0xc4>)
 8003d9a:	f7ff fdf1 	bl	8003980 <xTaskCreateStatic>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	4a23      	ldr	r2, [pc, #140]	@ (8003e30 <vTaskStartScheduler+0xc8>)
 8003da2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003da4:	4b22      	ldr	r3, [pc, #136]	@ (8003e30 <vTaskStartScheduler+0xc8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e001      	b.n	8003db6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d102      	bne.n	8003dc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003dbc:	f000 fd16 	bl	80047ec <xTimerCreateTimerTask>
 8003dc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d11b      	bne.n	8003e00 <vTaskStartScheduler+0x98>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	613b      	str	r3, [r7, #16]
}
 8003dda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ddc:	4b15      	ldr	r3, [pc, #84]	@ (8003e34 <vTaskStartScheduler+0xcc>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3354      	adds	r3, #84	@ 0x54
 8003de2:	4a15      	ldr	r2, [pc, #84]	@ (8003e38 <vTaskStartScheduler+0xd0>)
 8003de4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003de6:	4b15      	ldr	r3, [pc, #84]	@ (8003e3c <vTaskStartScheduler+0xd4>)
 8003de8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dee:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <vTaskStartScheduler+0xd8>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003df4:	4b13      	ldr	r3, [pc, #76]	@ (8003e44 <vTaskStartScheduler+0xdc>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dfa:	f001 f8cd 	bl	8004f98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dfe:	e00f      	b.n	8003e20 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d10b      	bne.n	8003e20 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	60fb      	str	r3, [r7, #12]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <vTaskStartScheduler+0xb4>
}
 8003e20:	bf00      	nop
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	08005680 	.word	0x08005680
 8003e2c:	08004471 	.word	0x08004471
 8003e30:	20000e44 	.word	0x20000e44
 8003e34:	2000094c 	.word	0x2000094c
 8003e38:	20000010 	.word	0x20000010
 8003e3c:	20000e40 	.word	0x20000e40
 8003e40:	20000e2c 	.word	0x20000e2c
 8003e44:	20000e24 	.word	0x20000e24

08003e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e4c:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <vTaskSuspendAll+0x18>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	4a03      	ldr	r2, [pc, #12]	@ (8003e60 <vTaskSuspendAll+0x18>)
 8003e54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000e48 	.word	0x20000e48

08003e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e72:	4b42      	ldr	r3, [pc, #264]	@ (8003f7c <xTaskResumeAll+0x118>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <xTaskResumeAll+0x2e>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	603b      	str	r3, [r7, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e92:	f001 f8f3 	bl	800507c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e96:	4b39      	ldr	r3, [pc, #228]	@ (8003f7c <xTaskResumeAll+0x118>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	4a37      	ldr	r2, [pc, #220]	@ (8003f7c <xTaskResumeAll+0x118>)
 8003e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ea0:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <xTaskResumeAll+0x118>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d162      	bne.n	8003f6e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ea8:	4b35      	ldr	r3, [pc, #212]	@ (8003f80 <xTaskResumeAll+0x11c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05e      	beq.n	8003f6e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb0:	e02f      	b.n	8003f12 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb2:	4b34      	ldr	r3, [pc, #208]	@ (8003f84 <xTaskResumeAll+0x120>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff f83c 	bl	8002f3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff f837 	bl	8002f3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f88 <xTaskResumeAll+0x124>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <xTaskResumeAll+0x7e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ede:	4a2a      	ldr	r2, [pc, #168]	@ (8003f88 <xTaskResumeAll+0x124>)
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4a27      	ldr	r2, [pc, #156]	@ (8003f8c <xTaskResumeAll+0x128>)
 8003ef0:	441a      	add	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe ffc4 	bl	8002e86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f02:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <xTaskResumeAll+0x12c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d302      	bcc.n	8003f12 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003f0c:	4b21      	ldr	r3, [pc, #132]	@ (8003f94 <xTaskResumeAll+0x130>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f12:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <xTaskResumeAll+0x120>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1cb      	bne.n	8003eb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f20:	f000 fb62 	bl	80045e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f24:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <xTaskResumeAll+0x134>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d010      	beq.n	8003f52 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f30:	f000 f844 	bl	8003fbc <xTaskIncrementTick>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003f3a:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <xTaskResumeAll+0x130>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f1      	bne.n	8003f30 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003f4c:	4b12      	ldr	r3, [pc, #72]	@ (8003f98 <xTaskResumeAll+0x134>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f52:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <xTaskResumeAll+0x130>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <xTaskResumeAll+0x138>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f001 f8b5 	bl	80050dc <vPortExitCritical>

	return xAlreadyYielded;
 8003f72:	68bb      	ldr	r3, [r7, #8]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000e48 	.word	0x20000e48
 8003f80:	20000e20 	.word	0x20000e20
 8003f84:	20000de0 	.word	0x20000de0
 8003f88:	20000e28 	.word	0x20000e28
 8003f8c:	20000950 	.word	0x20000950
 8003f90:	2000094c 	.word	0x2000094c
 8003f94:	20000e34 	.word	0x20000e34
 8003f98:	20000e30 	.word	0x20000e30
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003fa6:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <xTaskGetTickCount+0x18>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fac:	687b      	ldr	r3, [r7, #4]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	20000e24 	.word	0x20000e24

08003fbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8004104 <xTaskIncrementTick+0x148>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f040 8090 	bne.w	80040f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004108 <xTaskIncrementTick+0x14c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8004108 <xTaskIncrementTick+0x14c>)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d121      	bne.n	8004028 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fe4:	4b49      	ldr	r3, [pc, #292]	@ (800410c <xTaskIncrementTick+0x150>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00b      	beq.n	8004006 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	603b      	str	r3, [r7, #0]
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	e7fd      	b.n	8004002 <xTaskIncrementTick+0x46>
 8004006:	4b41      	ldr	r3, [pc, #260]	@ (800410c <xTaskIncrementTick+0x150>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	4b40      	ldr	r3, [pc, #256]	@ (8004110 <xTaskIncrementTick+0x154>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a3e      	ldr	r2, [pc, #248]	@ (800410c <xTaskIncrementTick+0x150>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4a3e      	ldr	r2, [pc, #248]	@ (8004110 <xTaskIncrementTick+0x154>)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b3e      	ldr	r3, [pc, #248]	@ (8004114 <xTaskIncrementTick+0x158>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	4a3c      	ldr	r2, [pc, #240]	@ (8004114 <xTaskIncrementTick+0x158>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	f000 fae0 	bl	80045e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004028:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <xTaskIncrementTick+0x15c>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	429a      	cmp	r2, r3
 8004030:	d349      	bcc.n	80040c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004032:	4b36      	ldr	r3, [pc, #216]	@ (800410c <xTaskIncrementTick+0x150>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800403c:	4b36      	ldr	r3, [pc, #216]	@ (8004118 <xTaskIncrementTick+0x15c>)
 800403e:	f04f 32ff 	mov.w	r2, #4294967295
 8004042:	601a      	str	r2, [r3, #0]
					break;
 8004044:	e03f      	b.n	80040c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004046:	4b31      	ldr	r3, [pc, #196]	@ (800410c <xTaskIncrementTick+0x150>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	d203      	bcs.n	8004066 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800405e:	4a2e      	ldr	r2, [pc, #184]	@ (8004118 <xTaskIncrementTick+0x15c>)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004064:	e02f      	b.n	80040c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	3304      	adds	r3, #4
 800406a:	4618      	mov	r0, r3
 800406c:	f7fe ff66 	bl	8002f3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	2b00      	cmp	r3, #0
 8004076:	d004      	beq.n	8004082 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	3318      	adds	r3, #24
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe ff5d 	bl	8002f3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004086:	4b25      	ldr	r3, [pc, #148]	@ (800411c <xTaskIncrementTick+0x160>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d903      	bls.n	8004096 <xTaskIncrementTick+0xda>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	4a22      	ldr	r2, [pc, #136]	@ (800411c <xTaskIncrementTick+0x160>)
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004120 <xTaskIncrementTick+0x164>)
 80040a4:	441a      	add	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3304      	adds	r3, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4610      	mov	r0, r2
 80040ae:	f7fe feea 	bl	8002e86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <xTaskIncrementTick+0x168>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	429a      	cmp	r2, r3
 80040be:	d3b8      	bcc.n	8004032 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040c4:	e7b5      	b.n	8004032 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040c6:	4b17      	ldr	r3, [pc, #92]	@ (8004124 <xTaskIncrementTick+0x168>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040cc:	4914      	ldr	r1, [pc, #80]	@ (8004120 <xTaskIncrementTick+0x164>)
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d901      	bls.n	80040e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80040de:	2301      	movs	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040e2:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <xTaskIncrementTick+0x16c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e004      	b.n	80040fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040f0:	4b0e      	ldr	r3, [pc, #56]	@ (800412c <xTaskIncrementTick+0x170>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	4a0d      	ldr	r2, [pc, #52]	@ (800412c <xTaskIncrementTick+0x170>)
 80040f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040fa:	697b      	ldr	r3, [r7, #20]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000e48 	.word	0x20000e48
 8004108:	20000e24 	.word	0x20000e24
 800410c:	20000dd8 	.word	0x20000dd8
 8004110:	20000ddc 	.word	0x20000ddc
 8004114:	20000e38 	.word	0x20000e38
 8004118:	20000e40 	.word	0x20000e40
 800411c:	20000e28 	.word	0x20000e28
 8004120:	20000950 	.word	0x20000950
 8004124:	2000094c 	.word	0x2000094c
 8004128:	20000e34 	.word	0x20000e34
 800412c:	20000e30 	.word	0x20000e30

08004130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004136:	4b2a      	ldr	r3, [pc, #168]	@ (80041e0 <vTaskSwitchContext+0xb0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800413e:	4b29      	ldr	r3, [pc, #164]	@ (80041e4 <vTaskSwitchContext+0xb4>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004144:	e047      	b.n	80041d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004146:	4b27      	ldr	r3, [pc, #156]	@ (80041e4 <vTaskSwitchContext+0xb4>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414c:	4b26      	ldr	r3, [pc, #152]	@ (80041e8 <vTaskSwitchContext+0xb8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e011      	b.n	8004178 <vTaskSwitchContext+0x48>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10b      	bne.n	8004172 <vTaskSwitchContext+0x42>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	607b      	str	r3, [r7, #4]
}
 800416c:	bf00      	nop
 800416e:	bf00      	nop
 8004170:	e7fd      	b.n	800416e <vTaskSwitchContext+0x3e>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	3b01      	subs	r3, #1
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	491c      	ldr	r1, [pc, #112]	@ (80041ec <vTaskSwitchContext+0xbc>)
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4613      	mov	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0e3      	beq.n	8004154 <vTaskSwitchContext+0x24>
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4a15      	ldr	r2, [pc, #84]	@ (80041ec <vTaskSwitchContext+0xbc>)
 8004198:	4413      	add	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	3308      	adds	r3, #8
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d104      	bne.n	80041bc <vTaskSwitchContext+0x8c>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	4a0b      	ldr	r2, [pc, #44]	@ (80041f0 <vTaskSwitchContext+0xc0>)
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4a08      	ldr	r2, [pc, #32]	@ (80041e8 <vTaskSwitchContext+0xb8>)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041cc:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <vTaskSwitchContext+0xc0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3354      	adds	r3, #84	@ 0x54
 80041d2:	4a08      	ldr	r2, [pc, #32]	@ (80041f4 <vTaskSwitchContext+0xc4>)
 80041d4:	6013      	str	r3, [r2, #0]
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	20000e48 	.word	0x20000e48
 80041e4:	20000e34 	.word	0x20000e34
 80041e8:	20000e28 	.word	0x20000e28
 80041ec:	20000950 	.word	0x20000950
 80041f0:	2000094c 	.word	0x2000094c
 80041f4:	20000010 	.word	0x20000010

080041f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10b      	bne.n	8004220 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	60fb      	str	r3, [r7, #12]
}
 800421a:	bf00      	nop
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <vTaskPlaceOnEventList+0x48>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3318      	adds	r3, #24
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7fe fe4f 	bl	8002ecc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800422e:	2101      	movs	r1, #1
 8004230:	6838      	ldr	r0, [r7, #0]
 8004232:	f000 fa87 	bl	8004744 <prvAddCurrentTaskToDelayedList>
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	2000094c 	.word	0x2000094c

08004244 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	617b      	str	r3, [r7, #20]
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800426e:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <vTaskPlaceOnEventListRestricted+0x54>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3318      	adds	r3, #24
 8004274:	4619      	mov	r1, r3
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f7fe fe05 	bl	8002e86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004282:	f04f 33ff 	mov.w	r3, #4294967295
 8004286:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	68b8      	ldr	r0, [r7, #8]
 800428c:	f000 fa5a 	bl	8004744 <prvAddCurrentTaskToDelayedList>
	}
 8004290:	bf00      	nop
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	2000094c 	.word	0x2000094c

0800429c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	60fb      	str	r3, [r7, #12]
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	e7fd      	b.n	80042c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	3318      	adds	r3, #24
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fe fe34 	bl	8002f3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042d4:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <xTaskRemoveFromEventList+0xb0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d11d      	bne.n	8004318 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	3304      	adds	r3, #4
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe fe2b 	bl	8002f3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ea:	4b19      	ldr	r3, [pc, #100]	@ (8004350 <xTaskRemoveFromEventList+0xb4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d903      	bls.n	80042fa <xTaskRemoveFromEventList+0x5e>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	4a16      	ldr	r2, [pc, #88]	@ (8004350 <xTaskRemoveFromEventList+0xb4>)
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4a13      	ldr	r2, [pc, #76]	@ (8004354 <xTaskRemoveFromEventList+0xb8>)
 8004308:	441a      	add	r2, r3
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	3304      	adds	r3, #4
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7fe fdb8 	bl	8002e86 <vListInsertEnd>
 8004316:	e005      	b.n	8004324 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	3318      	adds	r3, #24
 800431c:	4619      	mov	r1, r3
 800431e:	480e      	ldr	r0, [pc, #56]	@ (8004358 <xTaskRemoveFromEventList+0xbc>)
 8004320:	f7fe fdb1 	bl	8002e86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004328:	4b0c      	ldr	r3, [pc, #48]	@ (800435c <xTaskRemoveFromEventList+0xc0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	429a      	cmp	r2, r3
 8004330:	d905      	bls.n	800433e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004336:	4b0a      	ldr	r3, [pc, #40]	@ (8004360 <xTaskRemoveFromEventList+0xc4>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	e001      	b.n	8004342 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004342:	697b      	ldr	r3, [r7, #20]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	20000e48 	.word	0x20000e48
 8004350:	20000e28 	.word	0x20000e28
 8004354:	20000950 	.word	0x20000950
 8004358:	20000de0 	.word	0x20000de0
 800435c:	2000094c 	.word	0x2000094c
 8004360:	20000e34 	.word	0x20000e34

08004364 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <vTaskInternalSetTimeOutState+0x24>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004374:	4b05      	ldr	r3, [pc, #20]	@ (800438c <vTaskInternalSetTimeOutState+0x28>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	605a      	str	r2, [r3, #4]
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000e38 	.word	0x20000e38
 800438c:	20000e24 	.word	0x20000e24

08004390 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	613b      	str	r3, [r7, #16]
}
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	e7fd      	b.n	80043b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60fb      	str	r3, [r7, #12]
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	e7fd      	b.n	80043d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80043d6:	f000 fe51 	bl	800507c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043da:	4b1d      	ldr	r3, [pc, #116]	@ (8004450 <xTaskCheckForTimeOut+0xc0>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d102      	bne.n	80043fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	e023      	b.n	8004442 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b15      	ldr	r3, [pc, #84]	@ (8004454 <xTaskCheckForTimeOut+0xc4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d007      	beq.n	8004416 <xTaskCheckForTimeOut+0x86>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	429a      	cmp	r2, r3
 800440e:	d302      	bcc.n	8004416 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004410:	2301      	movs	r3, #1
 8004412:	61fb      	str	r3, [r7, #28]
 8004414:	e015      	b.n	8004442 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	429a      	cmp	r2, r3
 800441e:	d20b      	bcs.n	8004438 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1ad2      	subs	r2, r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff99 	bl	8004364 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
 8004436:	e004      	b.n	8004442 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800443e:	2301      	movs	r3, #1
 8004440:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004442:	f000 fe4b 	bl	80050dc <vPortExitCritical>

	return xReturn;
 8004446:	69fb      	ldr	r3, [r7, #28]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20000e24 	.word	0x20000e24
 8004454:	20000e38 	.word	0x20000e38

08004458 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800445c:	4b03      	ldr	r3, [pc, #12]	@ (800446c <vTaskMissedYield+0x14>)
 800445e:	2201      	movs	r2, #1
 8004460:	601a      	str	r2, [r3, #0]
}
 8004462:	bf00      	nop
 8004464:	46bd      	mov	sp, r7
 8004466:	bc80      	pop	{r7}
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000e34 	.word	0x20000e34

08004470 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004478:	f000 f852 	bl	8004520 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800447c:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <prvIdleTask+0x28>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d9f9      	bls.n	8004478 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004484:	4b05      	ldr	r3, [pc, #20]	@ (800449c <prvIdleTask+0x2c>)
 8004486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004494:	e7f0      	b.n	8004478 <prvIdleTask+0x8>
 8004496:	bf00      	nop
 8004498:	20000950 	.word	0x20000950
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044a6:	2300      	movs	r3, #0
 80044a8:	607b      	str	r3, [r7, #4]
 80044aa:	e00c      	b.n	80044c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4613      	mov	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4a12      	ldr	r2, [pc, #72]	@ (8004500 <prvInitialiseTaskLists+0x60>)
 80044b8:	4413      	add	r3, r2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fcb8 	bl	8002e30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	3301      	adds	r3, #1
 80044c4:	607b      	str	r3, [r7, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b37      	cmp	r3, #55	@ 0x37
 80044ca:	d9ef      	bls.n	80044ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044cc:	480d      	ldr	r0, [pc, #52]	@ (8004504 <prvInitialiseTaskLists+0x64>)
 80044ce:	f7fe fcaf 	bl	8002e30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044d2:	480d      	ldr	r0, [pc, #52]	@ (8004508 <prvInitialiseTaskLists+0x68>)
 80044d4:	f7fe fcac 	bl	8002e30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044d8:	480c      	ldr	r0, [pc, #48]	@ (800450c <prvInitialiseTaskLists+0x6c>)
 80044da:	f7fe fca9 	bl	8002e30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044de:	480c      	ldr	r0, [pc, #48]	@ (8004510 <prvInitialiseTaskLists+0x70>)
 80044e0:	f7fe fca6 	bl	8002e30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044e4:	480b      	ldr	r0, [pc, #44]	@ (8004514 <prvInitialiseTaskLists+0x74>)
 80044e6:	f7fe fca3 	bl	8002e30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <prvInitialiseTaskLists+0x78>)
 80044ec:	4a05      	ldr	r2, [pc, #20]	@ (8004504 <prvInitialiseTaskLists+0x64>)
 80044ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044f0:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <prvInitialiseTaskLists+0x7c>)
 80044f2:	4a05      	ldr	r2, [pc, #20]	@ (8004508 <prvInitialiseTaskLists+0x68>)
 80044f4:	601a      	str	r2, [r3, #0]
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000950 	.word	0x20000950
 8004504:	20000db0 	.word	0x20000db0
 8004508:	20000dc4 	.word	0x20000dc4
 800450c:	20000de0 	.word	0x20000de0
 8004510:	20000df4 	.word	0x20000df4
 8004514:	20000e0c 	.word	0x20000e0c
 8004518:	20000dd8 	.word	0x20000dd8
 800451c:	20000ddc 	.word	0x20000ddc

08004520 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004526:	e019      	b.n	800455c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004528:	f000 fda8 	bl	800507c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800452c:	4b10      	ldr	r3, [pc, #64]	@ (8004570 <prvCheckTasksWaitingTermination+0x50>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3304      	adds	r3, #4
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fcff 	bl	8002f3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800453e:	4b0d      	ldr	r3, [pc, #52]	@ (8004574 <prvCheckTasksWaitingTermination+0x54>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3b01      	subs	r3, #1
 8004544:	4a0b      	ldr	r2, [pc, #44]	@ (8004574 <prvCheckTasksWaitingTermination+0x54>)
 8004546:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <prvCheckTasksWaitingTermination+0x58>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3b01      	subs	r3, #1
 800454e:	4a0a      	ldr	r2, [pc, #40]	@ (8004578 <prvCheckTasksWaitingTermination+0x58>)
 8004550:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004552:	f000 fdc3 	bl	80050dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f810 	bl	800457c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800455c:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <prvCheckTasksWaitingTermination+0x58>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e1      	bne.n	8004528 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000df4 	.word	0x20000df4
 8004574:	20000e20 	.word	0x20000e20
 8004578:	20000e08 	.word	0x20000e08

0800457c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3354      	adds	r3, #84	@ 0x54
 8004588:	4618      	mov	r0, r3
 800458a:	f000 ff63 	bl	8005454 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004594:	2b00      	cmp	r3, #0
 8004596:	d108      	bne.n	80045aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fe81 	bl	80052a4 <vPortFree>
				vPortFree( pxTCB );
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fe7e 	bl	80052a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045a8:	e019      	b.n	80045de <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d103      	bne.n	80045bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 fe75 	bl	80052a4 <vPortFree>
	}
 80045ba:	e010      	b.n	80045de <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d00b      	beq.n	80045de <prvDeleteTCB+0x62>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	60fb      	str	r3, [r7, #12]
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	e7fd      	b.n	80045da <prvDeleteTCB+0x5e>
	}
 80045de:	bf00      	nop
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004620 <prvResetNextTaskUnblockTime+0x38>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004624 <prvResetNextTaskUnblockTime+0x3c>)
 80045fa:	f04f 32ff 	mov.w	r2, #4294967295
 80045fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004600:	e008      	b.n	8004614 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004602:	4b07      	ldr	r3, [pc, #28]	@ (8004620 <prvResetNextTaskUnblockTime+0x38>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	4a04      	ldr	r2, [pc, #16]	@ (8004624 <prvResetNextTaskUnblockTime+0x3c>)
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000dd8 	.word	0x20000dd8
 8004624:	20000e40 	.word	0x20000e40

08004628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800462e:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <xTaskGetSchedulerState+0x34>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004636:	2301      	movs	r3, #1
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	e008      	b.n	800464e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463c:	4b08      	ldr	r3, [pc, #32]	@ (8004660 <xTaskGetSchedulerState+0x38>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004644:	2302      	movs	r3, #2
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	e001      	b.n	800464e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800464e:	687b      	ldr	r3, [r7, #4]
	}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	20000e2c 	.word	0x20000e2c
 8004660:	20000e48 	.word	0x20000e48

08004664 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d058      	beq.n	800472c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800467a:	4b2f      	ldr	r3, [pc, #188]	@ (8004738 <xTaskPriorityDisinherit+0xd4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d00b      	beq.n	800469c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60fb      	str	r3, [r7, #12]
}
 8004696:	bf00      	nop
 8004698:	bf00      	nop
 800469a:	e7fd      	b.n	8004698 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	60bb      	str	r3, [r7, #8]
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c0:	1e5a      	subs	r2, r3, #1
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d02c      	beq.n	800472c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d128      	bne.n	800472c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	3304      	adds	r3, #4
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fc2c 	bl	8002f3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046fc:	4b0f      	ldr	r3, [pc, #60]	@ (800473c <xTaskPriorityDisinherit+0xd8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d903      	bls.n	800470c <xTaskPriorityDisinherit+0xa8>
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	4a0c      	ldr	r2, [pc, #48]	@ (800473c <xTaskPriorityDisinherit+0xd8>)
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4a09      	ldr	r2, [pc, #36]	@ (8004740 <xTaskPriorityDisinherit+0xdc>)
 800471a:	441a      	add	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7fe fbaf 	bl	8002e86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004728:	2301      	movs	r3, #1
 800472a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800472c:	697b      	ldr	r3, [r7, #20]
	}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	2000094c 	.word	0x2000094c
 800473c:	20000e28 	.word	0x20000e28
 8004740:	20000950 	.word	0x20000950

08004744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800474e:	4b21      	ldr	r3, [pc, #132]	@ (80047d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004754:	4b20      	ldr	r3, [pc, #128]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fbee 	bl	8002f3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d10a      	bne.n	800477e <prvAddCurrentTaskToDelayedList+0x3a>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800476e:	4b1a      	ldr	r3, [pc, #104]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4819      	ldr	r0, [pc, #100]	@ (80047dc <prvAddCurrentTaskToDelayedList+0x98>)
 8004778:	f7fe fb85 	bl	8002e86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800477c:	e026      	b.n	80047cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4413      	add	r3, r2
 8004784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004786:	4b14      	ldr	r3, [pc, #80]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	429a      	cmp	r2, r3
 8004794:	d209      	bcs.n	80047aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004796:	4b12      	ldr	r3, [pc, #72]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4b0f      	ldr	r3, [pc, #60]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3304      	adds	r3, #4
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f7fe fb92 	bl	8002ecc <vListInsert>
}
 80047a8:	e010      	b.n	80047cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047aa:	4b0e      	ldr	r3, [pc, #56]	@ (80047e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f7fe fb88 	bl	8002ecc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d202      	bcs.n	80047cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80047c6:	4a08      	ldr	r2, [pc, #32]	@ (80047e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	bf00      	nop
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20000e24 	.word	0x20000e24
 80047d8:	2000094c 	.word	0x2000094c
 80047dc:	20000e0c 	.word	0x20000e0c
 80047e0:	20000ddc 	.word	0x20000ddc
 80047e4:	20000dd8 	.word	0x20000dd8
 80047e8:	20000e40 	.word	0x20000e40

080047ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b08a      	sub	sp, #40	@ 0x28
 80047f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80047f6:	f000 fb11 	bl	8004e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80047fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004870 <xTimerCreateTimerTask+0x84>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d021      	beq.n	8004846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800480a:	1d3a      	adds	r2, r7, #4
 800480c:	f107 0108 	add.w	r1, r7, #8
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe faf1 	bl	8002dfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	9202      	str	r2, [sp, #8]
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	2302      	movs	r3, #2
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	2300      	movs	r3, #0
 800482a:	460a      	mov	r2, r1
 800482c:	4911      	ldr	r1, [pc, #68]	@ (8004874 <xTimerCreateTimerTask+0x88>)
 800482e:	4812      	ldr	r0, [pc, #72]	@ (8004878 <xTimerCreateTimerTask+0x8c>)
 8004830:	f7ff f8a6 	bl	8003980 <xTaskCreateStatic>
 8004834:	4603      	mov	r3, r0
 8004836:	4a11      	ldr	r2, [pc, #68]	@ (800487c <xTimerCreateTimerTask+0x90>)
 8004838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800483a:	4b10      	ldr	r3, [pc, #64]	@ (800487c <xTimerCreateTimerTask+0x90>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004842:	2301      	movs	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800484c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004850:	f383 8811 	msr	BASEPRI, r3
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	613b      	str	r3, [r7, #16]
}
 800485e:	bf00      	nop
 8004860:	bf00      	nop
 8004862:	e7fd      	b.n	8004860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004864:	697b      	ldr	r3, [r7, #20]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20000e7c 	.word	0x20000e7c
 8004874:	08005688 	.word	0x08005688
 8004878:	080049b9 	.word	0x080049b9
 800487c:	20000e80 	.word	0x20000e80

08004880 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	@ 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	623b      	str	r3, [r7, #32]
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048b0:	4b19      	ldr	r3, [pc, #100]	@ (8004918 <xTimerGenericCommand+0x98>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d02a      	beq.n	800490e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	dc18      	bgt.n	80048fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80048ca:	f7ff fead 	bl	8004628 <xTaskGetSchedulerState>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d109      	bne.n	80048e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80048d4:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <xTimerGenericCommand+0x98>)
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	f107 0110 	add.w	r1, r7, #16
 80048dc:	2300      	movs	r3, #0
 80048de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048e0:	f7fe fc60 	bl	80031a4 <xQueueGenericSend>
 80048e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80048e6:	e012      	b.n	800490e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80048e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004918 <xTimerGenericCommand+0x98>)
 80048ea:	6818      	ldr	r0, [r3, #0]
 80048ec:	f107 0110 	add.w	r1, r7, #16
 80048f0:	2300      	movs	r3, #0
 80048f2:	2200      	movs	r2, #0
 80048f4:	f7fe fc56 	bl	80031a4 <xQueueGenericSend>
 80048f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80048fa:	e008      	b.n	800490e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80048fc:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <xTimerGenericCommand+0x98>)
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	f107 0110 	add.w	r1, r7, #16
 8004904:	2300      	movs	r3, #0
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	f7fe fd4e 	bl	80033a8 <xQueueGenericSendFromISR>
 800490c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004910:	4618      	mov	r0, r3
 8004912:	3728      	adds	r7, #40	@ 0x28
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000e7c 	.word	0x20000e7c

0800491c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af02      	add	r7, sp, #8
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004926:	4b23      	ldr	r3, [pc, #140]	@ (80049b4 <prvProcessExpiredTimer+0x98>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	3304      	adds	r3, #4
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe fb01 	bl	8002f3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d023      	beq.n	8004990 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	699a      	ldr	r2, [r3, #24]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	18d1      	adds	r1, r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	6978      	ldr	r0, [r7, #20]
 8004956:	f000 f8d3 	bl	8004b00 <prvInsertTimerInActiveList>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004960:	2300      	movs	r3, #0
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	2100      	movs	r1, #0
 800496a:	6978      	ldr	r0, [r7, #20]
 800496c:	f7ff ff88 	bl	8004880 <xTimerGenericCommand>
 8004970:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d114      	bne.n	80049a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497c:	f383 8811 	msr	BASEPRI, r3
 8004980:	f3bf 8f6f 	isb	sy
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	60fb      	str	r3, [r7, #12]
}
 800498a:	bf00      	nop
 800498c:	bf00      	nop
 800498e:	e7fd      	b.n	800498c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	b2da      	uxtb	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	4798      	blx	r3
}
 80049aa:	bf00      	nop
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	20000e74 	.word	0x20000e74

080049b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049c0:	f107 0308 	add.w	r3, r7, #8
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 f859 	bl	8004a7c <prvGetNextExpireTime>
 80049ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4619      	mov	r1, r3
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f805 	bl	80049e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80049d6:	f000 f8d5 	bl	8004b84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049da:	bf00      	nop
 80049dc:	e7f0      	b.n	80049c0 <prvTimerTask+0x8>
	...

080049e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80049ea:	f7ff fa2d 	bl	8003e48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f864 	bl	8004ac0 <prvSampleTimeNow>
 80049f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d130      	bne.n	8004a62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10a      	bne.n	8004a1c <prvProcessTimerOrBlockTask+0x3c>
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d806      	bhi.n	8004a1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a0e:	f7ff fa29 	bl	8003e64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff ff81 	bl	800491c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a1a:	e024      	b.n	8004a66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a22:	4b13      	ldr	r3, [pc, #76]	@ (8004a70 <prvProcessTimerOrBlockTask+0x90>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <prvProcessTimerOrBlockTask+0x50>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <prvProcessTimerOrBlockTask+0x52>
 8004a30:	2300      	movs	r3, #0
 8004a32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a34:	4b0f      	ldr	r3, [pc, #60]	@ (8004a74 <prvProcessTimerOrBlockTask+0x94>)
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	4619      	mov	r1, r3
 8004a42:	f7fe ff69 	bl	8003918 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a46:	f7ff fa0d 	bl	8003e64 <xTaskResumeAll>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a50:	4b09      	ldr	r3, [pc, #36]	@ (8004a78 <prvProcessTimerOrBlockTask+0x98>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
}
 8004a60:	e001      	b.n	8004a66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a62:	f7ff f9ff 	bl	8003e64 <xTaskResumeAll>
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000e78 	.word	0x20000e78
 8004a74:	20000e7c 	.word	0x20000e7c
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a84:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <prvGetNextExpireTime+0x40>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <prvGetNextExpireTime+0x16>
 8004a8e:	2201      	movs	r2, #1
 8004a90:	e000      	b.n	8004a94 <prvGetNextExpireTime+0x18>
 8004a92:	2200      	movs	r2, #0
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aa0:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <prvGetNextExpireTime+0x40>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e001      	b.n	8004ab0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	20000e74 	.word	0x20000e74

08004ac0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ac8:	f7ff fa6a 	bl	8003fa0 <xTaskGetTickCount>
 8004acc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004ace:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <prvSampleTimeNow+0x3c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d205      	bcs.n	8004ae4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ad8:	f000 f93a 	bl	8004d50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004aea:	4a04      	ldr	r2, [pc, #16]	@ (8004afc <prvSampleTimeNow+0x3c>)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004af0:	68fb      	ldr	r3, [r7, #12]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000e84 	.word	0x20000e84

08004b00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
 8004b0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d812      	bhi.n	8004b4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	1ad2      	subs	r2, r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d302      	bcc.n	8004b3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	e01b      	b.n	8004b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b3a:	4b10      	ldr	r3, [pc, #64]	@ (8004b7c <prvInsertTimerInActiveList+0x7c>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4619      	mov	r1, r3
 8004b44:	4610      	mov	r0, r2
 8004b46:	f7fe f9c1 	bl	8002ecc <vListInsert>
 8004b4a:	e012      	b.n	8004b72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d206      	bcs.n	8004b62 <prvInsertTimerInActiveList+0x62>
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d302      	bcc.n	8004b62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e007      	b.n	8004b72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b62:	4b07      	ldr	r3, [pc, #28]	@ (8004b80 <prvInsertTimerInActiveList+0x80>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	f7fe f9ad 	bl	8002ecc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b72:	697b      	ldr	r3, [r7, #20]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000e78 	.word	0x20000e78
 8004b80:	20000e74 	.word	0x20000e74

08004b84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08e      	sub	sp, #56	@ 0x38
 8004b88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b8a:	e0ce      	b.n	8004d2a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da19      	bge.n	8004bc6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b92:	1d3b      	adds	r3, r7, #4
 8004b94:	3304      	adds	r3, #4
 8004b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	61fb      	str	r3, [r7, #28]
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	e7fd      	b.n	8004bb2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bbc:	6850      	ldr	r0, [r2, #4]
 8004bbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bc0:	6892      	ldr	r2, [r2, #8]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f2c0 80ae 	blt.w	8004d2a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d004      	beq.n	8004be4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fe f9ac 	bl	8002f3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004be4:	463b      	mov	r3, r7
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff ff6a 	bl	8004ac0 <prvSampleTimeNow>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b09      	cmp	r3, #9
 8004bf2:	f200 8097 	bhi.w	8004d24 <prvProcessReceivedCommands+0x1a0>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <prvProcessReceivedCommands+0x78>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c25 	.word	0x08004c25
 8004c04:	08004c25 	.word	0x08004c25
 8004c08:	08004c9b 	.word	0x08004c9b
 8004c0c:	08004caf 	.word	0x08004caf
 8004c10:	08004cfb 	.word	0x08004cfb
 8004c14:	08004c25 	.word	0x08004c25
 8004c18:	08004c25 	.word	0x08004c25
 8004c1c:	08004c9b 	.word	0x08004c9b
 8004c20:	08004caf 	.word	0x08004caf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	18d1      	adds	r1, r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c44:	f7ff ff5c 	bl	8004b00 <prvInsertTimerInActiveList>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d06c      	beq.n	8004d28 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d061      	beq.n	8004d28 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	441a      	add	r2, r3
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2300      	movs	r3, #0
 8004c72:	2100      	movs	r1, #0
 8004c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c76:	f7ff fe03 	bl	8004880 <xTimerGenericCommand>
 8004c7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d152      	bne.n	8004d28 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	61bb      	str	r3, [r7, #24]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004cac:	e03d      	b.n	8004d2a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10b      	bne.n	8004ce6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	617b      	str	r3, [r7, #20]
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	e7fd      	b.n	8004ce2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	18d1      	adds	r1, r2, r3
 8004cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cf4:	f7ff ff04 	bl	8004b00 <prvInsertTimerInActiveList>
					break;
 8004cf8:	e017      	b.n	8004d2a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d0a:	f000 facb 	bl	80052a4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d0e:	e00c      	b.n	8004d2a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004d22:	e002      	b.n	8004d2a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004d24:	bf00      	nop
 8004d26:	e000      	b.n	8004d2a <prvProcessReceivedCommands+0x1a6>
					break;
 8004d28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d2a:	4b08      	ldr	r3, [pc, #32]	@ (8004d4c <prvProcessReceivedCommands+0x1c8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1d39      	adds	r1, r7, #4
 8004d30:	2200      	movs	r2, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fbd6 	bl	80034e4 <xQueueReceive>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f47f af26 	bne.w	8004b8c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	3730      	adds	r7, #48	@ 0x30
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000e7c 	.word	0x20000e7c

08004d50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d56:	e049      	b.n	8004dec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d58:	4b2e      	ldr	r3, [pc, #184]	@ (8004e14 <prvSwitchTimerLists+0xc4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d62:	4b2c      	ldr	r3, [pc, #176]	@ (8004e14 <prvSwitchTimerLists+0xc4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe f8e3 	bl	8002f3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02f      	beq.n	8004dec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4413      	add	r3, r2
 8004d94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90e      	bls.n	8004dbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004daa:	4b1a      	ldr	r3, [pc, #104]	@ (8004e14 <prvSwitchTimerLists+0xc4>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fe f889 	bl	8002ecc <vListInsert>
 8004dba:	e017      	b.n	8004dec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fd5a 	bl	8004880 <xTimerGenericCommand>
 8004dcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	603b      	str	r3, [r7, #0]
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dec:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <prvSwitchTimerLists+0xc4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1b0      	bne.n	8004d58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004df6:	4b07      	ldr	r3, [pc, #28]	@ (8004e14 <prvSwitchTimerLists+0xc4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <prvSwitchTimerLists+0xc8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a04      	ldr	r2, [pc, #16]	@ (8004e14 <prvSwitchTimerLists+0xc4>)
 8004e02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e04:	4a04      	ldr	r2, [pc, #16]	@ (8004e18 <prvSwitchTimerLists+0xc8>)
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	6013      	str	r3, [r2, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000e74 	.word	0x20000e74
 8004e18:	20000e78 	.word	0x20000e78

08004e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e22:	f000 f92b 	bl	800507c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e26:	4b15      	ldr	r3, [pc, #84]	@ (8004e7c <prvCheckForValidListAndQueue+0x60>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d120      	bne.n	8004e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e2e:	4814      	ldr	r0, [pc, #80]	@ (8004e80 <prvCheckForValidListAndQueue+0x64>)
 8004e30:	f7fd fffe 	bl	8002e30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e34:	4813      	ldr	r0, [pc, #76]	@ (8004e84 <prvCheckForValidListAndQueue+0x68>)
 8004e36:	f7fd fffb 	bl	8002e30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e3a:	4b13      	ldr	r3, [pc, #76]	@ (8004e88 <prvCheckForValidListAndQueue+0x6c>)
 8004e3c:	4a10      	ldr	r2, [pc, #64]	@ (8004e80 <prvCheckForValidListAndQueue+0x64>)
 8004e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e40:	4b12      	ldr	r3, [pc, #72]	@ (8004e8c <prvCheckForValidListAndQueue+0x70>)
 8004e42:	4a10      	ldr	r2, [pc, #64]	@ (8004e84 <prvCheckForValidListAndQueue+0x68>)
 8004e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e46:	2300      	movs	r3, #0
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4b11      	ldr	r3, [pc, #68]	@ (8004e90 <prvCheckForValidListAndQueue+0x74>)
 8004e4c:	4a11      	ldr	r2, [pc, #68]	@ (8004e94 <prvCheckForValidListAndQueue+0x78>)
 8004e4e:	2110      	movs	r1, #16
 8004e50:	200a      	movs	r0, #10
 8004e52:	f7fe f907 	bl	8003064 <xQueueGenericCreateStatic>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <prvCheckForValidListAndQueue+0x60>)
 8004e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e5c:	4b07      	ldr	r3, [pc, #28]	@ (8004e7c <prvCheckForValidListAndQueue+0x60>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <prvCheckForValidListAndQueue+0x60>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	490b      	ldr	r1, [pc, #44]	@ (8004e98 <prvCheckForValidListAndQueue+0x7c>)
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fd2c 	bl	80038c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e70:	f000 f934 	bl	80050dc <vPortExitCritical>
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000e7c 	.word	0x20000e7c
 8004e80:	20000e4c 	.word	0x20000e4c
 8004e84:	20000e60 	.word	0x20000e60
 8004e88:	20000e74 	.word	0x20000e74
 8004e8c:	20000e78 	.word	0x20000e78
 8004e90:	20000f28 	.word	0x20000f28
 8004e94:	20000e88 	.word	0x20000e88
 8004e98:	08005690 	.word	0x08005690

08004e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3b04      	subs	r3, #4
 8004eac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	3b04      	subs	r3, #4
 8004eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	3b04      	subs	r3, #4
 8004eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ecc:	4a08      	ldr	r2, [pc, #32]	@ (8004ef0 <pxPortInitialiseStack+0x54>)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b14      	subs	r3, #20
 8004ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3b20      	subs	r3, #32
 8004ee2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	08004ef5 	.word	0x08004ef5

08004ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004efe:	4b12      	ldr	r3, [pc, #72]	@ (8004f48 <prvTaskExitError+0x54>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d00b      	beq.n	8004f20 <prvTaskExitError+0x2c>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	60fb      	str	r3, [r7, #12]
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <prvTaskExitError+0x28>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	60bb      	str	r3, [r7, #8]
}
 8004f32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f34:	bf00      	nop
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0fc      	beq.n	8004f36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr
 8004f48:	2000000c 	.word	0x2000000c
 8004f4c:	00000000 	.word	0x00000000

08004f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f50:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <pxCurrentTCBConst2>)
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	6808      	ldr	r0, [r1, #0]
 8004f56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f5a:	f380 8809 	msr	PSP, r0
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	f04f 0000 	mov.w	r0, #0
 8004f66:	f380 8811 	msr	BASEPRI, r0
 8004f6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004f6e:	4770      	bx	lr

08004f70 <pxCurrentTCBConst2>:
 8004f70:	2000094c 	.word	0x2000094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop

08004f78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004f78:	4806      	ldr	r0, [pc, #24]	@ (8004f94 <prvPortStartFirstTask+0x1c>)
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f380 8808 	msr	MSP, r0
 8004f82:	b662      	cpsie	i
 8004f84:	b661      	cpsie	f
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	df00      	svc	0
 8004f90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f92:	bf00      	nop
 8004f94:	e000ed08 	.word	0xe000ed08

08004f98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f9e:	4b32      	ldr	r3, [pc, #200]	@ (8005068 <xPortStartScheduler+0xd0>)
 8004fa0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	22ff      	movs	r2, #255	@ 0xff
 8004fae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800506c <xPortStartScheduler+0xd4>)
 8004fc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8005070 <xPortStartScheduler+0xd8>)
 8004fc8:	2207      	movs	r2, #7
 8004fca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fcc:	e009      	b.n	8004fe2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004fce:	4b28      	ldr	r3, [pc, #160]	@ (8005070 <xPortStartScheduler+0xd8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	4a26      	ldr	r2, [pc, #152]	@ (8005070 <xPortStartScheduler+0xd8>)
 8004fd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fe2:	78fb      	ldrb	r3, [r7, #3]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fea:	2b80      	cmp	r3, #128	@ 0x80
 8004fec:	d0ef      	beq.n	8004fce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fee:	4b20      	ldr	r3, [pc, #128]	@ (8005070 <xPortStartScheduler+0xd8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1c3 0307 	rsb	r3, r3, #7
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d00b      	beq.n	8005012 <xPortStartScheduler+0x7a>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	60bb      	str	r3, [r7, #8]
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	e7fd      	b.n	800500e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005012:	4b17      	ldr	r3, [pc, #92]	@ (8005070 <xPortStartScheduler+0xd8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	4a15      	ldr	r2, [pc, #84]	@ (8005070 <xPortStartScheduler+0xd8>)
 800501a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800501c:	4b14      	ldr	r3, [pc, #80]	@ (8005070 <xPortStartScheduler+0xd8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005024:	4a12      	ldr	r2, [pc, #72]	@ (8005070 <xPortStartScheduler+0xd8>)
 8005026:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005030:	4b10      	ldr	r3, [pc, #64]	@ (8005074 <xPortStartScheduler+0xdc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a0f      	ldr	r2, [pc, #60]	@ (8005074 <xPortStartScheduler+0xdc>)
 8005036:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800503a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800503c:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <xPortStartScheduler+0xdc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a0c      	ldr	r2, [pc, #48]	@ (8005074 <xPortStartScheduler+0xdc>)
 8005042:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005046:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005048:	f000 f8b8 	bl	80051bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800504c:	4b0a      	ldr	r3, [pc, #40]	@ (8005078 <xPortStartScheduler+0xe0>)
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005052:	f7ff ff91 	bl	8004f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005056:	f7ff f86b 	bl	8004130 <vTaskSwitchContext>
	prvTaskExitError();
 800505a:	f7ff ff4b 	bl	8004ef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	e000e400 	.word	0xe000e400
 800506c:	20000f78 	.word	0x20000f78
 8005070:	20000f7c 	.word	0x20000f7c
 8005074:	e000ed20 	.word	0xe000ed20
 8005078:	2000000c 	.word	0x2000000c

0800507c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
}
 8005094:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005096:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <vPortEnterCritical+0x58>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	4a0d      	ldr	r2, [pc, #52]	@ (80050d4 <vPortEnterCritical+0x58>)
 800509e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050a0:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <vPortEnterCritical+0x58>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d110      	bne.n	80050ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050a8:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <vPortEnterCritical+0x5c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <vPortEnterCritical+0x4e>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	603b      	str	r3, [r7, #0]
}
 80050c4:	bf00      	nop
 80050c6:	bf00      	nop
 80050c8:	e7fd      	b.n	80050c6 <vPortEnterCritical+0x4a>
	}
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	2000000c 	.word	0x2000000c
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050e2:	4b12      	ldr	r3, [pc, #72]	@ (800512c <vPortExitCritical+0x50>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10b      	bne.n	8005102 <vPortExitCritical+0x26>
	__asm volatile
 80050ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	607b      	str	r3, [r7, #4]
}
 80050fc:	bf00      	nop
 80050fe:	bf00      	nop
 8005100:	e7fd      	b.n	80050fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005102:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <vPortExitCritical+0x50>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3b01      	subs	r3, #1
 8005108:	4a08      	ldr	r2, [pc, #32]	@ (800512c <vPortExitCritical+0x50>)
 800510a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800510c:	4b07      	ldr	r3, [pc, #28]	@ (800512c <vPortExitCritical+0x50>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <vPortExitCritical+0x44>
 8005114:	2300      	movs	r3, #0
 8005116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	f383 8811 	msr	BASEPRI, r3
}
 800511e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	2000000c 	.word	0x2000000c

08005130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005130:	f3ef 8009 	mrs	r0, PSP
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <pxCurrentTCBConst>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005140:	6010      	str	r0, [r2, #0]
 8005142:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005146:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800514a:	f380 8811 	msr	BASEPRI, r0
 800514e:	f7fe ffef 	bl	8004130 <vTaskSwitchContext>
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f380 8811 	msr	BASEPRI, r0
 800515a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800515e:	6819      	ldr	r1, [r3, #0]
 8005160:	6808      	ldr	r0, [r1, #0]
 8005162:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005166:	f380 8809 	msr	PSP, r0
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	4770      	bx	lr

08005170 <pxCurrentTCBConst>:
 8005170:	2000094c 	.word	0x2000094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop

08005178 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	607b      	str	r3, [r7, #4]
}
 8005190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005192:	f7fe ff13 	bl	8003fbc <xTaskIncrementTick>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800519c:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <xPortSysTickHandler+0x40>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	2300      	movs	r3, #0
 80051a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f383 8811 	msr	BASEPRI, r3
}
 80051ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	e000ed04 	.word	0xe000ed04

080051bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051c0:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <vPortSetupTimerInterrupt+0x30>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051c6:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <vPortSetupTimerInterrupt+0x34>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051cc:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <vPortSetupTimerInterrupt+0x38>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a09      	ldr	r2, [pc, #36]	@ (80051f8 <vPortSetupTimerInterrupt+0x3c>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	099b      	lsrs	r3, r3, #6
 80051d8:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <vPortSetupTimerInterrupt+0x40>)
 80051da:	3b01      	subs	r3, #1
 80051dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051de:	4b03      	ldr	r3, [pc, #12]	@ (80051ec <vPortSetupTimerInterrupt+0x30>)
 80051e0:	2207      	movs	r2, #7
 80051e2:	601a      	str	r2, [r3, #0]
}
 80051e4:	bf00      	nop
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bc80      	pop	{r7}
 80051ea:	4770      	bx	lr
 80051ec:	e000e010 	.word	0xe000e010
 80051f0:	e000e018 	.word	0xe000e018
 80051f4:	20000000 	.word	0x20000000
 80051f8:	10624dd3 	.word	0x10624dd3
 80051fc:	e000e014 	.word	0xe000e014

08005200 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005206:	f3ef 8305 	mrs	r3, IPSR
 800520a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b0f      	cmp	r3, #15
 8005210:	d915      	bls.n	800523e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005212:	4a17      	ldr	r2, [pc, #92]	@ (8005270 <vPortValidateInterruptPriority+0x70>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800521c:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <vPortValidateInterruptPriority+0x74>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	7afa      	ldrb	r2, [r7, #11]
 8005222:	429a      	cmp	r2, r3
 8005224:	d20b      	bcs.n	800523e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	607b      	str	r3, [r7, #4]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <vPortValidateInterruptPriority+0x78>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005246:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <vPortValidateInterruptPriority+0x7c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d90b      	bls.n	8005266 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	603b      	str	r3, [r7, #0]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <vPortValidateInterruptPriority+0x62>
	}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr
 8005270:	e000e3f0 	.word	0xe000e3f0
 8005274:	20000f78 	.word	0x20000f78
 8005278:	e000ed0c 	.word	0xe000ed0c
 800527c:	20000f7c 	.word	0x20000f7c

08005280 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8005288:	f7fe fdde 	bl	8003e48 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f81b 	bl	80052c8 <malloc>
 8005292:	4603      	mov	r3, r0
 8005294:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005296:	f7fe fde5 	bl	8003e64 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800529a:	68fb      	ldr	r3, [r7, #12]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	if( pv )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d006      	beq.n	80052c0 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 80052b2:	f7fe fdc9 	bl	8003e48 <vTaskSuspendAll>
		{
			free( pv );
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f80e 	bl	80052d8 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80052bc:	f7fe fdd2 	bl	8003e64 <xTaskResumeAll>
	}
}
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <malloc>:
 80052c8:	4b02      	ldr	r3, [pc, #8]	@ (80052d4 <malloc+0xc>)
 80052ca:	4601      	mov	r1, r0
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	f000 b82d 	b.w	800532c <_malloc_r>
 80052d2:	bf00      	nop
 80052d4:	20000010 	.word	0x20000010

080052d8 <free>:
 80052d8:	4b02      	ldr	r3, [pc, #8]	@ (80052e4 <free+0xc>)
 80052da:	4601      	mov	r1, r0
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	f000 b961 	b.w	80055a4 <_free_r>
 80052e2:	bf00      	nop
 80052e4:	20000010 	.word	0x20000010

080052e8 <sbrk_aligned>:
 80052e8:	b570      	push	{r4, r5, r6, lr}
 80052ea:	4e0f      	ldr	r6, [pc, #60]	@ (8005328 <sbrk_aligned+0x40>)
 80052ec:	460c      	mov	r4, r1
 80052ee:	6831      	ldr	r1, [r6, #0]
 80052f0:	4605      	mov	r5, r0
 80052f2:	b911      	cbnz	r1, 80052fa <sbrk_aligned+0x12>
 80052f4:	f000 f90c 	bl	8005510 <_sbrk_r>
 80052f8:	6030      	str	r0, [r6, #0]
 80052fa:	4621      	mov	r1, r4
 80052fc:	4628      	mov	r0, r5
 80052fe:	f000 f907 	bl	8005510 <_sbrk_r>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d103      	bne.n	800530e <sbrk_aligned+0x26>
 8005306:	f04f 34ff 	mov.w	r4, #4294967295
 800530a:	4620      	mov	r0, r4
 800530c:	bd70      	pop	{r4, r5, r6, pc}
 800530e:	1cc4      	adds	r4, r0, #3
 8005310:	f024 0403 	bic.w	r4, r4, #3
 8005314:	42a0      	cmp	r0, r4
 8005316:	d0f8      	beq.n	800530a <sbrk_aligned+0x22>
 8005318:	1a21      	subs	r1, r4, r0
 800531a:	4628      	mov	r0, r5
 800531c:	f000 f8f8 	bl	8005510 <_sbrk_r>
 8005320:	3001      	adds	r0, #1
 8005322:	d1f2      	bne.n	800530a <sbrk_aligned+0x22>
 8005324:	e7ef      	b.n	8005306 <sbrk_aligned+0x1e>
 8005326:	bf00      	nop
 8005328:	20000f80 	.word	0x20000f80

0800532c <_malloc_r>:
 800532c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005330:	1ccd      	adds	r5, r1, #3
 8005332:	f025 0503 	bic.w	r5, r5, #3
 8005336:	3508      	adds	r5, #8
 8005338:	2d0c      	cmp	r5, #12
 800533a:	bf38      	it	cc
 800533c:	250c      	movcc	r5, #12
 800533e:	2d00      	cmp	r5, #0
 8005340:	4606      	mov	r6, r0
 8005342:	db01      	blt.n	8005348 <_malloc_r+0x1c>
 8005344:	42a9      	cmp	r1, r5
 8005346:	d904      	bls.n	8005352 <_malloc_r+0x26>
 8005348:	230c      	movs	r3, #12
 800534a:	6033      	str	r3, [r6, #0]
 800534c:	2000      	movs	r0, #0
 800534e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005352:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005428 <_malloc_r+0xfc>
 8005356:	f000 f869 	bl	800542c <__malloc_lock>
 800535a:	f8d8 3000 	ldr.w	r3, [r8]
 800535e:	461c      	mov	r4, r3
 8005360:	bb44      	cbnz	r4, 80053b4 <_malloc_r+0x88>
 8005362:	4629      	mov	r1, r5
 8005364:	4630      	mov	r0, r6
 8005366:	f7ff ffbf 	bl	80052e8 <sbrk_aligned>
 800536a:	1c43      	adds	r3, r0, #1
 800536c:	4604      	mov	r4, r0
 800536e:	d158      	bne.n	8005422 <_malloc_r+0xf6>
 8005370:	f8d8 4000 	ldr.w	r4, [r8]
 8005374:	4627      	mov	r7, r4
 8005376:	2f00      	cmp	r7, #0
 8005378:	d143      	bne.n	8005402 <_malloc_r+0xd6>
 800537a:	2c00      	cmp	r4, #0
 800537c:	d04b      	beq.n	8005416 <_malloc_r+0xea>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	4639      	mov	r1, r7
 8005382:	4630      	mov	r0, r6
 8005384:	eb04 0903 	add.w	r9, r4, r3
 8005388:	f000 f8c2 	bl	8005510 <_sbrk_r>
 800538c:	4581      	cmp	r9, r0
 800538e:	d142      	bne.n	8005416 <_malloc_r+0xea>
 8005390:	6821      	ldr	r1, [r4, #0]
 8005392:	4630      	mov	r0, r6
 8005394:	1a6d      	subs	r5, r5, r1
 8005396:	4629      	mov	r1, r5
 8005398:	f7ff ffa6 	bl	80052e8 <sbrk_aligned>
 800539c:	3001      	adds	r0, #1
 800539e:	d03a      	beq.n	8005416 <_malloc_r+0xea>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	442b      	add	r3, r5
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	f8d8 3000 	ldr.w	r3, [r8]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	bb62      	cbnz	r2, 8005408 <_malloc_r+0xdc>
 80053ae:	f8c8 7000 	str.w	r7, [r8]
 80053b2:	e00f      	b.n	80053d4 <_malloc_r+0xa8>
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	1b52      	subs	r2, r2, r5
 80053b8:	d420      	bmi.n	80053fc <_malloc_r+0xd0>
 80053ba:	2a0b      	cmp	r2, #11
 80053bc:	d917      	bls.n	80053ee <_malloc_r+0xc2>
 80053be:	1961      	adds	r1, r4, r5
 80053c0:	42a3      	cmp	r3, r4
 80053c2:	6025      	str	r5, [r4, #0]
 80053c4:	bf18      	it	ne
 80053c6:	6059      	strne	r1, [r3, #4]
 80053c8:	6863      	ldr	r3, [r4, #4]
 80053ca:	bf08      	it	eq
 80053cc:	f8c8 1000 	streq.w	r1, [r8]
 80053d0:	5162      	str	r2, [r4, r5]
 80053d2:	604b      	str	r3, [r1, #4]
 80053d4:	4630      	mov	r0, r6
 80053d6:	f000 f82f 	bl	8005438 <__malloc_unlock>
 80053da:	f104 000b 	add.w	r0, r4, #11
 80053de:	1d23      	adds	r3, r4, #4
 80053e0:	f020 0007 	bic.w	r0, r0, #7
 80053e4:	1ac2      	subs	r2, r0, r3
 80053e6:	bf1c      	itt	ne
 80053e8:	1a1b      	subne	r3, r3, r0
 80053ea:	50a3      	strne	r3, [r4, r2]
 80053ec:	e7af      	b.n	800534e <_malloc_r+0x22>
 80053ee:	6862      	ldr	r2, [r4, #4]
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	bf0c      	ite	eq
 80053f4:	f8c8 2000 	streq.w	r2, [r8]
 80053f8:	605a      	strne	r2, [r3, #4]
 80053fa:	e7eb      	b.n	80053d4 <_malloc_r+0xa8>
 80053fc:	4623      	mov	r3, r4
 80053fe:	6864      	ldr	r4, [r4, #4]
 8005400:	e7ae      	b.n	8005360 <_malloc_r+0x34>
 8005402:	463c      	mov	r4, r7
 8005404:	687f      	ldr	r7, [r7, #4]
 8005406:	e7b6      	b.n	8005376 <_malloc_r+0x4a>
 8005408:	461a      	mov	r2, r3
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	42a3      	cmp	r3, r4
 800540e:	d1fb      	bne.n	8005408 <_malloc_r+0xdc>
 8005410:	2300      	movs	r3, #0
 8005412:	6053      	str	r3, [r2, #4]
 8005414:	e7de      	b.n	80053d4 <_malloc_r+0xa8>
 8005416:	230c      	movs	r3, #12
 8005418:	4630      	mov	r0, r6
 800541a:	6033      	str	r3, [r6, #0]
 800541c:	f000 f80c 	bl	8005438 <__malloc_unlock>
 8005420:	e794      	b.n	800534c <_malloc_r+0x20>
 8005422:	6005      	str	r5, [r0, #0]
 8005424:	e7d6      	b.n	80053d4 <_malloc_r+0xa8>
 8005426:	bf00      	nop
 8005428:	20000f84 	.word	0x20000f84

0800542c <__malloc_lock>:
 800542c:	4801      	ldr	r0, [pc, #4]	@ (8005434 <__malloc_lock+0x8>)
 800542e:	f000 b8a9 	b.w	8005584 <__retarget_lock_acquire_recursive>
 8005432:	bf00      	nop
 8005434:	200010c4 	.word	0x200010c4

08005438 <__malloc_unlock>:
 8005438:	4801      	ldr	r0, [pc, #4]	@ (8005440 <__malloc_unlock+0x8>)
 800543a:	f000 b8a4 	b.w	8005586 <__retarget_lock_release_recursive>
 800543e:	bf00      	nop
 8005440:	200010c4 	.word	0x200010c4

08005444 <memset>:
 8005444:	4603      	mov	r3, r0
 8005446:	4402      	add	r2, r0
 8005448:	4293      	cmp	r3, r2
 800544a:	d100      	bne.n	800544e <memset+0xa>
 800544c:	4770      	bx	lr
 800544e:	f803 1b01 	strb.w	r1, [r3], #1
 8005452:	e7f9      	b.n	8005448 <memset+0x4>

08005454 <_reclaim_reent>:
 8005454:	4b2d      	ldr	r3, [pc, #180]	@ (800550c <_reclaim_reent+0xb8>)
 8005456:	b570      	push	{r4, r5, r6, lr}
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4604      	mov	r4, r0
 800545c:	4283      	cmp	r3, r0
 800545e:	d053      	beq.n	8005508 <_reclaim_reent+0xb4>
 8005460:	69c3      	ldr	r3, [r0, #28]
 8005462:	b31b      	cbz	r3, 80054ac <_reclaim_reent+0x58>
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	b163      	cbz	r3, 8005482 <_reclaim_reent+0x2e>
 8005468:	2500      	movs	r5, #0
 800546a:	69e3      	ldr	r3, [r4, #28]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	5959      	ldr	r1, [r3, r5]
 8005470:	b9b1      	cbnz	r1, 80054a0 <_reclaim_reent+0x4c>
 8005472:	3504      	adds	r5, #4
 8005474:	2d80      	cmp	r5, #128	@ 0x80
 8005476:	d1f8      	bne.n	800546a <_reclaim_reent+0x16>
 8005478:	69e3      	ldr	r3, [r4, #28]
 800547a:	4620      	mov	r0, r4
 800547c:	68d9      	ldr	r1, [r3, #12]
 800547e:	f000 f891 	bl	80055a4 <_free_r>
 8005482:	69e3      	ldr	r3, [r4, #28]
 8005484:	6819      	ldr	r1, [r3, #0]
 8005486:	b111      	cbz	r1, 800548e <_reclaim_reent+0x3a>
 8005488:	4620      	mov	r0, r4
 800548a:	f000 f88b 	bl	80055a4 <_free_r>
 800548e:	69e3      	ldr	r3, [r4, #28]
 8005490:	689d      	ldr	r5, [r3, #8]
 8005492:	b15d      	cbz	r5, 80054ac <_reclaim_reent+0x58>
 8005494:	4629      	mov	r1, r5
 8005496:	4620      	mov	r0, r4
 8005498:	682d      	ldr	r5, [r5, #0]
 800549a:	f000 f883 	bl	80055a4 <_free_r>
 800549e:	e7f8      	b.n	8005492 <_reclaim_reent+0x3e>
 80054a0:	680e      	ldr	r6, [r1, #0]
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 f87e 	bl	80055a4 <_free_r>
 80054a8:	4631      	mov	r1, r6
 80054aa:	e7e1      	b.n	8005470 <_reclaim_reent+0x1c>
 80054ac:	6961      	ldr	r1, [r4, #20]
 80054ae:	b111      	cbz	r1, 80054b6 <_reclaim_reent+0x62>
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 f877 	bl	80055a4 <_free_r>
 80054b6:	69e1      	ldr	r1, [r4, #28]
 80054b8:	b111      	cbz	r1, 80054c0 <_reclaim_reent+0x6c>
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 f872 	bl	80055a4 <_free_r>
 80054c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80054c2:	b111      	cbz	r1, 80054ca <_reclaim_reent+0x76>
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 f86d 	bl	80055a4 <_free_r>
 80054ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054cc:	b111      	cbz	r1, 80054d4 <_reclaim_reent+0x80>
 80054ce:	4620      	mov	r0, r4
 80054d0:	f000 f868 	bl	80055a4 <_free_r>
 80054d4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80054d6:	b111      	cbz	r1, 80054de <_reclaim_reent+0x8a>
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 f863 	bl	80055a4 <_free_r>
 80054de:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80054e0:	b111      	cbz	r1, 80054e8 <_reclaim_reent+0x94>
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 f85e 	bl	80055a4 <_free_r>
 80054e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80054ea:	b111      	cbz	r1, 80054f2 <_reclaim_reent+0x9e>
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 f859 	bl	80055a4 <_free_r>
 80054f2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80054f4:	b111      	cbz	r1, 80054fc <_reclaim_reent+0xa8>
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f854 	bl	80055a4 <_free_r>
 80054fc:	6a23      	ldr	r3, [r4, #32]
 80054fe:	b11b      	cbz	r3, 8005508 <_reclaim_reent+0xb4>
 8005500:	4620      	mov	r0, r4
 8005502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005506:	4718      	bx	r3
 8005508:	bd70      	pop	{r4, r5, r6, pc}
 800550a:	bf00      	nop
 800550c:	20000010 	.word	0x20000010

08005510 <_sbrk_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	2300      	movs	r3, #0
 8005514:	4d05      	ldr	r5, [pc, #20]	@ (800552c <_sbrk_r+0x1c>)
 8005516:	4604      	mov	r4, r0
 8005518:	4608      	mov	r0, r1
 800551a:	602b      	str	r3, [r5, #0]
 800551c:	f7fb f9a6 	bl	800086c <_sbrk>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d102      	bne.n	800552a <_sbrk_r+0x1a>
 8005524:	682b      	ldr	r3, [r5, #0]
 8005526:	b103      	cbz	r3, 800552a <_sbrk_r+0x1a>
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	bd38      	pop	{r3, r4, r5, pc}
 800552c:	200010c0 	.word	0x200010c0

08005530 <__errno>:
 8005530:	4b01      	ldr	r3, [pc, #4]	@ (8005538 <__errno+0x8>)
 8005532:	6818      	ldr	r0, [r3, #0]
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000010 	.word	0x20000010

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	2600      	movs	r6, #0
 8005540:	4d0c      	ldr	r5, [pc, #48]	@ (8005574 <__libc_init_array+0x38>)
 8005542:	4c0d      	ldr	r4, [pc, #52]	@ (8005578 <__libc_init_array+0x3c>)
 8005544:	1b64      	subs	r4, r4, r5
 8005546:	10a4      	asrs	r4, r4, #2
 8005548:	42a6      	cmp	r6, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	f000 f872 	bl	8005634 <_init>
 8005550:	2600      	movs	r6, #0
 8005552:	4d0a      	ldr	r5, [pc, #40]	@ (800557c <__libc_init_array+0x40>)
 8005554:	4c0a      	ldr	r4, [pc, #40]	@ (8005580 <__libc_init_array+0x44>)
 8005556:	1b64      	subs	r4, r4, r5
 8005558:	10a4      	asrs	r4, r4, #2
 800555a:	42a6      	cmp	r6, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f855 3b04 	ldr.w	r3, [r5], #4
 8005564:	4798      	blx	r3
 8005566:	3601      	adds	r6, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f855 3b04 	ldr.w	r3, [r5], #4
 800556e:	4798      	blx	r3
 8005570:	3601      	adds	r6, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	08005754 	.word	0x08005754
 8005578:	08005754 	.word	0x08005754
 800557c:	08005754 	.word	0x08005754
 8005580:	08005758 	.word	0x08005758

08005584 <__retarget_lock_acquire_recursive>:
 8005584:	4770      	bx	lr

08005586 <__retarget_lock_release_recursive>:
 8005586:	4770      	bx	lr

08005588 <memcpy>:
 8005588:	440a      	add	r2, r1
 800558a:	4291      	cmp	r1, r2
 800558c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005590:	d100      	bne.n	8005594 <memcpy+0xc>
 8005592:	4770      	bx	lr
 8005594:	b510      	push	{r4, lr}
 8005596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559a:	4291      	cmp	r1, r2
 800559c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a0:	d1f9      	bne.n	8005596 <memcpy+0xe>
 80055a2:	bd10      	pop	{r4, pc}

080055a4 <_free_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4605      	mov	r5, r0
 80055a8:	2900      	cmp	r1, #0
 80055aa:	d040      	beq.n	800562e <_free_r+0x8a>
 80055ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b0:	1f0c      	subs	r4, r1, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bfb8      	it	lt
 80055b6:	18e4      	addlt	r4, r4, r3
 80055b8:	f7ff ff38 	bl	800542c <__malloc_lock>
 80055bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005630 <_free_r+0x8c>)
 80055be:	6813      	ldr	r3, [r2, #0]
 80055c0:	b933      	cbnz	r3, 80055d0 <_free_r+0x2c>
 80055c2:	6063      	str	r3, [r4, #4]
 80055c4:	6014      	str	r4, [r2, #0]
 80055c6:	4628      	mov	r0, r5
 80055c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055cc:	f7ff bf34 	b.w	8005438 <__malloc_unlock>
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	d908      	bls.n	80055e6 <_free_r+0x42>
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	1821      	adds	r1, r4, r0
 80055d8:	428b      	cmp	r3, r1
 80055da:	bf01      	itttt	eq
 80055dc:	6819      	ldreq	r1, [r3, #0]
 80055de:	685b      	ldreq	r3, [r3, #4]
 80055e0:	1809      	addeq	r1, r1, r0
 80055e2:	6021      	streq	r1, [r4, #0]
 80055e4:	e7ed      	b.n	80055c2 <_free_r+0x1e>
 80055e6:	461a      	mov	r2, r3
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b10b      	cbz	r3, 80055f0 <_free_r+0x4c>
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d9fa      	bls.n	80055e6 <_free_r+0x42>
 80055f0:	6811      	ldr	r1, [r2, #0]
 80055f2:	1850      	adds	r0, r2, r1
 80055f4:	42a0      	cmp	r0, r4
 80055f6:	d10b      	bne.n	8005610 <_free_r+0x6c>
 80055f8:	6820      	ldr	r0, [r4, #0]
 80055fa:	4401      	add	r1, r0
 80055fc:	1850      	adds	r0, r2, r1
 80055fe:	4283      	cmp	r3, r0
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	d1e0      	bne.n	80055c6 <_free_r+0x22>
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	4408      	add	r0, r1
 800560a:	6010      	str	r0, [r2, #0]
 800560c:	6053      	str	r3, [r2, #4]
 800560e:	e7da      	b.n	80055c6 <_free_r+0x22>
 8005610:	d902      	bls.n	8005618 <_free_r+0x74>
 8005612:	230c      	movs	r3, #12
 8005614:	602b      	str	r3, [r5, #0]
 8005616:	e7d6      	b.n	80055c6 <_free_r+0x22>
 8005618:	6820      	ldr	r0, [r4, #0]
 800561a:	1821      	adds	r1, r4, r0
 800561c:	428b      	cmp	r3, r1
 800561e:	bf01      	itttt	eq
 8005620:	6819      	ldreq	r1, [r3, #0]
 8005622:	685b      	ldreq	r3, [r3, #4]
 8005624:	1809      	addeq	r1, r1, r0
 8005626:	6021      	streq	r1, [r4, #0]
 8005628:	6063      	str	r3, [r4, #4]
 800562a:	6054      	str	r4, [r2, #4]
 800562c:	e7cb      	b.n	80055c6 <_free_r+0x22>
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	20000f84 	.word	0x20000f84

08005634 <_init>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr

08005640 <_fini>:
 8005640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005642:	bf00      	nop
 8005644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005646:	bc08      	pop	{r3}
 8005648:	469e      	mov	lr, r3
 800564a:	4770      	bx	lr
