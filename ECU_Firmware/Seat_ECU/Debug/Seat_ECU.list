
Seat_ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054e4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080055f4  080055f4  000065f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800579c  0800579c  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800579c  0800579c  00007010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800579c  0800579c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800579c  0800579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057a0  080057a0  000067a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080057a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001afc  20000010  080057b4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b0c  080057b4  00007b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8d5  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b4b  00000000  00000000  0002290e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019e8  00000000  00000000  00026460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000145b  00000000  00000000  00027e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036c3  00000000  00000000  000292a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd1b  00000000  00000000  0002c966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d90f  00000000  00000000  00049681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6f90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ea0  00000000  00000000  000e6fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ede74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080055dc 	.word	0x080055dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080055dc 	.word	0x080055dc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc8e 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f880 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9a4 	bl	80004a8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8d6 	bl	8000310 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f912 	bl	800038c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f974 	bl	8000454 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800016c:	f000 f93c 	bl	80003e8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000170:	2200      	movs	r2, #0
 8000172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000176:	4824      	ldr	r0, [pc, #144]	@ (8000208 <main+0xb8>)
 8000178:	f001 f9fe 	bl	8001578 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800017c:	f002 fc32 	bl	80029e4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ControlQueue */
  ControlQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ControlQueue_attributes);
 8000180:	4a22      	ldr	r2, [pc, #136]	@ (800020c <main+0xbc>)
 8000182:	2102      	movs	r1, #2
 8000184:	2010      	movs	r0, #16
 8000186:	f002 fd22 	bl	8002bce <osMessageQueueNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a20      	ldr	r2, [pc, #128]	@ (8000210 <main+0xc0>)
 800018e:	6013      	str	r3, [r2, #0]

  /* creation of ModeQueue */
  ModeQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ModeQueue_attributes);
 8000190:	4a20      	ldr	r2, [pc, #128]	@ (8000214 <main+0xc4>)
 8000192:	2102      	movs	r1, #2
 8000194:	2010      	movs	r0, #16
 8000196:	f002 fd1a 	bl	8002bce <osMessageQueueNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a1e      	ldr	r2, [pc, #120]	@ (8000218 <main+0xc8>)
 800019e:	6013      	str	r3, [r2, #0]

  /* creation of ProfileQueue */
  ProfileQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &ProfileQueue_attributes);
 80001a0:	4a1e      	ldr	r2, [pc, #120]	@ (800021c <main+0xcc>)
 80001a2:	2102      	movs	r1, #2
 80001a4:	2010      	movs	r0, #16
 80001a6:	f002 fd12 	bl	8002bce <osMessageQueueNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000220 <main+0xd0>)
 80001ae:	6013      	str	r3, [r2, #0]

  /* creation of FaultQueue */
  FaultQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &FaultQueue_attributes);
 80001b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000224 <main+0xd4>)
 80001b2:	2102      	movs	r1, #2
 80001b4:	2010      	movs	r0, #16
 80001b6:	f002 fd0a 	bl	8002bce <osMessageQueueNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000228 <main+0xd8>)
 80001be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ControlManager */
  ControlManagerHandle = osThreadNew(ControlManagerTask, NULL, &ControlManager_attributes);
 80001c0:	4a1a      	ldr	r2, [pc, #104]	@ (800022c <main+0xdc>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	481a      	ldr	r0, [pc, #104]	@ (8000230 <main+0xe0>)
 80001c6:	f002 fc55 	bl	8002a74 <osThreadNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a19      	ldr	r2, [pc, #100]	@ (8000234 <main+0xe4>)
 80001ce:	6013      	str	r3, [r2, #0]

  /* creation of ModeManager */
  ModeManagerHandle = osThreadNew(ModeManagerTask, NULL, &ModeManager_attributes);
 80001d0:	4a19      	ldr	r2, [pc, #100]	@ (8000238 <main+0xe8>)
 80001d2:	2100      	movs	r1, #0
 80001d4:	4819      	ldr	r0, [pc, #100]	@ (800023c <main+0xec>)
 80001d6:	f002 fc4d 	bl	8002a74 <osThreadNew>
 80001da:	4603      	mov	r3, r0
 80001dc:	4a18      	ldr	r2, [pc, #96]	@ (8000240 <main+0xf0>)
 80001de:	6013      	str	r3, [r2, #0]

  /* creation of ProfileManager */
  ProfileManagerHandle = osThreadNew(ProfileManagerTask, NULL, &ProfileManager_attributes);
 80001e0:	4a18      	ldr	r2, [pc, #96]	@ (8000244 <main+0xf4>)
 80001e2:	2100      	movs	r1, #0
 80001e4:	4818      	ldr	r0, [pc, #96]	@ (8000248 <main+0xf8>)
 80001e6:	f002 fc45 	bl	8002a74 <osThreadNew>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a17      	ldr	r2, [pc, #92]	@ (800024c <main+0xfc>)
 80001ee:	6013      	str	r3, [r2, #0]

  /* creation of FaultManager */
  FaultManagerHandle = osThreadNew(FaultManagerTask, NULL, &FaultManager_attributes);
 80001f0:	4a17      	ldr	r2, [pc, #92]	@ (8000250 <main+0x100>)
 80001f2:	2100      	movs	r1, #0
 80001f4:	4817      	ldr	r0, [pc, #92]	@ (8000254 <main+0x104>)
 80001f6:	f002 fc3d 	bl	8002a74 <osThreadNew>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a16      	ldr	r2, [pc, #88]	@ (8000258 <main+0x108>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f002 fc12 	bl	8002a28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	bf00      	nop
 8000206:	e7fd      	b.n	8000204 <main+0xb4>
 8000208:	40010c00 	.word	0x40010c00
 800020c:	08005710 	.word	0x08005710
 8000210:	20000160 	.word	0x20000160
 8000214:	08005728 	.word	0x08005728
 8000218:	20000164 	.word	0x20000164
 800021c:	08005740 	.word	0x08005740
 8000220:	20000168 	.word	0x20000168
 8000224:	08005758 	.word	0x08005758
 8000228:	2000016c 	.word	0x2000016c
 800022c:	08005680 	.word	0x08005680
 8000230:	080005b9 	.word	0x080005b9
 8000234:	20000150 	.word	0x20000150
 8000238:	080056a4 	.word	0x080056a4
 800023c:	080005d5 	.word	0x080005d5
 8000240:	20000154 	.word	0x20000154
 8000244:	080056c8 	.word	0x080056c8
 8000248:	080005e7 	.word	0x080005e7
 800024c:	20000158 	.word	0x20000158
 8000250:	080056ec 	.word	0x080056ec
 8000254:	080005f7 	.word	0x080005f7
 8000258:	2000015c 	.word	0x2000015c

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	@ 0x50
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000266:	2228      	movs	r2, #40	@ 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f005 f97c 	bl	8005568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028c:	2301      	movs	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000290:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80002a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80002ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fabc 	bl	8001830 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002be:	f000 f9b5 	bl	800062c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fd29 	bl	8001d34 <HAL_RCC_ClockConfig>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002e8:	f000 f9a0 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ec:	2302      	movs	r3, #2
 80002ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002f0:	2300      	movs	r3, #0
 80002f2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 feda 	bl	80020b0 <HAL_RCCEx_PeriphCLKConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000302:	f000 f993 	bl	800062c <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3750      	adds	r7, #80	@ 0x50
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000316:	1d3b      	adds	r3, r7, #4
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000322:	4a19      	ldr	r2, [pc, #100]	@ (8000388 <MX_ADC1_Init+0x78>)
 8000324:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000326:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <MX_ADC1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000332:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000338:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <MX_ADC1_Init+0x74>)
 800033a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800033e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000340:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000346:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <MX_ADC1_Init+0x74>)
 8000348:	2201      	movs	r2, #1
 800034a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034c:	480d      	ldr	r0, [pc, #52]	@ (8000384 <MX_ADC1_Init+0x74>)
 800034e:	f000 fbc3 	bl	8000ad8 <HAL_ADC_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000358:	f000 f968 	bl	800062c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800035c:	2300      	movs	r3, #0
 800035e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000360:	2301      	movs	r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000364:	2300      	movs	r3, #0
 8000366:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4805      	ldr	r0, [pc, #20]	@ (8000384 <MX_ADC1_Init+0x74>)
 800036e:	f000 fd5d 	bl	8000e2c <HAL_ADC_ConfigChannel>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000378:	f000 f958 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	3710      	adds	r7, #16
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	2000002c 	.word	0x2000002c
 8000388:	40012400 	.word	0x40012400

0800038c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <MX_I2C1_Init+0x50>)
 8000392:	4a13      	ldr	r2, [pc, #76]	@ (80003e0 <MX_I2C1_Init+0x54>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000396:	4b11      	ldr	r3, [pc, #68]	@ (80003dc <MX_I2C1_Init+0x50>)
 8000398:	4a12      	ldr	r2, [pc, #72]	@ (80003e4 <MX_I2C1_Init+0x58>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <MX_I2C1_Init+0x50>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	@ (80003dc <MX_I2C1_Init+0x50>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_I2C1_Init+0x50>)
 80003aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	@ (80003dc <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003b6:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003bc:	4b07      	ldr	r3, [pc, #28]	@ (80003dc <MX_I2C1_Init+0x50>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c2:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <MX_I2C1_Init+0x50>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c8:	4804      	ldr	r0, [pc, #16]	@ (80003dc <MX_I2C1_Init+0x50>)
 80003ca:	f001 f8ed 	bl	80015a8 <HAL_I2C_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003d4:	f000 f92a 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	2000005c 	.word	0x2000005c
 80003e0:	40005400 	.word	0x40005400
 80003e4:	000186a0 	.word	0x000186a0

080003e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003ec:	4b17      	ldr	r3, [pc, #92]	@ (800044c <MX_SPI2_Init+0x64>)
 80003ee:	4a18      	ldr	r2, [pc, #96]	@ (8000450 <MX_SPI2_Init+0x68>)
 80003f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003f2:	4b16      	ldr	r3, [pc, #88]	@ (800044c <MX_SPI2_Init+0x64>)
 80003f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003fa:	4b14      	ldr	r3, [pc, #80]	@ (800044c <MX_SPI2_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000400:	4b12      	ldr	r3, [pc, #72]	@ (800044c <MX_SPI2_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000406:	4b11      	ldr	r3, [pc, #68]	@ (800044c <MX_SPI2_Init+0x64>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800040c:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <MX_SPI2_Init+0x64>)
 800040e:	2200      	movs	r2, #0
 8000410:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000412:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <MX_SPI2_Init+0x64>)
 8000414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000418:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <MX_SPI2_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000420:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <MX_SPI2_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <MX_SPI2_Init+0x64>)
 8000428:	2200      	movs	r2, #0
 800042a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800042c:	4b07      	ldr	r3, [pc, #28]	@ (800044c <MX_SPI2_Init+0x64>)
 800042e:	2200      	movs	r2, #0
 8000430:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000432:	4b06      	ldr	r3, [pc, #24]	@ (800044c <MX_SPI2_Init+0x64>)
 8000434:	220a      	movs	r2, #10
 8000436:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000438:	4804      	ldr	r0, [pc, #16]	@ (800044c <MX_SPI2_Init+0x64>)
 800043a:	f001 feef 	bl	800221c <HAL_SPI_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000444:	f000 f8f2 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}
 800044c:	200000b0 	.word	0x200000b0
 8000450:	40003800 	.word	0x40003800

08000454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 800045a:	4a12      	ldr	r2, [pc, #72]	@ (80004a4 <MX_USART1_UART_Init+0x50>)
 800045c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800045e:	4b10      	ldr	r3, [pc, #64]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000460:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b0e      	ldr	r3, [pc, #56]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <MX_USART1_UART_Init+0x4c>)
 800048c:	f002 f988 	bl	80027a0 <HAL_UART_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000496:	f000 f8c9 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000108 	.word	0x20000108
 80004a4:	40013800 	.word	0x40013800

080004a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ae:	f107 0310 	add.w	r3, r7, #16
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	4b3a      	ldr	r3, [pc, #232]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a39      	ldr	r2, [pc, #228]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004c2:	f043 0310 	orr.w	r3, r3, #16
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b37      	ldr	r3, [pc, #220]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0310 	and.w	r3, r3, #16
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d4:	4b34      	ldr	r3, [pc, #208]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a33      	ldr	r2, [pc, #204]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004da:	f043 0320 	orr.w	r3, r3, #32
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b31      	ldr	r3, [pc, #196]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0320 	and.w	r3, r3, #32
 80004e8:	60bb      	str	r3, [r7, #8]
 80004ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ec:	4b2e      	ldr	r3, [pc, #184]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	4a2d      	ldr	r2, [pc, #180]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6193      	str	r3, [r2, #24]
 80004f8:	4b2b      	ldr	r3, [pc, #172]	@ (80005a8 <MX_GPIO_Init+0x100>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000504:	4b28      	ldr	r3, [pc, #160]	@ (80005a8 <MX_GPIO_Init+0x100>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	4a27      	ldr	r2, [pc, #156]	@ (80005a8 <MX_GPIO_Init+0x100>)
 800050a:	f043 0308 	orr.w	r3, r3, #8
 800050e:	6193      	str	r3, [r2, #24]
 8000510:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <MX_GPIO_Init+0x100>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	f003 0308 	and.w	r3, r3, #8
 8000518:	603b      	str	r3, [r7, #0]
 800051a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000522:	4822      	ldr	r0, [pc, #136]	@ (80005ac <MX_GPIO_Init+0x104>)
 8000524:	f001 f828 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800052e:	4820      	ldr	r0, [pc, #128]	@ (80005b0 <MX_GPIO_Init+0x108>)
 8000530:	f001 f822 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000538:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2302      	movs	r3, #2
 8000544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000546:	f107 0310 	add.w	r3, r7, #16
 800054a:	4619      	mov	r1, r3
 800054c:	4817      	ldr	r0, [pc, #92]	@ (80005ac <MX_GPIO_Init+0x104>)
 800054e:	f000 fe8f 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pins : Height_Up_Pin Height_Down_Pin Slide_Up_Pin Slide_Down_Pin
                           Incline_Up_Pin */
  GPIO_InitStruct.Pin = Height_Up_Pin|Height_Down_Pin|Slide_Up_Pin|Slide_Down_Pin
 8000552:	23f8      	movs	r3, #248	@ 0xf8
 8000554:	613b      	str	r3, [r7, #16]
                          |Incline_Up_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	4813      	ldr	r0, [pc, #76]	@ (80005b4 <MX_GPIO_Init+0x10c>)
 8000566:	f000 fe83 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : Incline_Down_Pin */
  GPIO_InitStruct.Pin = Incline_Down_Pin;
 800056a:	2301      	movs	r3, #1
 800056c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Incline_Down_GPIO_Port, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <MX_GPIO_Init+0x108>)
 800057e:	f000 fe77 	bl	8001270 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000582:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2302      	movs	r3, #2
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4805      	ldr	r0, [pc, #20]	@ (80005b0 <MX_GPIO_Init+0x108>)
 800059c:	f000 fe68 	bl	8001270 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005a0:	bf00      	nop
 80005a2:	3720      	adds	r7, #32
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40011000 	.word	0x40011000
 80005b0:	40010c00 	.word	0x40010c00
 80005b4:	40010800 	.word	0x40010800

080005b8 <ControlManagerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ControlManagerTask */
void ControlManagerTask(void *argument)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t rxData[4] = { 0 };
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  uint8_t txData[4] = { "Hell" };
 80005c4:	4b02      	ldr	r3, [pc, #8]	@ (80005d0 <ControlManagerTask+0x18>)
 80005c6:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
//	HAL_SPI_TransmitReceive(&hspi2, txData, rxData, sizeof(txData), HAL_MAX_DELAY);
    osDelay(1);
 80005c8:	2001      	movs	r0, #1
 80005ca:	f002 fae5 	bl	8002b98 <osDelay>
 80005ce:	e7fb      	b.n	80005c8 <ControlManagerTask+0x10>
 80005d0:	6c6c6548 	.word	0x6c6c6548

080005d4 <ModeManagerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModeManagerTask */
void ModeManagerTask(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModeManagerTask */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    osDelay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e0:	f002 fada 	bl	8002b98 <osDelay>
 80005e4:	e7fa      	b.n	80005dc <ModeManagerTask+0x8>

080005e6 <ProfileManagerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ProfileManagerTask */
void ProfileManagerTask(void *argument)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	b082      	sub	sp, #8
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ProfileManagerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f002 fad2 	bl	8002b98 <osDelay>
 80005f4:	e7fb      	b.n	80005ee <ProfileManagerTask+0x8>

080005f6 <FaultManagerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FaultManagerTask */
void FaultManagerTask(void *argument)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FaultManagerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f002 faca 	bl	8002b98 <osDelay>
 8000604:	e7fb      	b.n	80005fe <FaultManagerTask+0x8>
	...

08000608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d101      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800061a:	f000 fa41 	bl	8000aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012c00 	.word	0x40012c00

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <Error_Handler+0x8>

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063e:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <HAL_MspInit+0x68>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <HAL_MspInit+0x68>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <HAL_MspInit+0x68>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <HAL_MspInit+0x68>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a11      	ldr	r2, [pc, #68]	@ (80006a0 <HAL_MspInit+0x68>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <HAL_MspInit+0x68>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	210f      	movs	r1, #15
 8000672:	f06f 0001 	mvn.w	r0, #1
 8000676:	f000 fdd0 	bl	800121a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_MspInit+0x6c>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <HAL_MspInit+0x6c>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40010000 	.word	0x40010000

080006a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	f107 0310 	add.w	r3, r7, #16
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <HAL_ADC_MspInit+0x7c>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d129      	bne.n	800071c <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HAL_ADC_MspInit+0x80>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a16      	ldr	r2, [pc, #88]	@ (8000728 <HAL_ADC_MspInit+0x80>)
 80006ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <HAL_ADC_MspInit+0x80>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <HAL_ADC_MspInit+0x80>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a10      	ldr	r2, [pc, #64]	@ (8000728 <HAL_ADC_MspInit+0x80>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000728 <HAL_ADC_MspInit+0x80>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0304 	and.w	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Height_Sensor_Pin|Slide_Sensor_Pin|Incline_Sensor_Pin;
 80006f8:	2307      	movs	r3, #7
 80006fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fc:	2303      	movs	r3, #3
 80006fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 0310 	add.w	r3, r7, #16
 8000704:	4619      	mov	r1, r3
 8000706:	4809      	ldr	r0, [pc, #36]	@ (800072c <HAL_ADC_MspInit+0x84>)
 8000708:	f000 fdb2 	bl	8001270 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2105      	movs	r1, #5
 8000710:	2012      	movs	r0, #18
 8000712:	f000 fd82 	bl	800121a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000716:	2012      	movs	r0, #18
 8000718:	f000 fd9b 	bl	8001252 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40012400 	.word	0x40012400
 8000728:	40021000 	.word	0x40021000
 800072c:	40010800 	.word	0x40010800

08000730 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <HAL_I2C_MspInit+0x70>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d123      	bne.n	8000798 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <HAL_I2C_MspInit+0x74>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <HAL_I2C_MspInit+0x74>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <HAL_I2C_MspInit+0x74>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000768:	23c0      	movs	r3, #192	@ 0xc0
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800076c:	2312      	movs	r3, #18
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <HAL_I2C_MspInit+0x78>)
 800077c:	f000 fd78 	bl	8001270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <HAL_I2C_MspInit+0x74>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <HAL_I2C_MspInit+0x74>)
 8000786:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_I2C_MspInit+0x74>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40005400 	.word	0x40005400
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010c00 	.word	0x40010c00

080007ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <HAL_SPI_MspInit+0x8c>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d131      	bne.n	8000830 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80007cc:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <HAL_SPI_MspInit+0x90>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a1a      	ldr	r2, [pc, #104]	@ (800083c <HAL_SPI_MspInit+0x90>)
 80007d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d6:	61d3      	str	r3, [r2, #28]
 80007d8:	4b18      	ldr	r3, [pc, #96]	@ (800083c <HAL_SPI_MspInit+0x90>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4b15      	ldr	r3, [pc, #84]	@ (800083c <HAL_SPI_MspInit+0x90>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a14      	ldr	r2, [pc, #80]	@ (800083c <HAL_SPI_MspInit+0x90>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_SPI_MspInit+0x90>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f003 0308 	and.w	r3, r3, #8
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80007fc:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000800:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0310 	add.w	r3, r7, #16
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	@ (8000840 <HAL_SPI_MspInit+0x94>)
 8000812:	f000 fd2d 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000816:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	@ (8000840 <HAL_SPI_MspInit+0x94>)
 800082c:	f000 fd20 	bl	8001270 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40003800 	.word	0x40003800
 800083c:	40021000 	.word	0x40021000
 8000840:	40010c00 	.word	0x40010c00

08000844 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0310 	add.w	r3, r7, #16
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a1c      	ldr	r2, [pc, #112]	@ (80008d0 <HAL_UART_MspInit+0x8c>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d131      	bne.n	80008c8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000864:	4b1b      	ldr	r3, [pc, #108]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a1a      	ldr	r2, [pc, #104]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b18      	ldr	r3, [pc, #96]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <HAL_UART_MspInit+0x90>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000894:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000898:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a2:	f107 0310 	add.w	r3, r7, #16
 80008a6:	4619      	mov	r1, r3
 80008a8:	480b      	ldr	r0, [pc, #44]	@ (80008d8 <HAL_UART_MspInit+0x94>)
 80008aa:	f000 fce1 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	4619      	mov	r1, r3
 80008c2:	4805      	ldr	r0, [pc, #20]	@ (80008d8 <HAL_UART_MspInit+0x94>)
 80008c4:	f000 fcd4 	bl	8001270 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010800 	.word	0x40010800

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008f2:	4b2e      	ldr	r3, [pc, #184]	@ (80009ac <HAL_InitTick+0xd0>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	4a2d      	ldr	r2, [pc, #180]	@ (80009ac <HAL_InitTick+0xd0>)
 80008f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008fc:	6193      	str	r3, [r2, #24]
 80008fe:	4b2b      	ldr	r3, [pc, #172]	@ (80009ac <HAL_InitTick+0xd0>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800090a:	f107 020c 	add.w	r2, r7, #12
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f001 fb7d 	bl	8002014 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800091a:	f001 fb67 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 800091e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000922:	4a23      	ldr	r2, [pc, #140]	@ (80009b0 <HAL_InitTick+0xd4>)
 8000924:	fba2 2303 	umull	r2, r3, r2, r3
 8000928:	0c9b      	lsrs	r3, r3, #18
 800092a:	3b01      	subs	r3, #1
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000930:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <HAL_InitTick+0xdc>)
 8000932:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000936:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800093c:	4a1d      	ldr	r2, [pc, #116]	@ (80009b4 <HAL_InitTick+0xd8>)
 800093e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000940:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <HAL_InitTick+0xd8>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000954:	4817      	ldr	r0, [pc, #92]	@ (80009b4 <HAL_InitTick+0xd8>)
 8000956:	f001 fce5 	bl	8002324 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000960:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000964:	2b00      	cmp	r3, #0
 8000966:	d11b      	bne.n	80009a0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000968:	4812      	ldr	r0, [pc, #72]	@ (80009b4 <HAL_InitTick+0xd8>)
 800096a:	f001 fd33 	bl	80023d4 <HAL_TIM_Base_Start_IT>
 800096e:	4603      	mov	r3, r0
 8000970:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000974:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000978:	2b00      	cmp	r3, #0
 800097a:	d111      	bne.n	80009a0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800097c:	2019      	movs	r0, #25
 800097e:	f000 fc68 	bl	8001252 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d808      	bhi.n	800099a <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	2019      	movs	r0, #25
 800098e:	f000 fc44 	bl	800121a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000992:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_InitTick+0xe0>)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	e002      	b.n	80009a0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80009a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3730      	adds	r7, #48	@ 0x30
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021000 	.word	0x40021000
 80009b0:	431bde83 	.word	0x431bde83
 80009b4:	20000170 	.word	0x20000170
 80009b8:	40012c00 	.word	0x40012c00
 80009bc:	20000004 	.word	0x20000004

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <MemManage_Handler+0x4>

080009d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80009f8:	4802      	ldr	r0, [pc, #8]	@ (8000a04 <ADC1_2_IRQHandler+0x10>)
 80009fa:	f000 f945 	bl	8000c88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	2000002c 	.word	0x2000002c

08000a08 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a0c:	4802      	ldr	r0, [pc, #8]	@ (8000a18 <TIM1_UP_IRQHandler+0x10>)
 8000a0e:	f001 fd33 	bl	8002478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000170 	.word	0x20000170

08000a1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a28:	f7ff fff8 	bl	8000a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480b      	ldr	r0, [pc, #44]	@ (8000a5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2e:	490c      	ldr	r1, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a30:	4a0c      	ldr	r2, [pc, #48]	@ (8000a64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a09      	ldr	r2, [pc, #36]	@ (8000a68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a44:	4c09      	ldr	r4, [pc, #36]	@ (8000a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a52:	f004 fd91 	bl	8005578 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fb7b 	bl	8000150 <main>
  bx lr
 8000a5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a64:	080057a4 	.word	0x080057a4
  ldr r2, =_sbss
 8000a68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a6c:	20001b0c 	.word	0x20001b0c

08000a70 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <CAN1_RX1_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_Init+0x28>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	@ (8000a9c <HAL_Init+0x28>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 fbbd 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	200f      	movs	r0, #15
 8000a8c:	f7ff ff26 	bl	80008dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fdd2 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a03      	ldr	r2, [pc, #12]	@ (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200001b8 	.word	0x200001b8

08000ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	@ (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	200001b8 	.word	0x200001b8

08000ad8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e0be      	b.n	8000c78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d109      	bne.n	8000b1c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fdc6 	bl	80006a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 fa7d 	bl	800101c <ADC_ConversionStop_Disable>
 8000b22:	4603      	mov	r3, r0
 8000b24:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f040 8099 	bne.w	8000c66 <HAL_ADC_Init+0x18e>
 8000b34:	7dfb      	ldrb	r3, [r7, #23]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f040 8095 	bne.w	8000c66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000b44:	f023 0302 	bic.w	r3, r3, #2
 8000b48:	f043 0202 	orr.w	r2, r3, #2
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b58:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7b1b      	ldrb	r3, [r3, #12]
 8000b5e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b60:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b70:	d003      	beq.n	8000b7a <HAL_ADC_Init+0xa2>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d102      	bne.n	8000b80 <HAL_ADC_Init+0xa8>
 8000b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7e:	e000      	b.n	8000b82 <HAL_ADC_Init+0xaa>
 8000b80:	2300      	movs	r3, #0
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7d1b      	ldrb	r3, [r3, #20]
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d119      	bne.n	8000bc4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	7b1b      	ldrb	r3, [r3, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	035a      	lsls	r2, r3, #13
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	e00b      	b.n	8000bc4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb0:	f043 0220 	orr.w	r2, r3, #32
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bbc:	f043 0201 	orr.w	r2, r3, #1
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	4b28      	ldr	r3, [pc, #160]	@ (8000c80 <HAL_ADC_Init+0x1a8>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	6812      	ldr	r2, [r2, #0]
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	430b      	orrs	r3, r1
 8000bea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bf4:	d003      	beq.n	8000bfe <HAL_ADC_Init+0x126>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d104      	bne.n	8000c08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	691b      	ldr	r3, [r3, #16]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	051b      	lsls	r3, r3, #20
 8000c06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <HAL_ADC_Init+0x1ac>)
 8000c24:	4013      	ands	r3, r2
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d10b      	bne.n	8000c44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c36:	f023 0303 	bic.w	r3, r3, #3
 8000c3a:	f043 0201 	orr.w	r2, r3, #1
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c42:	e018      	b.n	8000c76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f023 0312 	bic.w	r3, r3, #18
 8000c4c:	f043 0210 	orr.w	r2, r3, #16
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c58:	f043 0201 	orr.w	r2, r3, #1
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c64:	e007      	b.n	8000c76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c6a:	f043 0210 	orr.w	r2, r3, #16
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	ffe1f7fd 	.word	0xffe1f7fd
 8000c84:	ff1f0efe 	.word	0xff1f0efe

08000c88 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	f003 0320 	and.w	r3, r3, #32
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d03e      	beq.n	8000d28 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d039      	beq.n	8000d28 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d105      	bne.n	8000ccc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000cd6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000cda:	d11d      	bne.n	8000d18 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d119      	bne.n	8000d18 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0220 	bic.w	r2, r2, #32
 8000cf2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d105      	bne.n	8000d18 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d10:	f043 0201 	orr.w	r2, r3, #1
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d18:	6878      	ldr	r0, [r7, #4]
 8000d1a:	f000 f874 	bl	8000e06 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f06f 0212 	mvn.w	r2, #18
 8000d26:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d04d      	beq.n	8000dce <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d048      	beq.n	8000dce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d40:	f003 0310 	and.w	r3, r3, #16
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d4c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000d5e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000d62:	d012      	beq.n	8000d8a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d125      	bne.n	8000dbe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d7c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d80:	d11d      	bne.n	8000dbe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d119      	bne.n	8000dbe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d98:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d105      	bne.n	8000dbe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db6:	f043 0201 	orr.w	r2, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f96d 	bl	800109e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f06f 020c 	mvn.w	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d012      	beq.n	8000dfe <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00d      	beq.n	8000dfe <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f812 	bl	8000e18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f06f 0201 	mvn.w	r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
	...

08000e2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <HAL_ADC_ConfigChannel+0x20>
 8000e48:	2302      	movs	r3, #2
 8000e4a:	e0dc      	b.n	8001006 <HAL_ADC_ConfigChannel+0x1da>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	d81c      	bhi.n	8000e96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3b05      	subs	r3, #5
 8000e6e:	221f      	movs	r2, #31
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4019      	ands	r1, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	3b05      	subs	r3, #5
 8000e88:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e94:	e03c      	b.n	8000f10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b0c      	cmp	r3, #12
 8000e9c:	d81c      	bhi.n	8000ed8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	3b23      	subs	r3, #35	@ 0x23
 8000eb0:	221f      	movs	r2, #31
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	4019      	ands	r1, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	3b23      	subs	r3, #35	@ 0x23
 8000eca:	fa00 f203 	lsl.w	r2, r0, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ed6:	e01b      	b.n	8000f10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3b41      	subs	r3, #65	@ 0x41
 8000eea:	221f      	movs	r2, #31
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4019      	ands	r1, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	3b41      	subs	r3, #65	@ 0x41
 8000f04:	fa00 f203 	lsl.w	r2, r0, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b09      	cmp	r3, #9
 8000f16:	d91c      	bls.n	8000f52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	68d9      	ldr	r1, [r3, #12]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4613      	mov	r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	3b1e      	subs	r3, #30
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4019      	ands	r1, r3
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	6898      	ldr	r0, [r3, #8]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	3b1e      	subs	r3, #30
 8000f44:	fa00 f203 	lsl.w	r2, r0, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	e019      	b.n	8000f86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6919      	ldr	r1, [r3, #16]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	2207      	movs	r2, #7
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	4019      	ands	r1, r3
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	6898      	ldr	r0, [r3, #8]
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b10      	cmp	r3, #16
 8000f8c:	d003      	beq.n	8000f96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f92:	2b11      	cmp	r3, #17
 8000f94:	d132      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001010 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d125      	bne.n	8000fec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d126      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000fbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2b10      	cmp	r3, #16
 8000fc4:	d11a      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	0c9a      	lsrs	r2, r3, #18
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fdc:	e002      	b.n	8000fe4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f9      	bne.n	8000fde <HAL_ADC_ConfigChannel+0x1b2>
 8000fea:	e007      	b.n	8000ffc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ff0:	f043 0220 	orr.w	r2, r3, #32
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	40012400 	.word	0x40012400
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83

0800101c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d12e      	bne.n	8001094 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001046:	f7ff fd3d 	bl	8000ac4 <HAL_GetTick>
 800104a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800104c:	e01b      	b.n	8001086 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800104e:	f7ff fd39 	bl	8000ac4 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d914      	bls.n	8001086 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10d      	bne.n	8001086 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106e:	f043 0210 	orr.w	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800107a:	f043 0201 	orr.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e007      	b.n	8001096 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b01      	cmp	r3, #1
 8001092:	d0dc      	beq.n	800104e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4906      	ldr	r1, [pc, #24]	@ (8001148 <__NVIC_EnableIRQ+0x34>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	e000e100 	.word	0xe000e100

0800114c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	6039      	str	r1, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	2b00      	cmp	r3, #0
 800115e:	db0a      	blt.n	8001176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	b2da      	uxtb	r2, r3
 8001164:	490c      	ldr	r1, [pc, #48]	@ (8001198 <__NVIC_SetPriority+0x4c>)
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	440b      	add	r3, r1
 8001170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001174:	e00a      	b.n	800118c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4908      	ldr	r1, [pc, #32]	@ (800119c <__NVIC_SetPriority+0x50>)
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 030f 	and.w	r3, r3, #15
 8001182:	3b04      	subs	r3, #4
 8001184:	0112      	lsls	r2, r2, #4
 8001186:	b2d2      	uxtb	r2, r2
 8001188:	440b      	add	r3, r1
 800118a:	761a      	strb	r2, [r3, #24]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	@ 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f1c3 0307 	rsb	r3, r3, #7
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	bf28      	it	cs
 80011be:	2304      	movcs	r3, #4
 80011c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3304      	adds	r3, #4
 80011c6:	2b06      	cmp	r3, #6
 80011c8:	d902      	bls.n	80011d0 <NVIC_EncodePriority+0x30>
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3b03      	subs	r3, #3
 80011ce:	e000      	b.n	80011d2 <NVIC_EncodePriority+0x32>
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	f04f 32ff 	mov.w	r2, #4294967295
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43da      	mvns	r2, r3
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa01 f303 	lsl.w	r3, r1, r3
 80011f2:	43d9      	mvns	r1, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	4313      	orrs	r3, r2
         );
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3724      	adds	r7, #36	@ 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff4f 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff64 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ffb2 	bl	80011a0 <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff81 	bl	800114c <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff57 	bl	8001114 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b08b      	sub	sp, #44	@ 0x2c
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e169      	b.n	8001558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001284:	2201      	movs	r2, #1
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	429a      	cmp	r2, r3
 800129e:	f040 8158 	bne.w	8001552 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a9a      	ldr	r2, [pc, #616]	@ (8001510 <HAL_GPIO_Init+0x2a0>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d05e      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012ac:	4a98      	ldr	r2, [pc, #608]	@ (8001510 <HAL_GPIO_Init+0x2a0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d875      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012b2:	4a98      	ldr	r2, [pc, #608]	@ (8001514 <HAL_GPIO_Init+0x2a4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d058      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012b8:	4a96      	ldr	r2, [pc, #600]	@ (8001514 <HAL_GPIO_Init+0x2a4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d86f      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012be:	4a96      	ldr	r2, [pc, #600]	@ (8001518 <HAL_GPIO_Init+0x2a8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d052      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012c4:	4a94      	ldr	r2, [pc, #592]	@ (8001518 <HAL_GPIO_Init+0x2a8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d869      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012ca:	4a94      	ldr	r2, [pc, #592]	@ (800151c <HAL_GPIO_Init+0x2ac>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d04c      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012d0:	4a92      	ldr	r2, [pc, #584]	@ (800151c <HAL_GPIO_Init+0x2ac>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d863      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012d6:	4a92      	ldr	r2, [pc, #584]	@ (8001520 <HAL_GPIO_Init+0x2b0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d046      	beq.n	800136a <HAL_GPIO_Init+0xfa>
 80012dc:	4a90      	ldr	r2, [pc, #576]	@ (8001520 <HAL_GPIO_Init+0x2b0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d85d      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012e2:	2b12      	cmp	r3, #18
 80012e4:	d82a      	bhi.n	800133c <HAL_GPIO_Init+0xcc>
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d859      	bhi.n	800139e <HAL_GPIO_Init+0x12e>
 80012ea:	a201      	add	r2, pc, #4	@ (adr r2, 80012f0 <HAL_GPIO_Init+0x80>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	0800136b 	.word	0x0800136b
 80012f4:	08001345 	.word	0x08001345
 80012f8:	08001357 	.word	0x08001357
 80012fc:	08001399 	.word	0x08001399
 8001300:	0800139f 	.word	0x0800139f
 8001304:	0800139f 	.word	0x0800139f
 8001308:	0800139f 	.word	0x0800139f
 800130c:	0800139f 	.word	0x0800139f
 8001310:	0800139f 	.word	0x0800139f
 8001314:	0800139f 	.word	0x0800139f
 8001318:	0800139f 	.word	0x0800139f
 800131c:	0800139f 	.word	0x0800139f
 8001320:	0800139f 	.word	0x0800139f
 8001324:	0800139f 	.word	0x0800139f
 8001328:	0800139f 	.word	0x0800139f
 800132c:	0800139f 	.word	0x0800139f
 8001330:	0800139f 	.word	0x0800139f
 8001334:	0800134d 	.word	0x0800134d
 8001338:	08001361 	.word	0x08001361
 800133c:	4a79      	ldr	r2, [pc, #484]	@ (8001524 <HAL_GPIO_Init+0x2b4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001342:	e02c      	b.n	800139e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e029      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	3304      	adds	r3, #4
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	e024      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	3308      	adds	r3, #8
 800135c:	623b      	str	r3, [r7, #32]
          break;
 800135e:	e01f      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	330c      	adds	r3, #12
 8001366:	623b      	str	r3, [r7, #32]
          break;
 8001368:	e01a      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001372:	2304      	movs	r3, #4
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e013      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d105      	bne.n	800138c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001380:	2308      	movs	r3, #8
 8001382:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	611a      	str	r2, [r3, #16]
          break;
 800138a:	e009      	b.n	80013a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800138c:	2308      	movs	r3, #8
 800138e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69fa      	ldr	r2, [r7, #28]
 8001394:	615a      	str	r2, [r3, #20]
          break;
 8001396:	e003      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e000      	b.n	80013a0 <HAL_GPIO_Init+0x130>
          break;
 800139e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2bff      	cmp	r3, #255	@ 0xff
 80013a4:	d801      	bhi.n	80013aa <HAL_GPIO_Init+0x13a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_Init+0x13e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3304      	adds	r3, #4
 80013ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2bff      	cmp	r3, #255	@ 0xff
 80013b4:	d802      	bhi.n	80013bc <HAL_GPIO_Init+0x14c>
 80013b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	e002      	b.n	80013c2 <HAL_GPIO_Init+0x152>
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	3b08      	subs	r3, #8
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	210f      	movs	r1, #15
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	401a      	ands	r2, r3
 80013d4:	6a39      	ldr	r1, [r7, #32]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	431a      	orrs	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 80b1 	beq.w	8001552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001528 <HAL_GPIO_Init+0x2b8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001528 <HAL_GPIO_Init+0x2b8>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001528 <HAL_GPIO_Init+0x2b8>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001408:	4a48      	ldr	r2, [pc, #288]	@ (800152c <HAL_GPIO_Init+0x2bc>)
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	220f      	movs	r2, #15
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	43db      	mvns	r3, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a40      	ldr	r2, [pc, #256]	@ (8001530 <HAL_GPIO_Init+0x2c0>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d013      	beq.n	800145c <HAL_GPIO_Init+0x1ec>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a3f      	ldr	r2, [pc, #252]	@ (8001534 <HAL_GPIO_Init+0x2c4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00d      	beq.n	8001458 <HAL_GPIO_Init+0x1e8>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3e      	ldr	r2, [pc, #248]	@ (8001538 <HAL_GPIO_Init+0x2c8>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0x1e4>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3d      	ldr	r2, [pc, #244]	@ (800153c <HAL_GPIO_Init+0x2cc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d101      	bne.n	8001450 <HAL_GPIO_Init+0x1e0>
 800144c:	2303      	movs	r3, #3
 800144e:	e006      	b.n	800145e <HAL_GPIO_Init+0x1ee>
 8001450:	2304      	movs	r3, #4
 8001452:	e004      	b.n	800145e <HAL_GPIO_Init+0x1ee>
 8001454:	2302      	movs	r3, #2
 8001456:	e002      	b.n	800145e <HAL_GPIO_Init+0x1ee>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <HAL_GPIO_Init+0x1ee>
 800145c:	2300      	movs	r3, #0
 800145e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001460:	f002 0203 	and.w	r2, r2, #3
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	4093      	lsls	r3, r2
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800146e:	492f      	ldr	r1, [pc, #188]	@ (800152c <HAL_GPIO_Init+0x2bc>)
 8001470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001488:	4b2d      	ldr	r3, [pc, #180]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	492c      	ldr	r1, [pc, #176]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	608b      	str	r3, [r1, #8]
 8001494:	e006      	b.n	80014a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001496:	4b2a      	ldr	r3, [pc, #168]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	43db      	mvns	r3, r3
 800149e:	4928      	ldr	r1, [pc, #160]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014b0:	4b23      	ldr	r3, [pc, #140]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	4922      	ldr	r1, [pc, #136]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60cb      	str	r3, [r1, #12]
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014be:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	491e      	ldr	r1, [pc, #120]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014d8:	4b19      	ldr	r3, [pc, #100]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4918      	ldr	r1, [pc, #96]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	4914      	ldr	r1, [pc, #80]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d021      	beq.n	8001544 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	490e      	ldr	r1, [pc, #56]	@ (8001540 <HAL_GPIO_Init+0x2d0>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e021      	b.n	8001552 <HAL_GPIO_Init+0x2e2>
 800150e:	bf00      	nop
 8001510:	10320000 	.word	0x10320000
 8001514:	10310000 	.word	0x10310000
 8001518:	10220000 	.word	0x10220000
 800151c:	10210000 	.word	0x10210000
 8001520:	10120000 	.word	0x10120000
 8001524:	10110000 	.word	0x10110000
 8001528:	40021000 	.word	0x40021000
 800152c:	40010000 	.word	0x40010000
 8001530:	40010800 	.word	0x40010800
 8001534:	40010c00 	.word	0x40010c00
 8001538:	40011000 	.word	0x40011000
 800153c:	40011400 	.word	0x40011400
 8001540:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001544:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_GPIO_Init+0x304>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	43db      	mvns	r3, r3
 800154c:	4909      	ldr	r1, [pc, #36]	@ (8001574 <HAL_GPIO_Init+0x304>)
 800154e:	4013      	ands	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	3301      	adds	r3, #1
 8001556:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	f47f ae8e 	bne.w	8001284 <HAL_GPIO_Init+0x14>
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	372c      	adds	r7, #44	@ 0x2c
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	40010400 	.word	0x40010400

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	611a      	str	r2, [r3, #16]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e12b      	b.n	8001812 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d106      	bne.n	80015d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff f8ae 	bl	8000730 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2224      	movs	r2, #36	@ 0x24
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80015fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800160a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800160c:	f000 fcda 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 8001610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a81      	ldr	r2, [pc, #516]	@ (800181c <HAL_I2C_Init+0x274>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d807      	bhi.n	800162c <HAL_I2C_Init+0x84>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a80      	ldr	r2, [pc, #512]	@ (8001820 <HAL_I2C_Init+0x278>)
 8001620:	4293      	cmp	r3, r2
 8001622:	bf94      	ite	ls
 8001624:	2301      	movls	r3, #1
 8001626:	2300      	movhi	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	e006      	b.n	800163a <HAL_I2C_Init+0x92>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4a7d      	ldr	r2, [pc, #500]	@ (8001824 <HAL_I2C_Init+0x27c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	bf94      	ite	ls
 8001634:	2301      	movls	r3, #1
 8001636:	2300      	movhi	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e0e7      	b.n	8001812 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4a78      	ldr	r2, [pc, #480]	@ (8001828 <HAL_I2C_Init+0x280>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0c9b      	lsrs	r3, r3, #18
 800164c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	4a6a      	ldr	r2, [pc, #424]	@ (800181c <HAL_I2C_Init+0x274>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d802      	bhi.n	800167c <HAL_I2C_Init+0xd4>
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	e009      	b.n	8001690 <HAL_I2C_Init+0xe8>
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001682:	fb02 f303 	mul.w	r3, r2, r3
 8001686:	4a69      	ldr	r2, [pc, #420]	@ (800182c <HAL_I2C_Init+0x284>)
 8001688:	fba2 2303 	umull	r2, r3, r2, r3
 800168c:	099b      	lsrs	r3, r3, #6
 800168e:	3301      	adds	r3, #1
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	430b      	orrs	r3, r1
 8001696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	495c      	ldr	r1, [pc, #368]	@ (800181c <HAL_I2C_Init+0x274>)
 80016ac:	428b      	cmp	r3, r1
 80016ae:	d819      	bhi.n	80016e4 <HAL_I2C_Init+0x13c>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e59      	subs	r1, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80016be:	1c59      	adds	r1, r3, #1
 80016c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016c4:	400b      	ands	r3, r1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <HAL_I2C_Init+0x138>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	1e59      	subs	r1, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d8:	3301      	adds	r3, #1
 80016da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016de:	e051      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 80016e0:	2304      	movs	r3, #4
 80016e2:	e04f      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d111      	bne.n	8001710 <HAL_I2C_Init+0x168>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1e58      	subs	r0, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6859      	ldr	r1, [r3, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	440b      	add	r3, r1
 80016fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	e012      	b.n	8001736 <HAL_I2C_Init+0x18e>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1e58      	subs	r0, r3, #1
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	0099      	lsls	r1, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	fbb0 f3f3 	udiv	r3, r0, r3
 8001726:	3301      	adds	r3, #1
 8001728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_I2C_Init+0x196>
 800173a:	2301      	movs	r3, #1
 800173c:	e022      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10e      	bne.n	8001764 <HAL_I2C_Init+0x1bc>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1e58      	subs	r0, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6859      	ldr	r1, [r3, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	440b      	add	r3, r1
 8001754:	fbb0 f3f3 	udiv	r3, r0, r3
 8001758:	3301      	adds	r3, #1
 800175a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001762:	e00f      	b.n	8001784 <HAL_I2C_Init+0x1dc>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1e58      	subs	r0, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6859      	ldr	r1, [r3, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	0099      	lsls	r1, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	fbb0 f3f3 	udiv	r3, r0, r3
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001780:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	6809      	ldr	r1, [r1, #0]
 8001788:	4313      	orrs	r3, r2
 800178a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69da      	ldr	r2, [r3, #28]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	431a      	orrs	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6911      	ldr	r1, [r2, #16]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	68d2      	ldr	r2, [r2, #12]
 80017be:	4311      	orrs	r1, r2
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	000186a0 	.word	0x000186a0
 8001820:	001e847f 	.word	0x001e847f
 8001824:	003d08ff 	.word	0x003d08ff
 8001828:	431bde83 	.word	0x431bde83
 800182c:	10624dd3 	.word	0x10624dd3

08001830 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e272      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	f000 8087 	beq.w	800195e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001850:	4b92      	ldr	r3, [pc, #584]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b04      	cmp	r3, #4
 800185a:	d00c      	beq.n	8001876 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800185c:	4b8f      	ldr	r3, [pc, #572]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	d112      	bne.n	800188e <HAL_RCC_OscConfig+0x5e>
 8001868:	4b8c      	ldr	r3, [pc, #560]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001874:	d10b      	bne.n	800188e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001876:	4b89      	ldr	r3, [pc, #548]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d06c      	beq.n	800195c <HAL_RCC_OscConfig+0x12c>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d168      	bne.n	800195c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e24c      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001896:	d106      	bne.n	80018a6 <HAL_RCC_OscConfig+0x76>
 8001898:	4b80      	ldr	r3, [pc, #512]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e02e      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x98>
 80018ae:	4b7b      	ldr	r3, [pc, #492]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7a      	ldr	r2, [pc, #488]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	4b78      	ldr	r3, [pc, #480]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a77      	ldr	r2, [pc, #476]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e01d      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0xbc>
 80018d2:	4b72      	ldr	r3, [pc, #456]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a71      	ldr	r2, [pc, #452]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b6f      	ldr	r3, [pc, #444]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0xd4>
 80018ec:	4b6b      	ldr	r3, [pc, #428]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6a      	ldr	r2, [pc, #424]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b68      	ldr	r3, [pc, #416]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a67      	ldr	r2, [pc, #412]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001902:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff f8da 	bl	8000ac4 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff f8d6 	bl	8000ac4 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	@ 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e200      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	4b5d      	ldr	r3, [pc, #372]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0xe4>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff f8c6 	bl	8000ac4 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff f8c2 	bl	8000ac4 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	@ 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e1ec      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	4b53      	ldr	r3, [pc, #332]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x10c>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800196a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00b      	beq.n	800198e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001976:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b08      	cmp	r3, #8
 8001980:	d11c      	bne.n	80019bc <HAL_RCC_OscConfig+0x18c>
 8001982:	4b46      	ldr	r3, [pc, #280]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d116      	bne.n	80019bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	4b43      	ldr	r3, [pc, #268]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <HAL_RCC_OscConfig+0x176>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d001      	beq.n	80019a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e1c0      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a6:	4b3d      	ldr	r3, [pc, #244]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4939      	ldr	r1, [pc, #228]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ba:	e03a      	b.n	8001a32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c4:	4b36      	ldr	r3, [pc, #216]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff f87b 	bl	8000ac4 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff f877 	bl	8000ac4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1a1      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4927      	ldr	r1, [pc, #156]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e015      	b.n	8001a32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <HAL_RCC_OscConfig+0x270>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff f85a 	bl	8000ac4 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff f856 	bl	8000ac4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e180      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d03a      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d019      	beq.n	8001a7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f83a 	bl	8000ac4 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff f836 	bl	8000ac4 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e160      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	4b0d      	ldr	r3, [pc, #52]	@ (8001a9c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a72:	2001      	movs	r0, #1
 8001a74:	f000 fafe 	bl	8002074 <RCC_Delay>
 8001a78:	e01c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff f820 	bl	8000ac4 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a86:	e00f      	b.n	8001aa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff f81c 	bl	8000ac4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d908      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e146      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	42420000 	.word	0x42420000
 8001aa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	4b92      	ldr	r3, [pc, #584]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e9      	bne.n	8001a88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a6 	beq.w	8001c0e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b88      	ldr	r3, [pc, #544]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	4a87      	ldr	r2, [pc, #540]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	61d3      	str	r3, [r2, #28]
 8001ade:	4b85      	ldr	r3, [pc, #532]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b82      	ldr	r3, [pc, #520]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afa:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c8>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7fe ffdd 	bl	8000ac4 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7fe ffd9 	bl	8000ac4 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b64      	cmp	r3, #100	@ 0x64
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e103      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	4b75      	ldr	r3, [pc, #468]	@ (8001cf8 <HAL_RCC_OscConfig+0x4c8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x312>
 8001b34:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	e02d      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x334>
 8001b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a69      	ldr	r2, [pc, #420]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b67      	ldr	r3, [pc, #412]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a66      	ldr	r2, [pc, #408]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	e01c      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d10c      	bne.n	8001b86 <HAL_RCC_OscConfig+0x356>
 8001b6c:	4b61      	ldr	r3, [pc, #388]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a60      	ldr	r2, [pc, #384]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a5d      	ldr	r2, [pc, #372]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	e00b      	b.n	8001b9e <HAL_RCC_OscConfig+0x36e>
 8001b86:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a5a      	ldr	r2, [pc, #360]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	4b58      	ldr	r3, [pc, #352]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b94:	6a1b      	ldr	r3, [r3, #32]
 8001b96:	4a57      	ldr	r2, [pc, #348]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d015      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7fe ff8d 	bl	8000ac4 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe ff89 	bl	8000ac4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e0b1      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ee      	beq.n	8001bae <HAL_RCC_OscConfig+0x37e>
 8001bd0:	e014      	b.n	8001bfc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd2:	f7fe ff77 	bl	8000ac4 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7fe ff73 	bl	8000ac4 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e09b      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ee      	bne.n	8001bda <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d105      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a3b      	ldr	r2, [pc, #236]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8087 	beq.w	8001d26 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c18:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d061      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d146      	bne.n	8001cba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	4b33      	ldr	r3, [pc, #204]	@ (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c32:	f7fe ff47 	bl	8000ac4 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c38:	e008      	b.n	8001c4c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7fe ff43 	bl	8000ac4 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e06d      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f0      	bne.n	8001c3a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c60:	d108      	bne.n	8001c74 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c62:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4921      	ldr	r1, [pc, #132]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c74:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a19      	ldr	r1, [r3, #32]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	430b      	orrs	r3, r1
 8001c86:	491b      	ldr	r1, [pc, #108]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7fe ff17 	bl	8000ac4 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7fe ff13 	bl	8000ac4 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e03d      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cac:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x46a>
 8001cb8:	e035      	b.n	8001d26 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b10      	ldr	r3, [pc, #64]	@ (8001cfc <HAL_RCC_OscConfig+0x4cc>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7fe ff00 	bl	8000ac4 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe fefc 	bl	8000ac4 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e026      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cda:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x498>
 8001ce6:	e01e      	b.n	8001d26 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e019      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <HAL_RCC_OscConfig+0x500>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0d0      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d48:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d910      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b67      	ldr	r3, [pc, #412]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 0207 	bic.w	r2, r3, #7
 8001d5e:	4965      	ldr	r1, [pc, #404]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d66:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b8      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d020      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d90:	4b59      	ldr	r3, [pc, #356]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a58      	ldr	r2, [pc, #352]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da8:	4b53      	ldr	r3, [pc, #332]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a52      	ldr	r2, [pc, #328]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001db2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4b50      	ldr	r3, [pc, #320]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	494d      	ldr	r1, [pc, #308]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d040      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b47      	ldr	r3, [pc, #284]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d115      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e07f      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	4b41      	ldr	r3, [pc, #260]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e073      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06b      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e12:	4b39      	ldr	r3, [pc, #228]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f023 0203 	bic.w	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4936      	ldr	r1, [pc, #216]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e24:	f7fe fe4e 	bl	8000ac4 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e2a:	e00a      	b.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2c:	f7fe fe4a 	bl	8000ac4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e053      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e42:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 020c 	and.w	r2, r3, #12
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1eb      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d210      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 0207 	bic.w	r2, r3, #7
 8001e6a:	4922      	ldr	r1, [pc, #136]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e032      	b.n	8001eea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d008      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	4916      	ldr	r1, [pc, #88]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d009      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	490e      	ldr	r1, [pc, #56]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ec2:	f000 f821 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	091b      	lsrs	r3, r3, #4
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	490a      	ldr	r1, [pc, #40]	@ (8001efc <HAL_RCC_ClockConfig+0x1c8>)
 8001ed4:	5ccb      	ldrb	r3, [r1, r3]
 8001ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eda:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <HAL_RCC_ClockConfig+0x1cc>)
 8001edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_RCC_ClockConfig+0x1d0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fcfa 	bl	80008dc <HAL_InitTick>

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40022000 	.word	0x40022000
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	08005770 	.word	0x08005770
 8001f00:	20000000 	.word	0x20000000
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x30>
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x36>
 8001f36:	e027      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f38:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3a:	613b      	str	r3, [r7, #16]
      break;
 8001f3c:	e027      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f48:	5cd3      	ldrb	r3, [r2, r3]
 8001f4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d010      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f56:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	0c5b      	lsrs	r3, r3, #17
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	4a11      	ldr	r2, [pc, #68]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f62:	5cd3      	ldrb	r3, [r2, r3]
 8001f64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f6a:	fb03 f202 	mul.w	r2, r3, r2
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	e004      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f7c:	fb02 f303 	mul.w	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	613b      	str	r3, [r7, #16]
      break;
 8001f86:	e002      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8a:	613b      	str	r3, [r7, #16]
      break;
 8001f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f8e:	693b      	ldr	r3, [r7, #16]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	007a1200 	.word	0x007a1200
 8001fa4:	08005788 	.word	0x08005788
 8001fa8:	08005798 	.word	0x08005798
 8001fac:	003d0900 	.word	0x003d0900

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b02      	ldr	r3, [pc, #8]	@ (8001fc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fc8:	f7ff fff2 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4903      	ldr	r1, [pc, #12]	@ (8001fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	08005780 	.word	0x08005780

08001fec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff0:	f7ff ffde 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0adb      	lsrs	r3, r3, #11
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	4903      	ldr	r1, [pc, #12]	@ (8002010 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	08005780 	.word	0x08005780

08002014 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	220f      	movs	r2, #15
 8002022:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <HAL_RCC_GetClockConfig+0x58>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0203 	and.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002030:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <HAL_RCC_GetClockConfig+0x58>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <HAL_RCC_GetClockConfig+0x58>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002048:	4b08      	ldr	r3, [pc, #32]	@ (800206c <HAL_RCC_GetClockConfig+0x58>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	08db      	lsrs	r3, r3, #3
 800204e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_RCC_GetClockConfig+0x5c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0207 	and.w	r2, r3, #7
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000
 8002070:	40022000 	.word	0x40022000

08002074 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <RCC_Delay+0x34>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a0a      	ldr	r2, [pc, #40]	@ (80020ac <RCC_Delay+0x38>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	0a5b      	lsrs	r3, r3, #9
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002090:	bf00      	nop
  }
  while (Delay --);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1e5a      	subs	r2, r3, #1
 8002096:	60fa      	str	r2, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <RCC_Delay+0x1c>
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000000 	.word	0x20000000
 80020ac:	10624dd3 	.word	0x10624dd3

080020b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d07d      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10d      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	61d3      	str	r3, [r2, #28]
 80020e8:	4b49      	ldr	r3, [pc, #292]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f4:	2301      	movs	r3, #1
 80020f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b46      	ldr	r3, [pc, #280]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d118      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002104:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a42      	ldr	r2, [pc, #264]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002110:	f7fe fcd8 	bl	8000ac4 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	e008      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002118:	f7fe fcd4 	bl	8000ac4 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b64      	cmp	r3, #100	@ 0x64
 8002124:	d901      	bls.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e06d      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212a:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002136:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800213e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d02e      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d027      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002154:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800215c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800215e:	4b2e      	ldr	r3, [pc, #184]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002164:	4b2c      	ldr	r3, [pc, #176]	@ (8002218 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800216a:	4a29      	ldr	r2, [pc, #164]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d014      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe fca3 	bl	8000ac4 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe fc9f 	bl	8000ac4 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e036      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002198:	4b1d      	ldr	r3, [pc, #116]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0ee      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	4917      	ldr	r1, [pc, #92]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021b6:	7dfb      	ldrb	r3, [r7, #23]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d105      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a13      	ldr	r2, [pc, #76]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	490b      	ldr	r1, [pc, #44]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4904      	ldr	r1, [pc, #16]	@ (8002210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000
 8002214:	40007000 	.word	0x40007000
 8002218:	42420440 	.word	0x42420440

0800221c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e076      	b.n	800231c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	2b00      	cmp	r3, #0
 8002234:	d108      	bne.n	8002248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800223e:	d009      	beq.n	8002254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	61da      	str	r2, [r3, #28]
 8002246:	e005      	b.n	8002254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe fa9c 	bl	80007ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800228a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d8:	ea42 0103 	orr.w	r1, r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	0c1a      	lsrs	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f002 0204 	and.w	r2, r2, #4
 80022fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800230a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e041      	b.n	80023ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d106      	bne.n	8002350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f839 	bl	80023c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3304      	adds	r3, #4
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f000 f99c 	bl	80026a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d001      	beq.n	80023ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e03a      	b.n	8002462 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a18      	ldr	r2, [pc, #96]	@ (800246c <HAL_TIM_Base_Start_IT+0x98>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00e      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x58>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002416:	d009      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x58>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a14      	ldr	r2, [pc, #80]	@ (8002470 <HAL_TIM_Base_Start_IT+0x9c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x58>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a13      	ldr	r2, [pc, #76]	@ (8002474 <HAL_TIM_Base_Start_IT+0xa0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d111      	bne.n	8002450 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b06      	cmp	r3, #6
 800243c:	d010      	beq.n	8002460 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f042 0201 	orr.w	r2, r2, #1
 800244c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800244e:	e007      	b.n	8002460 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0201 	orr.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40000400 	.word	0x40000400
 8002474:	40000800 	.word	0x40000800

08002478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d020      	beq.n	80024dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01b      	beq.n	80024dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0202 	mvn.w	r2, #2
 80024ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8d1 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f8c4 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f8d3 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d020      	beq.n	8002528 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0204 	mvn.w	r2, #4
 80024f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2202      	movs	r2, #2
 80024fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8ab 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f89e 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8ad 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d020      	beq.n	8002574 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0208 	mvn.w	r2, #8
 8002544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2204      	movs	r2, #4
 800254a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f885 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f878 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f887 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d020      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0210 	mvn.w	r2, #16
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2208      	movs	r2, #8
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f85f 	bl	800266a <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f852 	bl	8002658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f861 	bl	800267c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00c      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0201 	mvn.w	r2, #1
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe f812 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00c      	beq.n	8002608 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002600:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8c3 	bl	800278e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f831 	bl	800268e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00c      	beq.n	8002650 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0220 	mvn.w	r2, #32
 8002648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f896 	bl	800277c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002770 <TIM_Base_SetConfig+0xd0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00b      	beq.n	80026d0 <TIM_Base_SetConfig+0x30>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026be:	d007      	beq.n	80026d0 <TIM_Base_SetConfig+0x30>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002774 <TIM_Base_SetConfig+0xd4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d003      	beq.n	80026d0 <TIM_Base_SetConfig+0x30>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002778 <TIM_Base_SetConfig+0xd8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d108      	bne.n	80026e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	4313      	orrs	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a22      	ldr	r2, [pc, #136]	@ (8002770 <TIM_Base_SetConfig+0xd0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00b      	beq.n	8002702 <TIM_Base_SetConfig+0x62>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f0:	d007      	beq.n	8002702 <TIM_Base_SetConfig+0x62>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002774 <TIM_Base_SetConfig+0xd4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0x62>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002778 <TIM_Base_SetConfig+0xd8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a0d      	ldr	r2, [pc, #52]	@ (8002770 <TIM_Base_SetConfig+0xd0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f023 0201 	bic.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	611a      	str	r2, [r3, #16]
  }
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40000400 	.word	0x40000400
 8002778:	40000800 	.word	0x40000800

0800277c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e042      	b.n	8002838 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe f83c 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	@ 0x24
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f82b 	bl	8002840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800287a:	f023 030c 	bic.w	r3, r3, #12
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	430b      	orrs	r3, r1
 8002886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002954 <UART_SetConfig+0x114>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d103      	bne.n	80028b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028a8:	f7ff fba0 	bl	8001fec <HAL_RCC_GetPCLK2Freq>
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	e002      	b.n	80028b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028b0:	f7ff fb88 	bl	8001fc4 <HAL_RCC_GetPCLK1Freq>
 80028b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	009a      	lsls	r2, r3, #2
 80028c0:	441a      	add	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028cc:	4a22      	ldr	r2, [pc, #136]	@ (8002958 <UART_SetConfig+0x118>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	0119      	lsls	r1, r3, #4
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002958 <UART_SetConfig+0x118>)
 80028ee:	fba3 0302 	umull	r0, r3, r3, r2
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2064      	movs	r0, #100	@ 0x64
 80028f6:	fb00 f303 	mul.w	r3, r0, r3
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	3332      	adds	r3, #50	@ 0x32
 8002900:	4a15      	ldr	r2, [pc, #84]	@ (8002958 <UART_SetConfig+0x118>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800290c:	4419      	add	r1, r3
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
 8002924:	4b0c      	ldr	r3, [pc, #48]	@ (8002958 <UART_SetConfig+0x118>)
 8002926:	fba3 0302 	umull	r0, r3, r3, r2
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2064      	movs	r0, #100	@ 0x64
 800292e:	fb00 f303 	mul.w	r3, r0, r3
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	3332      	adds	r3, #50	@ 0x32
 8002938:	4a07      	ldr	r2, [pc, #28]	@ (8002958 <UART_SetConfig+0x118>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	f003 020f 	and.w	r2, r3, #15
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	440a      	add	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40013800 	.word	0x40013800
 8002958:	51eb851f 	.word	0x51eb851f

0800295c <__NVIC_SetPriority>:
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0a      	blt.n	8002986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	490c      	ldr	r1, [pc, #48]	@ (80029a8 <__NVIC_SetPriority+0x4c>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	440b      	add	r3, r1
 8002980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002984:	e00a      	b.n	800299c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	@ (80029ac <__NVIC_SetPriority+0x50>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3b04      	subs	r3, #4
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	440b      	add	r3, r1
 800299a:	761a      	strb	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029b4:	4b05      	ldr	r3, [pc, #20]	@ (80029cc <SysTick_Handler+0x1c>)
 80029b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029b8:	f001 fdba 	bl	8004530 <xTaskGetSchedulerState>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d001      	beq.n	80029c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029c2:	f002 fb61 	bl	8005088 <xPortSysTickHandler>
  }
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	e000e010 	.word	0xe000e010

080029d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80029d4:	2100      	movs	r1, #0
 80029d6:	f06f 0004 	mvn.w	r0, #4
 80029da:	f7ff ffbf 	bl	800295c <__NVIC_SetPriority>
#endif
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ea:	f3ef 8305 	mrs	r3, IPSR
 80029ee:	603b      	str	r3, [r7, #0]
  return(result);
 80029f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80029f6:	f06f 0305 	mvn.w	r3, #5
 80029fa:	607b      	str	r3, [r7, #4]
 80029fc:	e00c      	b.n	8002a18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029fe:	4b09      	ldr	r3, [pc, #36]	@ (8002a24 <osKernelInitialize+0x40>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d105      	bne.n	8002a12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a06:	4b07      	ldr	r3, [pc, #28]	@ (8002a24 <osKernelInitialize+0x40>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	e002      	b.n	8002a18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a12:	f04f 33ff 	mov.w	r3, #4294967295
 8002a16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a18:	687b      	ldr	r3, [r7, #4]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	200001bc 	.word	0x200001bc

08002a28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a2e:	f3ef 8305 	mrs	r3, IPSR
 8002a32:	603b      	str	r3, [r7, #0]
  return(result);
 8002a34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a3a:	f06f 0305 	mvn.w	r3, #5
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	e010      	b.n	8002a64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a42:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <osKernelStart+0x48>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d109      	bne.n	8002a5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a4a:	f7ff ffc1 	bl	80029d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <osKernelStart+0x48>)
 8002a50:	2202      	movs	r2, #2
 8002a52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a54:	f001 f920 	bl	8003c98 <vTaskStartScheduler>
      stat = osOK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	e002      	b.n	8002a64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	200001bc 	.word	0x200001bc

08002a74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	@ 0x38
 8002a78:	af04      	add	r7, sp, #16
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a84:	f3ef 8305 	mrs	r3, IPSR
 8002a88:	617b      	str	r3, [r7, #20]
  return(result);
 8002a8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d17e      	bne.n	8002b8e <osThreadNew+0x11a>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d07b      	beq.n	8002b8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a9a:	2318      	movs	r3, #24
 8002a9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d045      	beq.n	8002b3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <osThreadNew+0x48>
        name = attr->name;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <osThreadNew+0x6e>
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b38      	cmp	r3, #56	@ 0x38
 8002ad4:	d805      	bhi.n	8002ae2 <osThreadNew+0x6e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <osThreadNew+0x72>
        return (NULL);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e054      	b.n	8002b90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <osThreadNew+0xa8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2b5b      	cmp	r3, #91	@ 0x5b
 8002b04:	d90a      	bls.n	8002b1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <osThreadNew+0xa8>
        mem = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e010      	b.n	8002b3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10c      	bne.n	8002b3e <osThreadNew+0xca>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <osThreadNew+0xca>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <osThreadNew+0xca>
          mem = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e001      	b.n	8002b3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d110      	bne.n	8002b66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b4c:	9202      	str	r2, [sp, #8]
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6a3a      	ldr	r2, [r7, #32]
 8002b58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fec0 	bl	80038e0 <xTaskCreateStatic>
 8002b60:	4603      	mov	r3, r0
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e013      	b.n	8002b8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d110      	bne.n	8002b8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 ff0e 	bl	80039a0 <xTaskCreate>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <osThreadNew+0x11a>
            hTask = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b8e:	693b      	ldr	r3, [r7, #16]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3728      	adds	r7, #40	@ 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba0:	f3ef 8305 	mrs	r3, IPSR
 8002ba4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <osDelay+0x1c>
    stat = osErrorISR;
 8002bac:	f06f 0305 	mvn.w	r3, #5
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	e007      	b.n	8002bc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f001 f834 	bl	8003c2c <vTaskDelay>
    }
  }

  return (stat);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08a      	sub	sp, #40	@ 0x28
 8002bd2:	af02      	add	r7, sp, #8
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bde:	f3ef 8305 	mrs	r3, IPSR
 8002be2:	613b      	str	r3, [r7, #16]
  return(result);
 8002be4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d15f      	bne.n	8002caa <osMessageQueueNew+0xdc>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d05c      	beq.n	8002caa <osMessageQueueNew+0xdc>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d059      	beq.n	8002caa <osMessageQueueNew+0xdc>
    mem = -1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d029      	beq.n	8002c56 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d012      	beq.n	8002c30 <osMessageQueueNew+0x62>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002c10:	d90e      	bls.n	8002c30 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <osMessageQueueNew+0x62>
        mem = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e014      	b.n	8002c5a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d110      	bne.n	8002c5a <osMessageQueueNew+0x8c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10c      	bne.n	8002c5a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d108      	bne.n	8002c5a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <osMessageQueueNew+0x8c>
          mem = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	e001      	b.n	8002c5a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10b      	bne.n	8002c78 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2100      	movs	r1, #0
 8002c6a:	9100      	str	r1, [sp, #0]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f96c 	bl	8002f4c <xQueueGenericCreateStatic>
 8002c74:	61f8      	str	r0, [r7, #28]
 8002c76:	e008      	b.n	8002c8a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f9df 	bl	8003046 <xQueueGenericCreate>
 8002c88:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00c      	beq.n	8002caa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <osMessageQueueNew+0xd0>
        name = attr->name;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e001      	b.n	8002ca2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002ca2:	6979      	ldr	r1, [r7, #20]
 8002ca4:	69f8      	ldr	r0, [r7, #28]
 8002ca6:	f000 fdbf 	bl	8003828 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002caa:	69fb      	ldr	r3, [r7, #28]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3720      	adds	r7, #32
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4a06      	ldr	r2, [pc, #24]	@ (8002cdc <vApplicationGetIdleTaskMemory+0x28>)
 8002cc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4a05      	ldr	r2, [pc, #20]	@ (8002ce0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002cca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2280      	movs	r2, #128	@ 0x80
 8002cd0:	601a      	str	r2, [r3, #0]
}
 8002cd2:	bf00      	nop
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr
 8002cdc:	200001c0 	.word	0x200001c0
 8002ce0:	2000021c 	.word	0x2000021c

08002ce4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a07      	ldr	r2, [pc, #28]	@ (8002d10 <vApplicationGetTimerTaskMemory+0x2c>)
 8002cf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4a06      	ldr	r2, [pc, #24]	@ (8002d14 <vApplicationGetTimerTaskMemory+0x30>)
 8002cfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d02:	601a      	str	r2, [r3, #0]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	2000041c 	.word	0x2000041c
 8002d14:	20000478 	.word	0x20000478

08002d18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f103 0208 	add.w	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f103 0208 	add.w	r2, r3, #8
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f103 0208 	add.w	r2, r3, #8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d103      	bne.n	8002dd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e00c      	b.n	8002dee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	e002      	b.n	8002de2 <vListInsert+0x2e>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d2f6      	bcs.n	8002ddc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc80      	pop	{r7}
 8002e22:	4770      	bx	lr

08002e24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6892      	ldr	r2, [r2, #8]
 8002e3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6852      	ldr	r2, [r2, #4]
 8002e44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d103      	bne.n	8002e58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	1e5a      	subs	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
	...

08002e78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e90:	f383 8811 	msr	BASEPRI, r3
 8002e94:	f3bf 8f6f 	isb	sy
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e9e:	bf00      	nop
 8002ea0:	bf00      	nop
 8002ea2:	e7fd      	b.n	8002ea0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ea4:	f002 f872 	bl	8004f8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	68f9      	ldr	r1, [r7, #12]
 8002eb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	441a      	add	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	68f9      	ldr	r1, [r7, #12]
 8002ed8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	441a      	add	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	22ff      	movs	r2, #255	@ 0xff
 8002ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	22ff      	movs	r2, #255	@ 0xff
 8002ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d114      	bne.n	8002f24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01a      	beq.n	8002f38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3310      	adds	r3, #16
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 f952 	bl	80041b0 <xTaskRemoveFromEventList>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d012      	beq.n	8002f38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f12:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <xQueueGenericReset+0xd0>)
 8002f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	e009      	b.n	8002f38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3310      	adds	r3, #16
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff fef5 	bl	8002d18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3324      	adds	r3, #36	@ 0x24
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fef0 	bl	8002d18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f38:	f002 f858 	bl	8004fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f3c:	2301      	movs	r3, #1
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08e      	sub	sp, #56	@ 0x38
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10b      	bne.n	8002f96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	e7fd      	b.n	8002f92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <xQueueGenericCreateStatic+0x56>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <xQueueGenericCreateStatic+0x5a>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <xQueueGenericCreateStatic+0x5c>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10b      	bne.n	8002fc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	623b      	str	r3, [r7, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <xQueueGenericCreateStatic+0x84>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <xQueueGenericCreateStatic+0x88>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <xQueueGenericCreateStatic+0x8a>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10b      	bne.n	8002ff2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	61fb      	str	r3, [r7, #28]
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	e7fd      	b.n	8002fee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ff2:	2350      	movs	r3, #80	@ 0x50
 8002ff4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b50      	cmp	r3, #80	@ 0x50
 8002ffa:	d00b      	beq.n	8003014 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	f3bf 8f4f 	dsb	sy
 800300c:	61bb      	str	r3, [r7, #24]
}
 800300e:	bf00      	nop
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003014:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800301a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00d      	beq.n	800303c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003028:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	4613      	mov	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f840 	bl	80030bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800303c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800303e:	4618      	mov	r0, r3
 8003040:	3730      	adds	r7, #48	@ 0x30
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08a      	sub	sp, #40	@ 0x28
 800304a:	af02      	add	r7, sp, #8
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <xQueueGenericCreate+0x2c>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	613b      	str	r3, [r7, #16]
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	e7fd      	b.n	800306e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	fb02 f303 	mul.w	r3, r2, r3
 800307a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	3350      	adds	r3, #80	@ 0x50
 8003080:	4618      	mov	r0, r3
 8003082:	f002 f885 	bl	8005190 <pvPortMalloc>
 8003086:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d011      	beq.n	80030b2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3350      	adds	r3, #80	@ 0x50
 8003096:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030a0:	79fa      	ldrb	r2, [r7, #7]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	4613      	mov	r3, r2
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f805 	bl	80030bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030b2:	69bb      	ldr	r3, [r7, #24]
	}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	e002      	b.n	80030de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030ea:	2101      	movs	r1, #1
 80030ec:	69b8      	ldr	r0, [r7, #24]
 80030ee:	f7ff fec3 	bl	8002e78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08e      	sub	sp, #56	@ 0x38
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003112:	2300      	movs	r3, #0
 8003114:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800311a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <xQueueGenericSend+0x34>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <xQueueGenericSend+0x42>
 800313e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <xQueueGenericSend+0x46>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <xQueueGenericSend+0x48>
 800314a:	2300      	movs	r3, #0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10b      	bne.n	8003168 <xQueueGenericSend+0x64>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d103      	bne.n	8003176 <xQueueGenericSend+0x72>
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <xQueueGenericSend+0x76>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <xQueueGenericSend+0x78>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <xQueueGenericSend+0x94>
	__asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	623b      	str	r3, [r7, #32]
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003198:	f001 f9ca 	bl	8004530 <xTaskGetSchedulerState>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <xQueueGenericSend+0xa4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <xQueueGenericSend+0xa8>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <xQueueGenericSend+0xaa>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <xQueueGenericSend+0xc6>
	__asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	61fb      	str	r3, [r7, #28]
}
 80031c4:	bf00      	nop
 80031c6:	bf00      	nop
 80031c8:	e7fd      	b.n	80031c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031ca:	f001 fedf 	bl	8004f8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <xQueueGenericSend+0xdc>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d129      	bne.n	8003234 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031e6:	f000 fa0f 	bl	8003608 <prvCopyDataToQueue>
 80031ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d010      	beq.n	8003216 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	3324      	adds	r3, #36	@ 0x24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 ffd9 	bl	80041b0 <xTaskRemoveFromEventList>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d013      	beq.n	800322c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003204:	4b3f      	ldr	r3, [pc, #252]	@ (8003304 <xQueueGenericSend+0x200>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	e00a      	b.n	800322c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d007      	beq.n	800322c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800321c:	4b39      	ldr	r3, [pc, #228]	@ (8003304 <xQueueGenericSend+0x200>)
 800321e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800322c:	f001 fede 	bl	8004fec <vPortExitCritical>
				return pdPASS;
 8003230:	2301      	movs	r3, #1
 8003232:	e063      	b.n	80032fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d103      	bne.n	8003242 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800323a:	f001 fed7 	bl	8004fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800323e:	2300      	movs	r3, #0
 8003240:	e05c      	b.n	80032fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d106      	bne.n	8003256 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f813 	bl	8004278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003252:	2301      	movs	r3, #1
 8003254:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003256:	f001 fec9 	bl	8004fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800325a:	f000 fd85 	bl	8003d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800325e:	f001 fe95 	bl	8004f8c <vPortEnterCritical>
 8003262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003264:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003268:	b25b      	sxtb	r3, r3
 800326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326e:	d103      	bne.n	8003278 <xQueueGenericSend+0x174>
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800327e:	b25b      	sxtb	r3, r3
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d103      	bne.n	800328e <xQueueGenericSend+0x18a>
 8003286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800328e:	f001 fead 	bl	8004fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003292:	1d3a      	adds	r2, r7, #4
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f802 	bl	80042a4 <xTaskCheckForTimeOut>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d124      	bne.n	80032f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032a8:	f000 faa6 	bl	80037f8 <prvIsQueueFull>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	3310      	adds	r3, #16
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 ff26 	bl	800410c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032c2:	f000 fa31 	bl	8003728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032c6:	f000 fd5d 	bl	8003d84 <xTaskResumeAll>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f47f af7c 	bne.w	80031ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80032d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <xQueueGenericSend+0x200>)
 80032d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	e772      	b.n	80031ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032e6:	f000 fa1f 	bl	8003728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032ea:	f000 fd4b 	bl	8003d84 <xTaskResumeAll>
 80032ee:	e76c      	b.n	80031ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032f2:	f000 fa19 	bl	8003728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032f6:	f000 fd45 	bl	8003d84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80032fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3738      	adds	r7, #56	@ 0x38
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	e000ed04 	.word	0xe000ed04

08003308 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b090      	sub	sp, #64	@ 0x40
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800331a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10b      	bne.n	8003338 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <xQueueGenericSendFromISR+0x3e>
 800333e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <xQueueGenericSendFromISR+0x42>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <xQueueGenericSendFromISR+0x44>
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d103      	bne.n	8003376 <xQueueGenericSendFromISR+0x6e>
 800336e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <xQueueGenericSendFromISR+0x72>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <xQueueGenericSendFromISR+0x74>
 800337a:	2300      	movs	r3, #0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10b      	bne.n	8003398 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	623b      	str	r3, [r7, #32]
}
 8003392:	bf00      	nop
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003398:	f001 feba 	bl	8005110 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800339c:	f3ef 8211 	mrs	r2, BASEPRI
 80033a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	61fa      	str	r2, [r7, #28]
 80033b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <xQueueGenericSendFromISR+0xc2>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d12f      	bne.n	800342a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80033e0:	f000 f912 	bl	8003608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d112      	bne.n	8003414 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f8:	3324      	adds	r3, #36	@ 0x24
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fed8 	bl	80041b0 <xTaskRemoveFromEventList>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e007      	b.n	8003424 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003414:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003418:	3301      	adds	r3, #1
 800341a:	b2db      	uxtb	r3, r3
 800341c:	b25a      	sxtb	r2, r3
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003424:	2301      	movs	r3, #1
 8003426:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003428:	e001      	b.n	800342e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800342a:	2300      	movs	r3, #0
 800342c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800342e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003430:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800343a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800343c:	4618      	mov	r0, r3
 800343e:	3740      	adds	r7, #64	@ 0x40
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	@ 0x30
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <xQueueReceive+0x32>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	623b      	str	r3, [r7, #32]
}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	e7fd      	b.n	8003472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <xQueueReceive+0x40>
 800347c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <xQueueReceive+0x44>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <xQueueReceive+0x46>
 8003488:	2300      	movs	r3, #0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <xQueueReceive+0x62>
	__asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	61fb      	str	r3, [r7, #28]
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	e7fd      	b.n	80034a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a6:	f001 f843 	bl	8004530 <xTaskGetSchedulerState>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <xQueueReceive+0x72>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <xQueueReceive+0x76>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <xQueueReceive+0x78>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10b      	bne.n	80034d8 <xQueueReceive+0x94>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	61bb      	str	r3, [r7, #24]
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	e7fd      	b.n	80034d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d8:	f001 fd58 	bl	8004f8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01f      	beq.n	8003528 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ec:	f000 f8f6 	bl	80036dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00f      	beq.n	8003520 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003502:	3310      	adds	r3, #16
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fe53 	bl	80041b0 <xTaskRemoveFromEventList>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003510:	4b3c      	ldr	r3, [pc, #240]	@ (8003604 <xQueueReceive+0x1c0>)
 8003512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003520:	f001 fd64 	bl	8004fec <vPortExitCritical>
				return pdPASS;
 8003524:	2301      	movs	r3, #1
 8003526:	e069      	b.n	80035fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800352e:	f001 fd5d 	bl	8004fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003532:	2300      	movs	r3, #0
 8003534:	e062      	b.n	80035fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800353c:	f107 0310 	add.w	r3, r7, #16
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fe99 	bl	8004278 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003546:	2301      	movs	r3, #1
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800354a:	f001 fd4f 	bl	8004fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800354e:	f000 fc0b 	bl	8003d68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003552:	f001 fd1b 	bl	8004f8c <vPortEnterCritical>
 8003556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800355c:	b25b      	sxtb	r3, r3
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d103      	bne.n	800356c <xQueueReceive+0x128>
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003572:	b25b      	sxtb	r3, r3
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d103      	bne.n	8003582 <xQueueReceive+0x13e>
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003582:	f001 fd33 	bl	8004fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003586:	1d3a      	adds	r2, r7, #4
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fe88 	bl	80042a4 <xTaskCheckForTimeOut>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d123      	bne.n	80035e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800359a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800359c:	f000 f916 	bl	80037cc <prvIsQueueEmpty>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d017      	beq.n	80035d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	3324      	adds	r3, #36	@ 0x24
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fdac 	bl	800410c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035b6:	f000 f8b7 	bl	8003728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035ba:	f000 fbe3 	bl	8003d84 <xTaskResumeAll>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d189      	bne.n	80034d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80035c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <xQueueReceive+0x1c0>)
 80035c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035ca:	601a      	str	r2, [r3, #0]
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	e780      	b.n	80034d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035d8:	f000 f8a6 	bl	8003728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035dc:	f000 fbd2 	bl	8003d84 <xTaskResumeAll>
 80035e0:	e77a      	b.n	80034d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035e4:	f000 f8a0 	bl	8003728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e8:	f000 fbcc 	bl	8003d84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035ee:	f000 f8ed 	bl	80037cc <prvIsQueueEmpty>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f43f af6f 	beq.w	80034d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3730      	adds	r7, #48	@ 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d14d      	bne.n	80036ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 ff9a 	bl	800456c <xTaskPriorityDisinherit>
 8003638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	e043      	b.n	80036ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d119      	bne.n	800367c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6858      	ldr	r0, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003650:	461a      	mov	r2, r3
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	f001 ffb4 	bl	80055c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d32b      	bcc.n	80036ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e026      	b.n	80036ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68d8      	ldr	r0, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003684:	461a      	mov	r2, r3
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	f001 ff9a 	bl	80055c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	425b      	negs	r3, r3
 8003696:	441a      	add	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d207      	bcs.n	80036b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	425b      	negs	r3, r3
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d105      	bne.n	80036ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036d2:	697b      	ldr	r3, [r7, #20]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d018      	beq.n	8003720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	441a      	add	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d303      	bcc.n	8003710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68d9      	ldr	r1, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	461a      	mov	r2, r3
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f001 ff50 	bl	80055c0 <memcpy>
	}
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003730:	f001 fc2c 	bl	8004f8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800373a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800373c:	e011      	b.n	8003762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3324      	adds	r3, #36	@ 0x24
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fd30 	bl	80041b0 <xTaskRemoveFromEventList>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003756:	f000 fe09 	bl	800436c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	3b01      	subs	r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dce9      	bgt.n	800373e <prvUnlockQueue+0x16>
 800376a:	e000      	b.n	800376e <prvUnlockQueue+0x46>
					break;
 800376c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	22ff      	movs	r2, #255	@ 0xff
 8003772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003776:	f001 fc39 	bl	8004fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800377a:	f001 fc07 	bl	8004f8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003786:	e011      	b.n	80037ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3310      	adds	r3, #16
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fd0b 	bl	80041b0 <xTaskRemoveFromEventList>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037a0:	f000 fde4 	bl	800436c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037a4:	7bbb      	ldrb	r3, [r7, #14]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	dce9      	bgt.n	8003788 <prvUnlockQueue+0x60>
 80037b4:	e000      	b.n	80037b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	22ff      	movs	r2, #255	@ 0xff
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037c0:	f001 fc14 	bl	8004fec <vPortExitCritical>
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037d4:	f001 fbda 	bl	8004f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037e0:	2301      	movs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e001      	b.n	80037ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ea:	f001 fbff 	bl	8004fec <vPortExitCritical>

	return xReturn;
 80037ee:	68fb      	ldr	r3, [r7, #12]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003800:	f001 fbc4 	bl	8004f8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380c:	429a      	cmp	r2, r3
 800380e:	d102      	bne.n	8003816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e001      	b.n	800381a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800381a:	f001 fbe7 	bl	8004fec <vPortExitCritical>

	return xReturn;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e014      	b.n	8003862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003838:	4a0e      	ldr	r2, [pc, #56]	@ (8003874 <vQueueAddToRegistry+0x4c>)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003844:	490b      	ldr	r1, [pc, #44]	@ (8003874 <vQueueAddToRegistry+0x4c>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800384e:	4a09      	ldr	r2, [pc, #36]	@ (8003874 <vQueueAddToRegistry+0x4c>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800385a:	e006      	b.n	800386a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b07      	cmp	r3, #7
 8003866:	d9e7      	bls.n	8003838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	20000878 	.word	0x20000878

08003878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003888:	f001 fb80 	bl	8004f8c <vPortEnterCritical>
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003892:	b25b      	sxtb	r3, r3
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d103      	bne.n	80038a2 <vQueueWaitForMessageRestricted+0x2a>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038a8:	b25b      	sxtb	r3, r3
 80038aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ae:	d103      	bne.n	80038b8 <vQueueWaitForMessageRestricted+0x40>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038b8:	f001 fb98 	bl	8004fec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d106      	bne.n	80038d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3324      	adds	r3, #36	@ 0x24
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 fc43 	bl	8004158 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038d2:	6978      	ldr	r0, [r7, #20]
 80038d4:	f7ff ff28 	bl	8003728 <prvUnlockQueue>
	}
 80038d8:	bf00      	nop
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	@ 0x38
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10b      	bne.n	800390c <xTaskCreateStatic+0x2c>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	623b      	str	r3, [r7, #32]
}
 8003906:	bf00      	nop
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	61fb      	str	r3, [r7, #28]
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	e7fd      	b.n	8003926 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800392a:	235c      	movs	r3, #92	@ 0x5c
 800392c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b5c      	cmp	r3, #92	@ 0x5c
 8003932:	d00b      	beq.n	800394c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	61bb      	str	r3, [r7, #24]
}
 8003946:	bf00      	nop
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800394c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01e      	beq.n	8003992 <xTaskCreateStatic+0xb2>
 8003954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003956:	2b00      	cmp	r3, #0
 8003958:	d01b      	beq.n	8003992 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800395a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003962:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800396c:	2300      	movs	r3, #0
 800396e:	9303      	str	r3, [sp, #12]
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	9302      	str	r3, [sp, #8]
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f850 	bl	8003a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800398a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800398c:	f000 f8de 	bl	8003b4c <prvAddNewTaskToReadyList>
 8003990:	e001      	b.n	8003996 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003996:	697b      	ldr	r3, [r7, #20]
	}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	@ 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08c      	sub	sp, #48	@ 0x30
 80039a4:	af04      	add	r7, sp, #16
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f001 fbeb 	bl	8005190 <pvPortMalloc>
 80039ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00e      	beq.n	80039e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039c2:	205c      	movs	r0, #92	@ 0x5c
 80039c4:	f001 fbe4 	bl	8005190 <pvPortMalloc>
 80039c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80039d6:	e005      	b.n	80039e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039d8:	6978      	ldr	r0, [r7, #20]
 80039da:	f001 fca7 	bl	800532c <vPortFree>
 80039de:	e001      	b.n	80039e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039e0:	2300      	movs	r3, #0
 80039e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	2300      	movs	r3, #0
 80039f6:	9303      	str	r3, [sp, #12]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	9302      	str	r3, [sp, #8]
 80039fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fe:	9301      	str	r3, [sp, #4]
 8003a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68b9      	ldr	r1, [r7, #8]
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f80e 	bl	8003a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a0e:	69f8      	ldr	r0, [r7, #28]
 8003a10:	f000 f89c 	bl	8003b4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a14:	2301      	movs	r3, #1
 8003a16:	61bb      	str	r3, [r7, #24]
 8003a18:	e002      	b.n	8003a20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a20:	69bb      	ldr	r3, [r7, #24]
	}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3720      	adds	r7, #32
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b088      	sub	sp, #32
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	461a      	mov	r2, r3
 8003a42:	21a5      	movs	r1, #165	@ 0xa5
 8003a44:	f001 fd90 	bl	8005568 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a52:	3b01      	subs	r3, #1
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	f023 0307 	bic.w	r3, r3, #7
 8003a60:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00b      	beq.n	8003a84 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	617b      	str	r3, [r7, #20]
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01f      	beq.n	8003aca <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	e012      	b.n	8003ab6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	7819      	ldrb	r1, [r3, #0]
 8003a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3334      	adds	r3, #52	@ 0x34
 8003aa0:	460a      	mov	r2, r1
 8003aa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d006      	beq.n	8003abe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d9e9      	bls.n	8003a90 <prvInitialiseNewTask+0x66>
 8003abc:	e000      	b.n	8003ac0 <prvInitialiseNewTask+0x96>
			{
				break;
 8003abe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ac8:	e003      	b.n	8003ad2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	2b37      	cmp	r3, #55	@ 0x37
 8003ad6:	d901      	bls.n	8003adc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad8:	2337      	movs	r3, #55	@ 0x37
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ade:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ae6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	2200      	movs	r2, #0
 8003aec:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff f92f 	bl	8002d56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	3318      	adds	r3, #24
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff f92a 	bl	8002d56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b16:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	69b8      	ldr	r0, [r7, #24]
 8003b2c:	f001 f93a 	bl	8004da4 <pxPortInitialiseStack>
 8003b30:	4602      	mov	r2, r0
 8003b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b42:	bf00      	nop
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b54:	f001 fa1a 	bl	8004f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b58:	4b2d      	ldr	r3, [pc, #180]	@ (8003c10 <prvAddNewTaskToReadyList+0xc4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c10 <prvAddNewTaskToReadyList+0xc4>)
 8003b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b62:	4b2c      	ldr	r3, [pc, #176]	@ (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b6a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b70:	4b27      	ldr	r3, [pc, #156]	@ (8003c10 <prvAddNewTaskToReadyList+0xc4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d110      	bne.n	8003b9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b78:	f000 fc1c 	bl	80043b4 <prvInitialiseTaskLists>
 8003b7c:	e00d      	b.n	8003b9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b7e:	4b26      	ldr	r3, [pc, #152]	@ (8003c18 <prvAddNewTaskToReadyList+0xcc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b86:	4b23      	ldr	r3, [pc, #140]	@ (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d802      	bhi.n	8003b9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b94:	4a1f      	ldr	r2, [pc, #124]	@ (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b9a:	4b20      	ldr	r3, [pc, #128]	@ (8003c1c <prvAddNewTaskToReadyList+0xd0>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8003c1c <prvAddNewTaskToReadyList+0xd0>)
 8003ba2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c1c <prvAddNewTaskToReadyList+0xd0>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c20 <prvAddNewTaskToReadyList+0xd4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d903      	bls.n	8003bc0 <prvAddNewTaskToReadyList+0x74>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	4a18      	ldr	r2, [pc, #96]	@ (8003c20 <prvAddNewTaskToReadyList+0xd4>)
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4a15      	ldr	r2, [pc, #84]	@ (8003c24 <prvAddNewTaskToReadyList+0xd8>)
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f7ff f8c9 	bl	8002d6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bdc:	f001 fa06 	bl	8004fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003be0:	4b0d      	ldr	r3, [pc, #52]	@ (8003c18 <prvAddNewTaskToReadyList+0xcc>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00e      	beq.n	8003c06 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <prvAddNewTaskToReadyList+0xc8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d207      	bcs.n	8003c06 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c28 <prvAddNewTaskToReadyList+0xdc>)
 8003bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000d8c 	.word	0x20000d8c
 8003c14:	200008b8 	.word	0x200008b8
 8003c18:	20000d98 	.word	0x20000d98
 8003c1c:	20000da8 	.word	0x20000da8
 8003c20:	20000d94 	.word	0x20000d94
 8003c24:	200008bc 	.word	0x200008bc
 8003c28:	e000ed04 	.word	0xe000ed04

08003c2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d018      	beq.n	8003c70 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c3e:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <vTaskDelay+0x64>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00b      	beq.n	8003c5e <vTaskDelay+0x32>
	__asm volatile
 8003c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	60bb      	str	r3, [r7, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	e7fd      	b.n	8003c5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c5e:	f000 f883 	bl	8003d68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c62:	2100      	movs	r1, #0
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fcf1 	bl	800464c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c6a:	f000 f88b 	bl	8003d84 <xTaskResumeAll>
 8003c6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d107      	bne.n	8003c86 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003c76:	4b07      	ldr	r3, [pc, #28]	@ (8003c94 <vTaskDelay+0x68>)
 8003c78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000db4 	.word	0x20000db4
 8003c94:	e000ed04 	.word	0xe000ed04

08003c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	@ 0x28
 8003c9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ca6:	463a      	mov	r2, r7
 8003ca8:	1d39      	adds	r1, r7, #4
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff f800 	bl	8002cb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cb4:	6839      	ldr	r1, [r7, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	9202      	str	r2, [sp, #8]
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	460a      	mov	r2, r1
 8003cc6:	4922      	ldr	r1, [pc, #136]	@ (8003d50 <vTaskStartScheduler+0xb8>)
 8003cc8:	4822      	ldr	r0, [pc, #136]	@ (8003d54 <vTaskStartScheduler+0xbc>)
 8003cca:	f7ff fe09 	bl	80038e0 <xTaskCreateStatic>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4a21      	ldr	r2, [pc, #132]	@ (8003d58 <vTaskStartScheduler+0xc0>)
 8003cd2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cd4:	4b20      	ldr	r3, [pc, #128]	@ (8003d58 <vTaskStartScheduler+0xc0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	e001      	b.n	8003ce6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d102      	bne.n	8003cf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003cec:	f000 fd02 	bl	80046f4 <xTimerCreateTimerTask>
 8003cf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d116      	bne.n	8003d26 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	613b      	str	r3, [r7, #16]
}
 8003d0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d0c:	4b13      	ldr	r3, [pc, #76]	@ (8003d5c <vTaskStartScheduler+0xc4>)
 8003d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d14:	4b12      	ldr	r3, [pc, #72]	@ (8003d60 <vTaskStartScheduler+0xc8>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d1a:	4b12      	ldr	r3, [pc, #72]	@ (8003d64 <vTaskStartScheduler+0xcc>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d20:	f001 f8c2 	bl	8004ea8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d24:	e00f      	b.n	8003d46 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d10b      	bne.n	8003d46 <vTaskStartScheduler+0xae>
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	60fb      	str	r3, [r7, #12]
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	e7fd      	b.n	8003d42 <vTaskStartScheduler+0xaa>
}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	08005668 	.word	0x08005668
 8003d54:	08004385 	.word	0x08004385
 8003d58:	20000db0 	.word	0x20000db0
 8003d5c:	20000dac 	.word	0x20000dac
 8003d60:	20000d98 	.word	0x20000d98
 8003d64:	20000d90 	.word	0x20000d90

08003d68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d6c:	4b04      	ldr	r3, [pc, #16]	@ (8003d80 <vTaskSuspendAll+0x18>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3301      	adds	r3, #1
 8003d72:	4a03      	ldr	r2, [pc, #12]	@ (8003d80 <vTaskSuspendAll+0x18>)
 8003d74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d76:	bf00      	nop
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000db4 	.word	0x20000db4

08003d84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d92:	4b42      	ldr	r3, [pc, #264]	@ (8003e9c <xTaskResumeAll+0x118>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	603b      	str	r3, [r7, #0]
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	e7fd      	b.n	8003dae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003db2:	f001 f8eb 	bl	8004f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003db6:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <xTaskResumeAll+0x118>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4a37      	ldr	r2, [pc, #220]	@ (8003e9c <xTaskResumeAll+0x118>)
 8003dbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc0:	4b36      	ldr	r3, [pc, #216]	@ (8003e9c <xTaskResumeAll+0x118>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d162      	bne.n	8003e8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dc8:	4b35      	ldr	r3, [pc, #212]	@ (8003ea0 <xTaskResumeAll+0x11c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d05e      	beq.n	8003e8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dd0:	e02f      	b.n	8003e32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ea4 <xTaskResumeAll+0x120>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3318      	adds	r3, #24
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff f820 	bl	8002e24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff f81b 	bl	8002e24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df2:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea8 <xTaskResumeAll+0x124>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d903      	bls.n	8003e02 <xTaskResumeAll+0x7e>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfe:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea8 <xTaskResumeAll+0x124>)
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4a27      	ldr	r2, [pc, #156]	@ (8003eac <xTaskResumeAll+0x128>)
 8003e10:	441a      	add	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4619      	mov	r1, r3
 8003e18:	4610      	mov	r0, r2
 8003e1a:	f7fe ffa8 	bl	8002d6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e22:	4b23      	ldr	r3, [pc, #140]	@ (8003eb0 <xTaskResumeAll+0x12c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d302      	bcc.n	8003e32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003e2c:	4b21      	ldr	r3, [pc, #132]	@ (8003eb4 <xTaskResumeAll+0x130>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea4 <xTaskResumeAll+0x120>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1cb      	bne.n	8003dd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e40:	f000 fb56 	bl	80044f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e44:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb8 <xTaskResumeAll+0x134>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e50:	f000 f844 	bl	8003edc <xTaskIncrementTick>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003e5a:	4b16      	ldr	r3, [pc, #88]	@ (8003eb4 <xTaskResumeAll+0x130>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1f1      	bne.n	8003e50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003e6c:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <xTaskResumeAll+0x134>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <xTaskResumeAll+0x130>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003ebc <xTaskResumeAll+0x138>)
 8003e80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e8e:	f001 f8ad 	bl	8004fec <vPortExitCritical>

	return xAlreadyYielded;
 8003e92:	68bb      	ldr	r3, [r7, #8]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000db4 	.word	0x20000db4
 8003ea0:	20000d8c 	.word	0x20000d8c
 8003ea4:	20000d4c 	.word	0x20000d4c
 8003ea8:	20000d94 	.word	0x20000d94
 8003eac:	200008bc 	.word	0x200008bc
 8003eb0:	200008b8 	.word	0x200008b8
 8003eb4:	20000da0 	.word	0x20000da0
 8003eb8:	20000d9c 	.word	0x20000d9c
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ec6:	4b04      	ldr	r3, [pc, #16]	@ (8003ed8 <xTaskGetTickCount+0x18>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ecc:	687b      	ldr	r3, [r7, #4]
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr
 8003ed8:	20000d90 	.word	0x20000d90

08003edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8004024 <xTaskIncrementTick+0x148>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f040 8090 	bne.w	8004010 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8004028 <xTaskIncrementTick+0x14c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8004028 <xTaskIncrementTick+0x14c>)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d121      	bne.n	8003f48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f04:	4b49      	ldr	r3, [pc, #292]	@ (800402c <xTaskIncrementTick+0x150>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	603b      	str	r3, [r7, #0]
}
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <xTaskIncrementTick+0x46>
 8003f26:	4b41      	ldr	r3, [pc, #260]	@ (800402c <xTaskIncrementTick+0x150>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	4b40      	ldr	r3, [pc, #256]	@ (8004030 <xTaskIncrementTick+0x154>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a3e      	ldr	r2, [pc, #248]	@ (800402c <xTaskIncrementTick+0x150>)
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	4a3e      	ldr	r2, [pc, #248]	@ (8004030 <xTaskIncrementTick+0x154>)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004034 <xTaskIncrementTick+0x158>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	4a3c      	ldr	r2, [pc, #240]	@ (8004034 <xTaskIncrementTick+0x158>)
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	f000 fad4 	bl	80044f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f48:	4b3b      	ldr	r3, [pc, #236]	@ (8004038 <xTaskIncrementTick+0x15c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d349      	bcc.n	8003fe6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f52:	4b36      	ldr	r3, [pc, #216]	@ (800402c <xTaskIncrementTick+0x150>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5c:	4b36      	ldr	r3, [pc, #216]	@ (8004038 <xTaskIncrementTick+0x15c>)
 8003f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f62:	601a      	str	r2, [r3, #0]
					break;
 8003f64:	e03f      	b.n	8003fe6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f66:	4b31      	ldr	r3, [pc, #196]	@ (800402c <xTaskIncrementTick+0x150>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d203      	bcs.n	8003f86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004038 <xTaskIncrementTick+0x15c>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f84:	e02f      	b.n	8003fe6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe ff4a 	bl	8002e24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe ff41 	bl	8002e24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fa6:	4b25      	ldr	r3, [pc, #148]	@ (800403c <xTaskIncrementTick+0x160>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d903      	bls.n	8003fb6 <xTaskIncrementTick+0xda>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	4a22      	ldr	r2, [pc, #136]	@ (800403c <xTaskIncrementTick+0x160>)
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8004040 <xTaskIncrementTick+0x164>)
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	3304      	adds	r3, #4
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4610      	mov	r0, r2
 8003fce:	f7fe fece 	bl	8002d6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8004044 <xTaskIncrementTick+0x168>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3b8      	bcc.n	8003f52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe4:	e7b5      	b.n	8003f52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003fe6:	4b17      	ldr	r3, [pc, #92]	@ (8004044 <xTaskIncrementTick+0x168>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fec:	4914      	ldr	r1, [pc, #80]	@ (8004040 <xTaskIncrementTick+0x164>)
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d901      	bls.n	8004002 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004002:	4b11      	ldr	r3, [pc, #68]	@ (8004048 <xTaskIncrementTick+0x16c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d007      	beq.n	800401a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800400a:	2301      	movs	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	e004      	b.n	800401a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004010:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <xTaskIncrementTick+0x170>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3301      	adds	r3, #1
 8004016:	4a0d      	ldr	r2, [pc, #52]	@ (800404c <xTaskIncrementTick+0x170>)
 8004018:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800401a:	697b      	ldr	r3, [r7, #20]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000db4 	.word	0x20000db4
 8004028:	20000d90 	.word	0x20000d90
 800402c:	20000d44 	.word	0x20000d44
 8004030:	20000d48 	.word	0x20000d48
 8004034:	20000da4 	.word	0x20000da4
 8004038:	20000dac 	.word	0x20000dac
 800403c:	20000d94 	.word	0x20000d94
 8004040:	200008bc 	.word	0x200008bc
 8004044:	200008b8 	.word	0x200008b8
 8004048:	20000da0 	.word	0x20000da0
 800404c:	20000d9c 	.word	0x20000d9c

08004050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004056:	4b28      	ldr	r3, [pc, #160]	@ (80040f8 <vTaskSwitchContext+0xa8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800405e:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <vTaskSwitchContext+0xac>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004064:	e042      	b.n	80040ec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004066:	4b25      	ldr	r3, [pc, #148]	@ (80040fc <vTaskSwitchContext+0xac>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800406c:	4b24      	ldr	r3, [pc, #144]	@ (8004100 <vTaskSwitchContext+0xb0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
 8004072:	e011      	b.n	8004098 <vTaskSwitchContext+0x48>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <vTaskSwitchContext+0x42>
	__asm volatile
 800407a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	607b      	str	r3, [r7, #4]
}
 800408c:	bf00      	nop
 800408e:	bf00      	nop
 8004090:	e7fd      	b.n	800408e <vTaskSwitchContext+0x3e>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	3b01      	subs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	491a      	ldr	r1, [pc, #104]	@ (8004104 <vTaskSwitchContext+0xb4>)
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0e3      	beq.n	8004074 <vTaskSwitchContext+0x24>
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a13      	ldr	r2, [pc, #76]	@ (8004104 <vTaskSwitchContext+0xb4>)
 80040b8:	4413      	add	r3, r2
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3308      	adds	r3, #8
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d104      	bne.n	80040dc <vTaskSwitchContext+0x8c>
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4a09      	ldr	r2, [pc, #36]	@ (8004108 <vTaskSwitchContext+0xb8>)
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4a06      	ldr	r2, [pc, #24]	@ (8004100 <vTaskSwitchContext+0xb0>)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000db4 	.word	0x20000db4
 80040fc:	20000da0 	.word	0x20000da0
 8004100:	20000d94 	.word	0x20000d94
 8004104:	200008bc 	.word	0x200008bc
 8004108:	200008b8 	.word	0x200008b8

0800410c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	60fb      	str	r3, [r7, #12]
}
 800412e:	bf00      	nop
 8004130:	bf00      	nop
 8004132:	e7fd      	b.n	8004130 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004134:	4b07      	ldr	r3, [pc, #28]	@ (8004154 <vTaskPlaceOnEventList+0x48>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3318      	adds	r3, #24
 800413a:	4619      	mov	r1, r3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f7fe fe39 	bl	8002db4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004142:	2101      	movs	r1, #1
 8004144:	6838      	ldr	r0, [r7, #0]
 8004146:	f000 fa81 	bl	800464c <prvAddCurrentTaskToDelayedList>
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200008b8 	.word	0x200008b8

08004158 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10b      	bne.n	8004182 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	617b      	str	r3, [r7, #20]
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004182:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <vTaskPlaceOnEventListRestricted+0x54>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3318      	adds	r3, #24
 8004188:	4619      	mov	r1, r3
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7fe fdef 	bl	8002d6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004196:	f04f 33ff 	mov.w	r3, #4294967295
 800419a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	68b8      	ldr	r0, [r7, #8]
 80041a0:	f000 fa54 	bl	800464c <prvAddCurrentTaskToDelayedList>
	}
 80041a4:	bf00      	nop
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	200008b8 	.word	0x200008b8

080041b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	60fb      	str	r3, [r7, #12]
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	e7fd      	b.n	80041da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	3318      	adds	r3, #24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fe fe1e 	bl	8002e24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004260 <xTaskRemoveFromEventList+0xb0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11d      	bne.n	800422c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fe15 	bl	8002e24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fe:	4b19      	ldr	r3, [pc, #100]	@ (8004264 <xTaskRemoveFromEventList+0xb4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d903      	bls.n	800420e <xTaskRemoveFromEventList+0x5e>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420a:	4a16      	ldr	r2, [pc, #88]	@ (8004264 <xTaskRemoveFromEventList+0xb4>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4a13      	ldr	r2, [pc, #76]	@ (8004268 <xTaskRemoveFromEventList+0xb8>)
 800421c:	441a      	add	r2, r3
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe fda2 	bl	8002d6e <vListInsertEnd>
 800422a:	e005      	b.n	8004238 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	3318      	adds	r3, #24
 8004230:	4619      	mov	r1, r3
 8004232:	480e      	ldr	r0, [pc, #56]	@ (800426c <xTaskRemoveFromEventList+0xbc>)
 8004234:	f7fe fd9b 	bl	8002d6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800423c:	4b0c      	ldr	r3, [pc, #48]	@ (8004270 <xTaskRemoveFromEventList+0xc0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	429a      	cmp	r2, r3
 8004244:	d905      	bls.n	8004252 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800424a:	4b0a      	ldr	r3, [pc, #40]	@ (8004274 <xTaskRemoveFromEventList+0xc4>)
 800424c:	2201      	movs	r2, #1
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	e001      	b.n	8004256 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004256:	697b      	ldr	r3, [r7, #20]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000db4 	.word	0x20000db4
 8004264:	20000d94 	.word	0x20000d94
 8004268:	200008bc 	.word	0x200008bc
 800426c:	20000d4c 	.word	0x20000d4c
 8004270:	200008b8 	.word	0x200008b8
 8004274:	20000da0 	.word	0x20000da0

08004278 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004280:	4b06      	ldr	r3, [pc, #24]	@ (800429c <vTaskInternalSetTimeOutState+0x24>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004288:	4b05      	ldr	r3, [pc, #20]	@ (80042a0 <vTaskInternalSetTimeOutState+0x28>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	605a      	str	r2, [r3, #4]
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000da4 	.word	0x20000da4
 80042a0:	20000d90 	.word	0x20000d90

080042a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10b      	bne.n	80042cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80042b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b8:	f383 8811 	msr	BASEPRI, r3
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	f3bf 8f4f 	dsb	sy
 80042c4:	613b      	str	r3, [r7, #16]
}
 80042c6:	bf00      	nop
 80042c8:	bf00      	nop
 80042ca:	e7fd      	b.n	80042c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	60fb      	str	r3, [r7, #12]
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	e7fd      	b.n	80042e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80042ea:	f000 fe4f 	bl	8004f8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004364 <xTaskCheckForTimeOut+0xc0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d102      	bne.n	800430e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
 800430c:	e023      	b.n	8004356 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4b15      	ldr	r3, [pc, #84]	@ (8004368 <xTaskCheckForTimeOut+0xc4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d007      	beq.n	800432a <xTaskCheckForTimeOut+0x86>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004324:	2301      	movs	r3, #1
 8004326:	61fb      	str	r3, [r7, #28]
 8004328:	e015      	b.n	8004356 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	429a      	cmp	r2, r3
 8004332:	d20b      	bcs.n	800434c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad2      	subs	r2, r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7ff ff99 	bl	8004278 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e004      	b.n	8004356 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004352:	2301      	movs	r3, #1
 8004354:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004356:	f000 fe49 	bl	8004fec <vPortExitCritical>

	return xReturn;
 800435a:	69fb      	ldr	r3, [r7, #28]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000d90 	.word	0x20000d90
 8004368:	20000da4 	.word	0x20000da4

0800436c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004370:	4b03      	ldr	r3, [pc, #12]	@ (8004380 <vTaskMissedYield+0x14>)
 8004372:	2201      	movs	r2, #1
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000da0 	.word	0x20000da0

08004384 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800438c:	f000 f852 	bl	8004434 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004390:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <prvIdleTask+0x28>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d9f9      	bls.n	800438c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <prvIdleTask+0x2c>)
 800439a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043a8:	e7f0      	b.n	800438c <prvIdleTask+0x8>
 80043aa:	bf00      	nop
 80043ac:	200008bc 	.word	0x200008bc
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	e00c      	b.n	80043da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4a12      	ldr	r2, [pc, #72]	@ (8004414 <prvInitialiseTaskLists+0x60>)
 80043cc:	4413      	add	r3, r2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fca2 	bl	8002d18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3301      	adds	r3, #1
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b37      	cmp	r3, #55	@ 0x37
 80043de:	d9ef      	bls.n	80043c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043e0:	480d      	ldr	r0, [pc, #52]	@ (8004418 <prvInitialiseTaskLists+0x64>)
 80043e2:	f7fe fc99 	bl	8002d18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043e6:	480d      	ldr	r0, [pc, #52]	@ (800441c <prvInitialiseTaskLists+0x68>)
 80043e8:	f7fe fc96 	bl	8002d18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043ec:	480c      	ldr	r0, [pc, #48]	@ (8004420 <prvInitialiseTaskLists+0x6c>)
 80043ee:	f7fe fc93 	bl	8002d18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043f2:	480c      	ldr	r0, [pc, #48]	@ (8004424 <prvInitialiseTaskLists+0x70>)
 80043f4:	f7fe fc90 	bl	8002d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043f8:	480b      	ldr	r0, [pc, #44]	@ (8004428 <prvInitialiseTaskLists+0x74>)
 80043fa:	f7fe fc8d 	bl	8002d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043fe:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <prvInitialiseTaskLists+0x78>)
 8004400:	4a05      	ldr	r2, [pc, #20]	@ (8004418 <prvInitialiseTaskLists+0x64>)
 8004402:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004404:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <prvInitialiseTaskLists+0x7c>)
 8004406:	4a05      	ldr	r2, [pc, #20]	@ (800441c <prvInitialiseTaskLists+0x68>)
 8004408:	601a      	str	r2, [r3, #0]
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	200008bc 	.word	0x200008bc
 8004418:	20000d1c 	.word	0x20000d1c
 800441c:	20000d30 	.word	0x20000d30
 8004420:	20000d4c 	.word	0x20000d4c
 8004424:	20000d60 	.word	0x20000d60
 8004428:	20000d78 	.word	0x20000d78
 800442c:	20000d44 	.word	0x20000d44
 8004430:	20000d48 	.word	0x20000d48

08004434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800443a:	e019      	b.n	8004470 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800443c:	f000 fda6 	bl	8004f8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004440:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <prvCheckTasksWaitingTermination+0x50>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3304      	adds	r3, #4
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fce9 	bl	8002e24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004452:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <prvCheckTasksWaitingTermination+0x54>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3b01      	subs	r3, #1
 8004458:	4a0b      	ldr	r2, [pc, #44]	@ (8004488 <prvCheckTasksWaitingTermination+0x54>)
 800445a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800445c:	4b0b      	ldr	r3, [pc, #44]	@ (800448c <prvCheckTasksWaitingTermination+0x58>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3b01      	subs	r3, #1
 8004462:	4a0a      	ldr	r2, [pc, #40]	@ (800448c <prvCheckTasksWaitingTermination+0x58>)
 8004464:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004466:	f000 fdc1 	bl	8004fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f810 	bl	8004490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004470:	4b06      	ldr	r3, [pc, #24]	@ (800448c <prvCheckTasksWaitingTermination+0x58>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e1      	bne.n	800443c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000d60 	.word	0x20000d60
 8004488:	20000d8c 	.word	0x20000d8c
 800448c:	20000d74 	.word	0x20000d74

08004490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d108      	bne.n	80044b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 ff40 	bl	800532c <vPortFree>
				vPortFree( pxTCB );
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 ff3d 	bl	800532c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044b2:	e019      	b.n	80044e8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d103      	bne.n	80044c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 ff34 	bl	800532c <vPortFree>
	}
 80044c4:	e010      	b.n	80044e8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d00b      	beq.n	80044e8 <prvDeleteTCB+0x58>
	__asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	60fb      	str	r3, [r7, #12]
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <prvDeleteTCB+0x54>
	}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <prvResetNextTaskUnblockTime+0x38>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004500:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <prvResetNextTaskUnblockTime+0x3c>)
 8004502:	f04f 32ff 	mov.w	r2, #4294967295
 8004506:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004508:	e008      	b.n	800451c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800450a:	4b07      	ldr	r3, [pc, #28]	@ (8004528 <prvResetNextTaskUnblockTime+0x38>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	4a04      	ldr	r2, [pc, #16]	@ (800452c <prvResetNextTaskUnblockTime+0x3c>)
 800451a:	6013      	str	r3, [r2, #0]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000d44 	.word	0x20000d44
 800452c:	20000dac 	.word	0x20000dac

08004530 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004536:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <xTaskGetSchedulerState+0x34>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d102      	bne.n	8004544 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800453e:	2301      	movs	r3, #1
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	e008      	b.n	8004556 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <xTaskGetSchedulerState+0x38>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800454c:	2302      	movs	r3, #2
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	e001      	b.n	8004556 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004552:	2300      	movs	r3, #0
 8004554:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004556:	687b      	ldr	r3, [r7, #4]
	}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000d98 	.word	0x20000d98
 8004568:	20000db4 	.word	0x20000db4

0800456c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d058      	beq.n	8004634 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004582:	4b2f      	ldr	r3, [pc, #188]	@ (8004640 <xTaskPriorityDisinherit+0xd4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	429a      	cmp	r2, r3
 800458a:	d00b      	beq.n	80045a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	60fb      	str	r3, [r7, #12]
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	60bb      	str	r3, [r7, #8]
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c8:	1e5a      	subs	r2, r3, #1
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d02c      	beq.n	8004634 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d128      	bne.n	8004634 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fc1c 	bl	8002e24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004604:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <xTaskPriorityDisinherit+0xd8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d903      	bls.n	8004614 <xTaskPriorityDisinherit+0xa8>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	4a0c      	ldr	r2, [pc, #48]	@ (8004644 <xTaskPriorityDisinherit+0xd8>)
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4a09      	ldr	r2, [pc, #36]	@ (8004648 <xTaskPriorityDisinherit+0xdc>)
 8004622:	441a      	add	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe fb9f 	bl	8002d6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004630:	2301      	movs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004634:	697b      	ldr	r3, [r7, #20]
	}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200008b8 	.word	0x200008b8
 8004644:	20000d94 	.word	0x20000d94
 8004648:	200008bc 	.word	0x200008bc

0800464c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004656:	4b21      	ldr	r3, [pc, #132]	@ (80046dc <prvAddCurrentTaskToDelayedList+0x90>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800465c:	4b20      	ldr	r3, [pc, #128]	@ (80046e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	3304      	adds	r3, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fbde 	bl	8002e24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466e:	d10a      	bne.n	8004686 <prvAddCurrentTaskToDelayedList+0x3a>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d007      	beq.n	8004686 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004676:	4b1a      	ldr	r3, [pc, #104]	@ (80046e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4819      	ldr	r0, [pc, #100]	@ (80046e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004680:	f7fe fb75 	bl	8002d6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004684:	e026      	b.n	80046d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4413      	add	r3, r2
 800468c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800468e:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	429a      	cmp	r2, r3
 800469c:	d209      	bcs.n	80046b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800469e:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f7fe fb82 	bl	8002db4 <vListInsert>
}
 80046b0:	e010      	b.n	80046d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b2:	4b0e      	ldr	r3, [pc, #56]	@ (80046ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b0a      	ldr	r3, [pc, #40]	@ (80046e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4610      	mov	r0, r2
 80046c0:	f7fe fb78 	bl	8002db4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d202      	bcs.n	80046d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046ce:	4a08      	ldr	r2, [pc, #32]	@ (80046f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	6013      	str	r3, [r2, #0]
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000d90 	.word	0x20000d90
 80046e0:	200008b8 	.word	0x200008b8
 80046e4:	20000d78 	.word	0x20000d78
 80046e8:	20000d48 	.word	0x20000d48
 80046ec:	20000d44 	.word	0x20000d44
 80046f0:	20000dac 	.word	0x20000dac

080046f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	@ 0x28
 80046f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80046fe:	f000 fb11 	bl	8004d24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004702:	4b1d      	ldr	r3, [pc, #116]	@ (8004778 <xTimerCreateTimerTask+0x84>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d021      	beq.n	800474e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004712:	1d3a      	adds	r2, r7, #4
 8004714:	f107 0108 	add.w	r1, r7, #8
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	4618      	mov	r0, r3
 800471e:	f7fe fae1 	bl	8002ce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	9202      	str	r2, [sp, #8]
 800472a:	9301      	str	r3, [sp, #4]
 800472c:	2302      	movs	r3, #2
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	2300      	movs	r3, #0
 8004732:	460a      	mov	r2, r1
 8004734:	4911      	ldr	r1, [pc, #68]	@ (800477c <xTimerCreateTimerTask+0x88>)
 8004736:	4812      	ldr	r0, [pc, #72]	@ (8004780 <xTimerCreateTimerTask+0x8c>)
 8004738:	f7ff f8d2 	bl	80038e0 <xTaskCreateStatic>
 800473c:	4603      	mov	r3, r0
 800473e:	4a11      	ldr	r2, [pc, #68]	@ (8004784 <xTimerCreateTimerTask+0x90>)
 8004740:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004742:	4b10      	ldr	r3, [pc, #64]	@ (8004784 <xTimerCreateTimerTask+0x90>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800474a:	2301      	movs	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	613b      	str	r3, [r7, #16]
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	e7fd      	b.n	8004768 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800476c:	697b      	ldr	r3, [r7, #20]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000de8 	.word	0x20000de8
 800477c:	08005670 	.word	0x08005670
 8004780:	080048c1 	.word	0x080048c1
 8004784:	20000dec 	.word	0x20000dec

08004788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10b      	bne.n	80047b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	623b      	str	r3, [r7, #32]
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047b8:	4b19      	ldr	r3, [pc, #100]	@ (8004820 <xTimerGenericCommand+0x98>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02a      	beq.n	8004816 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	dc18      	bgt.n	8004804 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047d2:	f7ff fead 	bl	8004530 <xTaskGetSchedulerState>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d109      	bne.n	80047f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047dc:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <xTimerGenericCommand+0x98>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	f107 0110 	add.w	r1, r7, #16
 80047e4:	2300      	movs	r3, #0
 80047e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e8:	f7fe fc8c 	bl	8003104 <xQueueGenericSend>
 80047ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80047ee:	e012      	b.n	8004816 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <xTimerGenericCommand+0x98>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	f107 0110 	add.w	r1, r7, #16
 80047f8:	2300      	movs	r3, #0
 80047fa:	2200      	movs	r2, #0
 80047fc:	f7fe fc82 	bl	8003104 <xQueueGenericSend>
 8004800:	6278      	str	r0, [r7, #36]	@ 0x24
 8004802:	e008      	b.n	8004816 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004804:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <xTimerGenericCommand+0x98>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	f107 0110 	add.w	r1, r7, #16
 800480c:	2300      	movs	r3, #0
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	f7fe fd7a 	bl	8003308 <xQueueGenericSendFromISR>
 8004814:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004818:	4618      	mov	r0, r3
 800481a:	3728      	adds	r7, #40	@ 0x28
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	20000de8 	.word	0x20000de8

08004824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af02      	add	r7, sp, #8
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800482e:	4b23      	ldr	r3, [pc, #140]	@ (80048bc <prvProcessExpiredTimer+0x98>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3304      	adds	r3, #4
 800483c:	4618      	mov	r0, r3
 800483e:	f7fe faf1 	bl	8002e24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d023      	beq.n	8004898 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	18d1      	adds	r1, r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	6978      	ldr	r0, [r7, #20]
 800485e:	f000 f8d3 	bl	8004a08 <prvInsertTimerInActiveList>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d020      	beq.n	80048aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004868:	2300      	movs	r3, #0
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2300      	movs	r3, #0
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	2100      	movs	r1, #0
 8004872:	6978      	ldr	r0, [r7, #20]
 8004874:	f7ff ff88 	bl	8004788 <xTimerGenericCommand>
 8004878:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d114      	bne.n	80048aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	60fb      	str	r3, [r7, #12]
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800489e:	f023 0301 	bic.w	r3, r3, #1
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	6978      	ldr	r0, [r7, #20]
 80048b0:	4798      	blx	r3
}
 80048b2:	bf00      	nop
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000de0 	.word	0x20000de0

080048c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048c8:	f107 0308 	add.w	r3, r7, #8
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f859 	bl	8004984 <prvGetNextExpireTime>
 80048d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4619      	mov	r1, r3
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f805 	bl	80048e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048de:	f000 f8d5 	bl	8004a8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048e2:	bf00      	nop
 80048e4:	e7f0      	b.n	80048c8 <prvTimerTask+0x8>
	...

080048e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80048f2:	f7ff fa39 	bl	8003d68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048f6:	f107 0308 	add.w	r3, r7, #8
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 f864 	bl	80049c8 <prvSampleTimeNow>
 8004900:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d130      	bne.n	800496a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <prvProcessTimerOrBlockTask+0x3c>
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	429a      	cmp	r2, r3
 8004914:	d806      	bhi.n	8004924 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004916:	f7ff fa35 	bl	8003d84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff81 	bl	8004824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004922:	e024      	b.n	800496e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800492a:	4b13      	ldr	r3, [pc, #76]	@ (8004978 <prvProcessTimerOrBlockTask+0x90>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <prvProcessTimerOrBlockTask+0x50>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <prvProcessTimerOrBlockTask+0x52>
 8004938:	2300      	movs	r3, #0
 800493a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800493c:	4b0f      	ldr	r3, [pc, #60]	@ (800497c <prvProcessTimerOrBlockTask+0x94>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	4619      	mov	r1, r3
 800494a:	f7fe ff95 	bl	8003878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800494e:	f7ff fa19 	bl	8003d84 <xTaskResumeAll>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004958:	4b09      	ldr	r3, [pc, #36]	@ (8004980 <prvProcessTimerOrBlockTask+0x98>)
 800495a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	f3bf 8f6f 	isb	sy
}
 8004968:	e001      	b.n	800496e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800496a:	f7ff fa0b 	bl	8003d84 <xTaskResumeAll>
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000de4 	.word	0x20000de4
 800497c:	20000de8 	.word	0x20000de8
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800498c:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <prvGetNextExpireTime+0x40>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <prvGetNextExpireTime+0x16>
 8004996:	2201      	movs	r2, #1
 8004998:	e000      	b.n	800499c <prvGetNextExpireTime+0x18>
 800499a:	2200      	movs	r2, #0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049a8:	4b06      	ldr	r3, [pc, #24]	@ (80049c4 <prvGetNextExpireTime+0x40>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e001      	b.n	80049b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049b8:	68fb      	ldr	r3, [r7, #12]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	20000de0 	.word	0x20000de0

080049c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049d0:	f7ff fa76 	bl	8003ec0 <xTaskGetTickCount>
 80049d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <prvSampleTimeNow+0x3c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d205      	bcs.n	80049ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049e0:	f000 f93a 	bl	8004c58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e002      	b.n	80049f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80049f2:	4a04      	ldr	r2, [pc, #16]	@ (8004a04 <prvSampleTimeNow+0x3c>)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80049f8:	68fb      	ldr	r3, [r7, #12]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	20000df0 	.word	0x20000df0

08004a08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d812      	bhi.n	8004a54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d302      	bcc.n	8004a42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e01b      	b.n	8004a7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a42:	4b10      	ldr	r3, [pc, #64]	@ (8004a84 <prvInsertTimerInActiveList+0x7c>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f7fe f9b1 	bl	8002db4 <vListInsert>
 8004a52:	e012      	b.n	8004a7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d206      	bcs.n	8004a6a <prvInsertTimerInActiveList+0x62>
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d302      	bcc.n	8004a6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e007      	b.n	8004a7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a6a:	4b07      	ldr	r3, [pc, #28]	@ (8004a88 <prvInsertTimerInActiveList+0x80>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f7fe f99d 	bl	8002db4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a7a:	697b      	ldr	r3, [r7, #20]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000de4 	.word	0x20000de4
 8004a88:	20000de0 	.word	0x20000de0

08004a8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08e      	sub	sp, #56	@ 0x38
 8004a90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a92:	e0ce      	b.n	8004c32 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da19      	bge.n	8004ace <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a9a:	1d3b      	adds	r3, r7, #4
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10b      	bne.n	8004abe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	f383 8811 	msr	BASEPRI, r3
 8004aae:	f3bf 8f6f 	isb	sy
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	61fb      	str	r3, [r7, #28]
}
 8004ab8:	bf00      	nop
 8004aba:	bf00      	nop
 8004abc:	e7fd      	b.n	8004aba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac4:	6850      	ldr	r0, [r2, #4]
 8004ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac8:	6892      	ldr	r2, [r2, #8]
 8004aca:	4611      	mov	r1, r2
 8004acc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f2c0 80ae 	blt.w	8004c32 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe f99c 	bl	8002e24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aec:	463b      	mov	r3, r7
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ff6a 	bl	80049c8 <prvSampleTimeNow>
 8004af4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	f200 8097 	bhi.w	8004c2c <prvProcessReceivedCommands+0x1a0>
 8004afe:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <prvProcessReceivedCommands+0x78>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b2d 	.word	0x08004b2d
 8004b10:	08004ba3 	.word	0x08004ba3
 8004b14:	08004bb7 	.word	0x08004bb7
 8004b18:	08004c03 	.word	0x08004c03
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b2d 	.word	0x08004b2d
 8004b24:	08004ba3 	.word	0x08004ba3
 8004b28:	08004bb7 	.word	0x08004bb7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	18d1      	adds	r1, r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b4c:	f7ff ff5c 	bl	8004a08 <prvInsertTimerInActiveList>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d06c      	beq.n	8004c30 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d061      	beq.n	8004c30 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	441a      	add	r2, r3
 8004b74:	2300      	movs	r3, #0
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b7e:	f7ff fe03 	bl	8004788 <xTimerGenericCommand>
 8004b82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d152      	bne.n	8004c30 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	61bb      	str	r3, [r7, #24]
}
 8004b9c:	bf00      	nop
 8004b9e:	bf00      	nop
 8004ba0:	e7fd      	b.n	8004b9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004bb4:	e03d      	b.n	8004c32 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10b      	bne.n	8004bee <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bda:	f383 8811 	msr	BASEPRI, r3
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f3bf 8f4f 	dsb	sy
 8004be6:	617b      	str	r3, [r7, #20]
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	e7fd      	b.n	8004bea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf4:	18d1      	adds	r1, r2, r3
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bfc:	f7ff ff04 	bl	8004a08 <prvInsertTimerInActiveList>
					break;
 8004c00:	e017      	b.n	8004c32 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d103      	bne.n	8004c18 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c12:	f000 fb8b 	bl	800532c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c16:	e00c      	b.n	8004c32 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c2a:	e002      	b.n	8004c32 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004c2c:	bf00      	nop
 8004c2e:	e000      	b.n	8004c32 <prvProcessReceivedCommands+0x1a6>
					break;
 8004c30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c32:	4b08      	ldr	r3, [pc, #32]	@ (8004c54 <prvProcessReceivedCommands+0x1c8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1d39      	adds	r1, r7, #4
 8004c38:	2200      	movs	r2, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fc02 	bl	8003444 <xQueueReceive>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f47f af26 	bne.w	8004a94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	3730      	adds	r7, #48	@ 0x30
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000de8 	.word	0x20000de8

08004c58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c5e:	e049      	b.n	8004cf4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c60:	4b2e      	ldr	r3, [pc, #184]	@ (8004d1c <prvSwitchTimerLists+0xc4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004d1c <prvSwitchTimerLists+0xc4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3304      	adds	r3, #4
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7fe f8d3 	bl	8002e24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02f      	beq.n	8004cf4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90e      	bls.n	8004cc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d1c <prvSwitchTimerLists+0xc4>)
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	f7fe f879 	bl	8002db4 <vListInsert>
 8004cc2:	e017      	b.n	8004cf4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff fd5a 	bl	8004788 <xTimerGenericCommand>
 8004cd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	603b      	str	r3, [r7, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cf4:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <prvSwitchTimerLists+0xc4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1b0      	bne.n	8004c60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004cfe:	4b07      	ldr	r3, [pc, #28]	@ (8004d1c <prvSwitchTimerLists+0xc4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d04:	4b06      	ldr	r3, [pc, #24]	@ (8004d20 <prvSwitchTimerLists+0xc8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a04      	ldr	r2, [pc, #16]	@ (8004d1c <prvSwitchTimerLists+0xc4>)
 8004d0a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d0c:	4a04      	ldr	r2, [pc, #16]	@ (8004d20 <prvSwitchTimerLists+0xc8>)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6013      	str	r3, [r2, #0]
}
 8004d12:	bf00      	nop
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000de0 	.word	0x20000de0
 8004d20:	20000de4 	.word	0x20000de4

08004d24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d2a:	f000 f92f 	bl	8004f8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d2e:	4b15      	ldr	r3, [pc, #84]	@ (8004d84 <prvCheckForValidListAndQueue+0x60>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d120      	bne.n	8004d78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d36:	4814      	ldr	r0, [pc, #80]	@ (8004d88 <prvCheckForValidListAndQueue+0x64>)
 8004d38:	f7fd ffee 	bl	8002d18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d3c:	4813      	ldr	r0, [pc, #76]	@ (8004d8c <prvCheckForValidListAndQueue+0x68>)
 8004d3e:	f7fd ffeb 	bl	8002d18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d42:	4b13      	ldr	r3, [pc, #76]	@ (8004d90 <prvCheckForValidListAndQueue+0x6c>)
 8004d44:	4a10      	ldr	r2, [pc, #64]	@ (8004d88 <prvCheckForValidListAndQueue+0x64>)
 8004d46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d48:	4b12      	ldr	r3, [pc, #72]	@ (8004d94 <prvCheckForValidListAndQueue+0x70>)
 8004d4a:	4a10      	ldr	r2, [pc, #64]	@ (8004d8c <prvCheckForValidListAndQueue+0x68>)
 8004d4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d4e:	2300      	movs	r3, #0
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4b11      	ldr	r3, [pc, #68]	@ (8004d98 <prvCheckForValidListAndQueue+0x74>)
 8004d54:	4a11      	ldr	r2, [pc, #68]	@ (8004d9c <prvCheckForValidListAndQueue+0x78>)
 8004d56:	2110      	movs	r1, #16
 8004d58:	200a      	movs	r0, #10
 8004d5a:	f7fe f8f7 	bl	8002f4c <xQueueGenericCreateStatic>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	4a08      	ldr	r2, [pc, #32]	@ (8004d84 <prvCheckForValidListAndQueue+0x60>)
 8004d62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d64:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <prvCheckForValidListAndQueue+0x60>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d6c:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <prvCheckForValidListAndQueue+0x60>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	490b      	ldr	r1, [pc, #44]	@ (8004da0 <prvCheckForValidListAndQueue+0x7c>)
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe fd58 	bl	8003828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d78:	f000 f938 	bl	8004fec <vPortExitCritical>
}
 8004d7c:	bf00      	nop
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000de8 	.word	0x20000de8
 8004d88:	20000db8 	.word	0x20000db8
 8004d8c:	20000dcc 	.word	0x20000dcc
 8004d90:	20000de0 	.word	0x20000de0
 8004d94:	20000de4 	.word	0x20000de4
 8004d98:	20000e94 	.word	0x20000e94
 8004d9c:	20000df4 	.word	0x20000df4
 8004da0:	08005678 	.word	0x08005678

08004da4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	3b04      	subs	r3, #4
 8004db4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3b04      	subs	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f023 0201 	bic.w	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	3b04      	subs	r3, #4
 8004dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004dd4:	4a08      	ldr	r2, [pc, #32]	@ (8004df8 <pxPortInitialiseStack+0x54>)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3b14      	subs	r3, #20
 8004dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3b20      	subs	r3, #32
 8004dea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dec:	68fb      	ldr	r3, [r7, #12]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bc80      	pop	{r7}
 8004df6:	4770      	bx	lr
 8004df8:	08004dfd 	.word	0x08004dfd

08004dfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e06:	4b12      	ldr	r3, [pc, #72]	@ (8004e50 <prvTaskExitError+0x54>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0e:	d00b      	beq.n	8004e28 <prvTaskExitError+0x2c>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
}
 8004e22:	bf00      	nop
 8004e24:	bf00      	nop
 8004e26:	e7fd      	b.n	8004e24 <prvTaskExitError+0x28>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60bb      	str	r3, [r7, #8]
}
 8004e3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e3c:	bf00      	nop
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0fc      	beq.n	8004e3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr
 8004e50:	2000000c 	.word	0x2000000c
	...

08004e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e60:	4b07      	ldr	r3, [pc, #28]	@ (8004e80 <pxCurrentTCBConst2>)
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	6808      	ldr	r0, [r1, #0]
 8004e66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e6a:	f380 8809 	msr	PSP, r0
 8004e6e:	f3bf 8f6f 	isb	sy
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8811 	msr	BASEPRI, r0
 8004e7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e7e:	4770      	bx	lr

08004e80 <pxCurrentTCBConst2>:
 8004e80:	200008b8 	.word	0x200008b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004e88:	4806      	ldr	r0, [pc, #24]	@ (8004ea4 <prvPortStartFirstTask+0x1c>)
 8004e8a:	6800      	ldr	r0, [r0, #0]
 8004e8c:	6800      	ldr	r0, [r0, #0]
 8004e8e:	f380 8808 	msr	MSP, r0
 8004e92:	b662      	cpsie	i
 8004e94:	b661      	cpsie	f
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	df00      	svc	0
 8004ea0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ea2:	bf00      	nop
 8004ea4:	e000ed08 	.word	0xe000ed08

08004ea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004eae:	4b32      	ldr	r3, [pc, #200]	@ (8004f78 <xPortStartScheduler+0xd0>)
 8004eb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	22ff      	movs	r2, #255	@ 0xff
 8004ebe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f7c <xPortStartScheduler+0xd4>)
 8004ed4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f80 <xPortStartScheduler+0xd8>)
 8004ed8:	2207      	movs	r2, #7
 8004eda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004edc:	e009      	b.n	8004ef2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004ede:	4b28      	ldr	r3, [pc, #160]	@ (8004f80 <xPortStartScheduler+0xd8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	4a26      	ldr	r2, [pc, #152]	@ (8004f80 <xPortStartScheduler+0xd8>)
 8004ee6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efa:	2b80      	cmp	r3, #128	@ 0x80
 8004efc:	d0ef      	beq.n	8004ede <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004efe:	4b20      	ldr	r3, [pc, #128]	@ (8004f80 <xPortStartScheduler+0xd8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1c3 0307 	rsb	r3, r3, #7
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d00b      	beq.n	8004f22 <xPortStartScheduler+0x7a>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	60bb      	str	r3, [r7, #8]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f22:	4b17      	ldr	r3, [pc, #92]	@ (8004f80 <xPortStartScheduler+0xd8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	4a15      	ldr	r2, [pc, #84]	@ (8004f80 <xPortStartScheduler+0xd8>)
 8004f2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f2c:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <xPortStartScheduler+0xd8>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f34:	4a12      	ldr	r2, [pc, #72]	@ (8004f80 <xPortStartScheduler+0xd8>)
 8004f36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f40:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <xPortStartScheduler+0xdc>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a0f      	ldr	r2, [pc, #60]	@ (8004f84 <xPortStartScheduler+0xdc>)
 8004f46:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f84 <xPortStartScheduler+0xdc>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0c      	ldr	r2, [pc, #48]	@ (8004f84 <xPortStartScheduler+0xdc>)
 8004f52:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f58:	f000 f8b8 	bl	80050cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <xPortStartScheduler+0xe0>)
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f62:	f7ff ff91 	bl	8004e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f66:	f7ff f873 	bl	8004050 <vTaskSwitchContext>
	prvTaskExitError();
 8004f6a:	f7ff ff47 	bl	8004dfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	e000e400 	.word	0xe000e400
 8004f7c:	20000ee4 	.word	0x20000ee4
 8004f80:	20000ee8 	.word	0x20000ee8
 8004f84:	e000ed20 	.word	0xe000ed20
 8004f88:	2000000c 	.word	0x2000000c

08004f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	607b      	str	r3, [r7, #4]
}
 8004fa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe4 <vPortEnterCritical+0x58>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3301      	adds	r3, #1
 8004fac:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe4 <vPortEnterCritical+0x58>)
 8004fae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <vPortEnterCritical+0x58>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d110      	bne.n	8004fda <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <vPortEnterCritical+0x5c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <vPortEnterCritical+0x4e>
	__asm volatile
 8004fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	603b      	str	r3, [r7, #0]
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop
 8004fd8:	e7fd      	b.n	8004fd6 <vPortEnterCritical+0x4a>
	}
}
 8004fda:	bf00      	nop
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	2000000c 	.word	0x2000000c
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ff2:	4b12      	ldr	r3, [pc, #72]	@ (800503c <vPortExitCritical+0x50>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <vPortExitCritical+0x26>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	607b      	str	r3, [r7, #4]
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	e7fd      	b.n	800500e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005012:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <vPortExitCritical+0x50>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3b01      	subs	r3, #1
 8005018:	4a08      	ldr	r2, [pc, #32]	@ (800503c <vPortExitCritical+0x50>)
 800501a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800501c:	4b07      	ldr	r3, [pc, #28]	@ (800503c <vPortExitCritical+0x50>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <vPortExitCritical+0x44>
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	2000000c 	.word	0x2000000c

08005040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005040:	f3ef 8009 	mrs	r0, PSP
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <pxCurrentTCBConst>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005050:	6010      	str	r0, [r2, #0]
 8005052:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005056:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800505a:	f380 8811 	msr	BASEPRI, r0
 800505e:	f7fe fff7 	bl	8004050 <vTaskSwitchContext>
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f380 8811 	msr	BASEPRI, r0
 800506a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800506e:	6819      	ldr	r1, [r3, #0]
 8005070:	6808      	ldr	r0, [r1, #0]
 8005072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005076:	f380 8809 	msr	PSP, r0
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	4770      	bx	lr

08005080 <pxCurrentTCBConst>:
 8005080:	200008b8 	.word	0x200008b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	607b      	str	r3, [r7, #4]
}
 80050a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050a2:	f7fe ff1b 	bl	8003edc <xTaskIncrementTick>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050ac:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <xPortSysTickHandler+0x40>)
 80050ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	f383 8811 	msr	BASEPRI, r3
}
 80050be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050c0:	bf00      	nop
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	e000ed04 	.word	0xe000ed04

080050cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050d0:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <vPortSetupTimerInterrupt+0x30>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005100 <vPortSetupTimerInterrupt+0x34>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050dc:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <vPortSetupTimerInterrupt+0x38>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a09      	ldr	r2, [pc, #36]	@ (8005108 <vPortSetupTimerInterrupt+0x3c>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	099b      	lsrs	r3, r3, #6
 80050e8:	4a08      	ldr	r2, [pc, #32]	@ (800510c <vPortSetupTimerInterrupt+0x40>)
 80050ea:	3b01      	subs	r3, #1
 80050ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ee:	4b03      	ldr	r3, [pc, #12]	@ (80050fc <vPortSetupTimerInterrupt+0x30>)
 80050f0:	2207      	movs	r2, #7
 80050f2:	601a      	str	r2, [r3, #0]
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr
 80050fc:	e000e010 	.word	0xe000e010
 8005100:	e000e018 	.word	0xe000e018
 8005104:	20000000 	.word	0x20000000
 8005108:	10624dd3 	.word	0x10624dd3
 800510c:	e000e014 	.word	0xe000e014

08005110 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005116:	f3ef 8305 	mrs	r3, IPSR
 800511a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b0f      	cmp	r3, #15
 8005120:	d915      	bls.n	800514e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005122:	4a17      	ldr	r2, [pc, #92]	@ (8005180 <vPortValidateInterruptPriority+0x70>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4413      	add	r3, r2
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800512c:	4b15      	ldr	r3, [pc, #84]	@ (8005184 <vPortValidateInterruptPriority+0x74>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	7afa      	ldrb	r2, [r7, #11]
 8005132:	429a      	cmp	r2, r3
 8005134:	d20b      	bcs.n	800514e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	607b      	str	r3, [r7, #4]
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	e7fd      	b.n	800514a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800514e:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <vPortValidateInterruptPriority+0x78>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005156:	4b0d      	ldr	r3, [pc, #52]	@ (800518c <vPortValidateInterruptPriority+0x7c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	429a      	cmp	r2, r3
 800515c:	d90b      	bls.n	8005176 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	603b      	str	r3, [r7, #0]
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	e7fd      	b.n	8005172 <vPortValidateInterruptPriority+0x62>
	}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr
 8005180:	e000e3f0 	.word	0xe000e3f0
 8005184:	20000ee4 	.word	0x20000ee4
 8005188:	e000ed0c 	.word	0xe000ed0c
 800518c:	20000ee8 	.word	0x20000ee8

08005190 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	@ 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005198:	2300      	movs	r3, #0
 800519a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800519c:	f7fe fde4 	bl	8003d68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051a0:	4b5c      	ldr	r3, [pc, #368]	@ (8005314 <pvPortMalloc+0x184>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051a8:	f000 f924 	bl	80053f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051ac:	4b5a      	ldr	r3, [pc, #360]	@ (8005318 <pvPortMalloc+0x188>)
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 8095 	bne.w	80052e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01e      	beq.n	80051fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80051c0:	2208      	movs	r2, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f023 0307 	bic.w	r3, r3, #7
 80051d8:	3308      	adds	r3, #8
 80051da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00b      	beq.n	80051fe <pvPortMalloc+0x6e>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	617b      	str	r3, [r7, #20]
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d06f      	beq.n	80052e4 <pvPortMalloc+0x154>
 8005204:	4b45      	ldr	r3, [pc, #276]	@ (800531c <pvPortMalloc+0x18c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	429a      	cmp	r2, r3
 800520c:	d86a      	bhi.n	80052e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800520e:	4b44      	ldr	r3, [pc, #272]	@ (8005320 <pvPortMalloc+0x190>)
 8005210:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005212:	4b43      	ldr	r3, [pc, #268]	@ (8005320 <pvPortMalloc+0x190>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005218:	e004      	b.n	8005224 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800521a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800521c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	429a      	cmp	r2, r3
 800522c:	d903      	bls.n	8005236 <pvPortMalloc+0xa6>
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1f1      	bne.n	800521a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005236:	4b37      	ldr	r3, [pc, #220]	@ (8005314 <pvPortMalloc+0x184>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800523c:	429a      	cmp	r2, r3
 800523e:	d051      	beq.n	80052e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2208      	movs	r2, #8
 8005246:	4413      	add	r3, r2
 8005248:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	1ad2      	subs	r2, r2, r3
 800525a:	2308      	movs	r3, #8
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	429a      	cmp	r2, r3
 8005260:	d920      	bls.n	80052a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <pvPortMalloc+0xfc>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	613b      	str	r3, [r7, #16]
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	1ad2      	subs	r2, r2, r3
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800529e:	69b8      	ldr	r0, [r7, #24]
 80052a0:	f000 f90a 	bl	80054b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052a4:	4b1d      	ldr	r3, [pc, #116]	@ (800531c <pvPortMalloc+0x18c>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	4a1b      	ldr	r2, [pc, #108]	@ (800531c <pvPortMalloc+0x18c>)
 80052b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052b2:	4b1a      	ldr	r3, [pc, #104]	@ (800531c <pvPortMalloc+0x18c>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005324 <pvPortMalloc+0x194>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d203      	bcs.n	80052c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052be:	4b17      	ldr	r3, [pc, #92]	@ (800531c <pvPortMalloc+0x18c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a18      	ldr	r2, [pc, #96]	@ (8005324 <pvPortMalloc+0x194>)
 80052c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	4b13      	ldr	r3, [pc, #76]	@ (8005318 <pvPortMalloc+0x188>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	431a      	orrs	r2, r3
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052da:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <pvPortMalloc+0x198>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3301      	adds	r3, #1
 80052e0:	4a11      	ldr	r2, [pc, #68]	@ (8005328 <pvPortMalloc+0x198>)
 80052e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052e4:	f7fe fd4e 	bl	8003d84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <pvPortMalloc+0x17a>
	__asm volatile
 80052f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	60fb      	str	r3, [r7, #12]
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop
 8005308:	e7fd      	b.n	8005306 <pvPortMalloc+0x176>
	return pvReturn;
 800530a:	69fb      	ldr	r3, [r7, #28]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3728      	adds	r7, #40	@ 0x28
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20001af4 	.word	0x20001af4
 8005318:	20001b08 	.word	0x20001b08
 800531c:	20001af8 	.word	0x20001af8
 8005320:	20001aec 	.word	0x20001aec
 8005324:	20001afc 	.word	0x20001afc
 8005328:	20001b00 	.word	0x20001b00

0800532c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d04f      	beq.n	80053de <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800533e:	2308      	movs	r3, #8
 8005340:	425b      	negs	r3, r3
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4413      	add	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	4b25      	ldr	r3, [pc, #148]	@ (80053e8 <vPortFree+0xbc>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4013      	ands	r3, r2
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <vPortFree+0x46>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	60fb      	str	r3, [r7, #12]
}
 800536c:	bf00      	nop
 800536e:	bf00      	nop
 8005370:	e7fd      	b.n	800536e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <vPortFree+0x66>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	60bb      	str	r3, [r7, #8]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	4b14      	ldr	r3, [pc, #80]	@ (80053e8 <vPortFree+0xbc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01e      	beq.n	80053de <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11a      	bne.n	80053de <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	4b0e      	ldr	r3, [pc, #56]	@ (80053e8 <vPortFree+0xbc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	401a      	ands	r2, r3
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053b8:	f7fe fcd6 	bl	8003d68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <vPortFree+0xc0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4413      	add	r3, r2
 80053c6:	4a09      	ldr	r2, [pc, #36]	@ (80053ec <vPortFree+0xc0>)
 80053c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053ca:	6938      	ldr	r0, [r7, #16]
 80053cc:	f000 f874 	bl	80054b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053d0:	4b07      	ldr	r3, [pc, #28]	@ (80053f0 <vPortFree+0xc4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3301      	adds	r3, #1
 80053d6:	4a06      	ldr	r2, [pc, #24]	@ (80053f0 <vPortFree+0xc4>)
 80053d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053da:	f7fe fcd3 	bl	8003d84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053de:	bf00      	nop
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20001b08 	.word	0x20001b08
 80053ec:	20001af8 	.word	0x20001af8
 80053f0:	20001b04 	.word	0x20001b04

080053f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80053fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005400:	4b27      	ldr	r3, [pc, #156]	@ (80054a0 <prvHeapInit+0xac>)
 8005402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00c      	beq.n	8005428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3307      	adds	r3, #7
 8005412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0307 	bic.w	r3, r3, #7
 800541a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	4a1f      	ldr	r2, [pc, #124]	@ (80054a0 <prvHeapInit+0xac>)
 8005424:	4413      	add	r3, r2
 8005426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800542c:	4a1d      	ldr	r2, [pc, #116]	@ (80054a4 <prvHeapInit+0xb0>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005432:	4b1c      	ldr	r3, [pc, #112]	@ (80054a4 <prvHeapInit+0xb0>)
 8005434:	2200      	movs	r2, #0
 8005436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4413      	add	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005440:	2208      	movs	r2, #8
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0307 	bic.w	r3, r3, #7
 800544e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a15      	ldr	r2, [pc, #84]	@ (80054a8 <prvHeapInit+0xb4>)
 8005454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005456:	4b14      	ldr	r3, [pc, #80]	@ (80054a8 <prvHeapInit+0xb4>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800545e:	4b12      	ldr	r3, [pc, #72]	@ (80054a8 <prvHeapInit+0xb4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <prvHeapInit+0xb4>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4a0a      	ldr	r2, [pc, #40]	@ (80054ac <prvHeapInit+0xb8>)
 8005482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a09      	ldr	r2, [pc, #36]	@ (80054b0 <prvHeapInit+0xbc>)
 800548a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800548c:	4b09      	ldr	r3, [pc, #36]	@ (80054b4 <prvHeapInit+0xc0>)
 800548e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005492:	601a      	str	r2, [r3, #0]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000eec 	.word	0x20000eec
 80054a4:	20001aec 	.word	0x20001aec
 80054a8:	20001af4 	.word	0x20001af4
 80054ac:	20001afc 	.word	0x20001afc
 80054b0:	20001af8 	.word	0x20001af8
 80054b4:	20001b08 	.word	0x20001b08

080054b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c0:	4b27      	ldr	r3, [pc, #156]	@ (8005560 <prvInsertBlockIntoFreeList+0xa8>)
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	e002      	b.n	80054cc <prvInsertBlockIntoFreeList+0x14>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d8f7      	bhi.n	80054c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	4413      	add	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d108      	bne.n	80054fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	441a      	add	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	441a      	add	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d118      	bne.n	8005540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <prvInsertBlockIntoFreeList+0xac>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d00d      	beq.n	8005536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	441a      	add	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e008      	b.n	8005548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005536:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <prvInsertBlockIntoFreeList+0xac>)
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	e003      	b.n	8005548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	429a      	cmp	r2, r3
 800554e:	d002      	beq.n	8005556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	20001aec 	.word	0x20001aec
 8005564:	20001af4 	.word	0x20001af4

08005568 <memset>:
 8005568:	4603      	mov	r3, r0
 800556a:	4402      	add	r2, r0
 800556c:	4293      	cmp	r3, r2
 800556e:	d100      	bne.n	8005572 <memset+0xa>
 8005570:	4770      	bx	lr
 8005572:	f803 1b01 	strb.w	r1, [r3], #1
 8005576:	e7f9      	b.n	800556c <memset+0x4>

08005578 <__libc_init_array>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	2600      	movs	r6, #0
 800557c:	4d0c      	ldr	r5, [pc, #48]	@ (80055b0 <__libc_init_array+0x38>)
 800557e:	4c0d      	ldr	r4, [pc, #52]	@ (80055b4 <__libc_init_array+0x3c>)
 8005580:	1b64      	subs	r4, r4, r5
 8005582:	10a4      	asrs	r4, r4, #2
 8005584:	42a6      	cmp	r6, r4
 8005586:	d109      	bne.n	800559c <__libc_init_array+0x24>
 8005588:	f000 f828 	bl	80055dc <_init>
 800558c:	2600      	movs	r6, #0
 800558e:	4d0a      	ldr	r5, [pc, #40]	@ (80055b8 <__libc_init_array+0x40>)
 8005590:	4c0a      	ldr	r4, [pc, #40]	@ (80055bc <__libc_init_array+0x44>)
 8005592:	1b64      	subs	r4, r4, r5
 8005594:	10a4      	asrs	r4, r4, #2
 8005596:	42a6      	cmp	r6, r4
 8005598:	d105      	bne.n	80055a6 <__libc_init_array+0x2e>
 800559a:	bd70      	pop	{r4, r5, r6, pc}
 800559c:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a0:	4798      	blx	r3
 80055a2:	3601      	adds	r6, #1
 80055a4:	e7ee      	b.n	8005584 <__libc_init_array+0xc>
 80055a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055aa:	4798      	blx	r3
 80055ac:	3601      	adds	r6, #1
 80055ae:	e7f2      	b.n	8005596 <__libc_init_array+0x1e>
 80055b0:	0800579c 	.word	0x0800579c
 80055b4:	0800579c 	.word	0x0800579c
 80055b8:	0800579c 	.word	0x0800579c
 80055bc:	080057a0 	.word	0x080057a0

080055c0 <memcpy>:
 80055c0:	440a      	add	r2, r1
 80055c2:	4291      	cmp	r1, r2
 80055c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80055c8:	d100      	bne.n	80055cc <memcpy+0xc>
 80055ca:	4770      	bx	lr
 80055cc:	b510      	push	{r4, lr}
 80055ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055d2:	4291      	cmp	r1, r2
 80055d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055d8:	d1f9      	bne.n	80055ce <memcpy+0xe>
 80055da:	bd10      	pop	{r4, pc}

080055dc <_init>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr

080055e8 <_fini>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr
