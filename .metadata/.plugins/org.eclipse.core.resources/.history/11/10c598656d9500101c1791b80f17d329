/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body for Seat Controller ECU
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "adc.h"
#include "i2c.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "FreeRTOS.h"
#include "task.h"
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();

  /* USER CODE BEGIN 2 */

  // Initialize system message
  char startup_msg[] = "=== Seat Controller ECU Started ===\r\n";
  HAL_UART_Transmit(&huart2, (uint8_t*)startup_msg, strlen(startup_msg), 1000);

  // Check if peripherals are initialized
  char init_msg[] = "Peripherals Initialized: GPIO, UART, ADC, I2C, SPI\r\n";
  HAL_UART_Transmit(&huart2, (uint8_t*)init_msg, strlen(init_msg), 1000);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // This should never be reached when FreeRTOS is running
    HAL_Delay(1000);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  // Send error message via UART if possible
  char error_msg[] = "=== SYSTEM ERROR - HALTED ===\r\n";
  HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 1000);

  while (1)
  {
    // Blink LED to indicate error if available
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Assuming LED on PA5
    HAL_Delay(200);
  }
  /* USER CODE END Error_Handler_Debug */
}

/**
  * @brief  FreeRTOS application malloc failed hook
  * @param  None
  * @retval None
  */
void vApplicationMallocFailedHook(void)
{
  /* USER CODE BEGIN vApplicationMallocFailedHook */
  char malloc_error[] = "FreeRTOS: Malloc Failed!\r\n";
  HAL_UART_Transmit(&huart2, (uint8_t*)malloc_error, strlen(malloc_error), 1000);

  taskDISABLE_INTERRUPTS();
  for(;;);
  /* USER CODE END vApplicationMallocFailedHook */
}

/**
  * @brief  FreeRTOS application stack overflow hook
  * @param  xTask: Task handle
  * @param  pcTaskName: Task name
  * @retval None
  */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
  /* USER CODE BEGIN vApplicationStackOverflowHook */
  char stack_error[] = "FreeRTOS: Stack Overflow in task: ";
  HAL_UART_Transmit(&huart2, (uint8_t*)stack_error, strlen(stack_error), 1000);
  HAL_UART_Transmit(&huart2, (uint8_t*)pcTaskName, strlen(pcTaskName), 1000);
  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 1000);

  taskDISABLE_INTERRUPTS();
  for(;;);
  /* USER CODE END vApplicationStackOverflowHook */
}

/**
  * @brief  FreeRTOS idle task hook
  * @param  None
  * @retval None
  */
void vApplicationIdleHook(void)
{
  /* USER CODE BEGIN vApplicationIdleHook */
  // This function is called during idle time
  // Keep it lightweight - no blocking operations
  /* USER CODE END vApplicationIdleHook */
}

/**
  * @brief  FreeRTOS tick hook
  * @param  None
  * @retval None
  */
void vApplicationTickHook(void)
{
  /* USER CODE BEGIN vApplicationTickHook */
  // This function is called on every FreeRTOS tick
  // Keep it very lightweight
  /* USER CODE END vApplicationTickHook */
}

/* USER CODE END 4 */

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  char assert_msg[] = "ASSERT FAILED: ";
  HAL_UART_Transmit(&huart2, (uint8_t*)assert_msg, strlen(assert_msg), 1000);
  HAL_UART_Transmit(&huart2, file, strlen((char*)file), 1000);
  HAL_UART_Transmit(&huart2, (uint8_t*)" line ", 6, 1000);

  char line_str[10];
  sprintf(line_str, "%lu\r\n", line);
  HAL_UART_Transmit(&huart2, (uint8_t*)line_str, strlen(line_str), 1000);

  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
