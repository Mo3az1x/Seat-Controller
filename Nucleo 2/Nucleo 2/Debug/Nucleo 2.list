
Nucleo 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca9c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  0800cc40  0800cc40  0000dc40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6e4  0800d6e4  0000f1e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d6e4  0800d6e4  0000e6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6ec  0800d6ec  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6ec  0800d6ec  0000e6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d6f0  0800d6f0  0000e6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800d6f4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d50  200001e4  0800d8d8  0000f1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f34  0800d8d8  0000ff34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002075e  00000000  00000000  0000f214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000462a  00000000  00000000  0002f972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b60  00000000  00000000  00033fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000155d  00000000  00000000  00035b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4b2  00000000  00000000  0003705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e30  00000000  00000000  0005350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab4a4  00000000  00000000  0007433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f7e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084e4  00000000  00000000  0011f828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00127d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc24 	.word	0x0800cc24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800cc24 	.word	0x0800cc24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b988 	b.w	8000ee0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	468e      	mov	lr, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	4688      	mov	r8, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d962      	bls.n	8000cc4 <__udivmoddi4+0xdc>
 8000bfe:	fab2 f682 	clz	r6, r2
 8000c02:	b14e      	cbz	r6, 8000c18 <__udivmoddi4+0x30>
 8000c04:	f1c6 0320 	rsb	r3, r6, #32
 8000c08:	fa01 f806 	lsl.w	r8, r1, r6
 8000c0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c10:	40b7      	lsls	r7, r6
 8000c12:	ea43 0808 	orr.w	r8, r3, r8
 8000c16:	40b4      	lsls	r4, r6
 8000c18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c1c:	fa1f fc87 	uxth.w	ip, r7
 8000c20:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c24:	0c23      	lsrs	r3, r4, #16
 8000c26:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c3c:	f080 80ea 	bcs.w	8000e14 <__udivmoddi4+0x22c>
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f240 80e7 	bls.w	8000e14 <__udivmoddi4+0x22c>
 8000c46:	3902      	subs	r1, #2
 8000c48:	443b      	add	r3, r7
 8000c4a:	1a9a      	subs	r2, r3, r2
 8000c4c:	b2a3      	uxth	r3, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c5a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5e:	459c      	cmp	ip, r3
 8000c60:	d909      	bls.n	8000c76 <__udivmoddi4+0x8e>
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c68:	f080 80d6 	bcs.w	8000e18 <__udivmoddi4+0x230>
 8000c6c:	459c      	cmp	ip, r3
 8000c6e:	f240 80d3 	bls.w	8000e18 <__udivmoddi4+0x230>
 8000c72:	443b      	add	r3, r7
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7a:	eba3 030c 	sub.w	r3, r3, ip
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40f3      	lsrs	r3, r6
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xb6>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb0>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x14c>
 8000ca6:	4573      	cmp	r3, lr
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xc8>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 8105 	bhi.w	8000eba <__udivmoddi4+0x2d2>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4690      	mov	r8, r2
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e5      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cbe:	e9c5 4800 	strd	r4, r8, [r5]
 8000cc2:	e7e2      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f000 8090 	beq.w	8000dea <__udivmoddi4+0x202>
 8000cca:	fab2 f682 	clz	r6, r2
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	f040 80a4 	bne.w	8000e1c <__udivmoddi4+0x234>
 8000cd4:	1a8a      	subs	r2, r1, r2
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	b280      	uxth	r0, r0
 8000cde:	b2bc      	uxth	r4, r7
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ce6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cee:	fb04 f20c 	mul.w	r2, r4, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x11e>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x11c>
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	f200 80e0 	bhi.w	8000ec4 <__udivmoddi4+0x2dc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d0c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d10:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d14:	fb02 f404 	mul.w	r4, r2, r4
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x144>
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x142>
 8000d24:	429c      	cmp	r4, r3
 8000d26:	f200 80ca 	bhi.w	8000ebe <__udivmoddi4+0x2d6>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	1b1b      	subs	r3, r3, r4
 8000d2e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa0e f401 	lsl.w	r4, lr, r1
 8000d44:	fa20 f306 	lsr.w	r3, r0, r6
 8000d48:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d4c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	fa1f fc87 	uxth.w	ip, r7
 8000d5a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d64:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d68:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1a0>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d7a:	f080 809c 	bcs.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	f240 8099 	bls.w	8000eb6 <__udivmoddi4+0x2ce>
 8000d84:	3802      	subs	r0, #2
 8000d86:	443c      	add	r4, r7
 8000d88:	eba4 040e 	sub.w	r4, r4, lr
 8000d8c:	fa1f fe83 	uxth.w	lr, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d9c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da0:	45a4      	cmp	ip, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1ce>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000daa:	f080 8082 	bcs.w	8000eb2 <__udivmoddi4+0x2ca>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d97f      	bls.n	8000eb2 <__udivmoddi4+0x2ca>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dba:	eba4 040c 	sub.w	r4, r4, ip
 8000dbe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dc2:	4564      	cmp	r4, ip
 8000dc4:	4673      	mov	r3, lr
 8000dc6:	46e1      	mov	r9, ip
 8000dc8:	d362      	bcc.n	8000e90 <__udivmoddi4+0x2a8>
 8000dca:	d05f      	beq.n	8000e8c <__udivmoddi4+0x2a4>
 8000dcc:	b15d      	cbz	r5, 8000de6 <__udivmoddi4+0x1fe>
 8000dce:	ebb8 0203 	subs.w	r2, r8, r3
 8000dd2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	fa22 f301 	lsr.w	r3, r2, r1
 8000dde:	431e      	orrs	r6, r3
 8000de0:	40cc      	lsrs	r4, r1
 8000de2:	e9c5 6400 	strd	r6, r4, [r5]
 8000de6:	2100      	movs	r1, #0
 8000de8:	e74f      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000dea:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dee:	0c01      	lsrs	r1, r0, #16
 8000df0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000df4:	b280      	uxth	r0, r0
 8000df6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	463c      	mov	r4, r7
 8000e00:	46b8      	mov	r8, r7
 8000e02:	46be      	mov	lr, r7
 8000e04:	2620      	movs	r6, #32
 8000e06:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e0a:	eba2 0208 	sub.w	r2, r2, r8
 8000e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e12:	e766      	b.n	8000ce2 <__udivmoddi4+0xfa>
 8000e14:	4601      	mov	r1, r0
 8000e16:	e718      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e72c      	b.n	8000c76 <__udivmoddi4+0x8e>
 8000e1c:	f1c6 0220 	rsb	r2, r6, #32
 8000e20:	fa2e f302 	lsr.w	r3, lr, r2
 8000e24:	40b7      	lsls	r7, r6
 8000e26:	40b1      	lsls	r1, r6
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	430a      	orrs	r2, r1
 8000e32:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e36:	b2bc      	uxth	r4, r7
 8000e38:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb08 f904 	mul.w	r9, r8, r4
 8000e46:	40b0      	lsls	r0, r6
 8000e48:	4589      	cmp	r9, r1
 8000e4a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e4e:	b280      	uxth	r0, r0
 8000e50:	d93e      	bls.n	8000ed0 <__udivmoddi4+0x2e8>
 8000e52:	1879      	adds	r1, r7, r1
 8000e54:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e58:	d201      	bcs.n	8000e5e <__udivmoddi4+0x276>
 8000e5a:	4589      	cmp	r9, r1
 8000e5c:	d81f      	bhi.n	8000e9e <__udivmoddi4+0x2b6>
 8000e5e:	eba1 0109 	sub.w	r1, r1, r9
 8000e62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e66:	fb09 f804 	mul.w	r8, r9, r4
 8000e6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e6e:	b292      	uxth	r2, r2
 8000e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e74:	4542      	cmp	r2, r8
 8000e76:	d229      	bcs.n	8000ecc <__udivmoddi4+0x2e4>
 8000e78:	18ba      	adds	r2, r7, r2
 8000e7a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e7e:	d2c4      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e80:	4542      	cmp	r2, r8
 8000e82:	d2c2      	bcs.n	8000e0a <__udivmoddi4+0x222>
 8000e84:	f1a9 0102 	sub.w	r1, r9, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	e7be      	b.n	8000e0a <__udivmoddi4+0x222>
 8000e8c:	45f0      	cmp	r8, lr
 8000e8e:	d29d      	bcs.n	8000dcc <__udivmoddi4+0x1e4>
 8000e90:	ebbe 0302 	subs.w	r3, lr, r2
 8000e94:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e98:	3801      	subs	r0, #1
 8000e9a:	46e1      	mov	r9, ip
 8000e9c:	e796      	b.n	8000dcc <__udivmoddi4+0x1e4>
 8000e9e:	eba7 0909 	sub.w	r9, r7, r9
 8000ea2:	4449      	add	r1, r9
 8000ea4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	e7db      	b.n	8000e6a <__udivmoddi4+0x282>
 8000eb2:	4673      	mov	r3, lr
 8000eb4:	e77f      	b.n	8000db6 <__udivmoddi4+0x1ce>
 8000eb6:	4650      	mov	r0, sl
 8000eb8:	e766      	b.n	8000d88 <__udivmoddi4+0x1a0>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e6fd      	b.n	8000cba <__udivmoddi4+0xd2>
 8000ebe:	443b      	add	r3, r7
 8000ec0:	3a02      	subs	r2, #2
 8000ec2:	e733      	b.n	8000d2c <__udivmoddi4+0x144>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	443b      	add	r3, r7
 8000eca:	e71c      	b.n	8000d06 <__udivmoddi4+0x11e>
 8000ecc:	4649      	mov	r1, r9
 8000ece:	e79c      	b.n	8000e0a <__udivmoddi4+0x222>
 8000ed0:	eba1 0109 	sub.w	r1, r1, r9
 8000ed4:	46c4      	mov	ip, r8
 8000ed6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eda:	fb09 f804 	mul.w	r8, r9, r4
 8000ede:	e7c4      	b.n	8000e6a <__udivmoddi4+0x282>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb8 <MX_ADC1_Init+0xd4>)
 8000efa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000efe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f10:	4b28      	ldr	r3, [pc, #160]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f16:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1e:	4b25      	ldr	r3, [pc, #148]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f24:	4b23      	ldr	r3, [pc, #140]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f26:	4a25      	ldr	r2, [pc, #148]	@ (8000fbc <MX_ADC1_Init+0xd8>)
 8000f28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000f30:	4b20      	ldr	r3, [pc, #128]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f32:	2203      	movs	r2, #3
 8000f34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f44:	481b      	ldr	r0, [pc, #108]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f46:	f001 ff79 	bl	8002e3c <HAL_ADC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f50:	f001 fc2e 	bl	80027b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f54:	230b      	movs	r3, #11
 8000f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4813      	ldr	r0, [pc, #76]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f66:	f002 f92d 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f70:	f001 fc1e 	bl	80027b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f74:	230c      	movs	r3, #12
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f82:	f002 f91f 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f8c:	f001 fc10 	bl	80027b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f90:	230d      	movs	r3, #13
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f94:	2303      	movs	r3, #3
 8000f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_ADC1_Init+0xd0>)
 8000f9e:	f002 f911 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000fa8:	f001 fc02 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000200 	.word	0x20000200
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	0f000001 	.word	0x0f000001

08000fc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_ADC_MspInit+0x7c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d127      	bne.n	8001032 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8001008:	f043 0304 	orr.w	r3, r3, #4
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_ADC_MspInit+0x80>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800101a:	230e      	movs	r3, #14
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4805      	ldr	r0, [pc, #20]	@ (8001044 <HAL_ADC_MspInit+0x84>)
 800102e:	f002 fbd9 	bl	80037e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001032:	bf00      	nop
 8001034:	3728      	adds	r7, #40	@ 0x28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40012000 	.word	0x40012000
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800

08001048 <MX_FREERTOS_Init>:
HAL_StatusTypeDef SPI_EEPROM_WriteAll(uint8_t *buffer, uint16_t size);
void Calculate_Physical_Values(void);
uint16_t Calculate_Checksum(Calibration_Data_t *data);

void MX_FREERTOS_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
    UartQueueHandle = osMessageQueueNew(10, 50, NULL);
 800104e:	2200      	movs	r2, #0
 8001050:	2132      	movs	r1, #50	@ 0x32
 8001052:	200a      	movs	r0, #10
 8001054:	f005 fd93 	bl	8006b7e <osMessageQueueNew>
 8001058:	4603      	mov	r3, r0
 800105a:	4a47      	ldr	r2, [pc, #284]	@ (8001178 <MX_FREERTOS_Init+0x130>)
 800105c:	6013      	str	r3, [r2, #0]
    SpiQueueHandle = osMessageQueueNew(5, sizeof(SPI_Command_t), NULL);
 800105e:	2200      	movs	r2, #0
 8001060:	210f      	movs	r1, #15
 8001062:	2005      	movs	r0, #5
 8001064:	f005 fd8b 	bl	8006b7e <osMessageQueueNew>
 8001068:	4603      	mov	r3, r0
 800106a:	4a44      	ldr	r2, [pc, #272]	@ (800117c <MX_FREERTOS_Init+0x134>)
 800106c:	6013      	str	r3, [r2, #0]

    const osMutexAttr_t i2cMutexAttr = { .name = "i2cMutex" };
 800106e:	f107 0310 	add.w	r3, r7, #16
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <MX_FREERTOS_Init+0x138>)
 800107e:	613b      	str	r3, [r7, #16]
    i2cMutexHandle = osMutexNew(&i2cMutexAttr);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4618      	mov	r0, r3
 8001086:	f005 fc6c 	bl	8006962 <osMutexNew>
 800108a:	4603      	mov	r3, r0
 800108c:	4a3d      	ldr	r2, [pc, #244]	@ (8001184 <MX_FREERTOS_Init+0x13c>)
 800108e:	6013      	str	r3, [r2, #0]

    const osMutexAttr_t spiMutexAttr = { .name = "spiMutex" };
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <MX_FREERTOS_Init+0x140>)
 800109e:	603b      	str	r3, [r7, #0]
    spiMutexHandle = osMutexNew(&spiMutexAttr);
 80010a0:	463b      	mov	r3, r7
 80010a2:	4618      	mov	r0, r3
 80010a4:	f005 fc5d 	bl	8006962 <osMutexNew>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a38      	ldr	r2, [pc, #224]	@ (800118c <MX_FREERTOS_Init+0x144>)
 80010ac:	6013      	str	r3, [r2, #0]

    SwitchModeHandle               = osThreadNew(SwitchModeTask, NULL, &switchmode_attributes);
 80010ae:	4a38      	ldr	r2, [pc, #224]	@ (8001190 <MX_FREERTOS_Init+0x148>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4838      	ldr	r0, [pc, #224]	@ (8001194 <MX_FREERTOS_Init+0x14c>)
 80010b4:	f005 fba8 	bl	8006808 <osThreadNew>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a37      	ldr	r2, [pc, #220]	@ (8001198 <MX_FREERTOS_Init+0x150>)
 80010bc:	6013      	str	r3, [r2, #0]
    AdcHeightHandle                = osThreadNew(AdcHeightTask, NULL, &adcHeight_attributes);
 80010be:	4a37      	ldr	r2, [pc, #220]	@ (800119c <MX_FREERTOS_Init+0x154>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	4837      	ldr	r0, [pc, #220]	@ (80011a0 <MX_FREERTOS_Init+0x158>)
 80010c4:	f005 fba0 	bl	8006808 <osThreadNew>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4a36      	ldr	r2, [pc, #216]	@ (80011a4 <MX_FREERTOS_Init+0x15c>)
 80010cc:	6013      	str	r3, [r2, #0]
    AdcSlideHandle                 = osThreadNew(AdcSlideTask,  NULL, &adcSlide_attributes);
 80010ce:	4a36      	ldr	r2, [pc, #216]	@ (80011a8 <MX_FREERTOS_Init+0x160>)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4836      	ldr	r0, [pc, #216]	@ (80011ac <MX_FREERTOS_Init+0x164>)
 80010d4:	f005 fb98 	bl	8006808 <osThreadNew>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a35      	ldr	r2, [pc, #212]	@ (80011b0 <MX_FREERTOS_Init+0x168>)
 80010dc:	6013      	str	r3, [r2, #0]
    AdcInclineHandle               = osThreadNew(AdcInclineTask,NULL, &adcIncline_attributes);
 80010de:	4a35      	ldr	r2, [pc, #212]	@ (80011b4 <MX_FREERTOS_Init+0x16c>)
 80010e0:	2100      	movs	r1, #0
 80010e2:	4835      	ldr	r0, [pc, #212]	@ (80011b8 <MX_FREERTOS_Init+0x170>)
 80010e4:	f005 fb90 	bl	8006808 <osThreadNew>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a34      	ldr	r2, [pc, #208]	@ (80011bc <MX_FREERTOS_Init+0x174>)
 80010ec:	6013      	str	r3, [r2, #0]
    Buttons_Read_Manual_mode_high  = osThreadNew(Buttons_ReadTask_highmode, NULL, &Buttons_Attributes);
 80010ee:	4a34      	ldr	r2, [pc, #208]	@ (80011c0 <MX_FREERTOS_Init+0x178>)
 80010f0:	2100      	movs	r1, #0
 80010f2:	4834      	ldr	r0, [pc, #208]	@ (80011c4 <MX_FREERTOS_Init+0x17c>)
 80010f4:	f005 fb88 	bl	8006808 <osThreadNew>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a33      	ldr	r2, [pc, #204]	@ (80011c8 <MX_FREERTOS_Init+0x180>)
 80010fc:	6013      	str	r3, [r2, #0]
    Buttons_Read_Manual_mode_Low   = osThreadNew(Buttons_ReadTask_Lowmode, NULL, &Button_attrib_low);
 80010fe:	4a33      	ldr	r2, [pc, #204]	@ (80011cc <MX_FREERTOS_Init+0x184>)
 8001100:	2100      	movs	r1, #0
 8001102:	4833      	ldr	r0, [pc, #204]	@ (80011d0 <MX_FREERTOS_Init+0x188>)
 8001104:	f005 fb80 	bl	8006808 <osThreadNew>
 8001108:	4603      	mov	r3, r0
 800110a:	4a32      	ldr	r2, [pc, #200]	@ (80011d4 <MX_FREERTOS_Init+0x18c>)
 800110c:	6013      	str	r3, [r2, #0]
    UART_TaskHandle                = osThreadNew(UART_Task, NULL, &uartTask_attributes);
 800110e:	4a32      	ldr	r2, [pc, #200]	@ (80011d8 <MX_FREERTOS_Init+0x190>)
 8001110:	2100      	movs	r1, #0
 8001112:	4832      	ldr	r0, [pc, #200]	@ (80011dc <MX_FREERTOS_Init+0x194>)
 8001114:	f005 fb78 	bl	8006808 <osThreadNew>
 8001118:	4603      	mov	r3, r0
 800111a:	4a31      	ldr	r2, [pc, #196]	@ (80011e0 <MX_FREERTOS_Init+0x198>)
 800111c:	6013      	str	r3, [r2, #0]
    i2c_taskHandle                 = osThreadNew(i2cTask, NULL, &i2c_attributes);
 800111e:	4a31      	ldr	r2, [pc, #196]	@ (80011e4 <MX_FREERTOS_Init+0x19c>)
 8001120:	2100      	movs	r1, #0
 8001122:	4831      	ldr	r0, [pc, #196]	@ (80011e8 <MX_FREERTOS_Init+0x1a0>)
 8001124:	f005 fb70 	bl	8006808 <osThreadNew>
 8001128:	4603      	mov	r3, r0
 800112a:	4a30      	ldr	r2, [pc, #192]	@ (80011ec <MX_FREERTOS_Init+0x1a4>)
 800112c:	6013      	str	r3, [r2, #0]
    i2c_seatStatus_handle          = osThreadNew(i2_handle_seatstatus, NULL, &i2c_statehandle);
 800112e:	4a30      	ldr	r2, [pc, #192]	@ (80011f0 <MX_FREERTOS_Init+0x1a8>)
 8001130:	2100      	movs	r1, #0
 8001132:	4830      	ldr	r0, [pc, #192]	@ (80011f4 <MX_FREERTOS_Init+0x1ac>)
 8001134:	f005 fb68 	bl	8006808 <osThreadNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a2f      	ldr	r2, [pc, #188]	@ (80011f8 <MX_FREERTOS_Init+0x1b0>)
 800113c:	6013      	str	r3, [r2, #0]
    fsmTaskHandle                  = osThreadNew(FSM_Task, NULL, &fsmTask_attributes);
 800113e:	4a2f      	ldr	r2, [pc, #188]	@ (80011fc <MX_FREERTOS_Init+0x1b4>)
 8001140:	2100      	movs	r1, #0
 8001142:	482f      	ldr	r0, [pc, #188]	@ (8001200 <MX_FREERTOS_Init+0x1b8>)
 8001144:	f005 fb60 	bl	8006808 <osThreadNew>
 8001148:	4603      	mov	r3, r0
 800114a:	4a2e      	ldr	r2, [pc, #184]	@ (8001204 <MX_FREERTOS_Init+0x1bc>)
 800114c:	6013      	str	r3, [r2, #0]
    spiEepromTaskHandle            = osThreadNew(SPI_EEPROM_Task, NULL, &spiEeprom_attributes);
 800114e:	4a2e      	ldr	r2, [pc, #184]	@ (8001208 <MX_FREERTOS_Init+0x1c0>)
 8001150:	2100      	movs	r1, #0
 8001152:	482e      	ldr	r0, [pc, #184]	@ (800120c <MX_FREERTOS_Init+0x1c4>)
 8001154:	f005 fb58 	bl	8006808 <osThreadNew>
 8001158:	4603      	mov	r3, r0
 800115a:	4a2d      	ldr	r2, [pc, #180]	@ (8001210 <MX_FREERTOS_Init+0x1c8>)
 800115c:	6013      	str	r3, [r2, #0]
    calibrationTaskHandle          = osThreadNew(Calibration_Task, NULL, &calibration_attributes);
 800115e:	4a2d      	ldr	r2, [pc, #180]	@ (8001214 <MX_FREERTOS_Init+0x1cc>)
 8001160:	2100      	movs	r1, #0
 8001162:	482d      	ldr	r0, [pc, #180]	@ (8001218 <MX_FREERTOS_Init+0x1d0>)
 8001164:	f005 fb50 	bl	8006808 <osThreadNew>
 8001168:	4603      	mov	r3, r0
 800116a:	4a2c      	ldr	r2, [pc, #176]	@ (800121c <MX_FREERTOS_Init+0x1d4>)
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200002ac 	.word	0x200002ac
 800117c:	200002b0 	.word	0x200002b0
 8001180:	0800ccf8 	.word	0x0800ccf8
 8001184:	200002b4 	.word	0x200002b4
 8001188:	0800cd04 	.word	0x0800cd04
 800118c:	200002b8 	.word	0x200002b8
 8001190:	0800d1a8 	.word	0x0800d1a8
 8001194:	08001b81 	.word	0x08001b81
 8001198:	2000027c 	.word	0x2000027c
 800119c:	0800d1cc 	.word	0x0800d1cc
 80011a0:	08001c41 	.word	0x08001c41
 80011a4:	20000280 	.word	0x20000280
 80011a8:	0800d1f0 	.word	0x0800d1f0
 80011ac:	08001cb1 	.word	0x08001cb1
 80011b0:	20000284 	.word	0x20000284
 80011b4:	0800d214 	.word	0x0800d214
 80011b8:	08001d21 	.word	0x08001d21
 80011bc:	20000288 	.word	0x20000288
 80011c0:	0800d238 	.word	0x0800d238
 80011c4:	08001d95 	.word	0x08001d95
 80011c8:	2000028c 	.word	0x2000028c
 80011cc:	0800d25c 	.word	0x0800d25c
 80011d0:	08001f8d 	.word	0x08001f8d
 80011d4:	20000290 	.word	0x20000290
 80011d8:	0800d280 	.word	0x0800d280
 80011dc:	08001221 	.word	0x08001221
 80011e0:	20000294 	.word	0x20000294
 80011e4:	0800d2a4 	.word	0x0800d2a4
 80011e8:	08001a85 	.word	0x08001a85
 80011ec:	20000298 	.word	0x20000298
 80011f0:	0800d2c8 	.word	0x0800d2c8
 80011f4:	08001929 	.word	0x08001929
 80011f8:	2000029c 	.word	0x2000029c
 80011fc:	0800d2ec 	.word	0x0800d2ec
 8001200:	080021f1 	.word	0x080021f1
 8001204:	200002a0 	.word	0x200002a0
 8001208:	0800d310 	.word	0x0800d310
 800120c:	0800126d 	.word	0x0800126d
 8001210:	200002a4 	.word	0x200002a4
 8001214:	0800d334 	.word	0x0800d334
 8001218:	08001399 	.word	0x08001399
 800121c:	200002a8 	.word	0x200002a8

08001220 <UART_Task>:

void UART_Task(void *argument)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b090      	sub	sp, #64	@ 0x40
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
    char msg[50];

    for(;;)
    {
        if (osMessageQueueGet(UartQueueHandle, msg, NULL, osWaitForever) == osOK)
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <UART_Task+0x44>)
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	f107 010c 	add.w	r1, r7, #12
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	2200      	movs	r2, #0
 8001236:	f005 fd75 	bl	8006d24 <osMessageQueueGet>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f3      	bne.n	8001228 <UART_Task+0x8>
        {
            msg[49] = '\0';
 8001240:	2300      	movs	r3, #0
 8001242:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f818 	bl	8000280 <strlen>
 8001250:	4603      	mov	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	f107 010c 	add.w	r1, r7, #12
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <UART_Task+0x48>)
 800125e:	f004 fe89 	bl	8005f74 <HAL_UART_Transmit>
        if (osMessageQueueGet(UartQueueHandle, msg, NULL, osWaitForever) == osOK)
 8001262:	e7e1      	b.n	8001228 <UART_Task+0x8>
 8001264:	200002ac 	.word	0x200002ac
 8001268:	200003b4 	.word	0x200003b4

0800126c <SPI_EEPROM_Task>:
        }
    }
}

void SPI_EEPROM_Task(void *argument)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b09e      	sub	sp, #120	@ 0x78
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
    char msg[100];
//    SPI_Command_t spi_cmd;
    uint8_t test_data;
//    uint8_t buffer[32];

    osMessageQueuePut(UartQueueHandle, "SPI EEPROM Task Started\r\n", 0, 10);
 8001274:	4b3f      	ldr	r3, [pc, #252]	@ (8001374 <SPI_EEPROM_Task+0x108>)
 8001276:	6818      	ldr	r0, [r3, #0]
 8001278:	230a      	movs	r3, #10
 800127a:	2200      	movs	r2, #0
 800127c:	493e      	ldr	r1, [pc, #248]	@ (8001378 <SPI_EEPROM_Task+0x10c>)
 800127e:	f005 fcf1 	bl	8006c64 <osMessageQueuePut>

    // Initialize default calibration values if EEPROM is empty
    CalibData.height_offset = 0;
 8001282:	4b3e      	ldr	r3, [pc, #248]	@ (800137c <SPI_EEPROM_Task+0x110>)
 8001284:	2200      	movs	r2, #0
 8001286:	801a      	strh	r2, [r3, #0]
    CalibData.height_coeff = 1000;  // 1.000 coefficient
 8001288:	4b3c      	ldr	r3, [pc, #240]	@ (800137c <SPI_EEPROM_Task+0x110>)
 800128a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800128e:	805a      	strh	r2, [r3, #2]
    CalibData.slide_offset = 0;
 8001290:	4b3a      	ldr	r3, [pc, #232]	@ (800137c <SPI_EEPROM_Task+0x110>)
 8001292:	2200      	movs	r2, #0
 8001294:	809a      	strh	r2, [r3, #4]
    CalibData.slide_coeff = 1000;
 8001296:	4b39      	ldr	r3, [pc, #228]	@ (800137c <SPI_EEPROM_Task+0x110>)
 8001298:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800129c:	80da      	strh	r2, [r3, #6]
    CalibData.incline_offset = 0;
 800129e:	4b37      	ldr	r3, [pc, #220]	@ (800137c <SPI_EEPROM_Task+0x110>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	811a      	strh	r2, [r3, #8]
    CalibData.incline_coeff = 1000;
 80012a4:	4b35      	ldr	r3, [pc, #212]	@ (800137c <SPI_EEPROM_Task+0x110>)
 80012a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80012aa:	815a      	strh	r2, [r3, #10]
    CalibData.checksum = Calculate_Checksum(&CalibData);
 80012ac:	4833      	ldr	r0, [pc, #204]	@ (800137c <SPI_EEPROM_Task+0x110>)
 80012ae:	f000 f971 	bl	8001594 <Calculate_Checksum>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b31      	ldr	r3, [pc, #196]	@ (800137c <SPI_EEPROM_Task+0x110>)
 80012b8:	819a      	strh	r2, [r3, #12]

    for(;;)
    {
        switch(SPI_CurrentState)
 80012ba:	4b31      	ldr	r3, [pc, #196]	@ (8001380 <SPI_EEPROM_Task+0x114>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d852      	bhi.n	800136a <SPI_EEPROM_Task+0xfe>
 80012c4:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <SPI_EEPROM_Task+0x60>)
 80012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ca:	bf00      	nop
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	08001327 	.word	0x08001327
 80012d4:	0800133d 	.word	0x0800133d
 80012d8:	08001353 	.word	0x08001353
        {
            case SPI_IDLE:
                // Test SPI communication every 5 seconds
                if(SPI_EEPROM_ReadByte(0x0000, &test_data) == HAL_OK)
 80012dc:	f107 030f 	add.w	r3, r7, #15
 80012e0:	4619      	mov	r1, r3
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f96c 	bl	80015c0 <SPI_EEPROM_ReadByte>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d113      	bne.n	8001316 <SPI_EEPROM_Task+0xaa>
                {
                    int len = snprintf(msg, sizeof(msg), "SPI Read Test: addr=0x0000, data=0x%02X\r\n", test_data);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	f107 0010 	add.w	r0, r7, #16
 80012f4:	4a23      	ldr	r2, [pc, #140]	@ (8001384 <SPI_EEPROM_Task+0x118>)
 80012f6:	2164      	movs	r1, #100	@ 0x64
 80012f8:	f009 faee 	bl	800a8d8 <sniprintf>
 80012fc:	6778      	str	r0, [r7, #116]	@ 0x74
                    if(len > 0) osMessageQueuePut(UartQueueHandle, msg, 0, 10);
 80012fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd31      	ble.n	8001368 <SPI_EEPROM_Task+0xfc>
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <SPI_EEPROM_Task+0x108>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f107 0110 	add.w	r1, r7, #16
 800130c:	230a      	movs	r3, #10
 800130e:	2200      	movs	r2, #0
 8001310:	f005 fca8 	bl	8006c64 <osMessageQueuePut>
                }
                else
                {
                    osMessageQueuePut(UartQueueHandle, "SPI Read Test Failed\r\n", 0, 10);
                }
                break;
 8001314:	e028      	b.n	8001368 <SPI_EEPROM_Task+0xfc>
                    osMessageQueuePut(UartQueueHandle, "SPI Read Test Failed\r\n", 0, 10);
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <SPI_EEPROM_Task+0x108>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	230a      	movs	r3, #10
 800131c:	2200      	movs	r2, #0
 800131e:	491a      	ldr	r1, [pc, #104]	@ (8001388 <SPI_EEPROM_Task+0x11c>)
 8001320:	f005 fca0 	bl	8006c64 <osMessageQueuePut>
                break;
 8001324:	e020      	b.n	8001368 <SPI_EEPROM_Task+0xfc>

            case SPI_READING:
                // Handle read operations
                osMessageQueuePut(UartQueueHandle, "SPI Reading...\r\n", 0, 10);
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <SPI_EEPROM_Task+0x108>)
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	230a      	movs	r3, #10
 800132c:	2200      	movs	r2, #0
 800132e:	4917      	ldr	r1, [pc, #92]	@ (800138c <SPI_EEPROM_Task+0x120>)
 8001330:	f005 fc98 	bl	8006c64 <osMessageQueuePut>
                SPI_CurrentState = SPI_IDLE;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <SPI_EEPROM_Task+0x114>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
                break;
 800133a:	e016      	b.n	800136a <SPI_EEPROM_Task+0xfe>

            case SPI_WRITING:
                // Handle write operations
                osMessageQueuePut(UartQueueHandle, "SPI Writing...\r\n", 0, 10);
 800133c:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <SPI_EEPROM_Task+0x108>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	230a      	movs	r3, #10
 8001342:	2200      	movs	r2, #0
 8001344:	4912      	ldr	r1, [pc, #72]	@ (8001390 <SPI_EEPROM_Task+0x124>)
 8001346:	f005 fc8d 	bl	8006c64 <osMessageQueuePut>
                SPI_CurrentState = SPI_IDLE;
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <SPI_EEPROM_Task+0x114>)
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
                break;
 8001350:	e00b      	b.n	800136a <SPI_EEPROM_Task+0xfe>

            case SPI_ERROR:
                osMessageQueuePut(UartQueueHandle, "SPI Error State\r\n", 0, 10);
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <SPI_EEPROM_Task+0x108>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	230a      	movs	r3, #10
 8001358:	2200      	movs	r2, #0
 800135a:	490e      	ldr	r1, [pc, #56]	@ (8001394 <SPI_EEPROM_Task+0x128>)
 800135c:	f005 fc82 	bl	8006c64 <osMessageQueuePut>
                SPI_CurrentState = SPI_IDLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <SPI_EEPROM_Task+0x114>)
 8001362:	2200      	movs	r2, #0
 8001364:	701a      	strb	r2, [r3, #0]
                break;
 8001366:	e000      	b.n	800136a <SPI_EEPROM_Task+0xfe>
                break;
 8001368:	bf00      	nop
        }

        osDelay(5000); // 5 second cycle
 800136a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800136e:	f005 fadd 	bl	800692c <osDelay>
        switch(SPI_CurrentState)
 8001372:	e7a2      	b.n	80012ba <SPI_EEPROM_Task+0x4e>
 8001374:	200002ac 	.word	0x200002ac
 8001378:	0800cd10 	.word	0x0800cd10
 800137c:	20000254 	.word	0x20000254
 8001380:	2000024a 	.word	0x2000024a
 8001384:	0800cd2c 	.word	0x0800cd2c
 8001388:	0800cd58 	.word	0x0800cd58
 800138c:	0800cd70 	.word	0x0800cd70
 8001390:	0800cd84 	.word	0x0800cd84
 8001394:	0800cd98 	.word	0x0800cd98

08001398 <Calibration_Task>:
    }
}

void Calibration_Task(void *argument)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b0a3      	sub	sp, #140	@ 0x8c
 800139c:	af02      	add	r7, sp, #8
 800139e:	6078      	str	r0, [r7, #4]
    char msg[100];
    uint8_t calib_buffer[sizeof(Calibration_Data_t)];

    osMessageQueuePut(UartQueueHandle, "Calibration Task Started\r\n", 0, 10);
 80013a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001460 <Calibration_Task+0xc8>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	230a      	movs	r3, #10
 80013a6:	2200      	movs	r2, #0
 80013a8:	492e      	ldr	r1, [pc, #184]	@ (8001464 <Calibration_Task+0xcc>)
 80013aa:	f005 fc5b 	bl	8006c64 <osMessageQueuePut>

    for(;;)
    {
        // Try to read calibration data from EEPROM
        if(SPI_EEPROM_ReadAll(calib_buffer, sizeof(Calibration_Data_t)) == HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	210e      	movs	r1, #14
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 f979 	bl	80016ac <SPI_EEPROM_ReadAll>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d140      	bne.n	8001442 <Calibration_Task+0xaa>
        {
            // Copy data and verify checksum
            memcpy(&CalibData, calib_buffer, sizeof(Calibration_Data_t));
 80013c0:	4b29      	ldr	r3, [pc, #164]	@ (8001468 <Calibration_Task+0xd0>)
 80013c2:	461c      	mov	r4, r3
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ca:	c407      	stmia	r4!, {r0, r1, r2}
 80013cc:	8023      	strh	r3, [r4, #0]

            if(CalibData.checksum == Calculate_Checksum(&CalibData))
 80013ce:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <Calibration_Task+0xd0>)
 80013d0:	899c      	ldrh	r4, [r3, #12]
 80013d2:	4825      	ldr	r0, [pc, #148]	@ (8001468 <Calibration_Task+0xd0>)
 80013d4:	f000 f8de 	bl	8001594 <Calculate_Checksum>
 80013d8:	4603      	mov	r3, r0
 80013da:	429c      	cmp	r4, r3
 80013dc:	d11d      	bne.n	800141a <Calibration_Task+0x82>
            {
                int len = snprintf(msg, sizeof(msg), "Calib Data Valid: H_coeff=%u, S_coeff=%u, I_coeff=%u\r\n",
                    CalibData.height_coeff, CalibData.slide_coeff, CalibData.incline_coeff);
 80013de:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <Calibration_Task+0xd0>)
 80013e0:	885b      	ldrh	r3, [r3, #2]
                int len = snprintf(msg, sizeof(msg), "Calib Data Valid: H_coeff=%u, S_coeff=%u, I_coeff=%u\r\n",
 80013e2:	4619      	mov	r1, r3
                    CalibData.height_coeff, CalibData.slide_coeff, CalibData.incline_coeff);
 80013e4:	4b20      	ldr	r3, [pc, #128]	@ (8001468 <Calibration_Task+0xd0>)
 80013e6:	88db      	ldrh	r3, [r3, #6]
                int len = snprintf(msg, sizeof(msg), "Calib Data Valid: H_coeff=%u, S_coeff=%u, I_coeff=%u\r\n",
 80013e8:	461a      	mov	r2, r3
                    CalibData.height_coeff, CalibData.slide_coeff, CalibData.incline_coeff);
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <Calibration_Task+0xd0>)
 80013ec:	895b      	ldrh	r3, [r3, #10]
                int len = snprintf(msg, sizeof(msg), "Calib Data Valid: H_coeff=%u, S_coeff=%u, I_coeff=%u\r\n",
 80013ee:	f107 0018 	add.w	r0, r7, #24
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	9200      	str	r2, [sp, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <Calibration_Task+0xd4>)
 80013fa:	2164      	movs	r1, #100	@ 0x64
 80013fc:	f009 fa6c 	bl	800a8d8 <sniprintf>
 8001400:	67f8      	str	r0, [r7, #124]	@ 0x7c
                if(len > 0) osMessageQueuePut(UartQueueHandle, msg, 0, 10);
 8001402:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001404:	2b00      	cmp	r3, #0
 8001406:	dd23      	ble.n	8001450 <Calibration_Task+0xb8>
 8001408:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <Calibration_Task+0xc8>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	f107 0118 	add.w	r1, r7, #24
 8001410:	230a      	movs	r3, #10
 8001412:	2200      	movs	r2, #0
 8001414:	f005 fc26 	bl	8006c64 <osMessageQueuePut>
 8001418:	e01a      	b.n	8001450 <Calibration_Task+0xb8>
            }
            else
            {
                osMessageQueuePut(UartQueueHandle, "Calib Data Checksum Invalid\r\n", 0, 10);
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <Calibration_Task+0xc8>)
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	230a      	movs	r3, #10
 8001420:	2200      	movs	r2, #0
 8001422:	4913      	ldr	r1, [pc, #76]	@ (8001470 <Calibration_Task+0xd8>)
 8001424:	f005 fc1e 	bl	8006c64 <osMessageQueuePut>
                // Use default values
                CalibData.height_coeff = 1000;
 8001428:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <Calibration_Task+0xd0>)
 800142a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800142e:	805a      	strh	r2, [r3, #2]
                CalibData.slide_coeff = 1000;
 8001430:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <Calibration_Task+0xd0>)
 8001432:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001436:	80da      	strh	r2, [r3, #6]
                CalibData.incline_coeff = 1000;
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <Calibration_Task+0xd0>)
 800143a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800143e:	815a      	strh	r2, [r3, #10]
 8001440:	e006      	b.n	8001450 <Calibration_Task+0xb8>
            }
        }
        else
        {
            osMessageQueuePut(UartQueueHandle, "Failed to read calibration data\r\n", 0, 10);
 8001442:	4b07      	ldr	r3, [pc, #28]	@ (8001460 <Calibration_Task+0xc8>)
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	230a      	movs	r3, #10
 8001448:	2200      	movs	r2, #0
 800144a:	490a      	ldr	r1, [pc, #40]	@ (8001474 <Calibration_Task+0xdc>)
 800144c:	f005 fc0a 	bl	8006c64 <osMessageQueuePut>
        }

        // Calculate physical values using calibration data
        Calculate_Physical_Values();
 8001450:	f000 f812 	bl	8001478 <Calculate_Physical_Values>

        osDelay(10000); // 10 second cycle for calibration updates
 8001454:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001458:	f005 fa68 	bl	800692c <osDelay>
        if(SPI_EEPROM_ReadAll(calib_buffer, sizeof(Calibration_Data_t)) == HAL_OK)
 800145c:	e7a7      	b.n	80013ae <Calibration_Task+0x16>
 800145e:	bf00      	nop
 8001460:	200002ac 	.word	0x200002ac
 8001464:	0800cdac 	.word	0x0800cdac
 8001468:	20000254 	.word	0x20000254
 800146c:	0800cdc8 	.word	0x0800cdc8
 8001470:	0800ce00 	.word	0x0800ce00
 8001474:	0800ce20 	.word	0x0800ce20

08001478 <Calculate_Physical_Values>:
    }
}

void Calculate_Physical_Values(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
    // Apply calibration to convert raw ADC values to physical values
    Height_Measured = (Height_Variable * CalibData.height_coeff) / 1000 + CalibData.height_offset;
 800147c:	4b3a      	ldr	r3, [pc, #232]	@ (8001568 <Calculate_Physical_Values+0xf0>)
 800147e:	885b      	ldrh	r3, [r3, #2]
 8001480:	461a      	mov	r2, r3
 8001482:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <Calculate_Physical_Values+0xf4>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	4a39      	ldr	r2, [pc, #228]	@ (8001570 <Calculate_Physical_Values+0xf8>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	099b      	lsrs	r3, r3, #6
 8001492:	4a35      	ldr	r2, [pc, #212]	@ (8001568 <Calculate_Physical_Values+0xf0>)
 8001494:	8812      	ldrh	r2, [r2, #0]
 8001496:	4413      	add	r3, r2
 8001498:	4a36      	ldr	r2, [pc, #216]	@ (8001574 <Calculate_Physical_Values+0xfc>)
 800149a:	6013      	str	r3, [r2, #0]
    Slide_Measured = (Slide_Variable * CalibData.slide_coeff) / 1000 + CalibData.slide_offset;
 800149c:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <Calculate_Physical_Values+0xf0>)
 800149e:	88db      	ldrh	r3, [r3, #6]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <Calculate_Physical_Values+0x100>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	4a31      	ldr	r2, [pc, #196]	@ (8001570 <Calculate_Physical_Values+0xf8>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	099b      	lsrs	r3, r3, #6
 80014b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001568 <Calculate_Physical_Values+0xf0>)
 80014b4:	8892      	ldrh	r2, [r2, #4]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a30      	ldr	r2, [pc, #192]	@ (800157c <Calculate_Physical_Values+0x104>)
 80014ba:	6013      	str	r3, [r2, #0]
    Incline_Measured = (Incline_Variable * CalibData.incline_coeff) / 1000 + CalibData.incline_offset;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001568 <Calculate_Physical_Values+0xf0>)
 80014be:	895b      	ldrh	r3, [r3, #10]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <Calculate_Physical_Values+0x108>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	4a29      	ldr	r2, [pc, #164]	@ (8001570 <Calculate_Physical_Values+0xf8>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	099b      	lsrs	r3, r3, #6
 80014d2:	4a25      	ldr	r2, [pc, #148]	@ (8001568 <Calculate_Physical_Values+0xf0>)
 80014d4:	8912      	ldrh	r2, [r2, #8]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001584 <Calculate_Physical_Values+0x10c>)
 80014da:	6013      	str	r3, [r2, #0]

    // Keep values within valid ranges
    if(Height_Measured < 20) Height_Physical = 20;        // 2.0 cm minimum
 80014dc:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <Calculate_Physical_Values+0xfc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b13      	cmp	r3, #19
 80014e2:	d803      	bhi.n	80014ec <Calculate_Physical_Values+0x74>
 80014e4:	4b28      	ldr	r3, [pc, #160]	@ (8001588 <Calculate_Physical_Values+0x110>)
 80014e6:	2214      	movs	r2, #20
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e00b      	b.n	8001504 <Calculate_Physical_Values+0x8c>
    else if(Height_Measured > 53) Height_Physical = 53;   // 5.3 cm maximum
 80014ec:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <Calculate_Physical_Values+0xfc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b35      	cmp	r3, #53	@ 0x35
 80014f2:	d903      	bls.n	80014fc <Calculate_Physical_Values+0x84>
 80014f4:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <Calculate_Physical_Values+0x110>)
 80014f6:	2235      	movs	r2, #53	@ 0x35
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e003      	b.n	8001504 <Calculate_Physical_Values+0x8c>
    else Height_Physical = Height_Measured;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <Calculate_Physical_Values+0xfc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a21      	ldr	r2, [pc, #132]	@ (8001588 <Calculate_Physical_Values+0x110>)
 8001502:	6013      	str	r3, [r2, #0]

    if(Slide_Measured < 30) Slide_Physical = 30;          // 3.0 cm minimum
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <Calculate_Physical_Values+0x104>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b1d      	cmp	r3, #29
 800150a:	d803      	bhi.n	8001514 <Calculate_Physical_Values+0x9c>
 800150c:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <Calculate_Physical_Values+0x114>)
 800150e:	221e      	movs	r2, #30
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	e00b      	b.n	800152c <Calculate_Physical_Values+0xb4>
    else if(Slide_Measured > 75) Slide_Physical = 75;     // 7.5 cm maximum
 8001514:	4b19      	ldr	r3, [pc, #100]	@ (800157c <Calculate_Physical_Values+0x104>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b4b      	cmp	r3, #75	@ 0x4b
 800151a:	d903      	bls.n	8001524 <Calculate_Physical_Values+0xac>
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <Calculate_Physical_Values+0x114>)
 800151e:	224b      	movs	r2, #75	@ 0x4b
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e003      	b.n	800152c <Calculate_Physical_Values+0xb4>
    else Slide_Physical = Slide_Measured;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <Calculate_Physical_Values+0x104>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a18      	ldr	r2, [pc, #96]	@ (800158c <Calculate_Physical_Values+0x114>)
 800152a:	6013      	str	r3, [r2, #0]

    if(Incline_Measured < 6753) Incline_Physical = 6753;  // 67°5'30" minimum
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <Calculate_Physical_Values+0x10c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f5b3 5fd3 	cmp.w	r3, #6752	@ 0x1a60
 8001534:	d804      	bhi.n	8001540 <Calculate_Physical_Values+0xc8>
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <Calculate_Physical_Values+0x118>)
 8001538:	f641 2261 	movw	r2, #6753	@ 0x1a61
 800153c:	601a      	str	r2, [r3, #0]
    else if(Incline_Measured > 10553) Incline_Physical = 10553; // 105°5'30" maximum
    else Incline_Physical = Incline_Measured;
}
 800153e:	e00e      	b.n	800155e <Calculate_Physical_Values+0xe6>
    else if(Incline_Measured > 10553) Incline_Physical = 10553; // 105°5'30" maximum
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <Calculate_Physical_Values+0x10c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f642 1239 	movw	r2, #10553	@ 0x2939
 8001548:	4293      	cmp	r3, r2
 800154a:	d904      	bls.n	8001556 <Calculate_Physical_Values+0xde>
 800154c:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <Calculate_Physical_Values+0x118>)
 800154e:	f642 1239 	movw	r2, #10553	@ 0x2939
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	e003      	b.n	800155e <Calculate_Physical_Values+0xe6>
    else Incline_Physical = Incline_Measured;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <Calculate_Physical_Values+0x10c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <Calculate_Physical_Values+0x118>)
 800155c:	6013      	str	r3, [r2, #0]
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	20000254 	.word	0x20000254
 800156c:	20000000 	.word	0x20000000
 8001570:	10624dd3 	.word	0x10624dd3
 8001574:	20000264 	.word	0x20000264
 8001578:	20000004 	.word	0x20000004
 800157c:	20000268 	.word	0x20000268
 8001580:	20000008 	.word	0x20000008
 8001584:	2000026c 	.word	0x2000026c
 8001588:	20000270 	.word	0x20000270
 800158c:	20000274 	.word	0x20000274
 8001590:	20000278 	.word	0x20000278

08001594 <Calculate_Checksum>:

uint16_t Calculate_Checksum(Calibration_Data_t *data)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    uint16_t checksum = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	817b      	strh	r3, [r7, #10]
//    uint8_t ptr = (uint8_t)data;

    // Calculate checksum excluding the checksum field itself
    for(int i = 0; i < sizeof(Calibration_Data_t) - sizeof(uint16_t); i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	e002      	b.n	80015ac <Calculate_Checksum+0x18>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	3301      	adds	r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b0b      	cmp	r3, #11
 80015b0:	d9f9      	bls.n	80015a6 <Calculate_Checksum+0x12>
    {
//        checksum += ptr[i];
    }

    return checksum;
 80015b2:	897b      	ldrh	r3, [r7, #10]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SPI_EEPROM_ReadByte>:

HAL_StatusTypeDef SPI_EEPROM_ReadByte(uint16_t address, uint8_t *data)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b093      	sub	sp, #76	@ 0x4c
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef result = HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if (osMutexAcquire(spiMutexHandle, SPI_TIMEOUT) == osOK)
 80015d2:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <SPI_EEPROM_ReadByte+0xe4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015da:	4618      	mov	r0, r3
 80015dc:	f005 fa47 	bl	8006a6e <osMutexAcquire>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d158      	bne.n	8001698 <SPI_EEPROM_ReadByte+0xd8>
        SPI_Response_t response;
        uint8_t tx_buffer[sizeof(SPI_Command_t)];
        uint8_t rx_buffer[sizeof(SPI_Response_t)];

        // Prepare command
        cmd.header = SPI_CMD_HEADER;
 80015e6:	237e      	movs	r3, #126	@ 0x7e
 80015e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        cmd.length = sizeof(SPI_Command_t);
 80015ec:	2300      	movs	r3, #0
 80015ee:	f043 030f 	orr.w	r3, r3, #15
 80015f2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        cmd.cmd_id = SPI_CMD_READ_BYTE;
 8001608:	2301      	movs	r3, #1
 800160a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        cmd.param1 = address;
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	f8c7 3036 	str.w	r3, [r7, #54]	@ 0x36
        cmd.param2 = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8001618:	2300      	movs	r3, #0
 800161a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
        cmd.tail = SPI_CMD_TAIL;
 800161c:	237f      	movs	r3, #127	@ 0x7f
 800161e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

        memcpy(tx_buffer, &cmd, sizeof(SPI_Command_t));
 8001622:	f107 0414 	add.w	r4, r7, #20
 8001626:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800162a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800162c:	c407      	stmia	r4!, {r0, r1, r2}
 800162e:	8023      	strh	r3, [r4, #0]
 8001630:	3402      	adds	r4, #2
 8001632:	0c1b      	lsrs	r3, r3, #16
 8001634:	7023      	strb	r3, [r4, #0]

        // Send command and receive response
        if(HAL_SPI_TransmitReceive(&hspi2, tx_buffer, rx_buffer, sizeof(SPI_Command_t), SPI_TIMEOUT) == HAL_OK)
 8001636:	f107 0208 	add.w	r2, r7, #8
 800163a:	f107 0114 	add.w	r1, r7, #20
 800163e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	230f      	movs	r3, #15
 8001646:	4818      	ldr	r0, [pc, #96]	@ (80016a8 <SPI_EEPROM_ReadByte+0xe8>)
 8001648:	f003 feea 	bl	8005420 <HAL_SPI_TransmitReceive>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d11d      	bne.n	800168e <SPI_EEPROM_ReadByte+0xce>
        {
            // Parse response
            memcpy(&response, rx_buffer, sizeof(SPI_Response_t));
 8001652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001656:	f107 0208 	add.w	r2, r7, #8
 800165a:	ca07      	ldmia	r2, {r0, r1, r2}
 800165c:	c303      	stmia	r3!, {r0, r1}
 800165e:	801a      	strh	r2, [r3, #0]
 8001660:	3302      	adds	r3, #2
 8001662:	0c12      	lsrs	r2, r2, #16
 8001664:	701a      	strb	r2, [r3, #0]

            if(response.header == SPI_CMD_HEADER &&
 8001666:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800166a:	2b7e      	cmp	r3, #126	@ 0x7e
 800166c:	d10f      	bne.n	800168e <SPI_EEPROM_ReadByte+0xce>
               response.res_id == SPI_RES_READ_BYTE &&
 800166e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
            if(response.header == SPI_CMD_HEADER &&
 8001672:	2b81      	cmp	r3, #129	@ 0x81
 8001674:	d10b      	bne.n	800168e <SPI_EEPROM_ReadByte+0xce>
               response.trail == SPI_RES_TRAIL)
 8001676:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
               response.res_id == SPI_RES_READ_BYTE &&
 800167a:	2bbb      	cmp	r3, #187	@ 0xbb
 800167c:	d107      	bne.n	800168e <SPI_EEPROM_ReadByte+0xce>
            {
                *data = (uint8_t)(response.param1 & 0xFF);
 800167e:	f8d7 302a 	ldr.w	r3, [r7, #42]	@ 0x2a
 8001682:	b2da      	uxtb	r2, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	701a      	strb	r2, [r3, #0]
                result = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            }
        }

        osMutexRelease(spiMutexHandle);
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <SPI_EEPROM_ReadByte+0xe4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f005 fa36 	bl	8006b04 <osMutexRelease>
    }

    return result;
 8001698:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800169c:	4618      	mov	r0, r3
 800169e:	3744      	adds	r7, #68	@ 0x44
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	200002b8 	.word	0x200002b8
 80016a8:	20000310 	.word	0x20000310

080016ac <SPI_EEPROM_ReadAll>:

    return result;
}

HAL_StatusTypeDef SPI_EEPROM_ReadAll(uint8_t *buffer, uint16_t size)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	f2ad 4d44 	subw	sp, sp, #1092	@ 0x444
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80016b8:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80016bc:	6018      	str	r0, [r3, #0]
 80016be:	460a      	mov	r2, r1
 80016c0:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80016c4:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 80016c8:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef result = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f

    if (osMutexAcquire(spiMutexHandle, SPI_TIMEOUT * 2) == osOK)
 80016d0:	4b41      	ldr	r3, [pc, #260]	@ (80017d8 <SPI_EEPROM_ReadAll+0x12c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 f9c8 	bl	8006a6e <osMutexAcquire>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d172      	bne.n	80017ca <SPI_EEPROM_ReadAll+0x11e>
        SPI_Command_t cmd;
        uint8_t tx_buffer[sizeof(SPI_Command_t)];
        uint8_t rx_buffer[EEPROM_SIZE + 20]; // Extra space for response header

        // Prepare command
        cmd.header = SPI_CMD_HEADER;
 80016e4:	237e      	movs	r3, #126	@ 0x7e
 80016e6:	f887 3430 	strb.w	r3, [r7, #1072]	@ 0x430
        cmd.length = sizeof(SPI_Command_t);
 80016ea:	2300      	movs	r3, #0
 80016ec:	f043 030f 	orr.w	r3, r3, #15
 80016f0:	f887 3431 	strb.w	r3, [r7, #1073]	@ 0x431
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3432 	strb.w	r3, [r7, #1074]	@ 0x432
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3433 	strb.w	r3, [r7, #1075]	@ 0x433
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3434 	strb.w	r3, [r7, #1076]	@ 0x434
        cmd.cmd_id = SPI_CMD_READ_ALL;
 8001706:	2303      	movs	r3, #3
 8001708:	f887 3435 	strb.w	r3, [r7, #1077]	@ 0x435
        cmd.param1 = size;
 800170c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001710:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 8001714:	881b      	ldrh	r3, [r3, #0]
 8001716:	f8c7 3436 	str.w	r3, [r7, #1078]	@ 0x436
        cmd.param2 = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	f8a7 343a 	strh.w	r3, [r7, #1082]	@ 0x43a
 8001720:	2300      	movs	r3, #0
 8001722:	f8a7 343c 	strh.w	r3, [r7, #1084]	@ 0x43c
        cmd.tail = SPI_CMD_TAIL;
 8001726:	237f      	movs	r3, #127	@ 0x7f
 8001728:	f887 343e 	strb.w	r3, [r7, #1086]	@ 0x43e

        memcpy(tx_buffer, &cmd, sizeof(SPI_Command_t));
 800172c:	f507 6484 	add.w	r4, r7, #1056	@ 0x420
 8001730:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8001734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001736:	c407      	stmia	r4!, {r0, r1, r2}
 8001738:	8023      	strh	r3, [r4, #0]
 800173a:	3402      	adds	r4, #2
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	7023      	strb	r3, [r4, #0]

        // Send command
        if(HAL_SPI_Transmit(&hspi2, tx_buffer, sizeof(SPI_Command_t), SPI_TIMEOUT) == HAL_OK)
 8001740:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 8001744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001748:	220f      	movs	r2, #15
 800174a:	4824      	ldr	r0, [pc, #144]	@ (80017dc <SPI_EEPROM_ReadAll+0x130>)
 800174c:	f003 fc0b 	bl	8004f66 <HAL_SPI_Transmit>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d134      	bne.n	80017c0 <SPI_EEPROM_ReadAll+0x114>
        {
            osDelay(10); // Small delay for EEPROM to process
 8001756:	200a      	movs	r0, #10
 8001758:	f005 f8e8 	bl	800692c <osDelay>

            // Receive response
            if(HAL_SPI_Receive(&hspi2, rx_buffer, size + 10, SPI_TIMEOUT * 2) == HAL_OK)
 800175c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001760:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	330a      	adds	r3, #10
 8001768:	b29a      	uxth	r2, r3
 800176a:	f107 010c 	add.w	r1, r7, #12
 800176e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001772:	481a      	ldr	r0, [pc, #104]	@ (80017dc <SPI_EEPROM_ReadAll+0x130>)
 8001774:	f003 fd3b 	bl	80051ee <HAL_SPI_Receive>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d120      	bne.n	80017c0 <SPI_EEPROM_ReadAll+0x114>
            {
                // Parse response and extract data
                if(rx_buffer[0] == SPI_CMD_HEADER && rx_buffer[5] == SPI_RES_READ_ALL)
 800177e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001782:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b7e      	cmp	r3, #126	@ 0x7e
 800178a:	d119      	bne.n	80017c0 <SPI_EEPROM_ReadAll+0x114>
 800178c:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001790:	f2a3 4334 	subw	r3, r3, #1076	@ 0x434
 8001794:	795b      	ldrb	r3, [r3, #5]
 8001796:	2b83      	cmp	r3, #131	@ 0x83
 8001798:	d112      	bne.n	80017c0 <SPI_EEPROM_ReadAll+0x114>
                {
                    memcpy(buffer, &rx_buffer[10], size); // Skip header
 800179a:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800179e:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 80017a2:	881a      	ldrh	r2, [r3, #0]
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	f103 010a 	add.w	r1, r3, #10
 80017ac:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80017b0:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	f009 f9e6 	bl	800ab86 <memcpy>
                    result = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
                }
            }
        }

        osMutexRelease(spiMutexHandle);
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <SPI_EEPROM_ReadAll+0x12c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f005 f99d 	bl	8006b04 <osMutexRelease>
    }

    return result;
 80017ca:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	f207 4744 	addw	r7, r7, #1092	@ 0x444
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	200002b8 	.word	0x200002b8
 80017dc:	20000310 	.word	0x20000310

080017e0 <SPI_EEPROM_WriteAll>:

HAL_StatusTypeDef SPI_EEPROM_WriteAll(uint8_t *buffer, uint16_t size)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	f2ad 4d44 	subw	sp, sp, #1092	@ 0x444
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80017ec:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 80017f0:	6018      	str	r0, [r3, #0]
 80017f2:	460a      	mov	r2, r1
 80017f4:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80017f8:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 80017fc:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef result = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f

    if (osMutexAcquire(spiMutexHandle, SPI_TIMEOUT * 3) == osOK)
 8001804:	4b46      	ldr	r3, [pc, #280]	@ (8001920 <SPI_EEPROM_WriteAll+0x140>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800180c:	4618      	mov	r0, r3
 800180e:	f005 f92e 	bl	8006a6e <osMutexAcquire>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d17c      	bne.n	8001912 <SPI_EEPROM_WriteAll+0x132>
        SPI_Command_t cmd;
        uint8_t tx_buffer[sizeof(SPI_Command_t) + EEPROM_SIZE];
        uint8_t rx_buffer[sizeof(SPI_Response_t)];

        // Prepare command
        cmd.header = SPI_CMD_HEADER;
 8001818:	237e      	movs	r3, #126	@ 0x7e
 800181a:	f887 3430 	strb.w	r3, [r7, #1072]	@ 0x430
        cmd.length = sizeof(SPI_Command_t) + size;
 800181e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001822:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	330f      	adds	r3, #15
 800182a:	f8c7 3431 	str.w	r3, [r7, #1073]	@ 0x431
        cmd.cmd_id = SPI_CMD_WRITE_ALL;
 800182e:	2304      	movs	r3, #4
 8001830:	f887 3435 	strb.w	r3, [r7, #1077]	@ 0x435
        cmd.param1 = size;
 8001834:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001838:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	f8c7 3436 	str.w	r3, [r7, #1078]	@ 0x436
        cmd.param2 = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	f8a7 343a 	strh.w	r3, [r7, #1082]	@ 0x43a
 8001848:	2300      	movs	r3, #0
 800184a:	f8a7 343c 	strh.w	r3, [r7, #1084]	@ 0x43c
        cmd.tail = SPI_CMD_TAIL;
 800184e:	237f      	movs	r3, #127	@ 0x7f
 8001850:	f887 343e 	strb.w	r3, [r7, #1086]	@ 0x43e

        memcpy(tx_buffer, &cmd, sizeof(SPI_Command_t));
 8001854:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001858:	f5a3 6387 	sub.w	r3, r3, #1080	@ 0x438
 800185c:	461c      	mov	r4, r3
 800185e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8001862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001864:	c407      	stmia	r4!, {r0, r1, r2}
 8001866:	8023      	strh	r3, [r4, #0]
 8001868:	3402      	adds	r4, #2
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	7023      	strb	r3, [r4, #0]
        memcpy(&tx_buffer[sizeof(SPI_Command_t)], buffer, size);
 800186e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001872:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 8001876:	8819      	ldrh	r1, [r3, #0]
 8001878:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800187c:	f2a3 433c 	subw	r3, r3, #1084	@ 0x43c
 8001880:	f107 0208 	add.w	r2, r7, #8
 8001884:	f102 000f 	add.w	r0, r2, #15
 8001888:	460a      	mov	r2, r1
 800188a:	6819      	ldr	r1, [r3, #0]
 800188c:	f009 f97b 	bl	800ab86 <memcpy>

        // Send command and data
        if(HAL_SPI_Transmit(&hspi2, tx_buffer, sizeof(SPI_Command_t) + size, SPI_TIMEOUT * 2) == HAL_OK)
 8001890:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001894:	f2a3 433e 	subw	r3, r3, #1086	@ 0x43e
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	330f      	adds	r3, #15
 800189c:	b29a      	uxth	r2, r3
 800189e:	f107 0108 	add.w	r1, r7, #8
 80018a2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80018a6:	481f      	ldr	r0, [pc, #124]	@ (8001924 <SPI_EEPROM_WriteAll+0x144>)
 80018a8:	f003 fb5d 	bl	8004f66 <HAL_SPI_Transmit>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d12a      	bne.n	8001908 <SPI_EEPROM_WriteAll+0x128>
        {
            osDelay(50); // Delay for write operation
 80018b2:	2032      	movs	r0, #50	@ 0x32
 80018b4:	f005 f83a 	bl	800692c <osDelay>

            // Receive response
            if(HAL_SPI_Receive(&hspi2, rx_buffer, sizeof(SPI_Response_t), SPI_TIMEOUT) == HAL_OK)
 80018b8:	f207 4124 	addw	r1, r7, #1060	@ 0x424
 80018bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c0:	220b      	movs	r2, #11
 80018c2:	4818      	ldr	r0, [pc, #96]	@ (8001924 <SPI_EEPROM_WriteAll+0x144>)
 80018c4:	f003 fc93 	bl	80051ee <HAL_SPI_Receive>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d11c      	bne.n	8001908 <SPI_EEPROM_WriteAll+0x128>
            {
                SPI_Response_t response;
                memcpy(&response, rx_buffer, sizeof(SPI_Response_t));
 80018ce:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80018d2:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 80018d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d8:	c303      	stmia	r3!, {r0, r1}
 80018da:	801a      	strh	r2, [r3, #0]
 80018dc:	3302      	adds	r3, #2
 80018de:	0c12      	lsrs	r2, r2, #16
 80018e0:	701a      	strb	r2, [r3, #0]

                if(response.header == SPI_CMD_HEADER &&
 80018e2:	f897 3418 	ldrb.w	r3, [r7, #1048]	@ 0x418
 80018e6:	2b7e      	cmp	r3, #126	@ 0x7e
 80018e8:	d10e      	bne.n	8001908 <SPI_EEPROM_WriteAll+0x128>
                   response.res_id == SPI_RES_WRITE_ALL &&
 80018ea:	f897 341d 	ldrb.w	r3, [r7, #1053]	@ 0x41d
                if(response.header == SPI_CMD_HEADER &&
 80018ee:	2b84      	cmp	r3, #132	@ 0x84
 80018f0:	d10a      	bne.n	8001908 <SPI_EEPROM_WriteAll+0x128>
                   response.trail == SPI_RES_TRAIL &&
 80018f2:	f897 3422 	ldrb.w	r3, [r7, #1058]	@ 0x422
                   response.res_id == SPI_RES_WRITE_ALL &&
 80018f6:	2bbb      	cmp	r3, #187	@ 0xbb
 80018f8:	d106      	bne.n	8001908 <SPI_EEPROM_WriteAll+0x128>
                   response.param1 == 1) // OK response
 80018fa:	f8d7 341e 	ldr.w	r3, [r7, #1054]	@ 0x41e
                   response.trail == SPI_RES_TRAIL &&
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <SPI_EEPROM_WriteAll+0x128>
                {
                    result = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 343f 	strb.w	r3, [r7, #1087]	@ 0x43f
                }
            }
        }

        osMutexRelease(spiMutexHandle);
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <SPI_EEPROM_WriteAll+0x140>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f005 f8f9 	bl	8006b04 <osMutexRelease>
    }

    return result;
 8001912:	f897 343f 	ldrb.w	r3, [r7, #1087]	@ 0x43f
}
 8001916:	4618      	mov	r0, r3
 8001918:	f207 4744 	addw	r7, r7, #1092	@ 0x444
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	200002b8 	.word	0x200002b8
 8001924:	20000310 	.word	0x20000310

08001928 <i2_handle_seatstatus>:

void i2_handle_seatstatus(void * argument)
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b0a4      	sub	sp, #144	@ 0x90
 800192c:	af02      	add	r7, sp, #8
 800192e:	6078      	str	r0, [r7, #4]
    char uart_msg_ok[]  = "I2C message sent \r\n";
 8001930:	4b49      	ldr	r3, [pc, #292]	@ (8001a58 <i2_handle_seatstatus+0x130>)
 8001932:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 8001936:	461d      	mov	r5, r3
 8001938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800193a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800193c:	682b      	ldr	r3, [r5, #0]
 800193e:	6023      	str	r3, [r4, #0]
    char uart_msg_nok[] = "I2C message not sent\r\n";
 8001940:	4b46      	ldr	r3, [pc, #280]	@ (8001a5c <i2_handle_seatstatus+0x134>)
 8001942:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8001946:	461d      	mov	r5, r3
 8001948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001950:	6020      	str	r0, [r4, #0]
 8001952:	3404      	adds	r4, #4
 8001954:	8021      	strh	r1, [r4, #0]
 8001956:	3402      	adds	r4, #2
 8001958:	0c0b      	lsrs	r3, r1, #16
 800195a:	7023      	strb	r3, [r4, #0]
    uint8_t txBuffer[sizeof(SeatST)];

    for(;;)
    {
        // Use physical values instead of raw variables
        SeatST.height   = (uint16_t)Height_Physical;
 800195c:	4b40      	ldr	r3, [pc, #256]	@ (8001a60 <i2_handle_seatstatus+0x138>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b40      	ldr	r3, [pc, #256]	@ (8001a64 <i2_handle_seatstatus+0x13c>)
 8001964:	801a      	strh	r2, [r3, #0]
        SeatST.slide    = (uint16_t)Slide_Physical;
 8001966:	4b40      	ldr	r3, [pc, #256]	@ (8001a68 <i2_handle_seatstatus+0x140>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <i2_handle_seatstatus+0x13c>)
 800196e:	805a      	strh	r2, [r3, #2]
        SeatST.incline  = (uint16_t)Incline_Physical;
 8001970:	4b3e      	ldr	r3, [pc, #248]	@ (8001a6c <i2_handle_seatstatus+0x144>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <i2_handle_seatstatus+0x13c>)
 8001978:	809a      	strh	r2, [r3, #4]

        if(DefaultMode == MANUAL_MODE)
 800197a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <i2_handle_seatstatus+0x148>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d103      	bne.n	800198c <i2_handle_seatstatus+0x64>
        {
        	SeatST.command ='M';
 8001984:	4b37      	ldr	r3, [pc, #220]	@ (8001a64 <i2_handle_seatstatus+0x13c>)
 8001986:	224d      	movs	r2, #77	@ 0x4d
 8001988:	719a      	strb	r2, [r3, #6]
 800198a:	e007      	b.n	800199c <i2_handle_seatstatus+0x74>
        }else if(DefaultMode == AUTOMATIC_MODE)
 800198c:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <i2_handle_seatstatus+0x148>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b01      	cmp	r3, #1
 8001994:	d102      	bne.n	800199c <i2_handle_seatstatus+0x74>
        {
        	SeatST.command = 'A';
 8001996:	4b33      	ldr	r3, [pc, #204]	@ (8001a64 <i2_handle_seatstatus+0x13c>)
 8001998:	2241      	movs	r2, #65	@ 0x41
 800199a:	719a      	strb	r2, [r3, #6]
        }

        memcpy(txBuffer, &SeatST, sizeof(SeatST));
 800199c:	4a31      	ldr	r2, [pc, #196]	@ (8001a64 <i2_handle_seatstatus+0x13c>)
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a6:	6018      	str	r0, [r3, #0]
 80019a8:	3304      	adds	r3, #4
 80019aa:	8019      	strh	r1, [r3, #0]
 80019ac:	3302      	adds	r3, #2
 80019ae:	0c0a      	lsrs	r2, r1, #16
 80019b0:	701a      	strb	r2, [r3, #0]

        if (osMutexAcquire(i2cMutexHandle, 200) == osOK)
 80019b2:	4b30      	ldr	r3, [pc, #192]	@ (8001a74 <i2_handle_seatstatus+0x14c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	21c8      	movs	r1, #200	@ 0xc8
 80019b8:	4618      	mov	r0, r3
 80019ba:	f005 f858 	bl	8006a6e <osMutexAcquire>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d13c      	bne.n	8001a3e <i2_handle_seatstatus+0x116>
        {
            HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(&hi2c1,
 80019c4:	f107 020c 	add.w	r2, r7, #12
 80019c8:	23c8      	movs	r3, #200	@ 0xc8
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2307      	movs	r3, #7
 80019ce:	21a0      	movs	r1, #160	@ 0xa0
 80019d0:	4829      	ldr	r0, [pc, #164]	@ (8001a78 <i2_handle_seatstatus+0x150>)
 80019d2:	f002 fa1b 	bl	8003e0c <HAL_I2C_Master_Transmit>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
                                                            (uint16_t)(I2C_SLAVE_ADD << 1),
                                                            txBuffer,
                                                            sizeof(txBuffer),
                                                            200);

            osMutexRelease(i2cMutexHandle);
 80019dc:	4b25      	ldr	r3, [pc, #148]	@ (8001a74 <i2_handle_seatstatus+0x14c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f005 f88f 	bl	8006b04 <osMutexRelease>

            if (res == HAL_OK)
 80019e6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <i2_handle_seatstatus+0xd8>
            {
                osMessageQueuePut(UartQueueHandle, uart_msg_ok, 0, 10);
 80019ee:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <i2_handle_seatstatus+0x154>)
 80019f0:	6818      	ldr	r0, [r3, #0]
 80019f2:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 80019f6:	230a      	movs	r3, #10
 80019f8:	2200      	movs	r2, #0
 80019fa:	f005 f933 	bl	8006c64 <osMessageQueuePut>
 80019fe:	e026      	b.n	8001a4e <i2_handle_seatstatus+0x126>
            }
            else
            {
                int len = snprintf(errbuf, sizeof(errbuf), "I2C error =%d\r\n", (int)res);
 8001a00:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001a04:	f107 0014 	add.w	r0, r7, #20
 8001a08:	4a1d      	ldr	r2, [pc, #116]	@ (8001a80 <i2_handle_seatstatus+0x158>)
 8001a0a:	2140      	movs	r1, #64	@ 0x40
 8001a0c:	f008 ff64 	bl	800a8d8 <sniprintf>
 8001a10:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                if(len>0) osMessageQueuePut(UartQueueHandle, errbuf, 0, 10);
 8001a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	dd07      	ble.n	8001a2c <i2_handle_seatstatus+0x104>
 8001a1c:	4b17      	ldr	r3, [pc, #92]	@ (8001a7c <i2_handle_seatstatus+0x154>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	f107 0114 	add.w	r1, r7, #20
 8001a24:	230a      	movs	r3, #10
 8001a26:	2200      	movs	r2, #0
 8001a28:	f005 f91c 	bl	8006c64 <osMessageQueuePut>
                osMessageQueuePut(UartQueueHandle, uart_msg_nok, 0, 10);
 8001a2c:	4b13      	ldr	r3, [pc, #76]	@ (8001a7c <i2_handle_seatstatus+0x154>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001a34:	230a      	movs	r3, #10
 8001a36:	2200      	movs	r2, #0
 8001a38:	f005 f914 	bl	8006c64 <osMessageQueuePut>
 8001a3c:	e007      	b.n	8001a4e <i2_handle_seatstatus+0x126>
            }
        }
        else
        {
            osMessageQueuePut(UartQueueHandle, uart_msg_nok, 0, 10);
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <i2_handle_seatstatus+0x154>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001a46:	230a      	movs	r3, #10
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f005 f90b 	bl	8006c64 <osMessageQueuePut>
        }
        osDelay(1500);
 8001a4e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001a52:	f004 ff6b 	bl	800692c <osDelay>
        SeatST.height   = (uint16_t)Height_Physical;
 8001a56:	e781      	b.n	800195c <i2_handle_seatstatus+0x34>
 8001a58:	0800ce54 	.word	0x0800ce54
 8001a5c:	0800ce68 	.word	0x0800ce68
 8001a60:	20000270 	.word	0x20000270
 8001a64:	2000024c 	.word	0x2000024c
 8001a68:	20000274 	.word	0x20000274
 8001a6c:	20000278 	.word	0x20000278
 8001a70:	20000248 	.word	0x20000248
 8001a74:	200002b4 	.word	0x200002b4
 8001a78:	200002bc 	.word	0x200002bc
 8001a7c:	200002ac 	.word	0x200002ac
 8001a80:	0800ce44 	.word	0x0800ce44

08001a84 <i2cTask>:
    }
}

void i2cTask(void *argument)
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b0a0      	sub	sp, #128	@ 0x80
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	6078      	str	r0, [r7, #4]
    uint8_t tx;
    char uart_msg_ok[]  = "I2C mode sent \r\n";
 8001a8c:	4b35      	ldr	r3, [pc, #212]	@ (8001b64 <i2cTask+0xe0>)
 8001a8e:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8001a92:	461d      	mov	r5, r3
 8001a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a98:	682b      	ldr	r3, [r5, #0]
 8001a9a:	7023      	strb	r3, [r4, #0]
    char uart_msg_err[] = "I2C mode error\r\n";
 8001a9c:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <i2cTask+0xe4>)
 8001a9e:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa8:	682b      	ldr	r3, [r5, #0]
 8001aaa:	7023      	strb	r3, [r4, #0]
    char errbuf[64];

    for(;;)
    {
        tx = (DefaultMode == AUTOMATIC_MODE) ? 'A' : 'M';
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <i2cTask+0xe8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <i2cTask+0x36>
 8001ab6:	2341      	movs	r3, #65	@ 0x41
 8001ab8:	e000      	b.n	8001abc <i2cTask+0x38>
 8001aba:	234d      	movs	r3, #77	@ 0x4d
 8001abc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

        if (osMutexAcquire(i2cMutexHandle, 200) == osOK)
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b70 <i2cTask+0xec>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	21c8      	movs	r1, #200	@ 0xc8
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f004 ffd1 	bl	8006a6e <osMutexAcquire>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d13a      	bne.n	8001b48 <i2cTask+0xc4>
        {
            HAL_StatusTypeDef res = HAL_I2C_Master_Transmit(&hi2c1,
 8001ad2:	f107 026f 	add.w	r2, r7, #111	@ 0x6f
 8001ad6:	23c8      	movs	r3, #200	@ 0xc8
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2301      	movs	r3, #1
 8001adc:	21a0      	movs	r1, #160	@ 0xa0
 8001ade:	4825      	ldr	r0, [pc, #148]	@ (8001b74 <i2cTask+0xf0>)
 8001ae0:	f002 f994 	bl	8003e0c <HAL_I2C_Master_Transmit>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                                                            (uint16_t)(I2C_SLAVE_ADD << 1),
                                                            &tx,
                                                            1,
                                                            200);
            osMutexRelease(i2cMutexHandle);
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <i2cTask+0xec>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f005 f808 	bl	8006b04 <osMutexRelease>

            if (res == HAL_OK)
 8001af4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d108      	bne.n	8001b0e <i2cTask+0x8a>
            {
                osMessageQueuePut(UartQueueHandle, uart_msg_ok, 0, 10);
 8001afc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <i2cTask+0xf4>)
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8001b04:	230a      	movs	r3, #10
 8001b06:	2200      	movs	r2, #0
 8001b08:	f005 f8ac 	bl	8006c64 <osMessageQueuePut>
 8001b0c:	e024      	b.n	8001b58 <i2cTask+0xd4>
            }
            else
            {
                int len = snprintf(errbuf, sizeof(errbuf), "I2C mode error =%d\r\n", (int)res);
 8001b0e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001b12:	f107 0008 	add.w	r0, r7, #8
 8001b16:	4a19      	ldr	r2, [pc, #100]	@ (8001b7c <i2cTask+0xf8>)
 8001b18:	2140      	movs	r1, #64	@ 0x40
 8001b1a:	f008 fedd 	bl	800a8d8 <sniprintf>
 8001b1e:	6738      	str	r0, [r7, #112]	@ 0x70
                if(len>0) osMessageQueuePut(UartQueueHandle, errbuf, 0, 10);
 8001b20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	dd07      	ble.n	8001b36 <i2cTask+0xb2>
 8001b26:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <i2cTask+0xf4>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	f107 0108 	add.w	r1, r7, #8
 8001b2e:	230a      	movs	r3, #10
 8001b30:	2200      	movs	r2, #0
 8001b32:	f005 f897 	bl	8006c64 <osMessageQueuePut>
                osMessageQueuePut(UartQueueHandle, uart_msg_err, 0, 10);
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <i2cTask+0xf4>)
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001b3e:	230a      	movs	r3, #10
 8001b40:	2200      	movs	r2, #0
 8001b42:	f005 f88f 	bl	8006c64 <osMessageQueuePut>
 8001b46:	e007      	b.n	8001b58 <i2cTask+0xd4>
            }
        }
        else
        {
            osMessageQueuePut(UartQueueHandle, uart_msg_err, 0, 10);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <i2cTask+0xf4>)
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001b50:	230a      	movs	r3, #10
 8001b52:	2200      	movs	r2, #0
 8001b54:	f005 f886 	bl	8006c64 <osMessageQueuePut>
        }

        osDelay(1000);
 8001b58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001b5c:	f004 fee6 	bl	800692c <osDelay>
        tx = (DefaultMode == AUTOMATIC_MODE) ? 'A' : 'M';
 8001b60:	e7a4      	b.n	8001aac <i2cTask+0x28>
 8001b62:	bf00      	nop
 8001b64:	0800ce98 	.word	0x0800ce98
 8001b68:	0800ceac 	.word	0x0800ceac
 8001b6c:	20000248 	.word	0x20000248
 8001b70:	200002b4 	.word	0x200002b4
 8001b74:	200002bc 	.word	0x200002bc
 8001b78:	200002ac 	.word	0x200002ac
 8001b7c:	0800ce80 	.word	0x0800ce80

08001b80 <SwitchModeTask>:
    }
}

void SwitchModeTask(void *argument)
{
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b090      	sub	sp, #64	@ 0x40
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
    char msg_auto[]   = "Switched to AUTO mode\r\n";
 8001b88:	4b28      	ldr	r3, [pc, #160]	@ (8001c2c <SwitchModeTask+0xac>)
 8001b8a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001b8e:	461d      	mov	r5, r3
 8001b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b94:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b98:	e884 0003 	stmia.w	r4, {r0, r1}
    char msg_manual[] = "Switched to MANUAL mode\r\n";
 8001b9c:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <SwitchModeTask+0xb0>)
 8001b9e:	f107 040c 	add.w	r4, r7, #12
 8001ba2:	461d      	mov	r5, r3
 8001ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bac:	c403      	stmia	r4!, {r0, r1}
 8001bae:	8022      	strh	r2, [r4, #0]

    for(;;)
    {
        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8001bb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bb4:	481f      	ldr	r0, [pc, #124]	@ (8001c34 <SwitchModeTask+0xb4>)
 8001bb6:	f001 ff99 	bl	8003aec <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d130      	bne.n	8001c22 <SwitchModeTask+0xa2>
        {
            taskENTER_CRITICAL();
 8001bc0:	f007 fe62 	bl	8009888 <vPortEnterCritical>
            DefaultMode = (DefaultMode == MANUAL_MODE) ? AUTOMATIC_MODE : MANUAL_MODE;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c38 <SwitchModeTask+0xb8>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf0c      	ite	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	2300      	movne	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <SwitchModeTask+0xb8>)
 8001bd8:	701a      	strb	r2, [r3, #0]
            taskEXIT_CRITICAL();
 8001bda:	f007 fe87 	bl	80098ec <vPortExitCritical>

            if(DefaultMode == AUTOMATIC_MODE)
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <SwitchModeTask+0xb8>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d108      	bne.n	8001bfa <SwitchModeTask+0x7a>
                osMessageQueuePut(UartQueueHandle, msg_auto, 0, 10);
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <SwitchModeTask+0xbc>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f005 f836 	bl	8006c64 <osMessageQueuePut>
 8001bf8:	e00b      	b.n	8001c12 <SwitchModeTask+0x92>
            else
                osMessageQueuePut(UartQueueHandle, msg_manual, 0, 10);
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <SwitchModeTask+0xbc>)
 8001bfc:	6818      	ldr	r0, [r3, #0]
 8001bfe:	f107 010c 	add.w	r1, r7, #12
 8001c02:	230a      	movs	r3, #10
 8001c04:	2200      	movs	r2, #0
 8001c06:	f005 f82d 	bl	8006c64 <osMessageQueuePut>

            while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001c0a:	e002      	b.n	8001c12 <SwitchModeTask+0x92>
                osDelay(10);
 8001c0c:	200a      	movs	r0, #10
 8001c0e:	f004 fe8d 	bl	800692c <osDelay>
            while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET) {
 8001c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c16:	4807      	ldr	r0, [pc, #28]	@ (8001c34 <SwitchModeTask+0xb4>)
 8001c18:	f001 ff68 	bl	8003aec <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d0f4      	beq.n	8001c0c <SwitchModeTask+0x8c>
            }
        }
        osDelay(50);
 8001c22:	2032      	movs	r0, #50	@ 0x32
 8001c24:	f004 fe82 	bl	800692c <osDelay>
        if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET)
 8001c28:	e7c2      	b.n	8001bb0 <SwitchModeTask+0x30>
 8001c2a:	bf00      	nop
 8001c2c:	0800cec0 	.word	0x0800cec0
 8001c30:	0800ced8 	.word	0x0800ced8
 8001c34:	40020800 	.word	0x40020800
 8001c38:	20000248 	.word	0x20000248
 8001c3c:	200002ac 	.word	0x200002ac

08001c40 <AdcHeightTask>:
    }
}

void AdcHeightTask(void *argument)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	@ 0x50
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
    char msg[50];

    for(;;)
    {
        if(DefaultMode == AUTOMATIC_MODE)
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <AdcHeightTask+0x5c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d120      	bne.n	8001c94 <AdcHeightTask+0x54>
        {
            uint32_t value = Read_ADC_Channel(ADC_CHANNEL_11);
 8001c52:	200b      	movs	r0, #11
 8001c54:	f000 fa9e 	bl	8002194 <Read_ADC_Channel>
 8001c58:	6478      	str	r0, [r7, #68]	@ 0x44

            taskENTER_CRITICAL();
 8001c5a:	f007 fe15 	bl	8009888 <vPortEnterCritical>
            Height_Variable = value;
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <AdcHeightTask+0x60>)
 8001c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c62:	6013      	str	r3, [r2, #0]
            taskEXIT_CRITICAL();
 8001c64:	f007 fe42 	bl	80098ec <vPortExitCritical>

            int len = snprintf(msg, sizeof(msg), "Height_raw=%lu, phys=%lu\r\n", value, Height_Physical);
 8001c68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca4 <AdcHeightTask+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f107 000c 	add.w	r0, r7, #12
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca8 <AdcHeightTask+0x68>)
 8001c76:	2132      	movs	r1, #50	@ 0x32
 8001c78:	f008 fe2e 	bl	800a8d8 <sniprintf>
 8001c7c:	6438      	str	r0, [r7, #64]	@ 0x40
            if (len > 0) {
 8001c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	dd07      	ble.n	8001c94 <AdcHeightTask+0x54>
                osMessageQueuePut(UartQueueHandle, msg, 0, 10);
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <AdcHeightTask+0x6c>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	f107 010c 	add.w	r1, r7, #12
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f004 ffe8 	bl	8006c64 <osMessageQueuePut>
            }
        }
        osDelay(200);
 8001c94:	20c8      	movs	r0, #200	@ 0xc8
 8001c96:	f004 fe49 	bl	800692c <osDelay>
        if(DefaultMode == AUTOMATIC_MODE)
 8001c9a:	e7d5      	b.n	8001c48 <AdcHeightTask+0x8>
 8001c9c:	20000248 	.word	0x20000248
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000270 	.word	0x20000270
 8001ca8:	0800cef4 	.word	0x0800cef4
 8001cac:	200002ac 	.word	0x200002ac

08001cb0 <AdcSlideTask>:
    }
}

void AdcSlideTask(void *argument)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b094      	sub	sp, #80	@ 0x50
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	6078      	str	r0, [r7, #4]
    char msg[50];

    for(;;)
    {
        if(DefaultMode == AUTOMATIC_MODE)
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <AdcSlideTask+0x5c>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d120      	bne.n	8001d04 <AdcSlideTask+0x54>
        {
            uint32_t value = Read_ADC_Channel(ADC_CHANNEL_12);
 8001cc2:	200c      	movs	r0, #12
 8001cc4:	f000 fa66 	bl	8002194 <Read_ADC_Channel>
 8001cc8:	6478      	str	r0, [r7, #68]	@ 0x44

            taskENTER_CRITICAL();
 8001cca:	f007 fddd 	bl	8009888 <vPortEnterCritical>
            Slide_Variable = value;
 8001cce:	4a10      	ldr	r2, [pc, #64]	@ (8001d10 <AdcSlideTask+0x60>)
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd2:	6013      	str	r3, [r2, #0]
            taskEXIT_CRITICAL();
 8001cd4:	f007 fe0a 	bl	80098ec <vPortExitCritical>

            int len = snprintf(msg, sizeof(msg), "Slide_raw=%lu, phys=%lu\r\n", value, Slide_Physical);
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <AdcSlideTask+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f107 000c 	add.w	r0, r7, #12
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8001d18 <AdcSlideTask+0x68>)
 8001ce6:	2132      	movs	r1, #50	@ 0x32
 8001ce8:	f008 fdf6 	bl	800a8d8 <sniprintf>
 8001cec:	6438      	str	r0, [r7, #64]	@ 0x40
            if (len > 0) {
 8001cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	dd07      	ble.n	8001d04 <AdcSlideTask+0x54>
                osMessageQueuePut(UartQueueHandle, msg, 0, 10);
 8001cf4:	4b09      	ldr	r3, [pc, #36]	@ (8001d1c <AdcSlideTask+0x6c>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	f107 010c 	add.w	r1, r7, #12
 8001cfc:	230a      	movs	r3, #10
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f004 ffb0 	bl	8006c64 <osMessageQueuePut>
            }
        }
        osDelay(250);
 8001d04:	20fa      	movs	r0, #250	@ 0xfa
 8001d06:	f004 fe11 	bl	800692c <osDelay>
        if(DefaultMode == AUTOMATIC_MODE)
 8001d0a:	e7d5      	b.n	8001cb8 <AdcSlideTask+0x8>
 8001d0c:	20000248 	.word	0x20000248
 8001d10:	20000004 	.word	0x20000004
 8001d14:	20000274 	.word	0x20000274
 8001d18:	0800cf10 	.word	0x0800cf10
 8001d1c:	200002ac 	.word	0x200002ac

08001d20 <AdcInclineTask>:
    }
}

void AdcInclineTask(void *argument)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b094      	sub	sp, #80	@ 0x50
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	6078      	str	r0, [r7, #4]
    char msg[50];

    for(;;)
    {
        if(DefaultMode == AUTOMATIC_MODE)
 8001d28:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <AdcInclineTask+0x60>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d120      	bne.n	8001d74 <AdcInclineTask+0x54>
        {
            uint32_t value = Read_ADC_Channel(ADC_CHANNEL_13);
 8001d32:	200d      	movs	r0, #13
 8001d34:	f000 fa2e 	bl	8002194 <Read_ADC_Channel>
 8001d38:	6478      	str	r0, [r7, #68]	@ 0x44

            taskENTER_CRITICAL();
 8001d3a:	f007 fda5 	bl	8009888 <vPortEnterCritical>
            Incline_Variable = value;
 8001d3e:	4a11      	ldr	r2, [pc, #68]	@ (8001d84 <AdcInclineTask+0x64>)
 8001d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d42:	6013      	str	r3, [r2, #0]
            taskEXIT_CRITICAL();
 8001d44:	f007 fdd2 	bl	80098ec <vPortExitCritical>

            int len = snprintf(msg, sizeof(msg), "Incline_raw=%lu, phys=%lu\r\n", value, Incline_Physical);
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <AdcInclineTask+0x68>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f107 000c 	add.w	r0, r7, #12
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d54:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <AdcInclineTask+0x6c>)
 8001d56:	2132      	movs	r1, #50	@ 0x32
 8001d58:	f008 fdbe 	bl	800a8d8 <sniprintf>
 8001d5c:	6438      	str	r0, [r7, #64]	@ 0x40
            if (len > 0) {
 8001d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	dd07      	ble.n	8001d74 <AdcInclineTask+0x54>
                osMessageQueuePut(UartQueueHandle, msg, 0, 10);
 8001d64:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <AdcInclineTask+0x70>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	f107 010c 	add.w	r1, r7, #12
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f004 ff78 	bl	8006c64 <osMessageQueuePut>
            }
        }
        osDelay(300);
 8001d74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d78:	f004 fdd8 	bl	800692c <osDelay>
        if(DefaultMode == AUTOMATIC_MODE)
 8001d7c:	e7d4      	b.n	8001d28 <AdcInclineTask+0x8>
 8001d7e:	bf00      	nop
 8001d80:	20000248 	.word	0x20000248
 8001d84:	20000008 	.word	0x20000008
 8001d88:	20000278 	.word	0x20000278
 8001d8c:	0800cf2c 	.word	0x0800cf2c
 8001d90:	200002ac 	.word	0x200002ac

08001d94 <Buttons_ReadTask_highmode>:
    }
}

void Buttons_ReadTask_highmode(void * argument)
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b0a2      	sub	sp, #136	@ 0x88
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
    char msg1[] = "Height Increasing\r\n";
 8001d9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f5c <Buttons_ReadTask_highmode+0x1c8>)
 8001d9e:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001da2:	461d      	mov	r5, r3
 8001da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da8:	682b      	ldr	r3, [r5, #0]
 8001daa:	6023      	str	r3, [r4, #0]
    char msg2[] = "Slider Increasing\r\n";
 8001dac:	4b6c      	ldr	r3, [pc, #432]	@ (8001f60 <Buttons_ReadTask_highmode+0x1cc>)
 8001dae:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001db2:	461d      	mov	r5, r3
 8001db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db8:	682b      	ldr	r3, [r5, #0]
 8001dba:	6023      	str	r3, [r4, #0]
    char incline_inc[] = "Incline Increase\r\n";
 8001dbc:	4b69      	ldr	r3, [pc, #420]	@ (8001f64 <Buttons_ReadTask_highmode+0x1d0>)
 8001dbe:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001dc2:	461d      	mov	r5, r3
 8001dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dc8:	682b      	ldr	r3, [r5, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	8022      	strh	r2, [r4, #0]
 8001dce:	3402      	adds	r4, #2
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	7023      	strb	r3, [r4, #0]
    char incline_inc_max[] = "Incline Increase Max\r\n";
 8001dd4:	4b64      	ldr	r3, [pc, #400]	@ (8001f68 <Buttons_ReadTask_highmode+0x1d4>)
 8001dd6:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001dda:	461d      	mov	r5, r3
 8001ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001de0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001de4:	6020      	str	r0, [r4, #0]
 8001de6:	3404      	adds	r4, #4
 8001de8:	8021      	strh	r1, [r4, #0]
 8001dea:	3402      	adds	r4, #2
 8001dec:	0c0b      	lsrs	r3, r1, #16
 8001dee:	7023      	strb	r3, [r4, #0]
    char msg3[] = "Maximum Height\r\n";
 8001df0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f6c <Buttons_ReadTask_highmode+0x1d8>)
 8001df2:	f107 0420 	add.w	r4, r7, #32
 8001df6:	461d      	mov	r5, r3
 8001df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfc:	682b      	ldr	r3, [r5, #0]
 8001dfe:	7023      	strb	r3, [r4, #0]
    char msg4[] = "Maximum Slider\r\n";
 8001e00:	4b5b      	ldr	r3, [pc, #364]	@ (8001f70 <Buttons_ReadTask_highmode+0x1dc>)
 8001e02:	f107 040c 	add.w	r4, r7, #12
 8001e06:	461d      	mov	r5, r3
 8001e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0c:	682b      	ldr	r3, [r5, #0]
 8001e0e:	7023      	strb	r3, [r4, #0]

    for(;;)
    {
        if(DefaultMode == MANUAL_MODE)
 8001e10:	4b58      	ldr	r3, [pc, #352]	@ (8001f74 <Buttons_ReadTask_highmode+0x1e0>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 809c 	bne.w	8001f54 <Buttons_ReadTask_highmode+0x1c0>
        {
            if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET)
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	4856      	ldr	r0, [pc, #344]	@ (8001f78 <Buttons_ReadTask_highmode+0x1e4>)
 8001e20:	f001 fe64 	bl	8003aec <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d12b      	bne.n	8001e82 <Buttons_ReadTask_highmode+0xee>
            {
                taskENTER_CRITICAL();
 8001e2a:	f007 fd2d 	bl	8009888 <vPortEnterCritical>
                if(Height_Variable >= 5)
 8001e2e:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <Buttons_ReadTask_highmode+0x1e8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d90a      	bls.n	8001e4c <Buttons_ReadTask_highmode+0xb8>
                {
                    taskEXIT_CRITICAL();
 8001e36:	f007 fd59 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, msg3, 0, 10);
 8001e3a:	4b51      	ldr	r3, [pc, #324]	@ (8001f80 <Buttons_ReadTask_highmode+0x1ec>)
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	f107 0120 	add.w	r1, r7, #32
 8001e42:	230a      	movs	r3, #10
 8001e44:	2200      	movs	r2, #0
 8001e46:	f004 ff0d 	bl	8006c64 <osMessageQueuePut>
 8001e4a:	e012      	b.n	8001e72 <Buttons_ReadTask_highmode+0xde>
                }
                else
                {
                    Height_Variable += 1;
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f7c <Buttons_ReadTask_highmode+0x1e8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3301      	adds	r3, #1
 8001e52:	4a4a      	ldr	r2, [pc, #296]	@ (8001f7c <Buttons_ReadTask_highmode+0x1e8>)
 8001e54:	6013      	str	r3, [r2, #0]
                    taskEXIT_CRITICAL();
 8001e56:	f007 fd49 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, msg1, 0, 10);
 8001e5a:	4b49      	ldr	r3, [pc, #292]	@ (8001f80 <Buttons_ReadTask_highmode+0x1ec>)
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 8001e62:	230a      	movs	r3, #10
 8001e64:	2200      	movs	r2, #0
 8001e66:	f004 fefd 	bl	8006c64 <osMessageQueuePut>
                }
                while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == GPIO_PIN_SET) osDelay(10);
 8001e6a:	e002      	b.n	8001e72 <Buttons_ReadTask_highmode+0xde>
 8001e6c:	200a      	movs	r0, #10
 8001e6e:	f004 fd5d 	bl	800692c <osDelay>
 8001e72:	2110      	movs	r1, #16
 8001e74:	4840      	ldr	r0, [pc, #256]	@ (8001f78 <Buttons_ReadTask_highmode+0x1e4>)
 8001e76:	f001 fe39 	bl	8003aec <HAL_GPIO_ReadPin>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d0f5      	beq.n	8001e6c <Buttons_ReadTask_highmode+0xd8>
 8001e80:	e064      	b.n	8001f4c <Buttons_ReadTask_highmode+0x1b8>
            }
            else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)
 8001e82:	2140      	movs	r1, #64	@ 0x40
 8001e84:	483c      	ldr	r0, [pc, #240]	@ (8001f78 <Buttons_ReadTask_highmode+0x1e4>)
 8001e86:	f001 fe31 	bl	8003aec <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d12b      	bne.n	8001ee8 <Buttons_ReadTask_highmode+0x154>
            {
                taskENTER_CRITICAL();
 8001e90:	f007 fcfa 	bl	8009888 <vPortEnterCritical>
                if(Slide_Variable >= 7)
 8001e94:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <Buttons_ReadTask_highmode+0x1f0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d90a      	bls.n	8001eb2 <Buttons_ReadTask_highmode+0x11e>
                {
                    taskEXIT_CRITICAL();
 8001e9c:	f007 fd26 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, msg4, 0, 10);
 8001ea0:	4b37      	ldr	r3, [pc, #220]	@ (8001f80 <Buttons_ReadTask_highmode+0x1ec>)
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	f107 010c 	add.w	r1, r7, #12
 8001ea8:	230a      	movs	r3, #10
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f004 feda 	bl	8006c64 <osMessageQueuePut>
 8001eb0:	e012      	b.n	8001ed8 <Buttons_ReadTask_highmode+0x144>
                }
                else
                {
                    Slide_Variable += 1;
 8001eb2:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <Buttons_ReadTask_highmode+0x1f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4a32      	ldr	r2, [pc, #200]	@ (8001f84 <Buttons_ReadTask_highmode+0x1f0>)
 8001eba:	6013      	str	r3, [r2, #0]
                    taskEXIT_CRITICAL();
 8001ebc:	f007 fd16 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, msg2, 0, 10);
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <Buttons_ReadTask_highmode+0x1ec>)
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8001ec8:	230a      	movs	r3, #10
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f004 feca 	bl	8006c64 <osMessageQueuePut>
                }
                while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) osDelay(10);
 8001ed0:	e002      	b.n	8001ed8 <Buttons_ReadTask_highmode+0x144>
 8001ed2:	200a      	movs	r0, #10
 8001ed4:	f004 fd2a 	bl	800692c <osDelay>
 8001ed8:	2140      	movs	r1, #64	@ 0x40
 8001eda:	4827      	ldr	r0, [pc, #156]	@ (8001f78 <Buttons_ReadTask_highmode+0x1e4>)
 8001edc:	f001 fe06 	bl	8003aec <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d0f5      	beq.n	8001ed2 <Buttons_ReadTask_highmode+0x13e>
 8001ee6:	e031      	b.n	8001f4c <Buttons_ReadTask_highmode+0x1b8>
            }
            else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET)
 8001ee8:	2180      	movs	r1, #128	@ 0x80
 8001eea:	4823      	ldr	r0, [pc, #140]	@ (8001f78 <Buttons_ReadTask_highmode+0x1e4>)
 8001eec:	f001 fdfe 	bl	8003aec <HAL_GPIO_ReadPin>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d12a      	bne.n	8001f4c <Buttons_ReadTask_highmode+0x1b8>
            {
                taskENTER_CRITICAL();
 8001ef6:	f007 fcc7 	bl	8009888 <vPortEnterCritical>
                if(Incline_Variable >= 105)
 8001efa:	4b23      	ldr	r3, [pc, #140]	@ (8001f88 <Buttons_ReadTask_highmode+0x1f4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b68      	cmp	r3, #104	@ 0x68
 8001f00:	d90a      	bls.n	8001f18 <Buttons_ReadTask_highmode+0x184>
                {
                    taskEXIT_CRITICAL();
 8001f02:	f007 fcf3 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, incline_inc_max, 0, 10);
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <Buttons_ReadTask_highmode+0x1ec>)
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001f0e:	230a      	movs	r3, #10
 8001f10:	2200      	movs	r2, #0
 8001f12:	f004 fea7 	bl	8006c64 <osMessageQueuePut>
 8001f16:	e012      	b.n	8001f3e <Buttons_ReadTask_highmode+0x1aa>
                }
                else
                {
                    Incline_Variable += 1;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <Buttons_ReadTask_highmode+0x1f4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001f88 <Buttons_ReadTask_highmode+0x1f4>)
 8001f20:	6013      	str	r3, [r2, #0]
                    taskEXIT_CRITICAL();
 8001f22:	f007 fce3 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, incline_inc, 0, 10);
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <Buttons_ReadTask_highmode+0x1ec>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001f2e:	230a      	movs	r3, #10
 8001f30:	2200      	movs	r2, #0
 8001f32:	f004 fe97 	bl	8006c64 <osMessageQueuePut>
                }
                while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET) osDelay(10);
 8001f36:	e002      	b.n	8001f3e <Buttons_ReadTask_highmode+0x1aa>
 8001f38:	200a      	movs	r0, #10
 8001f3a:	f004 fcf7 	bl	800692c <osDelay>
 8001f3e:	2180      	movs	r1, #128	@ 0x80
 8001f40:	480d      	ldr	r0, [pc, #52]	@ (8001f78 <Buttons_ReadTask_highmode+0x1e4>)
 8001f42:	f001 fdd3 	bl	8003aec <HAL_GPIO_ReadPin>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d0f5      	beq.n	8001f38 <Buttons_ReadTask_highmode+0x1a4>
            }

            osDelay(50);
 8001f4c:	2032      	movs	r0, #50	@ 0x32
 8001f4e:	f004 fced 	bl	800692c <osDelay>
 8001f52:	e75d      	b.n	8001e10 <Buttons_ReadTask_highmode+0x7c>
        }
        else
        {
            osDelay(100);
 8001f54:	2064      	movs	r0, #100	@ 0x64
 8001f56:	f004 fce9 	bl	800692c <osDelay>
        if(DefaultMode == MANUAL_MODE)
 8001f5a:	e759      	b.n	8001e10 <Buttons_ReadTask_highmode+0x7c>
 8001f5c:	0800cf48 	.word	0x0800cf48
 8001f60:	0800cf5c 	.word	0x0800cf5c
 8001f64:	0800cf70 	.word	0x0800cf70
 8001f68:	0800cf84 	.word	0x0800cf84
 8001f6c:	0800cf9c 	.word	0x0800cf9c
 8001f70:	0800cfb0 	.word	0x0800cfb0
 8001f74:	20000248 	.word	0x20000248
 8001f78:	40020000 	.word	0x40020000
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	200002ac 	.word	0x200002ac
 8001f84:	20000004 	.word	0x20000004
 8001f88:	20000008 	.word	0x20000008

08001f8c <Buttons_ReadTask_Lowmode>:
        }
    }
}

void Buttons_ReadTask_Lowmode(void * argument)
{
 8001f8c:	b5b0      	push	{r4, r5, r7, lr}
 8001f8e:	b0a4      	sub	sp, #144	@ 0x90
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    char Notification_height_dec[] = "Height Decrease\r\n";
 8001f94:	4b72      	ldr	r3, [pc, #456]	@ (8002160 <Buttons_ReadTask_Lowmode+0x1d4>)
 8001f96:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa0:	682b      	ldr	r3, [r5, #0]
 8001fa2:	8023      	strh	r3, [r4, #0]
    char Notification_height_maxdec[] = "Height Decrease Max\r\n";
 8001fa4:	4b6f      	ldr	r3, [pc, #444]	@ (8002164 <Buttons_ReadTask_Lowmode+0x1d8>)
 8001fa6:	f107 0464 	add.w	r4, r7, #100	@ 0x64
 8001faa:	461d      	mov	r5, r3
 8001fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fb4:	6020      	str	r0, [r4, #0]
 8001fb6:	3404      	adds	r4, #4
 8001fb8:	8021      	strh	r1, [r4, #0]

    char Notification_slide_dec[] = "Slide Decrease\r\n";
 8001fba:	4b6b      	ldr	r3, [pc, #428]	@ (8002168 <Buttons_ReadTask_Lowmode+0x1dc>)
 8001fbc:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8001fc0:	461d      	mov	r5, r3
 8001fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc6:	682b      	ldr	r3, [r5, #0]
 8001fc8:	7023      	strb	r3, [r4, #0]
    char Notification_slide_maxdec[] = "Slide Decrease Max\r\n";
 8001fca:	4b68      	ldr	r3, [pc, #416]	@ (800216c <Buttons_ReadTask_Lowmode+0x1e0>)
 8001fcc:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fda:	6020      	str	r0, [r4, #0]
 8001fdc:	3404      	adds	r4, #4
 8001fde:	7021      	strb	r1, [r4, #0]

    char Notification_incline_dec[] = "Incline Decrease\r\n";
 8001fe0:	4b63      	ldr	r3, [pc, #396]	@ (8002170 <Buttons_ReadTask_Lowmode+0x1e4>)
 8001fe2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	8022      	strh	r2, [r4, #0]
 8001ff2:	3402      	adds	r4, #2
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	7023      	strb	r3, [r4, #0]
    char Notification_incline_maxdec[] = "Incline Decrease Max\r\n";
 8001ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8002174 <Buttons_ReadTask_Lowmode+0x1e8>)
 8001ffa:	f107 040c 	add.w	r4, r7, #12
 8001ffe:	461d      	mov	r5, r3
 8002000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002004:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002008:	6020      	str	r0, [r4, #0]
 800200a:	3404      	adds	r4, #4
 800200c:	8021      	strh	r1, [r4, #0]
 800200e:	3402      	adds	r4, #2
 8002010:	0c0b      	lsrs	r3, r1, #16
 8002012:	7023      	strb	r3, [r4, #0]

    for(;;)
    {
        if (DefaultMode == MANUAL_MODE)
 8002014:	4b58      	ldr	r3, [pc, #352]	@ (8002178 <Buttons_ReadTask_Lowmode+0x1ec>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 809c 	bne.w	8002158 <Buttons_ReadTask_Lowmode+0x1cc>
        {
            if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET)
 8002020:	2110      	movs	r1, #16
 8002022:	4856      	ldr	r0, [pc, #344]	@ (800217c <Buttons_ReadTask_Lowmode+0x1f0>)
 8002024:	f001 fd62 	bl	8003aec <HAL_GPIO_ReadPin>
 8002028:	4603      	mov	r3, r0
 800202a:	2b01      	cmp	r3, #1
 800202c:	d12b      	bne.n	8002086 <Buttons_ReadTask_Lowmode+0xfa>
            {
                taskENTER_CRITICAL();
 800202e:	f007 fc2b 	bl	8009888 <vPortEnterCritical>
                if(Height_Variable <= 2)
 8002032:	4b53      	ldr	r3, [pc, #332]	@ (8002180 <Buttons_ReadTask_Lowmode+0x1f4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d80a      	bhi.n	8002050 <Buttons_ReadTask_Lowmode+0xc4>
                {
                    taskEXIT_CRITICAL();
 800203a:	f007 fc57 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, Notification_height_maxdec, 0, 10);
 800203e:	4b51      	ldr	r3, [pc, #324]	@ (8002184 <Buttons_ReadTask_Lowmode+0x1f8>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8002046:	230a      	movs	r3, #10
 8002048:	2200      	movs	r2, #0
 800204a:	f004 fe0b 	bl	8006c64 <osMessageQueuePut>
 800204e:	e012      	b.n	8002076 <Buttons_ReadTask_Lowmode+0xea>
                }
                else
                {
                    Height_Variable -= 1;
 8002050:	4b4b      	ldr	r3, [pc, #300]	@ (8002180 <Buttons_ReadTask_Lowmode+0x1f4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	4a4a      	ldr	r2, [pc, #296]	@ (8002180 <Buttons_ReadTask_Lowmode+0x1f4>)
 8002058:	6013      	str	r3, [r2, #0]
                    taskEXIT_CRITICAL();
 800205a:	f007 fc47 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, Notification_height_dec, 0, 10);
 800205e:	4b49      	ldr	r3, [pc, #292]	@ (8002184 <Buttons_ReadTask_Lowmode+0x1f8>)
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8002066:	230a      	movs	r3, #10
 8002068:	2200      	movs	r2, #0
 800206a:	f004 fdfb 	bl	8006c64 <osMessageQueuePut>
                }
                while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4) == GPIO_PIN_SET) osDelay(10);
 800206e:	e002      	b.n	8002076 <Buttons_ReadTask_Lowmode+0xea>
 8002070:	200a      	movs	r0, #10
 8002072:	f004 fc5b 	bl	800692c <osDelay>
 8002076:	2110      	movs	r1, #16
 8002078:	4840      	ldr	r0, [pc, #256]	@ (800217c <Buttons_ReadTask_Lowmode+0x1f0>)
 800207a:	f001 fd37 	bl	8003aec <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	2b01      	cmp	r3, #1
 8002082:	d0f5      	beq.n	8002070 <Buttons_ReadTask_Lowmode+0xe4>
 8002084:	e064      	b.n	8002150 <Buttons_ReadTask_Lowmode+0x1c4>
            }
            else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET)
 8002086:	2120      	movs	r1, #32
 8002088:	483c      	ldr	r0, [pc, #240]	@ (800217c <Buttons_ReadTask_Lowmode+0x1f0>)
 800208a:	f001 fd2f 	bl	8003aec <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
 8002090:	2b01      	cmp	r3, #1
 8002092:	d12b      	bne.n	80020ec <Buttons_ReadTask_Lowmode+0x160>
            {
                taskENTER_CRITICAL();
 8002094:	f007 fbf8 	bl	8009888 <vPortEnterCritical>
                if(Slide_Variable <= 3)
 8002098:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <Buttons_ReadTask_Lowmode+0x1fc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d80a      	bhi.n	80020b6 <Buttons_ReadTask_Lowmode+0x12a>
                {
                    taskEXIT_CRITICAL();
 80020a0:	f007 fc24 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, Notification_slide_maxdec, 0, 10);
 80020a4:	4b37      	ldr	r3, [pc, #220]	@ (8002184 <Buttons_ReadTask_Lowmode+0x1f8>)
 80020a6:	6818      	ldr	r0, [r3, #0]
 80020a8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80020ac:	230a      	movs	r3, #10
 80020ae:	2200      	movs	r2, #0
 80020b0:	f004 fdd8 	bl	8006c64 <osMessageQueuePut>
 80020b4:	e012      	b.n	80020dc <Buttons_ReadTask_Lowmode+0x150>
                }
                else
                {
                    Slide_Variable -= 1;
 80020b6:	4b34      	ldr	r3, [pc, #208]	@ (8002188 <Buttons_ReadTask_Lowmode+0x1fc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	4a32      	ldr	r2, [pc, #200]	@ (8002188 <Buttons_ReadTask_Lowmode+0x1fc>)
 80020be:	6013      	str	r3, [r2, #0]
                    taskEXIT_CRITICAL();
 80020c0:	f007 fc14 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, Notification_slide_dec, 0, 10);
 80020c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002184 <Buttons_ReadTask_Lowmode+0x1f8>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80020cc:	230a      	movs	r3, #10
 80020ce:	2200      	movs	r2, #0
 80020d0:	f004 fdc8 	bl	8006c64 <osMessageQueuePut>
                }
                while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) osDelay(10);
 80020d4:	e002      	b.n	80020dc <Buttons_ReadTask_Lowmode+0x150>
 80020d6:	200a      	movs	r0, #10
 80020d8:	f004 fc28 	bl	800692c <osDelay>
 80020dc:	2120      	movs	r1, #32
 80020de:	4827      	ldr	r0, [pc, #156]	@ (800217c <Buttons_ReadTask_Lowmode+0x1f0>)
 80020e0:	f001 fd04 	bl	8003aec <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d0f5      	beq.n	80020d6 <Buttons_ReadTask_Lowmode+0x14a>
 80020ea:	e031      	b.n	8002150 <Buttons_ReadTask_Lowmode+0x1c4>
            }
            else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)
 80020ec:	2101      	movs	r1, #1
 80020ee:	4827      	ldr	r0, [pc, #156]	@ (800218c <Buttons_ReadTask_Lowmode+0x200>)
 80020f0:	f001 fcfc 	bl	8003aec <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d12a      	bne.n	8002150 <Buttons_ReadTask_Lowmode+0x1c4>
            {
                taskENTER_CRITICAL();
 80020fa:	f007 fbc5 	bl	8009888 <vPortEnterCritical>
                if(Incline_Variable <= 67)
 80020fe:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <Buttons_ReadTask_Lowmode+0x204>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b43      	cmp	r3, #67	@ 0x43
 8002104:	d80a      	bhi.n	800211c <Buttons_ReadTask_Lowmode+0x190>
                {
                    taskEXIT_CRITICAL();
 8002106:	f007 fbf1 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, Notification_incline_maxdec, 0, 10);
 800210a:	4b1e      	ldr	r3, [pc, #120]	@ (8002184 <Buttons_ReadTask_Lowmode+0x1f8>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	f107 010c 	add.w	r1, r7, #12
 8002112:	230a      	movs	r3, #10
 8002114:	2200      	movs	r2, #0
 8002116:	f004 fda5 	bl	8006c64 <osMessageQueuePut>
 800211a:	e012      	b.n	8002142 <Buttons_ReadTask_Lowmode+0x1b6>
                }
                else
                {
                    Incline_Variable -= 1;
 800211c:	4b1c      	ldr	r3, [pc, #112]	@ (8002190 <Buttons_ReadTask_Lowmode+0x204>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3b01      	subs	r3, #1
 8002122:	4a1b      	ldr	r2, [pc, #108]	@ (8002190 <Buttons_ReadTask_Lowmode+0x204>)
 8002124:	6013      	str	r3, [r2, #0]
                    taskEXIT_CRITICAL();
 8002126:	f007 fbe1 	bl	80098ec <vPortExitCritical>
                    osMessageQueuePut(UartQueueHandle, Notification_incline_dec, 0, 10);
 800212a:	4b16      	ldr	r3, [pc, #88]	@ (8002184 <Buttons_ReadTask_Lowmode+0x1f8>)
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002132:	230a      	movs	r3, #10
 8002134:	2200      	movs	r2, #0
 8002136:	f004 fd95 	bl	8006c64 <osMessageQueuePut>
                }
                while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET) osDelay(10);
 800213a:	e002      	b.n	8002142 <Buttons_ReadTask_Lowmode+0x1b6>
 800213c:	200a      	movs	r0, #10
 800213e:	f004 fbf5 	bl	800692c <osDelay>
 8002142:	2101      	movs	r1, #1
 8002144:	4811      	ldr	r0, [pc, #68]	@ (800218c <Buttons_ReadTask_Lowmode+0x200>)
 8002146:	f001 fcd1 	bl	8003aec <HAL_GPIO_ReadPin>
 800214a:	4603      	mov	r3, r0
 800214c:	2b01      	cmp	r3, #1
 800214e:	d0f5      	beq.n	800213c <Buttons_ReadTask_Lowmode+0x1b0>
            }

            osDelay(50);
 8002150:	2032      	movs	r0, #50	@ 0x32
 8002152:	f004 fbeb 	bl	800692c <osDelay>
 8002156:	e75d      	b.n	8002014 <Buttons_ReadTask_Lowmode+0x88>
        }
        else
        {
            osDelay(100);
 8002158:	2064      	movs	r0, #100	@ 0x64
 800215a:	f004 fbe7 	bl	800692c <osDelay>
        if (DefaultMode == MANUAL_MODE)
 800215e:	e759      	b.n	8002014 <Buttons_ReadTask_Lowmode+0x88>
 8002160:	0800cfc4 	.word	0x0800cfc4
 8002164:	0800cfd8 	.word	0x0800cfd8
 8002168:	0800cff0 	.word	0x0800cff0
 800216c:	0800d004 	.word	0x0800d004
 8002170:	0800d01c 	.word	0x0800d01c
 8002174:	0800d030 	.word	0x0800d030
 8002178:	20000248 	.word	0x20000248
 800217c:	40020800 	.word	0x40020800
 8002180:	20000000 	.word	0x20000000
 8002184:	200002ac 	.word	0x200002ac
 8002188:	20000004 	.word	0x20000004
 800218c:	40020400 	.word	0x40020400
 8002190:	20000008 	.word	0x20000008

08002194 <Read_ADC_Channel>:
        }
    }
}

uint32_t Read_ADC_Channel(uint32_t channel)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b088      	sub	sp, #32
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]

    sConfig.Channel = channel;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021b2:	2300      	movs	r3, #0
 80021b4:	617b      	str	r3, [r7, #20]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80021b6:	f107 030c 	add.w	r3, r7, #12
 80021ba:	4619      	mov	r1, r3
 80021bc:	480b      	ldr	r0, [pc, #44]	@ (80021ec <Read_ADC_Channel+0x58>)
 80021be:	f001 f801 	bl	80031c4 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc1);
 80021c2:	480a      	ldr	r0, [pc, #40]	@ (80021ec <Read_ADC_Channel+0x58>)
 80021c4:	f000 fe7e 	bl	8002ec4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	4807      	ldr	r0, [pc, #28]	@ (80021ec <Read_ADC_Channel+0x58>)
 80021ce:	f000 ff60 	bl	8003092 <HAL_ADC_PollForConversion>
    uint32_t value = HAL_ADC_GetValue(&hadc1);
 80021d2:	4806      	ldr	r0, [pc, #24]	@ (80021ec <Read_ADC_Channel+0x58>)
 80021d4:	f000 ffe8 	bl	80031a8 <HAL_ADC_GetValue>
 80021d8:	61f8      	str	r0, [r7, #28]
    HAL_ADC_Stop(&hadc1);
 80021da:	4804      	ldr	r0, [pc, #16]	@ (80021ec <Read_ADC_Channel+0x58>)
 80021dc:	f000 ff26 	bl	800302c <HAL_ADC_Stop>

    return value;
 80021e0:	69fb      	ldr	r3, [r7, #28]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000200 	.word	0x20000200

080021f0 <FSM_Task>:

// ==== FSM Task ====
void FSM_Task(void *argument)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
//    char msg[50];

    for(;;)
    {
    	switch(CurrentState)
 80021f8:	4b60      	ldr	r3, [pc, #384]	@ (800237c <FSM_Task+0x18c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b04      	cmp	r3, #4
 8002200:	f200 80b6 	bhi.w	8002370 <FSM_Task+0x180>
 8002204:	a201      	add	r2, pc, #4	@ (adr r2, 800220c <FSM_Task+0x1c>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	08002221 	.word	0x08002221
 8002210:	0800224d 	.word	0x0800224d
 8002214:	080022d5 	.word	0x080022d5
 8002218:	08002287 	.word	0x08002287
 800221c:	080022f9 	.word	0x080022f9
    	{
    	    case STATE_OFF:
    	        osMessageQueuePut(UartQueueHandle, "State=OFF\r\n", 0, 10);
 8002220:	4b57      	ldr	r3, [pc, #348]	@ (8002380 <FSM_Task+0x190>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	230a      	movs	r3, #10
 8002226:	2200      	movs	r2, #0
 8002228:	4956      	ldr	r1, [pc, #344]	@ (8002384 <FSM_Task+0x194>)
 800222a:	f004 fd1b 	bl	8006c64 <osMessageQueuePut>
    	        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET) // Ignition
 800222e:	2102      	movs	r1, #2
 8002230:	4855      	ldr	r0, [pc, #340]	@ (8002388 <FSM_Task+0x198>)
 8002232:	f001 fc5b 	bl	8003aec <HAL_GPIO_ReadPin>
 8002236:	4603      	mov	r3, r0
 8002238:	2b01      	cmp	r3, #1
 800223a:	f040 8090 	bne.w	800235e <FSM_Task+0x16e>
    	        {
    	            CurrentState = STATE_IDLE;
 800223e:	4b4f      	ldr	r3, [pc, #316]	@ (800237c <FSM_Task+0x18c>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
    	            // Initialize SPI EEPROM communication when turning on
    	            SPI_CurrentState = SPI_IDLE;
 8002244:	4b51      	ldr	r3, [pc, #324]	@ (800238c <FSM_Task+0x19c>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
    	        }
    	        break;
 800224a:	e088      	b.n	800235e <FSM_Task+0x16e>

    	    case STATE_IDLE:
    	        osMessageQueuePut(UartQueueHandle, "State=IDLE\r\n", 0, 10);
 800224c:	4b4c      	ldr	r3, [pc, #304]	@ (8002380 <FSM_Task+0x190>)
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	230a      	movs	r3, #10
 8002252:	2200      	movs	r2, #0
 8002254:	494e      	ldr	r1, [pc, #312]	@ (8002390 <FSM_Task+0x1a0>)
 8002256:	f004 fd05 	bl	8006c64 <osMessageQueuePut>
    	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) // Start Moving
 800225a:	2101      	movs	r1, #1
 800225c:	484d      	ldr	r0, [pc, #308]	@ (8002394 <FSM_Task+0x1a4>)
 800225e:	f001 fc45 	bl	8003aec <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d103      	bne.n	8002270 <FSM_Task+0x80>
    	            CurrentState = STATE_MOVING;
 8002268:	4b44      	ldr	r3, [pc, #272]	@ (800237c <FSM_Task+0x18c>)
 800226a:	2203      	movs	r2, #3
 800226c:	701a      	strb	r2, [r3, #0]
    	        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) // Lock
    	            CurrentState = STATE_LOCKED;
    	        break;
 800226e:	e078      	b.n	8002362 <FSM_Task+0x172>
    	        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) // Lock
 8002270:	2102      	movs	r1, #2
 8002272:	4849      	ldr	r0, [pc, #292]	@ (8002398 <FSM_Task+0x1a8>)
 8002274:	f001 fc3a 	bl	8003aec <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b01      	cmp	r3, #1
 800227c:	d171      	bne.n	8002362 <FSM_Task+0x172>
    	            CurrentState = STATE_LOCKED;
 800227e:	4b3f      	ldr	r3, [pc, #252]	@ (800237c <FSM_Task+0x18c>)
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
    	        break;
 8002284:	e06d      	b.n	8002362 <FSM_Task+0x172>

    	    case STATE_MOVING:
    	        osMessageQueuePut(UartQueueHandle, "State=MOVING\r\n", 0, 10);
 8002286:	4b3e      	ldr	r3, [pc, #248]	@ (8002380 <FSM_Task+0x190>)
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	230a      	movs	r3, #10
 800228c:	2200      	movs	r2, #0
 800228e:	4943      	ldr	r1, [pc, #268]	@ (800239c <FSM_Task+0x1ac>)
 8002290:	f004 fce8 	bl	8006c64 <osMessageQueuePut>
    	        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) // Stop
 8002294:	2101      	movs	r1, #1
 8002296:	483f      	ldr	r0, [pc, #252]	@ (8002394 <FSM_Task+0x1a4>)
 8002298:	f001 fc28 	bl	8003aec <HAL_GPIO_ReadPin>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d103      	bne.n	80022aa <FSM_Task+0xba>
    	            CurrentState = STATE_IDLE;
 80022a2:	4b36      	ldr	r3, [pc, #216]	@ (800237c <FSM_Task+0x18c>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
    	        else if (Height_Physical > 53 || Slide_Physical > 75 || Incline_Physical > 10553)
    	        {
    	            CurrentState = STATE_ERROR;
    	            SPI_CurrentState = SPI_ERROR;
    	        }
    	        break;
 80022a8:	e05d      	b.n	8002366 <FSM_Task+0x176>
    	        else if (Height_Physical > 53 || Slide_Physical > 75 || Incline_Physical > 10553)
 80022aa:	4b3d      	ldr	r3, [pc, #244]	@ (80023a0 <FSM_Task+0x1b0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b35      	cmp	r3, #53	@ 0x35
 80022b0:	d809      	bhi.n	80022c6 <FSM_Task+0xd6>
 80022b2:	4b3c      	ldr	r3, [pc, #240]	@ (80023a4 <FSM_Task+0x1b4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b4b      	cmp	r3, #75	@ 0x4b
 80022b8:	d805      	bhi.n	80022c6 <FSM_Task+0xd6>
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <FSM_Task+0x1b8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f642 1239 	movw	r2, #10553	@ 0x2939
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d94f      	bls.n	8002366 <FSM_Task+0x176>
    	            CurrentState = STATE_ERROR;
 80022c6:	4b2d      	ldr	r3, [pc, #180]	@ (800237c <FSM_Task+0x18c>)
 80022c8:	2204      	movs	r2, #4
 80022ca:	701a      	strb	r2, [r3, #0]
    	            SPI_CurrentState = SPI_ERROR;
 80022cc:	4b2f      	ldr	r3, [pc, #188]	@ (800238c <FSM_Task+0x19c>)
 80022ce:	2203      	movs	r2, #3
 80022d0:	701a      	strb	r2, [r3, #0]
    	        break;
 80022d2:	e048      	b.n	8002366 <FSM_Task+0x176>

    	    case STATE_LOCKED:
    	        osMessageQueuePut(UartQueueHandle, "State=LOCKED\r\n", 0, 10);
 80022d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002380 <FSM_Task+0x190>)
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	230a      	movs	r3, #10
 80022da:	2200      	movs	r2, #0
 80022dc:	4933      	ldr	r1, [pc, #204]	@ (80023ac <FSM_Task+0x1bc>)
 80022de:	f004 fcc1 	bl	8006c64 <osMessageQueuePut>
    	        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == GPIO_PIN_SET) // Unlock
 80022e2:	2104      	movs	r1, #4
 80022e4:	4828      	ldr	r0, [pc, #160]	@ (8002388 <FSM_Task+0x198>)
 80022e6:	f001 fc01 	bl	8003aec <HAL_GPIO_ReadPin>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d13c      	bne.n	800236a <FSM_Task+0x17a>
    	            CurrentState = STATE_IDLE;
 80022f0:	4b22      	ldr	r3, [pc, #136]	@ (800237c <FSM_Task+0x18c>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
    	        break;
 80022f6:	e038      	b.n	800236a <FSM_Task+0x17a>

    	    case STATE_ERROR:
    	        osMessageQueuePut(UartQueueHandle, "⚠ ERROR STATE - SPI/Sensor Error\r\n", 0, 10);
 80022f8:	4b21      	ldr	r3, [pc, #132]	@ (8002380 <FSM_Task+0x190>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	230a      	movs	r3, #10
 80022fe:	2200      	movs	r2, #0
 8002300:	492b      	ldr	r1, [pc, #172]	@ (80023b0 <FSM_Task+0x1c0>)
 8002302:	f004 fcaf 	bl	8006c64 <osMessageQueuePut>
    	        // In error state:
    	        // 1. Stop all movements
    	        // 2. Try to save current state to EEPROM
    	        // 3. Wait for reset
    	        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_SET) // Reset button
 8002306:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800230a:	481f      	ldr	r0, [pc, #124]	@ (8002388 <FSM_Task+0x198>)
 800230c:	f001 fbee 	bl	8003aec <HAL_GPIO_ReadPin>
 8002310:	4603      	mov	r3, r0
 8002312:	2b01      	cmp	r3, #1
 8002314:	d12b      	bne.n	800236e <FSM_Task+0x17e>
    	        {
    	            CurrentState = STATE_IDLE;
 8002316:	4b19      	ldr	r3, [pc, #100]	@ (800237c <FSM_Task+0x18c>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
    	            SPI_CurrentState = SPI_IDLE;
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <FSM_Task+0x19c>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]

    	            // Try to save calibration data on reset
    	            uint8_t calib_buffer[sizeof(Calibration_Data_t)];
    	            CalibData.checksum = Calculate_Checksum(&CalibData);
 8002322:	4824      	ldr	r0, [pc, #144]	@ (80023b4 <FSM_Task+0x1c4>)
 8002324:	f7ff f936 	bl	8001594 <Calculate_Checksum>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <FSM_Task+0x1c4>)
 800232e:	819a      	strh	r2, [r3, #12]
    	            memcpy(calib_buffer, &CalibData, sizeof(Calibration_Data_t));
 8002330:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <FSM_Task+0x1c4>)
 8002332:	f107 0408 	add.w	r4, r7, #8
 8002336:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002338:	c407      	stmia	r4!, {r0, r1, r2}
 800233a:	8023      	strh	r3, [r4, #0]

    	            if(SPI_EEPROM_WriteAll(calib_buffer, sizeof(Calibration_Data_t)) == HAL_OK)
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	210e      	movs	r1, #14
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fa4c 	bl	80017e0 <SPI_EEPROM_WriteAll>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10f      	bne.n	800236e <FSM_Task+0x17e>
    	            {
    	                osMessageQueuePut(UartQueueHandle, "Calibration saved to EEPROM\r\n", 0, 10);
 800234e:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <FSM_Task+0x190>)
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	230a      	movs	r3, #10
 8002354:	2200      	movs	r2, #0
 8002356:	4918      	ldr	r1, [pc, #96]	@ (80023b8 <FSM_Task+0x1c8>)
 8002358:	f004 fc84 	bl	8006c64 <osMessageQueuePut>
    	            }
    	        }
    	        break;
 800235c:	e007      	b.n	800236e <FSM_Task+0x17e>
    	        break;
 800235e:	bf00      	nop
 8002360:	e006      	b.n	8002370 <FSM_Task+0x180>
    	        break;
 8002362:	bf00      	nop
 8002364:	e004      	b.n	8002370 <FSM_Task+0x180>
    	        break;
 8002366:	bf00      	nop
 8002368:	e002      	b.n	8002370 <FSM_Task+0x180>
    	        break;
 800236a:	bf00      	nop
 800236c:	e000      	b.n	8002370 <FSM_Task+0x180>
    	        break;
 800236e:	bf00      	nop
    	}

        osDelay(300);
 8002370:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002374:	f004 fada 	bl	800692c <osDelay>
    	switch(CurrentState)
 8002378:	e73e      	b.n	80021f8 <FSM_Task+0x8>
 800237a:	bf00      	nop
 800237c:	20000249 	.word	0x20000249
 8002380:	200002ac 	.word	0x200002ac
 8002384:	0800d048 	.word	0x0800d048
 8002388:	40020800 	.word	0x40020800
 800238c:	2000024a 	.word	0x2000024a
 8002390:	0800d054 	.word	0x0800d054
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	0800d064 	.word	0x0800d064
 80023a0:	20000270 	.word	0x20000270
 80023a4:	20000274 	.word	0x20000274
 80023a8:	20000278 	.word	0x20000278
 80023ac:	0800d074 	.word	0x0800d074
 80023b0:	0800d084 	.word	0x0800d084
 80023b4:	20000254 	.word	0x20000254
 80023b8:	0800d0ac 	.word	0x0800d0ac

080023bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	@ 0x28
 80023c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002510 <MX_GPIO_Init+0x154>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	4a4d      	ldr	r2, [pc, #308]	@ (8002510 <MX_GPIO_Init+0x154>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002510 <MX_GPIO_Init+0x154>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b47      	ldr	r3, [pc, #284]	@ (8002510 <MX_GPIO_Init+0x154>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	4a46      	ldr	r2, [pc, #280]	@ (8002510 <MX_GPIO_Init+0x154>)
 80023f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fe:	4b44      	ldr	r3, [pc, #272]	@ (8002510 <MX_GPIO_Init+0x154>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b40      	ldr	r3, [pc, #256]	@ (8002510 <MX_GPIO_Init+0x154>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	4a3f      	ldr	r2, [pc, #252]	@ (8002510 <MX_GPIO_Init+0x154>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	@ 0x30
 800241a:	4b3d      	ldr	r3, [pc, #244]	@ (8002510 <MX_GPIO_Init+0x154>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <MX_GPIO_Init+0x154>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242e:	4a38      	ldr	r2, [pc, #224]	@ (8002510 <MX_GPIO_Init+0x154>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	@ 0x30
 8002436:	4b36      	ldr	r3, [pc, #216]	@ (8002510 <MX_GPIO_Init+0x154>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002442:	2200      	movs	r2, #0
 8002444:	2120      	movs	r1, #32
 8002446:	4833      	ldr	r0, [pc, #204]	@ (8002514 <MX_GPIO_Init+0x158>)
 8002448:	f001 fb68 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002452:	4831      	ldr	r0, [pc, #196]	@ (8002518 <MX_GPIO_Init+0x15c>)
 8002454:	f001 fb62 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800245e:	482f      	ldr	r0, [pc, #188]	@ (800251c <MX_GPIO_Init+0x160>)
 8002460:	f001 fb5c 	bl	8003b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : switch_mode_Pin Height_dwn_Pin Slide_dwn_Pin */
  GPIO_InitStruct.Pin = switch_mode_Pin|Height_dwn_Pin|Slide_dwn_Pin;
 8002464:	f242 0330 	movw	r3, #8240	@ 0x2030
 8002468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	4828      	ldr	r0, [pc, #160]	@ (800251c <MX_GPIO_Init+0x160>)
 800247a:	f001 f9b3 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 Height_up_Pin Slide_up_Pin
                           Incline_up_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|Height_up_Pin|Slide_up_Pin
 800247e:	23d3      	movs	r3, #211	@ 0xd3
 8002480:	617b      	str	r3, [r7, #20]
                          |Incline_up_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	4820      	ldr	r0, [pc, #128]	@ (8002514 <MX_GPIO_Init+0x158>)
 8002492:	f001 f9a7 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002496:	2320      	movs	r3, #32
 8002498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2300      	movs	r3, #0
 80024a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4819      	ldr	r0, [pc, #100]	@ (8002514 <MX_GPIO_Init+0x158>)
 80024ae:	f001 f999 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : incline_dwn_Pin */
  GPIO_InitStruct.Pin = incline_dwn_Pin;
 80024b2:	2301      	movs	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(incline_dwn_GPIO_Port, &GPIO_InitStruct);
 80024be:	f107 0314 	add.w	r3, r7, #20
 80024c2:	4619      	mov	r1, r3
 80024c4:	4814      	ldr	r0, [pc, #80]	@ (8002518 <MX_GPIO_Init+0x15c>)
 80024c6:	f001 f98d 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80024ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d0:	2301      	movs	r3, #1
 80024d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	4619      	mov	r1, r3
 80024e2:	480d      	ldr	r0, [pc, #52]	@ (8002518 <MX_GPIO_Init+0x15c>)
 80024e4:	f001 f97e 	bl	80037e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80024ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ee:	2301      	movs	r3, #1
 80024f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fa:	f107 0314 	add.w	r3, r7, #20
 80024fe:	4619      	mov	r1, r3
 8002500:	4806      	ldr	r0, [pc, #24]	@ (800251c <MX_GPIO_Init+0x160>)
 8002502:	f001 f96f 	bl	80037e4 <HAL_GPIO_Init>

}
 8002506:	bf00      	nop
 8002508:	3728      	adds	r7, #40	@ 0x28
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020800 	.word	0x40020800

08002520 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002524:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <MX_I2C1_Init+0x50>)
 8002526:	4a13      	ldr	r2, [pc, #76]	@ (8002574 <MX_I2C1_Init+0x54>)
 8002528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800252a:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <MX_I2C1_Init+0x50>)
 800252c:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <MX_I2C1_Init+0x58>)
 800252e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002530:	4b0f      	ldr	r3, [pc, #60]	@ (8002570 <MX_I2C1_Init+0x50>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <MX_I2C1_Init+0x50>)
 8002538:	2200      	movs	r2, #0
 800253a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800253c:	4b0c      	ldr	r3, [pc, #48]	@ (8002570 <MX_I2C1_Init+0x50>)
 800253e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002544:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <MX_I2C1_Init+0x50>)
 8002546:	2200      	movs	r2, #0
 8002548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <MX_I2C1_Init+0x50>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002550:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <MX_I2C1_Init+0x50>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <MX_I2C1_Init+0x50>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800255c:	4804      	ldr	r0, [pc, #16]	@ (8002570 <MX_I2C1_Init+0x50>)
 800255e:	f001 fb11 	bl	8003b84 <HAL_I2C_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002568:	f000 f922 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800256c:	bf00      	nop
 800256e:	bd80      	pop	{r7, pc}
 8002570:	200002bc 	.word	0x200002bc
 8002574:	40005400 	.word	0x40005400
 8002578:	000186a0 	.word	0x000186a0

0800257c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	@ 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	@ (8002600 <HAL_I2C_MspInit+0x84>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12c      	bne.n	80025f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b18      	ldr	r3, [pc, #96]	@ (8002604 <HAL_I2C_MspInit+0x88>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	4a17      	ldr	r2, [pc, #92]	@ (8002604 <HAL_I2C_MspInit+0x88>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <HAL_I2C_MspInit+0x88>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = i2c1_SCL_Pin|GPIO_PIN_9;
 80025ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c0:	2312      	movs	r3, #18
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025cc:	2304      	movs	r3, #4
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	480c      	ldr	r0, [pc, #48]	@ (8002608 <HAL_I2C_MspInit+0x8c>)
 80025d8:	f001 f904 	bl	80037e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_I2C_MspInit+0x88>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	4a07      	ldr	r2, [pc, #28]	@ (8002604 <HAL_I2C_MspInit+0x88>)
 80025e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ec:	4b05      	ldr	r3, [pc, #20]	@ (8002604 <HAL_I2C_MspInit+0x88>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	@ 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40005400 	.word	0x40005400
 8002604:	40023800 	.word	0x40023800
 8002608:	40020400 	.word	0x40020400

0800260c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800260c:	b5b0      	push	{r4, r5, r7, lr}
 800260e:	b098      	sub	sp, #96	@ 0x60
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002612:	f000 fbad 	bl	8002d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002616:	f000 f851 	bl	80026bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800261a:	f7ff fecf 	bl	80023bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800261e:	f000 fb0b 	bl	8002c38 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002622:	f7fe fc5f 	bl	8000ee4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002626:	f7ff ff7b 	bl	8002520 <MX_I2C1_Init>
  MX_SPI2_Init();
 800262a:	f000 f8eb 	bl	8002804 <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */

  // Initialize system message
  char startup_msg[] = "=== Seat Controller ECU Started ===\r\n";
 800262e:	4b20      	ldr	r3, [pc, #128]	@ (80026b0 <main+0xa4>)
 8002630:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002634:	461d      	mov	r5, r3
 8002636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800263c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800263e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002642:	6020      	str	r0, [r4, #0]
 8002644:	3404      	adds	r4, #4
 8002646:	8021      	strh	r1, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)startup_msg, strlen(startup_msg), 1000);
 8002648:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd fe17 	bl	8000280 <strlen>
 8002652:	4603      	mov	r3, r0
 8002654:	b29a      	uxth	r2, r3
 8002656:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800265a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265e:	4815      	ldr	r0, [pc, #84]	@ (80026b4 <main+0xa8>)
 8002660:	f003 fc88 	bl	8005f74 <HAL_UART_Transmit>

  // Check if peripherals are initialized
  char init_msg[] = "Peripherals Initialized: GPIO, UART, ADC, I2C, SPI\r\n";
 8002664:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <main+0xac>)
 8002666:	463c      	mov	r4, r7
 8002668:	461d      	mov	r5, r3
 800266a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800266e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002676:	e895 0003 	ldmia.w	r5, {r0, r1}
 800267a:	6020      	str	r0, [r4, #0]
 800267c:	3404      	adds	r4, #4
 800267e:	7021      	strb	r1, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)init_msg, strlen(init_msg), 1000);
 8002680:	463b      	mov	r3, r7
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd fdfc 	bl	8000280 <strlen>
 8002688:	4603      	mov	r3, r0
 800268a:	b29a      	uxth	r2, r3
 800268c:	4639      	mov	r1, r7
 800268e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002692:	4808      	ldr	r0, [pc, #32]	@ (80026b4 <main+0xa8>)
 8002694:	f003 fc6e 	bl	8005f74 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002698:	f004 f86c 	bl	8006774 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800269c:	f7fe fcd4 	bl	8001048 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80026a0:	f004 f88c 	bl	80067bc <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // This should never be reached when FreeRTOS is running
    HAL_Delay(1000);
 80026a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026a8:	f000 fba4 	bl	8002df4 <HAL_Delay>
 80026ac:	e7fa      	b.n	80026a4 <main+0x98>
 80026ae:	bf00      	nop
 80026b0:	0800d0cc 	.word	0x0800d0cc
 80026b4:	200003b4 	.word	0x200003b4
 80026b8:	0800d0f4 	.word	0x0800d0f4

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b094      	sub	sp, #80	@ 0x50
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 0320 	add.w	r3, r7, #32
 80026c6:	2230      	movs	r2, #48	@ 0x30
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f008 f97d 	bl	800a9ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	f107 030c 	add.w	r3, r7, #12
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	4b27      	ldr	r3, [pc, #156]	@ (8002784 <SystemClock_Config+0xc8>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	4a26      	ldr	r2, [pc, #152]	@ (8002784 <SystemClock_Config+0xc8>)
 80026ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f0:	4b24      	ldr	r3, [pc, #144]	@ (8002784 <SystemClock_Config+0xc8>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026fc:	2300      	movs	r3, #0
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	4b21      	ldr	r3, [pc, #132]	@ (8002788 <SystemClock_Config+0xcc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a20      	ldr	r2, [pc, #128]	@ (8002788 <SystemClock_Config+0xcc>)
 8002706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	4b1e      	ldr	r3, [pc, #120]	@ (8002788 <SystemClock_Config+0xcc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002718:	2302      	movs	r3, #2
 800271a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800271c:	2301      	movs	r3, #1
 800271e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002720:	2310      	movs	r3, #16
 8002722:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002724:	2302      	movs	r3, #2
 8002726:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002728:	2300      	movs	r3, #0
 800272a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800272c:	2308      	movs	r3, #8
 800272e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002730:	2364      	movs	r3, #100	@ 0x64
 8002732:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002734:	2302      	movs	r3, #2
 8002736:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002738:	2304      	movs	r3, #4
 800273a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	4618      	mov	r0, r3
 8002742:	f001 febd 	bl	80044c0 <HAL_RCC_OscConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800274c:	f000 f830 	bl	80027b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002750:	230f      	movs	r3, #15
 8002752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002754:	2302      	movs	r3, #2
 8002756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800275c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	2103      	movs	r1, #3
 800276c:	4618      	mov	r0, r3
 800276e:	f002 f91f 	bl	80049b0 <HAL_RCC_ClockConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002778:	f000 f81a 	bl	80027b0 <Error_Handler>
  }
}
 800277c:	bf00      	nop
 800277e:	3750      	adds	r7, #80	@ 0x50
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	40007000 	.word	0x40007000

0800278c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a04      	ldr	r2, [pc, #16]	@ (80027ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800279e:	f000 fb09 	bl	8002db4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40010000 	.word	0x40010000

080027b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b0:	b5b0      	push	{r4, r5, r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027b6:	b672      	cpsid	i
}
 80027b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  // Send error message via UART if possible
  char error_msg[] = "=== SYSTEM ERROR - HALTED ===\r\n";
 80027ba:	4b0f      	ldr	r3, [pc, #60]	@ (80027f8 <Error_Handler+0x48>)
 80027bc:	463c      	mov	r4, r7
 80027be:	461d      	mov	r5, r3
 80027c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart2, (uint8_t*)error_msg, strlen(error_msg), 1000);
 80027cc:	463b      	mov	r3, r7
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fd fd56 	bl	8000280 <strlen>
 80027d4:	4603      	mov	r3, r0
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	4639      	mov	r1, r7
 80027da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027de:	4807      	ldr	r0, [pc, #28]	@ (80027fc <Error_Handler+0x4c>)
 80027e0:	f003 fbc8 	bl	8005f74 <HAL_UART_Transmit>

  while (1)
  {
    // Blink LED to indicate error if available
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Assuming LED on PA5
 80027e4:	2120      	movs	r1, #32
 80027e6:	4806      	ldr	r0, [pc, #24]	@ (8002800 <Error_Handler+0x50>)
 80027e8:	f001 f9b1 	bl	8003b4e <HAL_GPIO_TogglePin>
    HAL_Delay(200);
 80027ec:	20c8      	movs	r0, #200	@ 0xc8
 80027ee:	f000 fb01 	bl	8002df4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Assuming LED on PA5
 80027f2:	bf00      	nop
 80027f4:	e7f6      	b.n	80027e4 <Error_Handler+0x34>
 80027f6:	bf00      	nop
 80027f8:	0800d12c 	.word	0x0800d12c
 80027fc:	200003b4 	.word	0x200003b4
 8002800:	40020000 	.word	0x40020000

08002804 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002808:	4b17      	ldr	r3, [pc, #92]	@ (8002868 <MX_SPI2_Init+0x64>)
 800280a:	4a18      	ldr	r2, [pc, #96]	@ (800286c <MX_SPI2_Init+0x68>)
 800280c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <MX_SPI2_Init+0x64>)
 8002810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002814:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002816:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <MX_SPI2_Init+0x64>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800281c:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <MX_SPI2_Init+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002822:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <MX_SPI2_Init+0x64>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <MX_SPI2_Init+0x64>)
 800282a:	2200      	movs	r2, #0
 800282c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800282e:	4b0e      	ldr	r3, [pc, #56]	@ (8002868 <MX_SPI2_Init+0x64>)
 8002830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002834:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <MX_SPI2_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <MX_SPI2_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002842:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <MX_SPI2_Init+0x64>)
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002848:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <MX_SPI2_Init+0x64>)
 800284a:	2200      	movs	r2, #0
 800284c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <MX_SPI2_Init+0x64>)
 8002850:	220a      	movs	r2, #10
 8002852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002854:	4804      	ldr	r0, [pc, #16]	@ (8002868 <MX_SPI2_Init+0x64>)
 8002856:	f002 fafd 	bl	8004e54 <HAL_SPI_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002860:	f7ff ffa6 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000310 	.word	0x20000310
 800286c:	40003800 	.word	0x40003800

08002870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	@ 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <HAL_SPI_MspInit+0x84>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d12c      	bne.n	80028ec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <HAL_SPI_MspInit+0x88>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	4a17      	ldr	r2, [pc, #92]	@ (80028f8 <HAL_SPI_MspInit+0x88>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a2:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <HAL_SPI_MspInit+0x88>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_SPI_MspInit+0x88>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a10      	ldr	r2, [pc, #64]	@ (80028f8 <HAL_SPI_MspInit+0x88>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_SPI_MspInit+0x88>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80028ca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028dc:	2305      	movs	r3, #5
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4805      	ldr	r0, [pc, #20]	@ (80028fc <HAL_SPI_MspInit+0x8c>)
 80028e8:	f000 ff7c 	bl	80037e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	@ 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40003800 	.word	0x40003800
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020400 	.word	0x40020400

08002900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	4b12      	ldr	r3, [pc, #72]	@ (8002954 <HAL_MspInit+0x54>)
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	4a11      	ldr	r2, [pc, #68]	@ (8002954 <HAL_MspInit+0x54>)
 8002910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002914:	6453      	str	r3, [r2, #68]	@ 0x44
 8002916:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <HAL_MspInit+0x54>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <HAL_MspInit+0x54>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <HAL_MspInit+0x54>)
 800292c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <HAL_MspInit+0x54>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	210f      	movs	r1, #15
 8002942:	f06f 0001 	mvn.w	r0, #1
 8002946:	f000 ff23 	bl	8003790 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	@ 0x30
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a28 <HAL_InitTick+0xd0>)
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	4a2d      	ldr	r2, [pc, #180]	@ (8002a28 <HAL_InitTick+0xd0>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6453      	str	r3, [r2, #68]	@ 0x44
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <HAL_InitTick+0xd0>)
 800297a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002984:	f107 020c 	add.w	r2, r7, #12
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f002 fa2e 	bl	8004df0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002994:	f002 fa18 	bl	8004dc8 <HAL_RCC_GetPCLK2Freq>
 8002998:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	4a23      	ldr	r2, [pc, #140]	@ (8002a2c <HAL_InitTick+0xd4>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	3b01      	subs	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80029a8:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <HAL_InitTick+0xd8>)
 80029aa:	4a22      	ldr	r2, [pc, #136]	@ (8002a34 <HAL_InitTick+0xdc>)
 80029ac:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80029ae:	4b20      	ldr	r3, [pc, #128]	@ (8002a30 <HAL_InitTick+0xd8>)
 80029b0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80029b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002a30 <HAL_InitTick+0xd8>)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80029bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a30 <HAL_InitTick+0xd8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <HAL_InitTick+0xd8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c8:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <HAL_InitTick+0xd8>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80029ce:	4818      	ldr	r0, [pc, #96]	@ (8002a30 <HAL_InitTick+0xd8>)
 80029d0:	f003 f812 	bl	80059f8 <HAL_TIM_Base_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80029da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d11b      	bne.n	8002a1a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80029e2:	4813      	ldr	r0, [pc, #76]	@ (8002a30 <HAL_InitTick+0xd8>)
 80029e4:	f003 f862 	bl	8005aac <HAL_TIM_Base_Start_IT>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80029ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d111      	bne.n	8002a1a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029f6:	2019      	movs	r0, #25
 80029f8:	f000 fee6 	bl	80037c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b0f      	cmp	r3, #15
 8002a00:	d808      	bhi.n	8002a14 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002a02:	2200      	movs	r2, #0
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	2019      	movs	r0, #25
 8002a08:	f000 fec2 	bl	8003790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <HAL_InitTick+0xe0>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e002      	b.n	8002a1a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3730      	adds	r7, #48	@ 0x30
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	431bde83 	.word	0x431bde83
 8002a30:	20000368 	.word	0x20000368
 8002a34:	40010000 	.word	0x40010000
 8002a38:	20000010 	.word	0x20000010

08002a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <NMI_Handler+0x4>

08002a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <HardFault_Handler+0x4>

08002a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <MemManage_Handler+0x4>

08002a54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <BusFault_Handler+0x4>

08002a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <UsageFault_Handler+0x4>

08002a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a78:	4802      	ldr	r0, [pc, #8]	@ (8002a84 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a7a:	f003 f879 	bl	8005b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a7e:	bf00      	nop
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000368 	.word	0x20000368

08002a88 <_getpid>:
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <_kill>:
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	f008 f843 	bl	800ab2c <__errno>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2216      	movs	r2, #22
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <_exit>:
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ffe7 	bl	8002a98 <_kill>
 8002aca:	bf00      	nop
 8002acc:	e7fd      	b.n	8002aca <_exit+0x12>

08002ace <_read>:
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	e00a      	b.n	8002af6 <_read+0x28>
 8002ae0:	f3af 8000 	nop.w
 8002ae4:	4601      	mov	r1, r0
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	60ba      	str	r2, [r7, #8]
 8002aec:	b2ca      	uxtb	r2, r1
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	3301      	adds	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	dbf0      	blt.n	8002ae0 <_read+0x12>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_write>:
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e009      	b.n	8002b2e <_write+0x26>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	60ba      	str	r2, [r7, #8]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f3af 8000 	nop.w
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dbf1      	blt.n	8002b1a <_write+0x12>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_close>:
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_fstat>:
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_isatty>:
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	2301      	movs	r3, #1
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_lseek>:
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <_sbrk>:
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	4a14      	ldr	r2, [pc, #80]	@ (8002c04 <_sbrk+0x5c>)
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <_sbrk+0x60>)
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <_sbrk+0x64>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <_sbrk+0x22>
 8002bc4:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <_sbrk+0x64>)
 8002bc6:	4a12      	ldr	r2, [pc, #72]	@ (8002c10 <_sbrk+0x68>)
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <_sbrk+0x64>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d207      	bcs.n	8002be8 <_sbrk+0x40>
 8002bd8:	f007 ffa8 	bl	800ab2c <__errno>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	220c      	movs	r2, #12
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f04f 33ff 	mov.w	r3, #4294967295
 8002be6:	e009      	b.n	8002bfc <_sbrk+0x54>
 8002be8:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <_sbrk+0x64>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <_sbrk+0x64>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4a05      	ldr	r2, [pc, #20]	@ (8002c0c <_sbrk+0x64>)
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20020000 	.word	0x20020000
 8002c08:	00000400 	.word	0x00000400
 8002c0c:	200003b0 	.word	0x200003b0
 8002c10:	20004f38 	.word	0x20004f38

08002c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <SystemInit+0x20>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1e:	4a05      	ldr	r2, [pc, #20]	@ (8002c34 <SystemInit+0x20>)
 8002c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	@ (8002c88 <MX_USART2_UART_Init+0x50>)
 8002c40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c42:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c68:	4b06      	ldr	r3, [pc, #24]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c6e:	4805      	ldr	r0, [pc, #20]	@ (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c70:	f003 f930 	bl	8005ed4 <HAL_UART_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c7a:	f7ff fd99 	bl	80027b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200003b4 	.word	0x200003b4
 8002c88:	40004400 	.word	0x40004400

08002c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	@ 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	@ (8002d10 <HAL_UART_MspInit+0x84>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12b      	bne.n	8002d06 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	4a10      	ldr	r2, [pc, #64]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cda:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_UART_MspInit+0x88>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <HAL_UART_MspInit+0x8c>)
 8002d02:	f000 fd6f 	bl	80037e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d06:	bf00      	nop
 8002d08:	3728      	adds	r7, #40	@ 0x28
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40004400 	.word	0x40004400
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40020000 	.word	0x40020000

08002d1c <Reset_Handler>:
 8002d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d54 <LoopFillZerobss+0xe>
 8002d20:	f7ff ff78 	bl	8002c14 <SystemInit>
 8002d24:	480c      	ldr	r0, [pc, #48]	@ (8002d58 <LoopFillZerobss+0x12>)
 8002d26:	490d      	ldr	r1, [pc, #52]	@ (8002d5c <LoopFillZerobss+0x16>)
 8002d28:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <LoopFillZerobss+0x1a>)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e002      	b.n	8002d34 <LoopCopyDataInit>

08002d2e <CopyDataInit>:
 8002d2e:	58d4      	ldr	r4, [r2, r3]
 8002d30:	50c4      	str	r4, [r0, r3]
 8002d32:	3304      	adds	r3, #4

08002d34 <LoopCopyDataInit>:
 8002d34:	18c4      	adds	r4, r0, r3
 8002d36:	428c      	cmp	r4, r1
 8002d38:	d3f9      	bcc.n	8002d2e <CopyDataInit>
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <LoopFillZerobss+0x1e>)
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d68 <LoopFillZerobss+0x22>)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	e001      	b.n	8002d46 <LoopFillZerobss>

08002d42 <FillZerobss>:
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	3204      	adds	r2, #4

08002d46 <LoopFillZerobss>:
 8002d46:	42a2      	cmp	r2, r4
 8002d48:	d3fb      	bcc.n	8002d42 <FillZerobss>
 8002d4a:	f007 fef5 	bl	800ab38 <__libc_init_array>
 8002d4e:	f7ff fc5d 	bl	800260c <main>
 8002d52:	4770      	bx	lr
 8002d54:	20020000 	.word	0x20020000
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	200001e4 	.word	0x200001e4
 8002d60:	0800d6f4 	.word	0x0800d6f4
 8002d64:	200001e4 	.word	0x200001e4
 8002d68:	20004f34 	.word	0x20004f34

08002d6c <ADC_IRQHandler>:
 8002d6c:	e7fe      	b.n	8002d6c <ADC_IRQHandler>
	...

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d74:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <HAL_Init+0x40>)
 8002d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <HAL_Init+0x40>)
 8002d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8c:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a07      	ldr	r2, [pc, #28]	@ (8002db0 <HAL_Init+0x40>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f000 fcee 	bl	800377a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9e:	200f      	movs	r0, #15
 8002da0:	f7ff fdda 	bl	8002958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da4:	f7ff fdac 	bl	8002900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00

08002db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db8:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_IncTick+0x20>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_IncTick+0x24>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <HAL_IncTick+0x24>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000014 	.word	0x20000014
 8002dd8:	200003fc 	.word	0x200003fc

08002ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return uwTick;
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <HAL_GetTick+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	200003fc 	.word	0x200003fc

08002df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dfc:	f7ff ffee 	bl	8002ddc <HAL_GetTick>
 8002e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d005      	beq.n	8002e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_Delay+0x44>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e1a:	bf00      	nop
 8002e1c:	f7ff ffde 	bl	8002ddc <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d8f7      	bhi.n	8002e1c <HAL_Delay+0x28>
  {
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000014 	.word	0x20000014

08002e3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e033      	b.n	8002eba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe f8b0 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d118      	bne.n	8002eac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e82:	f023 0302 	bic.w	r3, r3, #2
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 faca 	bl	8003428 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002eaa:	e001      	b.n	8002eb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Start+0x1a>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e097      	b.n	800300e <HAL_ADC_Start+0x14a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d018      	beq.n	8002f26 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f04:	4b45      	ldr	r3, [pc, #276]	@ (800301c <HAL_ADC_Start+0x158>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a45      	ldr	r2, [pc, #276]	@ (8003020 <HAL_ADC_Start+0x15c>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	0c9a      	lsrs	r2, r3, #18
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f18:	e002      	b.n	8002f20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f9      	bne.n	8002f1a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d15f      	bne.n	8002ff4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f72:	d106      	bne.n	8002f82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	f023 0206 	bic.w	r2, r3, #6
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f80:	e002      	b.n	8002f88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f90:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <HAL_ADC_Start+0x160>)
 8002f92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002f9c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d129      	bne.n	800300c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	e020      	b.n	800300c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a16      	ldr	r2, [pc, #88]	@ (8003028 <HAL_ADC_Start+0x164>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d11b      	bne.n	800300c <HAL_ADC_Start+0x148>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d114      	bne.n	800300c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ff0:	609a      	str	r2, [r3, #8]
 8002ff2:	e00b      	b.n	800300c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff8:	f043 0210 	orr.w	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	2000000c 	.word	0x2000000c
 8003020:	431bde83 	.word	0x431bde83
 8003024:	40012300 	.word	0x40012300
 8003028:	40012000 	.word	0x40012000

0800302c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_ADC_Stop+0x16>
 800303e:	2302      	movs	r3, #2
 8003040:	e021      	b.n	8003086 <HAL_ADC_Stop+0x5a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d109      	bne.n	800307c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ae:	d113      	bne.n	80030d8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030be:	d10b      	bne.n	80030d8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	f043 0220 	orr.w	r2, r3, #32
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e063      	b.n	80031a0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80030d8:	f7ff fe80 	bl	8002ddc <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030de:	e021      	b.n	8003124 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e6:	d01d      	beq.n	8003124 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_ADC_PollForConversion+0x6c>
 80030ee:	f7ff fe75 	bl	8002ddc <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d212      	bcs.n	8003124 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	d00b      	beq.n	8003124 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f043 0204 	orr.w	r2, r3, #4
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e03d      	b.n	80031a0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d1d6      	bne.n	80030e0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0212 	mvn.w	r2, #18
 800313a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d123      	bne.n	800319e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11f      	bne.n	800319e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	d006      	beq.n	800317a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d111      	bne.n	800319e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d105      	bne.n	800319e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x1c>
 80031dc:	2302      	movs	r3, #2
 80031de:	e113      	b.n	8003408 <HAL_ADC_ConfigChannel+0x244>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	d925      	bls.n	800323c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68d9      	ldr	r1, [r3, #12]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	3b1e      	subs	r3, #30
 8003206:	2207      	movs	r2, #7
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43da      	mvns	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	400a      	ands	r2, r1
 8003214:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68d9      	ldr	r1, [r3, #12]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	4618      	mov	r0, r3
 8003228:	4603      	mov	r3, r0
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4403      	add	r3, r0
 800322e:	3b1e      	subs	r3, #30
 8003230:	409a      	lsls	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	e022      	b.n	8003282 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6919      	ldr	r1, [r3, #16]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	461a      	mov	r2, r3
 800324a:	4613      	mov	r3, r2
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	4413      	add	r3, r2
 8003250:	2207      	movs	r2, #7
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43da      	mvns	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	400a      	ands	r2, r1
 800325e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	4618      	mov	r0, r3
 8003272:	4603      	mov	r3, r0
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	4403      	add	r3, r0
 8003278:	409a      	lsls	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b06      	cmp	r3, #6
 8003288:	d824      	bhi.n	80032d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	3b05      	subs	r3, #5
 800329c:	221f      	movs	r2, #31
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43da      	mvns	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	400a      	ands	r2, r1
 80032aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	4618      	mov	r0, r3
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	3b05      	subs	r3, #5
 80032c6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80032d2:	e04c      	b.n	800336e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d824      	bhi.n	8003326 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	3b23      	subs	r3, #35	@ 0x23
 80032ee:	221f      	movs	r2, #31
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43da      	mvns	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	400a      	ands	r2, r1
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	4618      	mov	r0, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	3b23      	subs	r3, #35	@ 0x23
 8003318:	fa00 f203 	lsl.w	r2, r0, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30
 8003324:	e023      	b.n	800336e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	3b41      	subs	r3, #65	@ 0x41
 8003338:	221f      	movs	r2, #31
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	400a      	ands	r2, r1
 8003346:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	4618      	mov	r0, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	3b41      	subs	r3, #65	@ 0x41
 8003362:	fa00 f203 	lsl.w	r2, r0, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800336e:	4b29      	ldr	r3, [pc, #164]	@ (8003414 <HAL_ADC_ConfigChannel+0x250>)
 8003370:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a28      	ldr	r2, [pc, #160]	@ (8003418 <HAL_ADC_ConfigChannel+0x254>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d10f      	bne.n	800339c <HAL_ADC_ConfigChannel+0x1d8>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b12      	cmp	r3, #18
 8003382:	d10b      	bne.n	800339c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <HAL_ADC_ConfigChannel+0x254>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d12b      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x23a>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <HAL_ADC_ConfigChannel+0x258>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d003      	beq.n	80033b8 <HAL_ADC_ConfigChannel+0x1f4>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b11      	cmp	r3, #17
 80033b6:	d122      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a11      	ldr	r2, [pc, #68]	@ (800341c <HAL_ADC_ConfigChannel+0x258>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d111      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033da:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_ADC_ConfigChannel+0x25c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a11      	ldr	r2, [pc, #68]	@ (8003424 <HAL_ADC_ConfigChannel+0x260>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	0c9a      	lsrs	r2, r3, #18
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033f0:	e002      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	40012300 	.word	0x40012300
 8003418:	40012000 	.word	0x40012000
 800341c:	10000012 	.word	0x10000012
 8003420:	2000000c 	.word	0x2000000c
 8003424:	431bde83 	.word	0x431bde83

08003428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003430:	4b79      	ldr	r3, [pc, #484]	@ (8003618 <ADC_Init+0x1f0>)
 8003432:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800345c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	021a      	lsls	r2, r3, #8
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	4a58      	ldr	r2, [pc, #352]	@ (800361c <ADC_Init+0x1f4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d022      	beq.n	8003506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6899      	ldr	r1, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6899      	ldr	r1, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	e00f      	b.n	8003526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003524:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0202 	bic.w	r2, r2, #2
 8003534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6899      	ldr	r1, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	7e1b      	ldrb	r3, [r3, #24]
 8003540:	005a      	lsls	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01b      	beq.n	800358c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003562:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	3b01      	subs	r3, #1
 8003580:	035a      	lsls	r2, r3, #13
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	e007      	b.n	800359c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800359a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80035aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	051a      	lsls	r2, r3, #20
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6899      	ldr	r1, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035de:	025a      	lsls	r2, r3, #9
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	029a      	lsls	r2, r3, #10
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	40012300 	.word	0x40012300
 800361c:	0f000001 	.word	0x0f000001

08003620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003630:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800363c:	4013      	ands	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003648:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800364c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003652:	4a04      	ldr	r2, [pc, #16]	@ (8003664 <__NVIC_SetPriorityGrouping+0x44>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	60d3      	str	r3, [r2, #12]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <__NVIC_GetPriorityGrouping+0x18>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	f003 0307 	and.w	r3, r3, #7
}
 8003676:	4618      	mov	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800368e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003692:	2b00      	cmp	r3, #0
 8003694:	db0b      	blt.n	80036ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	f003 021f 	and.w	r2, r3, #31
 800369c:	4907      	ldr	r1, [pc, #28]	@ (80036bc <__NVIC_EnableIRQ+0x38>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2001      	movs	r0, #1
 80036a6:	fa00 f202 	lsl.w	r2, r0, r2
 80036aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036ae:	bf00      	nop
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100

080036c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	4603      	mov	r3, r0
 80036c8:	6039      	str	r1, [r7, #0]
 80036ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	db0a      	blt.n	80036ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	490c      	ldr	r1, [pc, #48]	@ (800370c <__NVIC_SetPriority+0x4c>)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	0112      	lsls	r2, r2, #4
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	440b      	add	r3, r1
 80036e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e8:	e00a      	b.n	8003700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4908      	ldr	r1, [pc, #32]	@ (8003710 <__NVIC_SetPriority+0x50>)
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	3b04      	subs	r3, #4
 80036f8:	0112      	lsls	r2, r2, #4
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	440b      	add	r3, r1
 80036fe:	761a      	strb	r2, [r3, #24]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000e100 	.word	0xe000e100
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	@ 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f1c3 0307 	rsb	r3, r3, #7
 800372e:	2b04      	cmp	r3, #4
 8003730:	bf28      	it	cs
 8003732:	2304      	movcs	r3, #4
 8003734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3304      	adds	r3, #4
 800373a:	2b06      	cmp	r3, #6
 800373c:	d902      	bls.n	8003744 <NVIC_EncodePriority+0x30>
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	3b03      	subs	r3, #3
 8003742:	e000      	b.n	8003746 <NVIC_EncodePriority+0x32>
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003748:	f04f 32ff 	mov.w	r2, #4294967295
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	401a      	ands	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800375c:	f04f 31ff 	mov.w	r1, #4294967295
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	43d9      	mvns	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	4313      	orrs	r3, r2
         );
}
 800376e:	4618      	mov	r0, r3
 8003770:	3724      	adds	r7, #36	@ 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ff4c 	bl	8003620 <__NVIC_SetPriorityGrouping>
}
 8003788:	bf00      	nop
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
 800379c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037a2:	f7ff ff61 	bl	8003668 <__NVIC_GetPriorityGrouping>
 80037a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	6978      	ldr	r0, [r7, #20]
 80037ae:	f7ff ffb1 	bl	8003714 <NVIC_EncodePriority>
 80037b2:	4602      	mov	r2, r0
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff ff80 	bl	80036c0 <__NVIC_SetPriority>
}
 80037c0:	bf00      	nop
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff ff54 	bl	8003684 <__NVIC_EnableIRQ>
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	@ 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	e159      	b.n	8003ab4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003800:	2201      	movs	r2, #1
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4013      	ands	r3, r2
 8003812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	429a      	cmp	r2, r3
 800381a:	f040 8148 	bne.w	8003aae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	2b01      	cmp	r3, #1
 8003828:	d005      	beq.n	8003836 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003832:	2b02      	cmp	r3, #2
 8003834:	d130      	bne.n	8003898 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2203      	movs	r2, #3
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	4013      	ands	r3, r2
 800384c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4313      	orrs	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800386c:	2201      	movs	r2, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 0201 	and.w	r2, r3, #1
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d017      	beq.n	80038d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	2203      	movs	r2, #3
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d123      	bne.n	8003928 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	08da      	lsrs	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3208      	adds	r2, #8
 80038e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	220f      	movs	r2, #15
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	08da      	lsrs	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3208      	adds	r2, #8
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0203 	and.w	r2, r3, #3
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a2 	beq.w	8003aae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	4b57      	ldr	r3, [pc, #348]	@ (8003acc <HAL_GPIO_Init+0x2e8>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	4a56      	ldr	r2, [pc, #344]	@ (8003acc <HAL_GPIO_Init+0x2e8>)
 8003974:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003978:	6453      	str	r3, [r2, #68]	@ 0x44
 800397a:	4b54      	ldr	r3, [pc, #336]	@ (8003acc <HAL_GPIO_Init+0x2e8>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003986:	4a52      	ldr	r2, [pc, #328]	@ (8003ad0 <HAL_GPIO_Init+0x2ec>)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	220f      	movs	r2, #15
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a49      	ldr	r2, [pc, #292]	@ (8003ad4 <HAL_GPIO_Init+0x2f0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d019      	beq.n	80039e6 <HAL_GPIO_Init+0x202>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a48      	ldr	r2, [pc, #288]	@ (8003ad8 <HAL_GPIO_Init+0x2f4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <HAL_GPIO_Init+0x1fe>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a47      	ldr	r2, [pc, #284]	@ (8003adc <HAL_GPIO_Init+0x2f8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00d      	beq.n	80039de <HAL_GPIO_Init+0x1fa>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a46      	ldr	r2, [pc, #280]	@ (8003ae0 <HAL_GPIO_Init+0x2fc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <HAL_GPIO_Init+0x1f6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a45      	ldr	r2, [pc, #276]	@ (8003ae4 <HAL_GPIO_Init+0x300>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_GPIO_Init+0x1f2>
 80039d2:	2304      	movs	r3, #4
 80039d4:	e008      	b.n	80039e8 <HAL_GPIO_Init+0x204>
 80039d6:	2307      	movs	r3, #7
 80039d8:	e006      	b.n	80039e8 <HAL_GPIO_Init+0x204>
 80039da:	2303      	movs	r3, #3
 80039dc:	e004      	b.n	80039e8 <HAL_GPIO_Init+0x204>
 80039de:	2302      	movs	r3, #2
 80039e0:	e002      	b.n	80039e8 <HAL_GPIO_Init+0x204>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e000      	b.n	80039e8 <HAL_GPIO_Init+0x204>
 80039e6:	2300      	movs	r3, #0
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	f002 0203 	and.w	r2, r2, #3
 80039ee:	0092      	lsls	r2, r2, #2
 80039f0:	4093      	lsls	r3, r2
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039f8:	4935      	ldr	r1, [pc, #212]	@ (8003ad0 <HAL_GPIO_Init+0x2ec>)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	089b      	lsrs	r3, r3, #2
 80039fe:	3302      	adds	r3, #2
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a06:	4b38      	ldr	r3, [pc, #224]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a30:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d003      	beq.n	8003a54 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a54:	4a24      	ldr	r2, [pc, #144]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a84:	4b18      	ldr	r3, [pc, #96]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae8 <HAL_GPIO_Init+0x304>)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	f67f aea2 	bls.w	8003800 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	3724      	adds	r7, #36	@ 0x24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	40013800 	.word	0x40013800
 8003ad4:	40020000 	.word	0x40020000
 8003ad8:	40020400 	.word	0x40020400
 8003adc:	40020800 	.word	0x40020800
 8003ae0:	40020c00 	.word	0x40020c00
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40013c00 	.word	0x40013c00

08003aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e001      	b.n	8003b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b38:	e003      	b.n	8003b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	041a      	lsls	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	619a      	str	r2, [r3, #24]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b60:	887a      	ldrh	r2, [r7, #2]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4013      	ands	r3, r2
 8003b66:	041a      	lsls	r2, r3, #16
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	43d9      	mvns	r1, r3
 8003b6c:	887b      	ldrh	r3, [r7, #2]
 8003b6e:	400b      	ands	r3, r1
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	619a      	str	r2, [r3, #24]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e12b      	b.n	8003dee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fe fce6 	bl	800257c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2224      	movs	r2, #36	@ 0x24
 8003bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0201 	bic.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003be6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003be8:	f001 f8da 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 8003bec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4a81      	ldr	r2, [pc, #516]	@ (8003df8 <HAL_I2C_Init+0x274>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d807      	bhi.n	8003c08 <HAL_I2C_Init+0x84>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a80      	ldr	r2, [pc, #512]	@ (8003dfc <HAL_I2C_Init+0x278>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	bf94      	ite	ls
 8003c00:	2301      	movls	r3, #1
 8003c02:	2300      	movhi	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e006      	b.n	8003c16 <HAL_I2C_Init+0x92>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e00 <HAL_I2C_Init+0x27c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	bf94      	ite	ls
 8003c10:	2301      	movls	r3, #1
 8003c12:	2300      	movhi	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e0e7      	b.n	8003dee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4a78      	ldr	r2, [pc, #480]	@ (8003e04 <HAL_I2C_Init+0x280>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003df8 <HAL_I2C_Init+0x274>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d802      	bhi.n	8003c58 <HAL_I2C_Init+0xd4>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3301      	adds	r3, #1
 8003c56:	e009      	b.n	8003c6c <HAL_I2C_Init+0xe8>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	4a69      	ldr	r2, [pc, #420]	@ (8003e08 <HAL_I2C_Init+0x284>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	495c      	ldr	r1, [pc, #368]	@ (8003df8 <HAL_I2C_Init+0x274>)
 8003c88:	428b      	cmp	r3, r1
 8003c8a:	d819      	bhi.n	8003cc0 <HAL_I2C_Init+0x13c>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1e59      	subs	r1, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9a:	1c59      	adds	r1, r3, #1
 8003c9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ca0:	400b      	ands	r3, r1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_I2C_Init+0x138>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e59      	subs	r1, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cba:	e051      	b.n	8003d60 <HAL_I2C_Init+0x1dc>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	e04f      	b.n	8003d60 <HAL_I2C_Init+0x1dc>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d111      	bne.n	8003cec <HAL_I2C_Init+0x168>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1e58      	subs	r0, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6859      	ldr	r1, [r3, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	440b      	add	r3, r1
 8003cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	e012      	b.n	8003d12 <HAL_I2C_Init+0x18e>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1e58      	subs	r0, r3, #1
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	0099      	lsls	r1, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Init+0x196>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e022      	b.n	8003d60 <HAL_I2C_Init+0x1dc>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10e      	bne.n	8003d40 <HAL_I2C_Init+0x1bc>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	1e58      	subs	r0, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	440b      	add	r3, r1
 8003d30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d3e:	e00f      	b.n	8003d60 <HAL_I2C_Init+0x1dc>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e58      	subs	r0, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6859      	ldr	r1, [r3, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	0099      	lsls	r1, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d56:	3301      	adds	r3, #1
 8003d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	6809      	ldr	r1, [r1, #0]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6911      	ldr	r1, [r2, #16]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68d2      	ldr	r2, [r2, #12]
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	000186a0 	.word	0x000186a0
 8003dfc:	001e847f 	.word	0x001e847f
 8003e00:	003d08ff 	.word	0x003d08ff
 8003e04:	431bde83 	.word	0x431bde83
 8003e08:	10624dd3 	.word	0x10624dd3

08003e0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	460b      	mov	r3, r1
 8003e1a:	817b      	strh	r3, [r7, #10]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e20:	f7fe ffdc 	bl	8002ddc <HAL_GetTick>
 8003e24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	f040 80e0 	bne.w	8003ff4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2319      	movs	r3, #25
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	4970      	ldr	r1, [pc, #448]	@ (8004000 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f964 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e0d3      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_I2C_Master_Transmit+0x50>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e0cc      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d007      	beq.n	8003e82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0201 	orr.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2221      	movs	r2, #33	@ 0x21
 8003e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	893a      	ldrh	r2, [r7, #8]
 8003eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a50      	ldr	r2, [pc, #320]	@ (8004004 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ec2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ec4:	8979      	ldrh	r1, [r7, #10]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6a3a      	ldr	r2, [r7, #32]
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f89c 	bl	8004008 <I2C_MasterRequestWrite>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e08d      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	613b      	str	r3, [r7, #16]
 8003eee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ef0:	e066      	b.n	8003fc0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	6a39      	ldr	r1, [r7, #32]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 fa22 	bl	8004340 <I2C_WaitOnTXEFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00d      	beq.n	8003f1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d107      	bne.n	8003f1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06b      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	781a      	ldrb	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d11b      	bne.n	8003f94 <HAL_I2C_Master_Transmit+0x188>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d017      	beq.n	8003f94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	6a39      	ldr	r1, [r7, #32]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fa19 	bl	80043d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d107      	bne.n	8003fbc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e01a      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d194      	bne.n	8003ef2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	00100002 	.word	0x00100002
 8004004:	ffff0000 	.word	0xffff0000

08004008 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	460b      	mov	r3, r1
 8004016:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d006      	beq.n	8004032 <I2C_MasterRequestWrite+0x2a>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d003      	beq.n	8004032 <I2C_MasterRequestWrite+0x2a>
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004030:	d108      	bne.n	8004044 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e00b      	b.n	800405c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	2b12      	cmp	r3, #18
 800404a:	d107      	bne.n	800405c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800405a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f84f 	bl	800410c <I2C_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00d      	beq.n	8004090 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004082:	d103      	bne.n	800408c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e035      	b.n	80040fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004098:	d108      	bne.n	80040ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800409a:	897b      	ldrh	r3, [r7, #10]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040a8:	611a      	str	r2, [r3, #16]
 80040aa:	e01b      	b.n	80040e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040ac:	897b      	ldrh	r3, [r7, #10]
 80040ae:	11db      	asrs	r3, r3, #7
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f003 0306 	and.w	r3, r3, #6
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f063 030f 	orn	r3, r3, #15
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	490e      	ldr	r1, [pc, #56]	@ (8004104 <I2C_MasterRequestWrite+0xfc>)
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 f898 	bl	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e010      	b.n	80040fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040da:	897b      	ldrh	r3, [r7, #10]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4907      	ldr	r1, [pc, #28]	@ (8004108 <I2C_MasterRequestWrite+0x100>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f888 	bl	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	00010008 	.word	0x00010008
 8004108:	00010002 	.word	0x00010002

0800410c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411c:	e048      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004124:	d044      	beq.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fe fe59 	bl	8002ddc <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d139      	bne.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10d      	bne.n	8004162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	43da      	mvns	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	461a      	mov	r2, r3
 8004160:	e00c      	b.n	800417c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	43da      	mvns	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf0c      	ite	eq
 8004174:	2301      	moveq	r3, #1
 8004176:	2300      	movne	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	429a      	cmp	r2, r3
 8004180:	d116      	bne.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	f043 0220 	orr.w	r2, r3, #32
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e023      	b.n	80041f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	0c1b      	lsrs	r3, r3, #16
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d10d      	bne.n	80041d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	43da      	mvns	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	4013      	ands	r3, r2
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	e00c      	b.n	80041f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	43da      	mvns	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d093      	beq.n	800411e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800420e:	e071      	b.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800421e:	d123      	bne.n	8004268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800422e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	f043 0204 	orr.w	r2, r3, #4
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e067      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800426e:	d041      	beq.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004270:	f7fe fdb4 	bl	8002ddc <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d302      	bcc.n	8004286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d136      	bne.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10c      	bne.n	80042aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	43da      	mvns	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	4013      	ands	r3, r2
 800429c:	b29b      	uxth	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	bf14      	ite	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	2300      	moveq	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	e00b      	b.n	80042c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	43da      	mvns	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	4013      	ands	r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d016      	beq.n	80042f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f043 0220 	orr.w	r2, r3, #32
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e021      	b.n	8004338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	0c1b      	lsrs	r3, r3, #16
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10c      	bne.n	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	43da      	mvns	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4013      	ands	r3, r2
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	e00b      	b.n	8004330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4013      	ands	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	f47f af6d 	bne.w	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800434c:	e034      	b.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f886 	bl	8004460 <I2C_IsAcknowledgeFailed>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e034      	b.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d028      	beq.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fe fd39 	bl	8002ddc <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11d      	bne.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004386:	2b80      	cmp	r3, #128	@ 0x80
 8004388:	d016      	beq.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e007      	b.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b80      	cmp	r3, #128	@ 0x80
 80043c4:	d1c3      	bne.n	800434e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043dc:	e034      	b.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 f83e 	bl	8004460 <I2C_IsAcknowledgeFailed>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e034      	b.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d028      	beq.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fe fcf1 	bl	8002ddc <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11d      	bne.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0304 	and.w	r3, r3, #4
 8004416:	2b04      	cmp	r3, #4
 8004418:	d016      	beq.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2220      	movs	r2, #32
 8004424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	f043 0220 	orr.w	r2, r3, #32
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e007      	b.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b04      	cmp	r3, #4
 8004454:	d1c3      	bne.n	80043de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004476:	d11b      	bne.n	80044b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004480:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449c:	f043 0204 	orr.w	r2, r3, #4
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e267      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d075      	beq.n	80045ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044de:	4b88      	ldr	r3, [pc, #544]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d00c      	beq.n	8004504 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b85      	ldr	r3, [pc, #532]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d112      	bne.n	800451c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f6:	4b82      	ldr	r3, [pc, #520]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004502:	d10b      	bne.n	800451c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004504:	4b7e      	ldr	r3, [pc, #504]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d05b      	beq.n	80045c8 <HAL_RCC_OscConfig+0x108>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d157      	bne.n	80045c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e242      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004524:	d106      	bne.n	8004534 <HAL_RCC_OscConfig+0x74>
 8004526:	4b76      	ldr	r3, [pc, #472]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a75      	ldr	r2, [pc, #468]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e01d      	b.n	8004570 <HAL_RCC_OscConfig+0xb0>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x98>
 800453e:	4b70      	ldr	r3, [pc, #448]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6f      	ldr	r2, [pc, #444]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b6d      	ldr	r3, [pc, #436]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a6c      	ldr	r2, [pc, #432]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e00b      	b.n	8004570 <HAL_RCC_OscConfig+0xb0>
 8004558:	4b69      	ldr	r3, [pc, #420]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a68      	ldr	r2, [pc, #416]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 800455e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	4b66      	ldr	r3, [pc, #408]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a65      	ldr	r2, [pc, #404]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 800456a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800456e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d013      	beq.n	80045a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fe fc30 	bl	8002ddc <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004580:	f7fe fc2c 	bl	8002ddc <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b64      	cmp	r3, #100	@ 0x64
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e207      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	4b5b      	ldr	r3, [pc, #364]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0xc0>
 800459e:	e014      	b.n	80045ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fe fc1c 	bl	8002ddc <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fe fc18 	bl	8002ddc <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	@ 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1f3      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	4b51      	ldr	r3, [pc, #324]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0xe8>
 80045c6:	e000      	b.n	80045ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d063      	beq.n	800469e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b47      	ldr	r3, [pc, #284]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d11c      	bne.n	8004628 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ee:	4b44      	ldr	r3, [pc, #272]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d116      	bne.n	8004628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fa:	4b41      	ldr	r3, [pc, #260]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_RCC_OscConfig+0x152>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d001      	beq.n	8004612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e1c7      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004612:	4b3b      	ldr	r3, [pc, #236]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4937      	ldr	r1, [pc, #220]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004626:	e03a      	b.n	800469e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d020      	beq.n	8004672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004630:	4b34      	ldr	r3, [pc, #208]	@ (8004704 <HAL_RCC_OscConfig+0x244>)
 8004632:	2201      	movs	r2, #1
 8004634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fe fbd1 	bl	8002ddc <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463e:	f7fe fbcd 	bl	8002ddc <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e1a8      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	4b2b      	ldr	r3, [pc, #172]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b28      	ldr	r3, [pc, #160]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4925      	ldr	r1, [pc, #148]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 800466c:	4313      	orrs	r3, r2
 800466e:	600b      	str	r3, [r1, #0]
 8004670:	e015      	b.n	800469e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004672:	4b24      	ldr	r3, [pc, #144]	@ (8004704 <HAL_RCC_OscConfig+0x244>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004678:	f7fe fbb0 	bl	8002ddc <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004680:	f7fe fbac 	bl	8002ddc <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e187      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d036      	beq.n	8004718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b2:	4b15      	ldr	r3, [pc, #84]	@ (8004708 <HAL_RCC_OscConfig+0x248>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fe fb90 	bl	8002ddc <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c0:	f7fe fb8c 	bl	8002ddc <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e167      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004700 <HAL_RCC_OscConfig+0x240>)
 80046d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0x200>
 80046de:	e01b      	b.n	8004718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e0:	4b09      	ldr	r3, [pc, #36]	@ (8004708 <HAL_RCC_OscConfig+0x248>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e6:	f7fe fb79 	bl	8002ddc <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	e00e      	b.n	800470c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ee:	f7fe fb75 	bl	8002ddc <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d907      	bls.n	800470c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e150      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
 8004700:	40023800 	.word	0x40023800
 8004704:	42470000 	.word	0x42470000
 8004708:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470c:	4b88      	ldr	r3, [pc, #544]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 800470e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ea      	bne.n	80046ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8097 	beq.w	8004854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472a:	4b81      	ldr	r3, [pc, #516]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10f      	bne.n	8004756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	4b7d      	ldr	r3, [pc, #500]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	4a7c      	ldr	r2, [pc, #496]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004744:	6413      	str	r3, [r2, #64]	@ 0x40
 8004746:	4b7a      	ldr	r3, [pc, #488]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004756:	4b77      	ldr	r3, [pc, #476]	@ (8004934 <HAL_RCC_OscConfig+0x474>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d118      	bne.n	8004794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004762:	4b74      	ldr	r3, [pc, #464]	@ (8004934 <HAL_RCC_OscConfig+0x474>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a73      	ldr	r2, [pc, #460]	@ (8004934 <HAL_RCC_OscConfig+0x474>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476e:	f7fe fb35 	bl	8002ddc <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004776:	f7fe fb31 	bl	8002ddc <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e10c      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004788:	4b6a      	ldr	r3, [pc, #424]	@ (8004934 <HAL_RCC_OscConfig+0x474>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x2ea>
 800479c:	4b64      	ldr	r3, [pc, #400]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	4a63      	ldr	r2, [pc, #396]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a8:	e01c      	b.n	80047e4 <HAL_RCC_OscConfig+0x324>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b05      	cmp	r3, #5
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x30c>
 80047b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047be:	4b5c      	ldr	r3, [pc, #368]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ca:	e00b      	b.n	80047e4 <HAL_RCC_OscConfig+0x324>
 80047cc:	4b58      	ldr	r3, [pc, #352]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	4a57      	ldr	r2, [pc, #348]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d8:	4b55      	ldr	r3, [pc, #340]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047dc:	4a54      	ldr	r2, [pc, #336]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80047de:	f023 0304 	bic.w	r3, r3, #4
 80047e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d015      	beq.n	8004818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fe faf6 	bl	8002ddc <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7fe faf2 	bl	8002ddc <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e0cb      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480a:	4b49      	ldr	r3, [pc, #292]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 800480c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ee      	beq.n	80047f4 <HAL_RCC_OscConfig+0x334>
 8004816:	e014      	b.n	8004842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004818:	f7fe fae0 	bl	8002ddc <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fe fadc 	bl	8002ddc <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0b5      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004836:	4b3e      	ldr	r3, [pc, #248]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1ee      	bne.n	8004820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d105      	bne.n	8004854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004848:	4b39      	ldr	r3, [pc, #228]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	4a38      	ldr	r2, [pc, #224]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 800484e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004852:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a1 	beq.w	80049a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800485e:	4b34      	ldr	r3, [pc, #208]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b08      	cmp	r3, #8
 8004868:	d05c      	beq.n	8004924 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d141      	bne.n	80048f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b31      	ldr	r3, [pc, #196]	@ (8004938 <HAL_RCC_OscConfig+0x478>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fe fab0 	bl	8002ddc <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fe faac 	bl	8002ddc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e087      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b27      	ldr	r3, [pc, #156]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69da      	ldr	r2, [r3, #28]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	019b      	lsls	r3, r3, #6
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	085b      	lsrs	r3, r3, #1
 80048b6:	3b01      	subs	r3, #1
 80048b8:	041b      	lsls	r3, r3, #16
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	491b      	ldr	r1, [pc, #108]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004938 <HAL_RCC_OscConfig+0x478>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fe fa85 	bl	8002ddc <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fe fa81 	bl	8002ddc <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e05c      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e8:	4b11      	ldr	r3, [pc, #68]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x416>
 80048f4:	e054      	b.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b10      	ldr	r3, [pc, #64]	@ (8004938 <HAL_RCC_OscConfig+0x478>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fe fa6e 	bl	8002ddc <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fe fa6a 	bl	8002ddc <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e045      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <HAL_RCC_OscConfig+0x470>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x444>
 8004922:	e03d      	b.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e038      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
 8004938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800493c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ac <HAL_RCC_OscConfig+0x4ec>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d028      	beq.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004954:	429a      	cmp	r2, r3
 8004956:	d121      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004962:	429a      	cmp	r2, r3
 8004964:	d11a      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800496c:	4013      	ands	r3, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004974:	4293      	cmp	r3, r2
 8004976:	d111      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	3b01      	subs	r3, #1
 8004986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d107      	bne.n	800499c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800

080049b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0cc      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b68      	ldr	r3, [pc, #416]	@ (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d90c      	bls.n	80049ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b65      	ldr	r3, [pc, #404]	@ (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049da:	4b63      	ldr	r3, [pc, #396]	@ (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d001      	beq.n	80049ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0b8      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a04:	4b59      	ldr	r3, [pc, #356]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	4a58      	ldr	r2, [pc, #352]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a1c:	4b53      	ldr	r3, [pc, #332]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a52      	ldr	r2, [pc, #328]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a28:	4b50      	ldr	r3, [pc, #320]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	494d      	ldr	r1, [pc, #308]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d044      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	4b47      	ldr	r3, [pc, #284]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d119      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d003      	beq.n	8004a6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e06f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e067      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8e:	4b37      	ldr	r3, [pc, #220]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4934      	ldr	r1, [pc, #208]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa0:	f7fe f99c 	bl	8002ddc <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fe f998 	bl	8002ddc <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e04f      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	4b2b      	ldr	r3, [pc, #172]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 020c 	and.w	r2, r3, #12
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d1eb      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b25      	ldr	r3, [pc, #148]	@ (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d20c      	bcs.n	8004af8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b22      	ldr	r3, [pc, #136]	@ (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae6:	4b20      	ldr	r3, [pc, #128]	@ (8004b68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d001      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e032      	b.n	8004b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b04:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	4916      	ldr	r1, [pc, #88]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b22:	4b12      	ldr	r3, [pc, #72]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	490e      	ldr	r1, [pc, #56]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b36:	f000 f821 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	490a      	ldr	r1, [pc, #40]	@ (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	5ccb      	ldrb	r3, [r1, r3]
 8004b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4e:	4a09      	ldr	r2, [pc, #36]	@ (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b52:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <HAL_RCC_ClockConfig+0x1c8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fefe 	bl	8002958 <HAL_InitTick>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40023c00 	.word	0x40023c00
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	0800d358 	.word	0x0800d358
 8004b74:	2000000c 	.word	0x2000000c
 8004b78:	20000010 	.word	0x20000010

08004b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b80:	b094      	sub	sp, #80	@ 0x50
 8004b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b94:	4b79      	ldr	r3, [pc, #484]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d00d      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x40>
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	f200 80e1 	bhi.w	8004d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d003      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bae:	e0db      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b73      	ldr	r3, [pc, #460]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bb4:	e0db      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bb6:	4b73      	ldr	r3, [pc, #460]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bba:	e0d8      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bbc:	4b6f      	ldr	r3, [pc, #444]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d063      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	099b      	lsrs	r3, r3, #6
 8004bd8:	2200      	movs	r2, #0
 8004bda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004be6:	2300      	movs	r3, #0
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f04f 0100 	mov.w	r1, #0
 8004bfa:	0159      	lsls	r1, r3, #5
 8004bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c00:	0150      	lsls	r0, r2, #5
 8004c02:	4602      	mov	r2, r0
 8004c04:	460b      	mov	r3, r1
 8004c06:	4621      	mov	r1, r4
 8004c08:	1a51      	subs	r1, r2, r1
 8004c0a:	6139      	str	r1, [r7, #16]
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c20:	4659      	mov	r1, fp
 8004c22:	018b      	lsls	r3, r1, #6
 8004c24:	4651      	mov	r1, sl
 8004c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	018a      	lsls	r2, r1, #6
 8004c2e:	4651      	mov	r1, sl
 8004c30:	ebb2 0801 	subs.w	r8, r2, r1
 8004c34:	4659      	mov	r1, fp
 8004c36:	eb63 0901 	sbc.w	r9, r3, r1
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4e:	4690      	mov	r8, r2
 8004c50:	4699      	mov	r9, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	eb18 0303 	adds.w	r3, r8, r3
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	eb49 0303 	adc.w	r3, r9, r3
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c6e:	4629      	mov	r1, r5
 8004c70:	024b      	lsls	r3, r1, #9
 8004c72:	4621      	mov	r1, r4
 8004c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c78:	4621      	mov	r1, r4
 8004c7a:	024a      	lsls	r2, r1, #9
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c82:	2200      	movs	r2, #0
 8004c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c8c:	f7fb ff94 	bl	8000bb8 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4613      	mov	r3, r2
 8004c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c98:	e058      	b.n	8004d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9a:	4b38      	ldr	r3, [pc, #224]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	2300      	movs	r3, #0
 8004cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cb4:	4642      	mov	r2, r8
 8004cb6:	464b      	mov	r3, r9
 8004cb8:	f04f 0000 	mov.w	r0, #0
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	0159      	lsls	r1, r3, #5
 8004cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc6:	0150      	lsls	r0, r2, #5
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4641      	mov	r1, r8
 8004cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cec:	ebb2 040a 	subs.w	r4, r2, sl
 8004cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	00eb      	lsls	r3, r5, #3
 8004cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d02:	00e2      	lsls	r2, r4, #3
 8004d04:	4614      	mov	r4, r2
 8004d06:	461d      	mov	r5, r3
 8004d08:	4643      	mov	r3, r8
 8004d0a:	18e3      	adds	r3, r4, r3
 8004d0c:	603b      	str	r3, [r7, #0]
 8004d0e:	464b      	mov	r3, r9
 8004d10:	eb45 0303 	adc.w	r3, r5, r3
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d22:	4629      	mov	r1, r5
 8004d24:	028b      	lsls	r3, r1, #10
 8004d26:	4621      	mov	r1, r4
 8004d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	028a      	lsls	r2, r1, #10
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d36:	2200      	movs	r2, #0
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	61fa      	str	r2, [r7, #28]
 8004d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d40:	f7fb ff3a 	bl	8000bb8 <__aeabi_uldivmod>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4613      	mov	r3, r2
 8004d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	3301      	adds	r3, #1
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d66:	e002      	b.n	8004d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d68:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3750      	adds	r7, #80	@ 0x50
 8004d74:	46bd      	mov	sp, r7
 8004d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	00f42400 	.word	0x00f42400
 8004d84:	007a1200 	.word	0x007a1200

08004d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	2000000c 	.word	0x2000000c

08004da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004da4:	f7ff fff0 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004da8:	4602      	mov	r2, r0
 8004daa:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	0a9b      	lsrs	r3, r3, #10
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	4903      	ldr	r1, [pc, #12]	@ (8004dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004db6:	5ccb      	ldrb	r3, [r1, r3]
 8004db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	0800d368 	.word	0x0800d368

08004dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dcc:	f7ff ffdc 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0b5b      	lsrs	r3, r3, #13
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4903      	ldr	r1, [pc, #12]	@ (8004dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40023800 	.word	0x40023800
 8004dec:	0800d368 	.word	0x0800d368

08004df0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	220f      	movs	r2, #15
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e00:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <HAL_RCC_GetClockConfig+0x5c>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 0203 	and.w	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004e4c <HAL_RCC_GetClockConfig+0x5c>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e18:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <HAL_RCC_GetClockConfig+0x5c>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e24:	4b09      	ldr	r3, [pc, #36]	@ (8004e4c <HAL_RCC_GetClockConfig+0x5c>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	08db      	lsrs	r3, r3, #3
 8004e2a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e32:	4b07      	ldr	r3, [pc, #28]	@ (8004e50 <HAL_RCC_GetClockConfig+0x60>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0207 	and.w	r2, r3, #7
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	601a      	str	r2, [r3, #0]
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40023c00 	.word	0x40023c00

08004e54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07b      	b.n	8004f5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d108      	bne.n	8004e80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e76:	d009      	beq.n	8004e8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	61da      	str	r2, [r3, #28]
 8004e7e:	e005      	b.n	8004e8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fd fce2 	bl	8002870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ec2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f10:	ea42 0103 	orr.w	r1, r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	f003 0104 	and.w	r1, r3, #4
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f32:	f003 0210 	and.w	r2, r3, #16
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b088      	sub	sp, #32
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f76:	f7fd ff31 	bl	8002ddc <HAL_GetTick>
 8004f7a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004f7c:	88fb      	ldrh	r3, [r7, #6]
 8004f7e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d001      	beq.n	8004f90 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e12a      	b.n	80051e6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_SPI_Transmit+0x36>
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e122      	b.n	80051e6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_SPI_Transmit+0x48>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e11b      	b.n	80051e6 <HAL_SPI_Transmit+0x280>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffc:	d10f      	bne.n	800501e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800501c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005028:	2b40      	cmp	r3, #64	@ 0x40
 800502a:	d007      	beq.n	800503c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800503a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005044:	d152      	bne.n	80050ec <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <HAL_SPI_Transmit+0xee>
 800504e:	8b7b      	ldrh	r3, [r7, #26]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d145      	bne.n	80050e0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	881a      	ldrh	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005078:	e032      	b.n	80050e0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b02      	cmp	r3, #2
 8005086:	d112      	bne.n	80050ae <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508c:	881a      	ldrh	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005098:	1c9a      	adds	r2, r3, #2
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80050ac:	e018      	b.n	80050e0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050ae:	f7fd fe95 	bl	8002ddc <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d803      	bhi.n	80050c6 <HAL_SPI_Transmit+0x160>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d102      	bne.n	80050cc <HAL_SPI_Transmit+0x166>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e082      	b.n	80051e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1c7      	bne.n	800507a <HAL_SPI_Transmit+0x114>
 80050ea:	e053      	b.n	8005194 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <HAL_SPI_Transmit+0x194>
 80050f4:	8b7b      	ldrh	r3, [r7, #26]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d147      	bne.n	800518a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	330c      	adds	r3, #12
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29a      	uxth	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005120:	e033      	b.n	800518a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d113      	bne.n	8005158 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005156:	e018      	b.n	800518a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005158:	f7fd fe40 	bl	8002ddc <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d803      	bhi.n	8005170 <HAL_SPI_Transmit+0x20a>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d102      	bne.n	8005176 <HAL_SPI_Transmit+0x210>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e02d      	b.n	80051e6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1c6      	bne.n	8005122 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fbd9 	bl	8005950 <SPI_EndRxTxTransaction>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80051e4:	2300      	movs	r3, #0
  }
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b088      	sub	sp, #32
 80051f2:	af02      	add	r7, sp, #8
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	4613      	mov	r3, r2
 80051fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b01      	cmp	r3, #1
 8005208:	d001      	beq.n	800520e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800520a:	2302      	movs	r3, #2
 800520c:	e104      	b.n	8005418 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_SPI_Receive+0x2c>
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e0fc      	b.n	8005418 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005226:	d112      	bne.n	800524e <HAL_SPI_Receive+0x60>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10e      	bne.n	800524e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2204      	movs	r2, #4
 8005234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005238:	88fa      	ldrh	r2, [r7, #6]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	4613      	mov	r3, r2
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f8eb 	bl	8005420 <HAL_SPI_TransmitReceive>
 800524a:	4603      	mov	r3, r0
 800524c:	e0e4      	b.n	8005418 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800524e:	f7fd fdc5 	bl	8002ddc <HAL_GetTick>
 8005252:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_SPI_Receive+0x74>
 800525e:	2302      	movs	r3, #2
 8005260:	e0da      	b.n	8005418 <HAL_SPI_Receive+0x22a>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2204      	movs	r2, #4
 800526e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	88fa      	ldrh	r2, [r7, #6]
 8005288:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052b0:	d10f      	bne.n	80052d2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	d007      	beq.n	80052f0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d170      	bne.n	80053da <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80052f8:	e035      	b.n	8005366 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b01      	cmp	r3, #1
 8005306:	d115      	bne.n	8005334 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f103 020c 	add.w	r2, r3, #12
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	7812      	ldrb	r2, [r2, #0]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005332:	e018      	b.n	8005366 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005334:	f7fd fd52 	bl	8002ddc <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d803      	bhi.n	800534c <HAL_SPI_Receive+0x15e>
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d102      	bne.n	8005352 <HAL_SPI_Receive+0x164>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e058      	b.n	8005418 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1c4      	bne.n	80052fa <HAL_SPI_Receive+0x10c>
 8005370:	e038      	b.n	80053e4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d113      	bne.n	80053a8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538a:	b292      	uxth	r2, r2
 800538c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005392:	1c9a      	adds	r2, r3, #2
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053a6:	e018      	b.n	80053da <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a8:	f7fd fd18 	bl	8002ddc <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d803      	bhi.n	80053c0 <HAL_SPI_Receive+0x1d2>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d102      	bne.n	80053c6 <HAL_SPI_Receive+0x1d8>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e01e      	b.n	8005418 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1c6      	bne.n	8005372 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fa4b 	bl	8005884 <SPI_EndRxTransaction>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005416:	2300      	movs	r3, #0
  }
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	@ 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800542e:	2301      	movs	r3, #1
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005432:	f7fd fcd3 	bl	8002ddc <HAL_GetTick>
 8005436:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800543e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005446:	887b      	ldrh	r3, [r7, #2]
 8005448:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800544a:	7ffb      	ldrb	r3, [r7, #31]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d00c      	beq.n	800546a <HAL_SPI_TransmitReceive+0x4a>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005456:	d106      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d102      	bne.n	8005466 <HAL_SPI_TransmitReceive+0x46>
 8005460:	7ffb      	ldrb	r3, [r7, #31]
 8005462:	2b04      	cmp	r3, #4
 8005464:	d001      	beq.n	800546a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005466:	2302      	movs	r3, #2
 8005468:	e17f      	b.n	800576a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <HAL_SPI_TransmitReceive+0x5c>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_SPI_TransmitReceive+0x5c>
 8005476:	887b      	ldrh	r3, [r7, #2]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e174      	b.n	800576a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_SPI_TransmitReceive+0x6e>
 800548a:	2302      	movs	r3, #2
 800548c:	e16d      	b.n	800576a <HAL_SPI_TransmitReceive+0x34a>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d003      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2205      	movs	r2, #5
 80054a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	887a      	ldrh	r2, [r7, #2]
 80054ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	887a      	ldrh	r2, [r7, #2]
 80054c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	887a      	ldrh	r2, [r7, #2]
 80054cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	887a      	ldrh	r2, [r7, #2]
 80054d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d007      	beq.n	80054fe <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005506:	d17e      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_SPI_TransmitReceive+0xf6>
 8005510:	8afb      	ldrh	r3, [r7, #22]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d16c      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551a:	881a      	ldrh	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	1c9a      	adds	r2, r3, #2
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005530:	b29b      	uxth	r3, r3
 8005532:	3b01      	subs	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800553a:	e059      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d11b      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x162>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800554e:	b29b      	uxth	r3, r3
 8005550:	2b00      	cmp	r3, #0
 8005552:	d016      	beq.n	8005582 <HAL_SPI_TransmitReceive+0x162>
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	2b01      	cmp	r3, #1
 8005558:	d113      	bne.n	8005582 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	1c9a      	adds	r2, r3, #2
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d119      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x1a4>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d014      	beq.n	80055c4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a4:	b292      	uxth	r2, r2
 80055a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ac:	1c9a      	adds	r2, r3, #2
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055c0:	2301      	movs	r3, #1
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055c4:	f7fd fc0a 	bl	8002ddc <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d80d      	bhi.n	80055f0 <HAL_SPI_TransmitReceive+0x1d0>
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d009      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e0bc      	b.n	800576a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1a0      	bne.n	800553c <HAL_SPI_TransmitReceive+0x11c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d19b      	bne.n	800553c <HAL_SPI_TransmitReceive+0x11c>
 8005604:	e082      	b.n	800570c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_SPI_TransmitReceive+0x1f4>
 800560e:	8afb      	ldrh	r3, [r7, #22]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d171      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	7812      	ldrb	r2, [r2, #0]
 8005620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563a:	e05d      	b.n	80056f8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b02      	cmp	r3, #2
 8005648:	d11c      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x264>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d017      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x264>
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	2b01      	cmp	r3, #1
 8005658:	d114      	bne.n	8005684 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005680:	2300      	movs	r3, #0
 8005682:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b01      	cmp	r3, #1
 8005690:	d119      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x2a6>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d014      	beq.n	80056c6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056c2:	2301      	movs	r3, #1
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056c6:	f7fd fb89 	bl	8002ddc <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d803      	bhi.n	80056de <HAL_SPI_TransmitReceive+0x2be>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d102      	bne.n	80056e4 <HAL_SPI_TransmitReceive+0x2c4>
 80056de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e038      	b.n	800576a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d19c      	bne.n	800563c <HAL_SPI_TransmitReceive+0x21c>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005706:	b29b      	uxth	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d197      	bne.n	800563c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800570c:	6a3a      	ldr	r2, [r7, #32]
 800570e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f91d 	bl	8005950 <SPI_EndRxTxTransaction>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e01d      	b.n	800576a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005768:	2300      	movs	r3, #0
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	3728      	adds	r7, #40	@ 0x28
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	603b      	str	r3, [r7, #0]
 8005780:	4613      	mov	r3, r2
 8005782:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005784:	f7fd fb2a 	bl	8002ddc <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578c:	1a9b      	subs	r3, r3, r2
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	4413      	add	r3, r2
 8005792:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005794:	f7fd fb22 	bl	8002ddc <HAL_GetTick>
 8005798:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800579a:	4b39      	ldr	r3, [pc, #228]	@ (8005880 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	015b      	lsls	r3, r3, #5
 80057a0:	0d1b      	lsrs	r3, r3, #20
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	fb02 f303 	mul.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057aa:	e055      	b.n	8005858 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d051      	beq.n	8005858 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b4:	f7fd fb12 	bl	8002ddc <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d902      	bls.n	80057ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d13d      	bne.n	8005846 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80057d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057e2:	d111      	bne.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ec:	d004      	beq.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f6:	d107      	bne.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005806:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005810:	d10f      	bne.n	8005832 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005830:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e018      	b.n	8005878 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
 8005850:	e002      	b.n	8005858 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	3b01      	subs	r3, #1
 8005856:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	4013      	ands	r3, r2
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	429a      	cmp	r2, r3
 8005874:	d19a      	bne.n	80057ac <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3720      	adds	r7, #32
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	2000000c 	.word	0x2000000c

08005884 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005898:	d111      	bne.n	80058be <SPI_EndRxTransaction+0x3a>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058a2:	d004      	beq.n	80058ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ac:	d107      	bne.n	80058be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058c6:	d12a      	bne.n	800591e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058d0:	d012      	beq.n	80058f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	@ 0x80
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff ff49 	bl	8005774 <SPI_WaitFlagStateUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d02d      	beq.n	8005944 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ec:	f043 0220 	orr.w	r2, r3, #32
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e026      	b.n	8005946 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2200      	movs	r2, #0
 8005900:	2101      	movs	r1, #1
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff ff36 	bl	8005774 <SPI_WaitFlagStateUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01a      	beq.n	8005944 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005912:	f043 0220 	orr.w	r2, r3, #32
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e013      	b.n	8005946 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2200      	movs	r2, #0
 8005926:	2101      	movs	r1, #1
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff ff23 	bl	8005774 <SPI_WaitFlagStateUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e000      	b.n	8005946 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
	...

08005950 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af02      	add	r7, sp, #8
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2201      	movs	r2, #1
 8005964:	2102      	movs	r1, #2
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff ff04 	bl	8005774 <SPI_WaitFlagStateUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005976:	f043 0220 	orr.w	r2, r3, #32
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e032      	b.n	80059e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005982:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <SPI_EndRxTxTransaction+0xa0>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	@ (80059f4 <SPI_EndRxTxTransaction+0xa4>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	0d5b      	lsrs	r3, r3, #21
 800598e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059a0:	d112      	bne.n	80059c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2200      	movs	r2, #0
 80059aa:	2180      	movs	r1, #128	@ 0x80
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff fee1 	bl	8005774 <SPI_WaitFlagStateUntilTimeout>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d016      	beq.n	80059e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059bc:	f043 0220 	orr.w	r2, r3, #32
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e00f      	b.n	80059e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059de:	2b80      	cmp	r3, #128	@ 0x80
 80059e0:	d0f2      	beq.n	80059c8 <SPI_EndRxTxTransaction+0x78>
 80059e2:	e000      	b.n	80059e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80059e4:	bf00      	nop
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	2000000c 	.word	0x2000000c
 80059f4:	165e9f81 	.word	0x165e9f81

080059f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e041      	b.n	8005a8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f839 	bl	8005a96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	3304      	adds	r3, #4
 8005a34:	4619      	mov	r1, r3
 8005a36:	4610      	mov	r0, r2
 8005a38:	f000 f9b2 	bl	8005da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d001      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e044      	b.n	8005b4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8005b5c <HAL_TIM_Base_Start_IT+0xb0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d018      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x6c>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aee:	d013      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x6c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1a      	ldr	r2, [pc, #104]	@ (8005b60 <HAL_TIM_Base_Start_IT+0xb4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00e      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x6c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a19      	ldr	r2, [pc, #100]	@ (8005b64 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x6c>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a17      	ldr	r2, [pc, #92]	@ (8005b68 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x6c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a16      	ldr	r2, [pc, #88]	@ (8005b6c <HAL_TIM_Base_Start_IT+0xc0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d111      	bne.n	8005b3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b06      	cmp	r3, #6
 8005b28:	d010      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b3a:	e007      	b.n	8005b4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40014000 	.word	0x40014000

08005b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d020      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01b      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0202 	mvn.w	r2, #2
 8005ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f8d2 	bl	8005d64 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f8c4 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f8d5 	bl	8005d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d020      	beq.n	8005c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01b      	beq.n	8005c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0204 	mvn.w	r2, #4
 8005bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f8ac 	bl	8005d64 <HAL_TIM_IC_CaptureCallback>
 8005c0c:	e005      	b.n	8005c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f89e 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f8af 	bl	8005d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d020      	beq.n	8005c6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0308 	and.w	r3, r3, #8
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01b      	beq.n	8005c6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0208 	mvn.w	r2, #8
 8005c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2204      	movs	r2, #4
 8005c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f886 	bl	8005d64 <HAL_TIM_IC_CaptureCallback>
 8005c58:	e005      	b.n	8005c66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f878 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 f889 	bl	8005d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 0310 	and.w	r3, r3, #16
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d020      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f003 0310 	and.w	r3, r3, #16
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01b      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0210 	mvn.w	r2, #16
 8005c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f860 	bl	8005d64 <HAL_TIM_IC_CaptureCallback>
 8005ca4:	e005      	b.n	8005cb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f852 	bl	8005d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f863 	bl	8005d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00c      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d007      	beq.n	8005cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f06f 0201 	mvn.w	r2, #1
 8005cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fc fd58 	bl	800278c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00c      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d007      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f8e0 	bl	8005ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f834 	bl	8005d8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f003 0320 	and.w	r3, r3, #32
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0220 	mvn.w	r2, #32
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f8b2 	bl	8005eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d48:	bf00      	nop
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d6c:	bf00      	nop
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a37      	ldr	r2, [pc, #220]	@ (8005e90 <TIM_Base_SetConfig+0xf0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00f      	beq.n	8005dd8 <TIM_Base_SetConfig+0x38>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dbe:	d00b      	beq.n	8005dd8 <TIM_Base_SetConfig+0x38>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a34      	ldr	r2, [pc, #208]	@ (8005e94 <TIM_Base_SetConfig+0xf4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_Base_SetConfig+0x38>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a33      	ldr	r2, [pc, #204]	@ (8005e98 <TIM_Base_SetConfig+0xf8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_Base_SetConfig+0x38>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a32      	ldr	r2, [pc, #200]	@ (8005e9c <TIM_Base_SetConfig+0xfc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d108      	bne.n	8005dea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a28      	ldr	r2, [pc, #160]	@ (8005e90 <TIM_Base_SetConfig+0xf0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d01b      	beq.n	8005e2a <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df8:	d017      	beq.n	8005e2a <TIM_Base_SetConfig+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a25      	ldr	r2, [pc, #148]	@ (8005e94 <TIM_Base_SetConfig+0xf4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <TIM_Base_SetConfig+0x8a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a24      	ldr	r2, [pc, #144]	@ (8005e98 <TIM_Base_SetConfig+0xf8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d00f      	beq.n	8005e2a <TIM_Base_SetConfig+0x8a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a23      	ldr	r2, [pc, #140]	@ (8005e9c <TIM_Base_SetConfig+0xfc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_Base_SetConfig+0x8a>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a22      	ldr	r2, [pc, #136]	@ (8005ea0 <TIM_Base_SetConfig+0x100>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d007      	beq.n	8005e2a <TIM_Base_SetConfig+0x8a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a21      	ldr	r2, [pc, #132]	@ (8005ea4 <TIM_Base_SetConfig+0x104>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_Base_SetConfig+0x8a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a20      	ldr	r2, [pc, #128]	@ (8005ea8 <TIM_Base_SetConfig+0x108>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	689a      	ldr	r2, [r3, #8]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8005e90 <TIM_Base_SetConfig+0xf0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d103      	bne.n	8005e6a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f043 0204 	orr.w	r2, r3, #4
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	601a      	str	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	3714      	adds	r7, #20
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	40010000 	.word	0x40010000
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40000c00 	.word	0x40000c00
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800

08005eac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e042      	b.n	8005f6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7fc fec6 	bl	8002c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2224      	movs	r2, #36	@ 0x24
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f973 	bl	8006204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695a      	ldr	r2, [r3, #20]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	@ 0x28
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d175      	bne.n	8006080 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_UART_Transmit+0x2c>
 8005f9a:	88fb      	ldrh	r3, [r7, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e06e      	b.n	8006082 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2221      	movs	r2, #33	@ 0x21
 8005fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fb2:	f7fc ff13 	bl	8002ddc <HAL_GetTick>
 8005fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	88fa      	ldrh	r2, [r7, #6]
 8005fbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fcc:	d108      	bne.n	8005fe0 <HAL_UART_Transmit+0x6c>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e003      	b.n	8005fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe8:	e02e      	b.n	8006048 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f848 	bl	800608a <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e03a      	b.n	8006082 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10b      	bne.n	800602a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006020:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	3302      	adds	r3, #2
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	e007      	b.n	800603a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	3301      	adds	r3, #1
 8006038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1cb      	bne.n	8005fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2200      	movs	r2, #0
 800605a:	2140      	movs	r1, #64	@ 0x40
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f814 	bl	800608a <UART_WaitOnFlagUntilTimeout>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e006      	b.n	8006082 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800607c:	2300      	movs	r3, #0
 800607e:	e000      	b.n	8006082 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006080:	2302      	movs	r3, #2
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3720      	adds	r7, #32
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	60f8      	str	r0, [r7, #12]
 8006092:	60b9      	str	r1, [r7, #8]
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	4613      	mov	r3, r2
 8006098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800609a:	e03b      	b.n	8006114 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a2:	d037      	beq.n	8006114 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a4:	f7fc fe9a 	bl	8002ddc <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	6a3a      	ldr	r2, [r7, #32]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d302      	bcc.n	80060ba <UART_WaitOnFlagUntilTimeout+0x30>
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e03a      	b.n	8006134 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d023      	beq.n	8006114 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b80      	cmp	r3, #128	@ 0x80
 80060d0:	d020      	beq.n	8006114 <UART_WaitOnFlagUntilTimeout+0x8a>
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b40      	cmp	r3, #64	@ 0x40
 80060d6:	d01d      	beq.n	8006114 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d116      	bne.n	8006114 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f000 f81d 	bl	800613c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2208      	movs	r2, #8
 8006106:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e00f      	b.n	8006134 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4013      	ands	r3, r2
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	429a      	cmp	r2, r3
 8006122:	bf0c      	ite	eq
 8006124:	2301      	moveq	r3, #1
 8006126:	2300      	movne	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	429a      	cmp	r2, r3
 8006130:	d0b4      	beq.n	800609c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b095      	sub	sp, #84	@ 0x54
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800614e:	e853 3f00 	ldrex	r3, [r3]
 8006152:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800615a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006164:	643a      	str	r2, [r7, #64]	@ 0x40
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800616a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800616c:	e841 2300 	strex	r3, r2, [r1]
 8006170:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006174:	2b00      	cmp	r3, #0
 8006176:	d1e5      	bne.n	8006144 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3314      	adds	r3, #20
 800617e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	e853 3f00 	ldrex	r3, [r3]
 8006186:	61fb      	str	r3, [r7, #28]
   return(result);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3314      	adds	r3, #20
 8006196:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006198:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800619a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800619e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a0:	e841 2300 	strex	r3, r2, [r1]
 80061a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1e5      	bne.n	8006178 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d119      	bne.n	80061e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 0310 	bic.w	r3, r3, #16
 80061ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061d4:	61ba      	str	r2, [r7, #24]
 80061d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6979      	ldr	r1, [r7, #20]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	613b      	str	r3, [r7, #16]
   return(result);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e5      	bne.n	80061b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061f6:	bf00      	nop
 80061f8:	3754      	adds	r7, #84	@ 0x54
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
	...

08006204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006208:	b0c0      	sub	sp, #256	@ 0x100
 800620a:	af00      	add	r7, sp, #0
 800620c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800621c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006220:	68d9      	ldr	r1, [r3, #12]
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	ea40 0301 	orr.w	r3, r0, r1
 800622c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800622e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	431a      	orrs	r2, r3
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	431a      	orrs	r2, r3
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800625c:	f021 010c 	bic.w	r1, r1, #12
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800626a:	430b      	orrs	r3, r1
 800626c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800626e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800627a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627e:	6999      	ldr	r1, [r3, #24]
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	ea40 0301 	orr.w	r3, r0, r1
 800628a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4b8f      	ldr	r3, [pc, #572]	@ (80064d0 <UART_SetConfig+0x2cc>)
 8006294:	429a      	cmp	r2, r3
 8006296:	d005      	beq.n	80062a4 <UART_SetConfig+0xa0>
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	4b8d      	ldr	r3, [pc, #564]	@ (80064d4 <UART_SetConfig+0x2d0>)
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d104      	bne.n	80062ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062a4:	f7fe fd90 	bl	8004dc8 <HAL_RCC_GetPCLK2Freq>
 80062a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062ac:	e003      	b.n	80062b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062ae:	f7fe fd77 	bl	8004da0 <HAL_RCC_GetPCLK1Freq>
 80062b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c0:	f040 810c 	bne.w	80064dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062c8:	2200      	movs	r2, #0
 80062ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80062ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80062d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80062d6:	4622      	mov	r2, r4
 80062d8:	462b      	mov	r3, r5
 80062da:	1891      	adds	r1, r2, r2
 80062dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80062de:	415b      	adcs	r3, r3
 80062e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80062e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80062e6:	4621      	mov	r1, r4
 80062e8:	eb12 0801 	adds.w	r8, r2, r1
 80062ec:	4629      	mov	r1, r5
 80062ee:	eb43 0901 	adc.w	r9, r3, r1
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006306:	4690      	mov	r8, r2
 8006308:	4699      	mov	r9, r3
 800630a:	4623      	mov	r3, r4
 800630c:	eb18 0303 	adds.w	r3, r8, r3
 8006310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006314:	462b      	mov	r3, r5
 8006316:	eb49 0303 	adc.w	r3, r9, r3
 800631a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800631e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800632a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800632e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006332:	460b      	mov	r3, r1
 8006334:	18db      	adds	r3, r3, r3
 8006336:	653b      	str	r3, [r7, #80]	@ 0x50
 8006338:	4613      	mov	r3, r2
 800633a:	eb42 0303 	adc.w	r3, r2, r3
 800633e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006348:	f7fa fc36 	bl	8000bb8 <__aeabi_uldivmod>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4b61      	ldr	r3, [pc, #388]	@ (80064d8 <UART_SetConfig+0x2d4>)
 8006352:	fba3 2302 	umull	r2, r3, r3, r2
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	011c      	lsls	r4, r3, #4
 800635a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800635e:	2200      	movs	r2, #0
 8006360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006364:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800636c:	4642      	mov	r2, r8
 800636e:	464b      	mov	r3, r9
 8006370:	1891      	adds	r1, r2, r2
 8006372:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006374:	415b      	adcs	r3, r3
 8006376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800637c:	4641      	mov	r1, r8
 800637e:	eb12 0a01 	adds.w	sl, r2, r1
 8006382:	4649      	mov	r1, r9
 8006384:	eb43 0b01 	adc.w	fp, r3, r1
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800639c:	4692      	mov	sl, r2
 800639e:	469b      	mov	fp, r3
 80063a0:	4643      	mov	r3, r8
 80063a2:	eb1a 0303 	adds.w	r3, sl, r3
 80063a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063aa:	464b      	mov	r3, r9
 80063ac:	eb4b 0303 	adc.w	r3, fp, r3
 80063b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80063c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80063c8:	460b      	mov	r3, r1
 80063ca:	18db      	adds	r3, r3, r3
 80063cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ce:	4613      	mov	r3, r2
 80063d0:	eb42 0303 	adc.w	r3, r2, r3
 80063d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80063da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80063de:	f7fa fbeb 	bl	8000bb8 <__aeabi_uldivmod>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4611      	mov	r1, r2
 80063e8:	4b3b      	ldr	r3, [pc, #236]	@ (80064d8 <UART_SetConfig+0x2d4>)
 80063ea:	fba3 2301 	umull	r2, r3, r3, r1
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	2264      	movs	r2, #100	@ 0x64
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
 80063f6:	1acb      	subs	r3, r1, r3
 80063f8:	00db      	lsls	r3, r3, #3
 80063fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80063fe:	4b36      	ldr	r3, [pc, #216]	@ (80064d8 <UART_SetConfig+0x2d4>)
 8006400:	fba3 2302 	umull	r2, r3, r3, r2
 8006404:	095b      	lsrs	r3, r3, #5
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800640c:	441c      	add	r4, r3
 800640e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006412:	2200      	movs	r2, #0
 8006414:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006418:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800641c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	1891      	adds	r1, r2, r2
 8006426:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006428:	415b      	adcs	r3, r3
 800642a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800642c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006430:	4641      	mov	r1, r8
 8006432:	1851      	adds	r1, r2, r1
 8006434:	6339      	str	r1, [r7, #48]	@ 0x30
 8006436:	4649      	mov	r1, r9
 8006438:	414b      	adcs	r3, r1
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
 800643c:	f04f 0200 	mov.w	r2, #0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006448:	4659      	mov	r1, fp
 800644a:	00cb      	lsls	r3, r1, #3
 800644c:	4651      	mov	r1, sl
 800644e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006452:	4651      	mov	r1, sl
 8006454:	00ca      	lsls	r2, r1, #3
 8006456:	4610      	mov	r0, r2
 8006458:	4619      	mov	r1, r3
 800645a:	4603      	mov	r3, r0
 800645c:	4642      	mov	r2, r8
 800645e:	189b      	adds	r3, r3, r2
 8006460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006464:	464b      	mov	r3, r9
 8006466:	460a      	mov	r2, r1
 8006468:	eb42 0303 	adc.w	r3, r2, r3
 800646c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800647c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006484:	460b      	mov	r3, r1
 8006486:	18db      	adds	r3, r3, r3
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800648a:	4613      	mov	r3, r2
 800648c:	eb42 0303 	adc.w	r3, r2, r3
 8006490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800649a:	f7fa fb8d 	bl	8000bb8 <__aeabi_uldivmod>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <UART_SetConfig+0x2d4>)
 80064a4:	fba3 1302 	umull	r1, r3, r3, r2
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	2164      	movs	r1, #100	@ 0x64
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	3332      	adds	r3, #50	@ 0x32
 80064b6:	4a08      	ldr	r2, [pc, #32]	@ (80064d8 <UART_SetConfig+0x2d4>)
 80064b8:	fba2 2303 	umull	r2, r3, r2, r3
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	f003 0207 	and.w	r2, r3, #7
 80064c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4422      	add	r2, r4
 80064ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064cc:	e106      	b.n	80066dc <UART_SetConfig+0x4d8>
 80064ce:	bf00      	nop
 80064d0:	40011000 	.word	0x40011000
 80064d4:	40011400 	.word	0x40011400
 80064d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064e0:	2200      	movs	r2, #0
 80064e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80064e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80064ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80064ee:	4642      	mov	r2, r8
 80064f0:	464b      	mov	r3, r9
 80064f2:	1891      	adds	r1, r2, r2
 80064f4:	6239      	str	r1, [r7, #32]
 80064f6:	415b      	adcs	r3, r3
 80064f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80064fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064fe:	4641      	mov	r1, r8
 8006500:	1854      	adds	r4, r2, r1
 8006502:	4649      	mov	r1, r9
 8006504:	eb43 0501 	adc.w	r5, r3, r1
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	00eb      	lsls	r3, r5, #3
 8006512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006516:	00e2      	lsls	r2, r4, #3
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	4643      	mov	r3, r8
 800651e:	18e3      	adds	r3, r4, r3
 8006520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006524:	464b      	mov	r3, r9
 8006526:	eb45 0303 	adc.w	r3, r5, r3
 800652a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800652e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800653a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800653e:	f04f 0200 	mov.w	r2, #0
 8006542:	f04f 0300 	mov.w	r3, #0
 8006546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800654a:	4629      	mov	r1, r5
 800654c:	008b      	lsls	r3, r1, #2
 800654e:	4621      	mov	r1, r4
 8006550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006554:	4621      	mov	r1, r4
 8006556:	008a      	lsls	r2, r1, #2
 8006558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800655c:	f7fa fb2c 	bl	8000bb8 <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	4b60      	ldr	r3, [pc, #384]	@ (80066e8 <UART_SetConfig+0x4e4>)
 8006566:	fba3 2302 	umull	r2, r3, r3, r2
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	011c      	lsls	r4, r3, #4
 800656e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006572:	2200      	movs	r2, #0
 8006574:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006578:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800657c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006580:	4642      	mov	r2, r8
 8006582:	464b      	mov	r3, r9
 8006584:	1891      	adds	r1, r2, r2
 8006586:	61b9      	str	r1, [r7, #24]
 8006588:	415b      	adcs	r3, r3
 800658a:	61fb      	str	r3, [r7, #28]
 800658c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006590:	4641      	mov	r1, r8
 8006592:	1851      	adds	r1, r2, r1
 8006594:	6139      	str	r1, [r7, #16]
 8006596:	4649      	mov	r1, r9
 8006598:	414b      	adcs	r3, r1
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065a8:	4659      	mov	r1, fp
 80065aa:	00cb      	lsls	r3, r1, #3
 80065ac:	4651      	mov	r1, sl
 80065ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065b2:	4651      	mov	r1, sl
 80065b4:	00ca      	lsls	r2, r1, #3
 80065b6:	4610      	mov	r0, r2
 80065b8:	4619      	mov	r1, r3
 80065ba:	4603      	mov	r3, r0
 80065bc:	4642      	mov	r2, r8
 80065be:	189b      	adds	r3, r3, r2
 80065c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065c4:	464b      	mov	r3, r9
 80065c6:	460a      	mov	r2, r1
 80065c8:	eb42 0303 	adc.w	r3, r2, r3
 80065cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80065dc:	f04f 0200 	mov.w	r2, #0
 80065e0:	f04f 0300 	mov.w	r3, #0
 80065e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80065e8:	4649      	mov	r1, r9
 80065ea:	008b      	lsls	r3, r1, #2
 80065ec:	4641      	mov	r1, r8
 80065ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f2:	4641      	mov	r1, r8
 80065f4:	008a      	lsls	r2, r1, #2
 80065f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80065fa:	f7fa fadd 	bl	8000bb8 <__aeabi_uldivmod>
 80065fe:	4602      	mov	r2, r0
 8006600:	460b      	mov	r3, r1
 8006602:	4611      	mov	r1, r2
 8006604:	4b38      	ldr	r3, [pc, #224]	@ (80066e8 <UART_SetConfig+0x4e4>)
 8006606:	fba3 2301 	umull	r2, r3, r3, r1
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2264      	movs	r2, #100	@ 0x64
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	1acb      	subs	r3, r1, r3
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	3332      	adds	r3, #50	@ 0x32
 8006618:	4a33      	ldr	r2, [pc, #204]	@ (80066e8 <UART_SetConfig+0x4e4>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006624:	441c      	add	r4, r3
 8006626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800662a:	2200      	movs	r2, #0
 800662c:	673b      	str	r3, [r7, #112]	@ 0x70
 800662e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006630:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006634:	4642      	mov	r2, r8
 8006636:	464b      	mov	r3, r9
 8006638:	1891      	adds	r1, r2, r2
 800663a:	60b9      	str	r1, [r7, #8]
 800663c:	415b      	adcs	r3, r3
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006644:	4641      	mov	r1, r8
 8006646:	1851      	adds	r1, r2, r1
 8006648:	6039      	str	r1, [r7, #0]
 800664a:	4649      	mov	r1, r9
 800664c:	414b      	adcs	r3, r1
 800664e:	607b      	str	r3, [r7, #4]
 8006650:	f04f 0200 	mov.w	r2, #0
 8006654:	f04f 0300 	mov.w	r3, #0
 8006658:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800665c:	4659      	mov	r1, fp
 800665e:	00cb      	lsls	r3, r1, #3
 8006660:	4651      	mov	r1, sl
 8006662:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006666:	4651      	mov	r1, sl
 8006668:	00ca      	lsls	r2, r1, #3
 800666a:	4610      	mov	r0, r2
 800666c:	4619      	mov	r1, r3
 800666e:	4603      	mov	r3, r0
 8006670:	4642      	mov	r2, r8
 8006672:	189b      	adds	r3, r3, r2
 8006674:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006676:	464b      	mov	r3, r9
 8006678:	460a      	mov	r2, r1
 800667a:	eb42 0303 	adc.w	r3, r2, r3
 800667e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	663b      	str	r3, [r7, #96]	@ 0x60
 800668a:	667a      	str	r2, [r7, #100]	@ 0x64
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006698:	4649      	mov	r1, r9
 800669a:	008b      	lsls	r3, r1, #2
 800669c:	4641      	mov	r1, r8
 800669e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a2:	4641      	mov	r1, r8
 80066a4:	008a      	lsls	r2, r1, #2
 80066a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066aa:	f7fa fa85 	bl	8000bb8 <__aeabi_uldivmod>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	4b0d      	ldr	r3, [pc, #52]	@ (80066e8 <UART_SetConfig+0x4e4>)
 80066b4:	fba3 1302 	umull	r1, r3, r3, r2
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	2164      	movs	r1, #100	@ 0x64
 80066bc:	fb01 f303 	mul.w	r3, r1, r3
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	3332      	adds	r3, #50	@ 0x32
 80066c6:	4a08      	ldr	r2, [pc, #32]	@ (80066e8 <UART_SetConfig+0x4e4>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	f003 020f 	and.w	r2, r3, #15
 80066d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4422      	add	r2, r4
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80066e2:	46bd      	mov	sp, r7
 80066e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066e8:	51eb851f 	.word	0x51eb851f

080066ec <__NVIC_SetPriority>:
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	4603      	mov	r3, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	db0a      	blt.n	8006716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	b2da      	uxtb	r2, r3
 8006704:	490c      	ldr	r1, [pc, #48]	@ (8006738 <__NVIC_SetPriority+0x4c>)
 8006706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800670a:	0112      	lsls	r2, r2, #4
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	440b      	add	r3, r1
 8006710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006714:	e00a      	b.n	800672c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	b2da      	uxtb	r2, r3
 800671a:	4908      	ldr	r1, [pc, #32]	@ (800673c <__NVIC_SetPriority+0x50>)
 800671c:	79fb      	ldrb	r3, [r7, #7]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	3b04      	subs	r3, #4
 8006724:	0112      	lsls	r2, r2, #4
 8006726:	b2d2      	uxtb	r2, r2
 8006728:	440b      	add	r3, r1
 800672a:	761a      	strb	r2, [r3, #24]
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	e000e100 	.word	0xe000e100
 800673c:	e000ed00 	.word	0xe000ed00

08006740 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006744:	4b05      	ldr	r3, [pc, #20]	@ (800675c <SysTick_Handler+0x1c>)
 8006746:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006748:	f002 fa32 	bl	8008bb0 <xTaskGetSchedulerState>
 800674c:	4603      	mov	r3, r0
 800674e:	2b01      	cmp	r3, #1
 8006750:	d001      	beq.n	8006756 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006752:	f003 f929 	bl	80099a8 <xPortSysTickHandler>
  }
}
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	e000e010 	.word	0xe000e010

08006760 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006764:	2100      	movs	r1, #0
 8006766:	f06f 0004 	mvn.w	r0, #4
 800676a:	f7ff ffbf 	bl	80066ec <__NVIC_SetPriority>
#endif
}
 800676e:	bf00      	nop
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800677a:	f3ef 8305 	mrs	r3, IPSR
 800677e:	603b      	str	r3, [r7, #0]
  return(result);
 8006780:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006786:	f06f 0305 	mvn.w	r3, #5
 800678a:	607b      	str	r3, [r7, #4]
 800678c:	e00c      	b.n	80067a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800678e:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <osKernelInitialize+0x44>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006796:	4b08      	ldr	r3, [pc, #32]	@ (80067b8 <osKernelInitialize+0x44>)
 8006798:	2201      	movs	r2, #1
 800679a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800679c:	2300      	movs	r3, #0
 800679e:	607b      	str	r3, [r7, #4]
 80067a0:	e002      	b.n	80067a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80067a2:	f04f 33ff 	mov.w	r3, #4294967295
 80067a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067a8:	687b      	ldr	r3, [r7, #4]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	20000400 	.word	0x20000400

080067bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c2:	f3ef 8305 	mrs	r3, IPSR
 80067c6:	603b      	str	r3, [r7, #0]
  return(result);
 80067c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80067ce:	f06f 0305 	mvn.w	r3, #5
 80067d2:	607b      	str	r3, [r7, #4]
 80067d4:	e010      	b.n	80067f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80067d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <osKernelStart+0x48>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d109      	bne.n	80067f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80067de:	f7ff ffbf 	bl	8006760 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80067e2:	4b08      	ldr	r3, [pc, #32]	@ (8006804 <osKernelStart+0x48>)
 80067e4:	2202      	movs	r2, #2
 80067e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80067e8:	f001 fd6e 	bl	80082c8 <vTaskStartScheduler>
      stat = osOK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	607b      	str	r3, [r7, #4]
 80067f0:	e002      	b.n	80067f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80067f8:	687b      	ldr	r3, [r7, #4]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	20000400 	.word	0x20000400

08006808 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	@ 0x38
 800680c:	af04      	add	r7, sp, #16
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006818:	f3ef 8305 	mrs	r3, IPSR
 800681c:	617b      	str	r3, [r7, #20]
  return(result);
 800681e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006820:	2b00      	cmp	r3, #0
 8006822:	d17e      	bne.n	8006922 <osThreadNew+0x11a>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d07b      	beq.n	8006922 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800682a:	2380      	movs	r3, #128	@ 0x80
 800682c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800682e:	2318      	movs	r3, #24
 8006830:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006836:	f04f 33ff 	mov.w	r3, #4294967295
 800683a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d045      	beq.n	80068ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <osThreadNew+0x48>
        name = attr->name;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d008      	beq.n	8006876 <osThreadNew+0x6e>
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b38      	cmp	r3, #56	@ 0x38
 8006868:	d805      	bhi.n	8006876 <osThreadNew+0x6e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <osThreadNew+0x72>
        return (NULL);
 8006876:	2300      	movs	r3, #0
 8006878:	e054      	b.n	8006924 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	089b      	lsrs	r3, r3, #2
 8006888:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <osThreadNew+0xa8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	2ba7      	cmp	r3, #167	@ 0xa7
 8006898:	d90a      	bls.n	80068b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d006      	beq.n	80068b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d002      	beq.n	80068b0 <osThreadNew+0xa8>
        mem = 1;
 80068aa:	2301      	movs	r3, #1
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	e010      	b.n	80068d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10c      	bne.n	80068d2 <osThreadNew+0xca>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d108      	bne.n	80068d2 <osThreadNew+0xca>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <osThreadNew+0xca>
          mem = 0;
 80068c8:	2300      	movs	r3, #0
 80068ca:	61bb      	str	r3, [r7, #24]
 80068cc:	e001      	b.n	80068d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d110      	bne.n	80068fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068e0:	9202      	str	r2, [sp, #8]
 80068e2:	9301      	str	r3, [sp, #4]
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f001 faf6 	bl	8007ee0 <xTaskCreateStatic>
 80068f4:	4603      	mov	r3, r0
 80068f6:	613b      	str	r3, [r7, #16]
 80068f8:	e013      	b.n	8006922 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d110      	bne.n	8006922 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	b29a      	uxth	r2, r3
 8006904:	f107 0310 	add.w	r3, r7, #16
 8006908:	9301      	str	r3, [sp, #4]
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f001 fb44 	bl	8007fa0 <xTaskCreate>
 8006918:	4603      	mov	r3, r0
 800691a:	2b01      	cmp	r3, #1
 800691c:	d001      	beq.n	8006922 <osThreadNew+0x11a>
            hTask = NULL;
 800691e:	2300      	movs	r3, #0
 8006920:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006922:	693b      	ldr	r3, [r7, #16]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3728      	adds	r7, #40	@ 0x28
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006934:	f3ef 8305 	mrs	r3, IPSR
 8006938:	60bb      	str	r3, [r7, #8]
  return(result);
 800693a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <osDelay+0x1c>
    stat = osErrorISR;
 8006940:	f06f 0305 	mvn.w	r3, #5
 8006944:	60fb      	str	r3, [r7, #12]
 8006946:	e007      	b.n	8006958 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f001 fc82 	bl	800825c <vTaskDelay>
    }
  }

  return (stat);
 8006958:	68fb      	ldr	r3, [r7, #12]
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006962:	b580      	push	{r7, lr}
 8006964:	b088      	sub	sp, #32
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800696e:	f3ef 8305 	mrs	r3, IPSR
 8006972:	60bb      	str	r3, [r7, #8]
  return(result);
 8006974:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006976:	2b00      	cmp	r3, #0
 8006978:	d174      	bne.n	8006a64 <osMutexNew+0x102>
    if (attr != NULL) {
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d003      	beq.n	8006988 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	e001      	b.n	800698c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <osMutexNew+0x3a>
      rmtx = 1U;
 8006996:	2301      	movs	r3, #1
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	e001      	b.n	80069a0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d15c      	bne.n	8006a64 <osMutexNew+0x102>
      mem = -1;
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295
 80069ae:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d015      	beq.n	80069e2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d006      	beq.n	80069cc <osMutexNew+0x6a>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80069c4:	d902      	bls.n	80069cc <osMutexNew+0x6a>
          mem = 1;
 80069c6:	2301      	movs	r3, #1
 80069c8:	613b      	str	r3, [r7, #16]
 80069ca:	e00c      	b.n	80069e6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d108      	bne.n	80069e6 <osMutexNew+0x84>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <osMutexNew+0x84>
            mem = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	613b      	str	r3, [r7, #16]
 80069e0:	e001      	b.n	80069e6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d112      	bne.n	8006a12 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	4619      	mov	r1, r3
 80069f8:	2004      	movs	r0, #4
 80069fa:	f000 fc50 	bl	800729e <xQueueCreateMutexStatic>
 80069fe:	61f8      	str	r0, [r7, #28]
 8006a00:	e016      	b.n	8006a30 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	4619      	mov	r1, r3
 8006a08:	2001      	movs	r0, #1
 8006a0a:	f000 fc48 	bl	800729e <xQueueCreateMutexStatic>
 8006a0e:	61f8      	str	r0, [r7, #28]
 8006a10:	e00e      	b.n	8006a30 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10b      	bne.n	8006a30 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006a1e:	2004      	movs	r0, #4
 8006a20:	f000 fc25 	bl	800726e <xQueueCreateMutex>
 8006a24:	61f8      	str	r0, [r7, #28]
 8006a26:	e003      	b.n	8006a30 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006a28:	2001      	movs	r0, #1
 8006a2a:	f000 fc20 	bl	800726e <xQueueCreateMutex>
 8006a2e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00c      	beq.n	8006a50 <osMutexNew+0xee>
        if (attr != NULL) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <osMutexNew+0xe2>
          name = attr->name;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e001      	b.n	8006a48 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006a48:	68f9      	ldr	r1, [r7, #12]
 8006a4a:	69f8      	ldr	r0, [r7, #28]
 8006a4c:	f001 f9ea 	bl	8007e24 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d006      	beq.n	8006a64 <osMutexNew+0x102>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006a64:	69fb      	ldr	r3, [r7, #28]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3720      	adds	r7, #32
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b086      	sub	sp, #24
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a8c:	f3ef 8305 	mrs	r3, IPSR
 8006a90:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a92:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006a98:	f06f 0305 	mvn.w	r3, #5
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	e02c      	b.n	8006afa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006aa6:	f06f 0303 	mvn.w	r3, #3
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e025      	b.n	8006afa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d011      	beq.n	8006ad8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006ab4:	6839      	ldr	r1, [r7, #0]
 8006ab6:	6938      	ldr	r0, [r7, #16]
 8006ab8:	f000 fc41 	bl	800733e <xQueueTakeMutexRecursive>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d01b      	beq.n	8006afa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006ac8:	f06f 0301 	mvn.w	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e014      	b.n	8006afa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006ad0:	f06f 0302 	mvn.w	r3, #2
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e010      	b.n	8006afa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006ad8:	6839      	ldr	r1, [r7, #0]
 8006ada:	6938      	ldr	r0, [r7, #16]
 8006adc:	f000 fee8 	bl	80078b0 <xQueueSemaphoreTake>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d009      	beq.n	8006afa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006aec:	f06f 0301 	mvn.w	r3, #1
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	e002      	b.n	8006afa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006af4:	f06f 0302 	mvn.w	r3, #2
 8006af8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006afa:	697b      	ldr	r3, [r7, #20]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f023 0301 	bic.w	r3, r3, #1
 8006b12:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b20:	f3ef 8305 	mrs	r3, IPSR
 8006b24:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b26:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006b2c:	f06f 0305 	mvn.w	r3, #5
 8006b30:	617b      	str	r3, [r7, #20]
 8006b32:	e01f      	b.n	8006b74 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006b3a:	f06f 0303 	mvn.w	r3, #3
 8006b3e:	617b      	str	r3, [r7, #20]
 8006b40:	e018      	b.n	8006b74 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d009      	beq.n	8006b5c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006b48:	6938      	ldr	r0, [r7, #16]
 8006b4a:	f000 fbc3 	bl	80072d4 <xQueueGiveMutexRecursive>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d00f      	beq.n	8006b74 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006b54:	f06f 0302 	mvn.w	r3, #2
 8006b58:	617b      	str	r3, [r7, #20]
 8006b5a:	e00b      	b.n	8006b74 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	6938      	ldr	r0, [r7, #16]
 8006b64:	f000 fc22 	bl	80073ac <xQueueGenericSend>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d002      	beq.n	8006b74 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006b6e:	f06f 0302 	mvn.w	r3, #2
 8006b72:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b74:	697b      	ldr	r3, [r7, #20]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b08a      	sub	sp, #40	@ 0x28
 8006b82:	af02      	add	r7, sp, #8
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b8e:	f3ef 8305 	mrs	r3, IPSR
 8006b92:	613b      	str	r3, [r7, #16]
  return(result);
 8006b94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d15f      	bne.n	8006c5a <osMessageQueueNew+0xdc>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d05c      	beq.n	8006c5a <osMessageQueueNew+0xdc>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d059      	beq.n	8006c5a <osMessageQueueNew+0xdc>
    mem = -1;
 8006ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8006baa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d029      	beq.n	8006c06 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d012      	beq.n	8006be0 <osMessageQueueNew+0x62>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	2b4f      	cmp	r3, #79	@ 0x4f
 8006bc0:	d90e      	bls.n	8006be0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695a      	ldr	r2, [r3, #20]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68b9      	ldr	r1, [r7, #8]
 8006bd2:	fb01 f303 	mul.w	r3, r1, r3
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <osMessageQueueNew+0x62>
        mem = 1;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	e014      	b.n	8006c0a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d110      	bne.n	8006c0a <osMessageQueueNew+0x8c>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10c      	bne.n	8006c0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d108      	bne.n	8006c0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <osMessageQueueNew+0x8c>
          mem = 0;
 8006c00:	2300      	movs	r3, #0
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	e001      	b.n	8006c0a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d10b      	bne.n	8006c28 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	691a      	ldr	r2, [r3, #16]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2100      	movs	r1, #0
 8006c1a:	9100      	str	r1, [sp, #0]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 fa30 	bl	8007084 <xQueueGenericCreateStatic>
 8006c24:	61f8      	str	r0, [r7, #28]
 8006c26:	e008      	b.n	8006c3a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d105      	bne.n	8006c3a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006c2e:	2200      	movs	r2, #0
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 faa3 	bl	800717e <xQueueGenericCreate>
 8006c38:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00c      	beq.n	8006c5a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <osMessageQueueNew+0xd0>
        name = attr->name;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e001      	b.n	8006c52 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c52:	6979      	ldr	r1, [r7, #20]
 8006c54:	69f8      	ldr	r0, [r7, #28]
 8006c56:	f001 f8e5 	bl	8007e24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c5a:	69fb      	ldr	r3, [r7, #28]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b088      	sub	sp, #32
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c7c:	f3ef 8305 	mrs	r3, IPSR
 8006c80:	617b      	str	r3, [r7, #20]
  return(result);
 8006c82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d028      	beq.n	8006cda <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <osMessageQueuePut+0x36>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <osMessageQueuePut+0x36>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006c9a:	f06f 0303 	mvn.w	r3, #3
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	e038      	b.n	8006d14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ca6:	f107 0210 	add.w	r2, r7, #16
 8006caa:	2300      	movs	r3, #0
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	69b8      	ldr	r0, [r7, #24]
 8006cb0:	f000 fc7e 	bl	80075b0 <xQueueGenericSendFromISR>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d003      	beq.n	8006cc2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006cba:	f06f 0302 	mvn.w	r3, #2
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	e028      	b.n	8006d14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d025      	beq.n	8006d14 <osMessageQueuePut+0xb0>
 8006cc8:	4b15      	ldr	r3, [pc, #84]	@ (8006d20 <osMessageQueuePut+0xbc>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	e01c      	b.n	8006d14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <osMessageQueuePut+0x82>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006ce6:	f06f 0303 	mvn.w	r3, #3
 8006cea:	61fb      	str	r3, [r7, #28]
 8006cec:	e012      	b.n	8006d14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cee:	2300      	movs	r3, #0
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	69b8      	ldr	r0, [r7, #24]
 8006cf6:	f000 fb59 	bl	80073ac <xQueueGenericSend>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d009      	beq.n	8006d14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006d06:	f06f 0301 	mvn.w	r3, #1
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	e002      	b.n	8006d14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006d0e:	f06f 0302 	mvn.w	r3, #2
 8006d12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006d14:	69fb      	ldr	r3, [r7, #28]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d3a:	f3ef 8305 	mrs	r3, IPSR
 8006d3e:	617b      	str	r3, [r7, #20]
  return(result);
 8006d40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d028      	beq.n	8006d98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <osMessageQueueGet+0x34>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <osMessageQueueGet+0x34>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d003      	beq.n	8006d60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006d58:	f06f 0303 	mvn.w	r3, #3
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	e037      	b.n	8006dd0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d64:	f107 0310 	add.w	r3, r7, #16
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	69b8      	ldr	r0, [r7, #24]
 8006d6e:	f000 feaf 	bl	8007ad0 <xQueueReceiveFromISR>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d003      	beq.n	8006d80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006d78:	f06f 0302 	mvn.w	r3, #2
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	e027      	b.n	8006dd0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d024      	beq.n	8006dd0 <osMessageQueueGet+0xac>
 8006d86:	4b15      	ldr	r3, [pc, #84]	@ (8006ddc <osMessageQueueGet+0xb8>)
 8006d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	e01b      	b.n	8006dd0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <osMessageQueueGet+0x80>
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006da4:	f06f 0303 	mvn.w	r3, #3
 8006da8:	61fb      	str	r3, [r7, #28]
 8006daa:	e011      	b.n	8006dd0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	68b9      	ldr	r1, [r7, #8]
 8006db0:	69b8      	ldr	r0, [r7, #24]
 8006db2:	f000 fc9b 	bl	80076ec <xQueueReceive>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d009      	beq.n	8006dd0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006dc2:	f06f 0301 	mvn.w	r3, #1
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e002      	b.n	8006dd0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006dca:	f06f 0302 	mvn.w	r3, #2
 8006dce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006dd0:	69fb      	ldr	r3, [r7, #28]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3720      	adds	r7, #32
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	e000ed04 	.word	0xe000ed04

08006de0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4a07      	ldr	r2, [pc, #28]	@ (8006e0c <vApplicationGetIdleTaskMemory+0x2c>)
 8006df0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	4a06      	ldr	r2, [pc, #24]	@ (8006e10 <vApplicationGetIdleTaskMemory+0x30>)
 8006df6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2280      	movs	r2, #128	@ 0x80
 8006dfc:	601a      	str	r2, [r3, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000404 	.word	0x20000404
 8006e10:	200004ac 	.word	0x200004ac

08006e14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4a07      	ldr	r2, [pc, #28]	@ (8006e40 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	4a06      	ldr	r2, [pc, #24]	@ (8006e44 <vApplicationGetTimerTaskMemory+0x30>)
 8006e2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e32:	601a      	str	r2, [r3, #0]
}
 8006e34:	bf00      	nop
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	200006ac 	.word	0x200006ac
 8006e44:	20000754 	.word	0x20000754

08006e48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f103 0208 	add.w	r2, r3, #8
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f103 0208 	add.w	r2, r3, #8
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f103 0208 	add.w	r2, r3, #8
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e96:	bf00      	nop
 8006e98:	370c      	adds	r7, #12
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr

08006ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	601a      	str	r2, [r3, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f00:	d103      	bne.n	8006f0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e00c      	b.n	8006f24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	e002      	b.n	8006f18 <vListInsert+0x2e>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d2f6      	bcs.n	8006f12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	601a      	str	r2, [r3, #0]
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	6892      	ldr	r2, [r2, #8]
 8006f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6852      	ldr	r2, [r2, #4]
 8006f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d103      	bne.n	8006f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	1e5a      	subs	r2, r3, #1
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10b      	bne.n	8006fdc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006fd6:	bf00      	nop
 8006fd8:	bf00      	nop
 8006fda:	e7fd      	b.n	8006fd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006fdc:	f002 fc54 	bl	8009888 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe8:	68f9      	ldr	r1, [r7, #12]
 8006fea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	441a      	add	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700c:	3b01      	subs	r3, #1
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007012:	fb01 f303 	mul.w	r3, r1, r3
 8007016:	441a      	add	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	22ff      	movs	r2, #255	@ 0xff
 8007020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	22ff      	movs	r2, #255	@ 0xff
 8007028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d114      	bne.n	800705c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d01a      	beq.n	8007070 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3310      	adds	r3, #16
 800703e:	4618      	mov	r0, r3
 8007040:	f001 fbe0 	bl	8008804 <xTaskRemoveFromEventList>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d012      	beq.n	8007070 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <xQueueGenericReset+0xd0>)
 800704c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	e009      	b.n	8007070 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3310      	adds	r3, #16
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fef1 	bl	8006e48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3324      	adds	r3, #36	@ 0x24
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff feec 	bl	8006e48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007070:	f002 fc3c 	bl	80098ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007074:	2301      	movs	r3, #1
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08e      	sub	sp, #56	@ 0x38
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	e7fd      	b.n	80070ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	e7fd      	b.n	80070ca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <xQueueGenericCreateStatic+0x56>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <xQueueGenericCreateStatic+0x5a>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueGenericCreateStatic+0x5c>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	623b      	str	r3, [r7, #32]
}
 80070f6:	bf00      	nop
 80070f8:	bf00      	nop
 80070fa:	e7fd      	b.n	80070f8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d102      	bne.n	8007108 <xQueueGenericCreateStatic+0x84>
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <xQueueGenericCreateStatic+0x88>
 8007108:	2301      	movs	r3, #1
 800710a:	e000      	b.n	800710e <xQueueGenericCreateStatic+0x8a>
 800710c:	2300      	movs	r3, #0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10b      	bne.n	800712a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	61fb      	str	r3, [r7, #28]
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop
 8007128:	e7fd      	b.n	8007126 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800712a:	2350      	movs	r3, #80	@ 0x50
 800712c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b50      	cmp	r3, #80	@ 0x50
 8007132:	d00b      	beq.n	800714c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	61bb      	str	r3, [r7, #24]
}
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	e7fd      	b.n	8007148 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800714c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00d      	beq.n	8007174 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007160:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4613      	mov	r3, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f840 	bl	80071f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007176:	4618      	mov	r0, r3
 8007178:	3730      	adds	r7, #48	@ 0x30
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800717e:	b580      	push	{r7, lr}
 8007180:	b08a      	sub	sp, #40	@ 0x28
 8007182:	af02      	add	r7, sp, #8
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	4613      	mov	r3, r2
 800718a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d10b      	bne.n	80071aa <xQueueGenericCreate+0x2c>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	613b      	str	r3, [r7, #16]
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	fb02 f303 	mul.w	r3, r2, r3
 80071b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	3350      	adds	r3, #80	@ 0x50
 80071b8:	4618      	mov	r0, r3
 80071ba:	f002 fc87 	bl	8009acc <pvPortMalloc>
 80071be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d011      	beq.n	80071ea <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	3350      	adds	r3, #80	@ 0x50
 80071ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071d8:	79fa      	ldrb	r2, [r7, #7]
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	4613      	mov	r3, r2
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 f805 	bl	80071f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071ea:	69bb      	ldr	r3, [r7, #24]
	}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d103      	bne.n	8007210 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e002      	b.n	8007216 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007222:	2101      	movs	r1, #1
 8007224:	69b8      	ldr	r0, [r7, #24]
 8007226:	f7ff fec3 	bl	8006fb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	78fa      	ldrb	r2, [r7, #3]
 800722e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00e      	beq.n	8007266 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800725a:	2300      	movs	r3, #0
 800725c:	2200      	movs	r2, #0
 800725e:	2100      	movs	r1, #0
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8a3 	bl	80073ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800726e:	b580      	push	{r7, lr}
 8007270:	b086      	sub	sp, #24
 8007272:	af00      	add	r7, sp, #0
 8007274:	4603      	mov	r3, r0
 8007276:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007278:	2301      	movs	r3, #1
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	2300      	movs	r3, #0
 800727e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	461a      	mov	r2, r3
 8007284:	6939      	ldr	r1, [r7, #16]
 8007286:	6978      	ldr	r0, [r7, #20]
 8007288:	f7ff ff79 	bl	800717e <xQueueGenericCreate>
 800728c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f7ff ffd3 	bl	800723a <prvInitialiseMutex>

		return xNewQueue;
 8007294:	68fb      	ldr	r3, [r7, #12]
	}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b088      	sub	sp, #32
 80072a2:	af02      	add	r7, sp, #8
 80072a4:	4603      	mov	r3, r0
 80072a6:	6039      	str	r1, [r7, #0]
 80072a8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072aa:	2301      	movs	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	2300      	movs	r3, #0
 80072b0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2200      	movs	r2, #0
 80072ba:	6939      	ldr	r1, [r7, #16]
 80072bc:	6978      	ldr	r0, [r7, #20]
 80072be:	f7ff fee1 	bl	8007084 <xQueueGenericCreateStatic>
 80072c2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f7ff ffb8 	bl	800723a <prvInitialiseMutex>

		return xNewQueue;
 80072ca:	68fb      	ldr	r3, [r7, #12]
	}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80072d4:	b590      	push	{r4, r7, lr}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10b      	bne.n	80072fe <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	60fb      	str	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	e7fd      	b.n	80072fa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	689c      	ldr	r4, [r3, #8]
 8007302:	f001 fc45 	bl	8008b90 <xTaskGetCurrentTaskHandle>
 8007306:	4603      	mov	r3, r0
 8007308:	429c      	cmp	r4, r3
 800730a:	d111      	bne.n	8007330 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	1e5a      	subs	r2, r3, #1
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d105      	bne.n	800732a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800731e:	2300      	movs	r3, #0
 8007320:	2200      	movs	r2, #0
 8007322:	2100      	movs	r1, #0
 8007324:	6938      	ldr	r0, [r7, #16]
 8007326:	f000 f841 	bl	80073ac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800732a:	2301      	movs	r3, #1
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e001      	b.n	8007334 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007334:	697b      	ldr	r3, [r7, #20]
	}
 8007336:	4618      	mov	r0, r3
 8007338:	371c      	adds	r7, #28
 800733a:	46bd      	mov	sp, r7
 800733c:	bd90      	pop	{r4, r7, pc}

0800733e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800733e:	b590      	push	{r4, r7, lr}
 8007340:	b087      	sub	sp, #28
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10b      	bne.n	800736a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	60fb      	str	r3, [r7, #12]
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	e7fd      	b.n	8007366 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	689c      	ldr	r4, [r3, #8]
 800736e:	f001 fc0f 	bl	8008b90 <xTaskGetCurrentTaskHandle>
 8007372:	4603      	mov	r3, r0
 8007374:	429c      	cmp	r4, r3
 8007376:	d107      	bne.n	8007388 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	1c5a      	adds	r2, r3, #1
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007382:	2301      	movs	r3, #1
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	e00c      	b.n	80073a2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6938      	ldr	r0, [r7, #16]
 800738c:	f000 fa90 	bl	80078b0 <xQueueSemaphoreTake>
 8007390:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80073a2:	697b      	ldr	r3, [r7, #20]
	}
 80073a4:	4618      	mov	r0, r3
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd90      	pop	{r4, r7, pc}

080073ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b08e      	sub	sp, #56	@ 0x38
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073ba:	2300      	movs	r3, #0
 80073bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10b      	bne.n	80073e0 <xQueueGenericSend+0x34>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	e7fd      	b.n	80073dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d103      	bne.n	80073ee <xQueueGenericSend+0x42>
 80073e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <xQueueGenericSend+0x46>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <xQueueGenericSend+0x48>
 80073f2:	2300      	movs	r3, #0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <xQueueGenericSend+0x64>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	e7fd      	b.n	800740c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d103      	bne.n	800741e <xQueueGenericSend+0x72>
 8007416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800741a:	2b01      	cmp	r3, #1
 800741c:	d101      	bne.n	8007422 <xQueueGenericSend+0x76>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <xQueueGenericSend+0x78>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10b      	bne.n	8007440 <xQueueGenericSend+0x94>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	623b      	str	r3, [r7, #32]
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	e7fd      	b.n	800743c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007440:	f001 fbb6 	bl	8008bb0 <xTaskGetSchedulerState>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d102      	bne.n	8007450 <xQueueGenericSend+0xa4>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <xQueueGenericSend+0xa8>
 8007450:	2301      	movs	r3, #1
 8007452:	e000      	b.n	8007456 <xQueueGenericSend+0xaa>
 8007454:	2300      	movs	r3, #0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10b      	bne.n	8007472 <xQueueGenericSend+0xc6>
	__asm volatile
 800745a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	61fb      	str	r3, [r7, #28]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007472:	f002 fa09 	bl	8009888 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800747c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800747e:	429a      	cmp	r2, r3
 8007480:	d302      	bcc.n	8007488 <xQueueGenericSend+0xdc>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d129      	bne.n	80074dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	68b9      	ldr	r1, [r7, #8]
 800748c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800748e:	f000 fbb9 	bl	8007c04 <prvCopyDataToQueue>
 8007492:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007498:	2b00      	cmp	r3, #0
 800749a:	d010      	beq.n	80074be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800749c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749e:	3324      	adds	r3, #36	@ 0x24
 80074a0:	4618      	mov	r0, r3
 80074a2:	f001 f9af 	bl	8008804 <xTaskRemoveFromEventList>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d013      	beq.n	80074d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074ac:	4b3f      	ldr	r3, [pc, #252]	@ (80075ac <xQueueGenericSend+0x200>)
 80074ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	e00a      	b.n	80074d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d007      	beq.n	80074d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074c4:	4b39      	ldr	r3, [pc, #228]	@ (80075ac <xQueueGenericSend+0x200>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074d4:	f002 fa0a 	bl	80098ec <vPortExitCritical>
				return pdPASS;
 80074d8:	2301      	movs	r3, #1
 80074da:	e063      	b.n	80075a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d103      	bne.n	80074ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074e2:	f002 fa03 	bl	80098ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	e05c      	b.n	80075a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d106      	bne.n	80074fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074f0:	f107 0314 	add.w	r3, r7, #20
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 f9e9 	bl	80088cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074fa:	2301      	movs	r3, #1
 80074fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074fe:	f002 f9f5 	bl	80098ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007502:	f000 ff51 	bl	80083a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007506:	f002 f9bf 	bl	8009888 <vPortEnterCritical>
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007510:	b25b      	sxtb	r3, r3
 8007512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007516:	d103      	bne.n	8007520 <xQueueGenericSend+0x174>
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007526:	b25b      	sxtb	r3, r3
 8007528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752c:	d103      	bne.n	8007536 <xQueueGenericSend+0x18a>
 800752e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007530:	2200      	movs	r2, #0
 8007532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007536:	f002 f9d9 	bl	80098ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800753a:	1d3a      	adds	r2, r7, #4
 800753c:	f107 0314 	add.w	r3, r7, #20
 8007540:	4611      	mov	r1, r2
 8007542:	4618      	mov	r0, r3
 8007544:	f001 f9d8 	bl	80088f8 <xTaskCheckForTimeOut>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d124      	bne.n	8007598 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800754e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007550:	f000 fc50 	bl	8007df4 <prvIsQueueFull>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d018      	beq.n	800758c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	3310      	adds	r3, #16
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	4611      	mov	r1, r2
 8007562:	4618      	mov	r0, r3
 8007564:	f001 f8fc 	bl	8008760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800756a:	f000 fbdb 	bl	8007d24 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800756e:	f000 ff29 	bl	80083c4 <xTaskResumeAll>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	f47f af7c 	bne.w	8007472 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800757a:	4b0c      	ldr	r3, [pc, #48]	@ (80075ac <xQueueGenericSend+0x200>)
 800757c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	e772      	b.n	8007472 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800758c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800758e:	f000 fbc9 	bl	8007d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007592:	f000 ff17 	bl	80083c4 <xTaskResumeAll>
 8007596:	e76c      	b.n	8007472 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800759a:	f000 fbc3 	bl	8007d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800759e:	f000 ff11 	bl	80083c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3738      	adds	r7, #56	@ 0x38
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	e000ed04 	.word	0xe000ed04

080075b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b090      	sub	sp, #64	@ 0x40
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
 80075bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80075c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d103      	bne.n	80075ee <xQueueGenericSendFromISR+0x3e>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <xQueueGenericSendFromISR+0x42>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <xQueueGenericSendFromISR+0x44>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10b      	bne.n	8007610 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b02      	cmp	r3, #2
 8007614:	d103      	bne.n	800761e <xQueueGenericSendFromISR+0x6e>
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761a:	2b01      	cmp	r3, #1
 800761c:	d101      	bne.n	8007622 <xQueueGenericSendFromISR+0x72>
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <xQueueGenericSendFromISR+0x74>
 8007622:	2300      	movs	r3, #0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10b      	bne.n	8007640 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	623b      	str	r3, [r7, #32]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007640:	f002 fa02 	bl	8009a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007644:	f3ef 8211 	mrs	r2, BASEPRI
 8007648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764c:	f383 8811 	msr	BASEPRI, r3
 8007650:	f3bf 8f6f 	isb	sy
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	61fa      	str	r2, [r7, #28]
 800765a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800765c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007668:	429a      	cmp	r2, r3
 800766a:	d302      	bcc.n	8007672 <xQueueGenericSendFromISR+0xc2>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	2b02      	cmp	r3, #2
 8007670:	d12f      	bne.n	80076d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007678:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800767c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007680:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	68b9      	ldr	r1, [r7, #8]
 8007686:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007688:	f000 fabc 	bl	8007c04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800768c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007694:	d112      	bne.n	80076bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769a:	2b00      	cmp	r3, #0
 800769c:	d016      	beq.n	80076cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	3324      	adds	r3, #36	@ 0x24
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 f8ae 	bl	8008804 <xTaskRemoveFromEventList>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
 80076ba:	e007      	b.n	80076cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80076bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80076c0:	3301      	adds	r3, #1
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	b25a      	sxtb	r2, r3
 80076c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80076cc:	2301      	movs	r3, #1
 80076ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80076d0:	e001      	b.n	80076d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80076e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3740      	adds	r7, #64	@ 0x40
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08c      	sub	sp, #48	@ 0x30
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076f8:	2300      	movs	r3, #0
 80076fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <xQueueReceive+0x32>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	623b      	str	r3, [r7, #32]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d103      	bne.n	800772c <xQueueReceive+0x40>
 8007724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <xQueueReceive+0x44>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <xQueueReceive+0x46>
 8007730:	2300      	movs	r3, #0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10b      	bne.n	800774e <xQueueReceive+0x62>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	61fb      	str	r3, [r7, #28]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800774e:	f001 fa2f 	bl	8008bb0 <xTaskGetSchedulerState>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <xQueueReceive+0x72>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <xQueueReceive+0x76>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <xQueueReceive+0x78>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10b      	bne.n	8007780 <xQueueReceive+0x94>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	61bb      	str	r3, [r7, #24]
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007780:	f002 f882 	bl	8009888 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01f      	beq.n	80077d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007794:	f000 faa0 	bl	8007cd8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	1e5a      	subs	r2, r3, #1
 800779c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077aa:	3310      	adds	r3, #16
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 f829 	bl	8008804 <xTaskRemoveFromEventList>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077b8:	4b3c      	ldr	r3, [pc, #240]	@ (80078ac <xQueueReceive+0x1c0>)
 80077ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077c8:	f002 f890 	bl	80098ec <vPortExitCritical>
				return pdPASS;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e069      	b.n	80078a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d103      	bne.n	80077de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077d6:	f002 f889 	bl	80098ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077da:	2300      	movs	r3, #0
 80077dc:	e062      	b.n	80078a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d106      	bne.n	80077f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077e4:	f107 0310 	add.w	r3, r7, #16
 80077e8:	4618      	mov	r0, r3
 80077ea:	f001 f86f 	bl	80088cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077f2:	f002 f87b 	bl	80098ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077f6:	f000 fdd7 	bl	80083a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077fa:	f002 f845 	bl	8009888 <vPortEnterCritical>
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007804:	b25b      	sxtb	r3, r3
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d103      	bne.n	8007814 <xQueueReceive+0x128>
 800780c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800781a:	b25b      	sxtb	r3, r3
 800781c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007820:	d103      	bne.n	800782a <xQueueReceive+0x13e>
 8007822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800782a:	f002 f85f 	bl	80098ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800782e:	1d3a      	adds	r2, r7, #4
 8007830:	f107 0310 	add.w	r3, r7, #16
 8007834:	4611      	mov	r1, r2
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f85e 	bl	80088f8 <xTaskCheckForTimeOut>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d123      	bne.n	800788a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007844:	f000 fac0 	bl	8007dc8 <prvIsQueueEmpty>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d017      	beq.n	800787e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800784e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007850:	3324      	adds	r3, #36	@ 0x24
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	4611      	mov	r1, r2
 8007856:	4618      	mov	r0, r3
 8007858:	f000 ff82 	bl	8008760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800785c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800785e:	f000 fa61 	bl	8007d24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007862:	f000 fdaf 	bl	80083c4 <xTaskResumeAll>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d189      	bne.n	8007780 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800786c:	4b0f      	ldr	r3, [pc, #60]	@ (80078ac <xQueueReceive+0x1c0>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	e780      	b.n	8007780 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800787e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007880:	f000 fa50 	bl	8007d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007884:	f000 fd9e 	bl	80083c4 <xTaskResumeAll>
 8007888:	e77a      	b.n	8007780 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800788a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800788c:	f000 fa4a 	bl	8007d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007890:	f000 fd98 	bl	80083c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007896:	f000 fa97 	bl	8007dc8 <prvIsQueueEmpty>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	f43f af6f 	beq.w	8007780 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3730      	adds	r7, #48	@ 0x30
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08e      	sub	sp, #56	@ 0x38
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80078c2:	2300      	movs	r3, #0
 80078c4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80078c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10b      	bne.n	80078e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	623b      	str	r3, [r7, #32]
}
 80078de:	bf00      	nop
 80078e0:	bf00      	nop
 80078e2:	e7fd      	b.n	80078e0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00b      	beq.n	8007904 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	61fb      	str	r3, [r7, #28]
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	e7fd      	b.n	8007900 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007904:	f001 f954 	bl	8008bb0 <xTaskGetSchedulerState>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d102      	bne.n	8007914 <xQueueSemaphoreTake+0x64>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <xQueueSemaphoreTake+0x68>
 8007914:	2301      	movs	r3, #1
 8007916:	e000      	b.n	800791a <xQueueSemaphoreTake+0x6a>
 8007918:	2300      	movs	r3, #0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10b      	bne.n	8007936 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	61bb      	str	r3, [r7, #24]
}
 8007930:	bf00      	nop
 8007932:	bf00      	nop
 8007934:	e7fd      	b.n	8007932 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007936:	f001 ffa7 	bl	8009888 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800793a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007942:	2b00      	cmp	r3, #0
 8007944:	d024      	beq.n	8007990 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	1e5a      	subs	r2, r3, #1
 800794a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800794e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007956:	f001 faa5 	bl	8008ea4 <pvTaskIncrementMutexHeldCount>
 800795a:	4602      	mov	r2, r0
 800795c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800795e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00f      	beq.n	8007988 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800796a:	3310      	adds	r3, #16
 800796c:	4618      	mov	r0, r3
 800796e:	f000 ff49 	bl	8008804 <xTaskRemoveFromEventList>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d007      	beq.n	8007988 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007978:	4b54      	ldr	r3, [pc, #336]	@ (8007acc <xQueueSemaphoreTake+0x21c>)
 800797a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	f3bf 8f4f 	dsb	sy
 8007984:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007988:	f001 ffb0 	bl	80098ec <vPortExitCritical>
				return pdPASS;
 800798c:	2301      	movs	r3, #1
 800798e:	e098      	b.n	8007ac2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d112      	bne.n	80079bc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	617b      	str	r3, [r7, #20]
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80079b4:	f001 ff9a 	bl	80098ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079b8:	2300      	movs	r3, #0
 80079ba:	e082      	b.n	8007ac2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079c2:	f107 030c 	add.w	r3, r7, #12
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 ff80 	bl	80088cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079d0:	f001 ff8c 	bl	80098ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079d4:	f000 fce8 	bl	80083a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079d8:	f001 ff56 	bl	8009888 <vPortEnterCritical>
 80079dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079e2:	b25b      	sxtb	r3, r3
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e8:	d103      	bne.n	80079f2 <xQueueSemaphoreTake+0x142>
 80079ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079f8:	b25b      	sxtb	r3, r3
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079fe:	d103      	bne.n	8007a08 <xQueueSemaphoreTake+0x158>
 8007a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a08:	f001 ff70 	bl	80098ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a0c:	463a      	mov	r2, r7
 8007a0e:	f107 030c 	add.w	r3, r7, #12
 8007a12:	4611      	mov	r1, r2
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 ff6f 	bl	80088f8 <xTaskCheckForTimeOut>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d132      	bne.n	8007a86 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a22:	f000 f9d1 	bl	8007dc8 <prvIsQueueEmpty>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d026      	beq.n	8007a7a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007a34:	f001 ff28 	bl	8009888 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f001 f8d5 	bl	8008bec <xTaskPriorityInherit>
 8007a42:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007a44:	f001 ff52 	bl	80098ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4a:	3324      	adds	r3, #36	@ 0x24
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fe85 	bl	8008760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a58:	f000 f964 	bl	8007d24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a5c:	f000 fcb2 	bl	80083c4 <xTaskResumeAll>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f47f af67 	bne.w	8007936 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007a68:	4b18      	ldr	r3, [pc, #96]	@ (8007acc <xQueueSemaphoreTake+0x21c>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	f3bf 8f4f 	dsb	sy
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	e75d      	b.n	8007936 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a7c:	f000 f952 	bl	8007d24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a80:	f000 fca0 	bl	80083c4 <xTaskResumeAll>
 8007a84:	e757      	b.n	8007936 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a88:	f000 f94c 	bl	8007d24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a8c:	f000 fc9a 	bl	80083c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a92:	f000 f999 	bl	8007dc8 <prvIsQueueEmpty>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f43f af4c 	beq.w	8007936 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00d      	beq.n	8007ac0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007aa4:	f001 fef0 	bl	8009888 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007aa8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007aaa:	f000 f893 	bl	8007bd4 <prvGetDisinheritPriorityAfterTimeout>
 8007aae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 f970 	bl	8008d9c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007abc:	f001 ff16 	bl	80098ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3738      	adds	r7, #56	@ 0x38
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	e000ed04 	.word	0xe000ed04

08007ad0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08e      	sub	sp, #56	@ 0x38
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10b      	bne.n	8007afe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	623b      	str	r3, [r7, #32]
}
 8007af8:	bf00      	nop
 8007afa:	bf00      	nop
 8007afc:	e7fd      	b.n	8007afa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d103      	bne.n	8007b0c <xQueueReceiveFromISR+0x3c>
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d101      	bne.n	8007b10 <xQueueReceiveFromISR+0x40>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e000      	b.n	8007b12 <xQueueReceiveFromISR+0x42>
 8007b10:	2300      	movs	r3, #0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d10b      	bne.n	8007b2e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	61fb      	str	r3, [r7, #28]
}
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b2e:	f001 ff8b 	bl	8009a48 <vPortValidateInterruptPriority>
	__asm volatile
 8007b32:	f3ef 8211 	mrs	r2, BASEPRI
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	61ba      	str	r2, [r7, #24]
 8007b48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d02f      	beq.n	8007bba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b64:	68b9      	ldr	r1, [r7, #8]
 8007b66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b68:	f000 f8b6 	bl	8007cd8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6e:	1e5a      	subs	r2, r3, #1
 8007b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7c:	d112      	bne.n	8007ba4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d016      	beq.n	8007bb4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	3310      	adds	r3, #16
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fe3a 	bl	8008804 <xTaskRemoveFromEventList>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00e      	beq.n	8007bb4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	e007      	b.n	8007bb4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ba8:	3301      	adds	r3, #1
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	b25a      	sxtb	r2, r3
 8007bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb8:	e001      	b.n	8007bbe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f383 8811 	msr	BASEPRI, r3
}
 8007bc8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3738      	adds	r7, #56	@ 0x38
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e001      	b.n	8007bf6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
	}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d14d      	bne.n	8007cc6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 f844 	bl	8008cbc <xTaskPriorityDisinherit>
 8007c34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	609a      	str	r2, [r3, #8]
 8007c3c:	e043      	b.n	8007cc6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d119      	bne.n	8007c78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6858      	ldr	r0, [r3, #4]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	68b9      	ldr	r1, [r7, #8]
 8007c50:	f002 ff99 	bl	800ab86 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5c:	441a      	add	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d32b      	bcc.n	8007cc6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	e026      	b.n	8007cc6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68d8      	ldr	r0, [r3, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c80:	461a      	mov	r2, r3
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	f002 ff7f 	bl	800ab86 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68da      	ldr	r2, [r3, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c90:	425b      	negs	r3, r3
 8007c92:	441a      	add	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d207      	bcs.n	8007cb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cac:	425b      	negs	r3, r3
 8007cae:	441a      	add	r2, r3
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d105      	bne.n	8007cc6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d002      	beq.n	8007cc6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	1c5a      	adds	r2, r3, #1
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007cce:	697b      	ldr	r3, [r7, #20]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d018      	beq.n	8007d1c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68da      	ldr	r2, [r3, #12]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf2:	441a      	add	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d303      	bcc.n	8007d0c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68d9      	ldr	r1, [r3, #12]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d14:	461a      	mov	r2, r3
 8007d16:	6838      	ldr	r0, [r7, #0]
 8007d18:	f002 ff35 	bl	800ab86 <memcpy>
	}
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d2c:	f001 fdac 	bl	8009888 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d36:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d38:	e011      	b.n	8007d5e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d012      	beq.n	8007d68 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	3324      	adds	r3, #36	@ 0x24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fd5c 	bl	8008804 <xTaskRemoveFromEventList>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d52:	f000 fe35 	bl	80089c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d56:	7bfb      	ldrb	r3, [r7, #15]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dce9      	bgt.n	8007d3a <prvUnlockQueue+0x16>
 8007d66:	e000      	b.n	8007d6a <prvUnlockQueue+0x46>
					break;
 8007d68:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	22ff      	movs	r2, #255	@ 0xff
 8007d6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d72:	f001 fdbb 	bl	80098ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d76:	f001 fd87 	bl	8009888 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d80:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d82:	e011      	b.n	8007da8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d012      	beq.n	8007db2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3310      	adds	r3, #16
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fd37 	bl	8008804 <xTaskRemoveFromEventList>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d9c:	f000 fe10 	bl	80089c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007da0:	7bbb      	ldrb	r3, [r7, #14]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007da8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	dce9      	bgt.n	8007d84 <prvUnlockQueue+0x60>
 8007db0:	e000      	b.n	8007db4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007db2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	22ff      	movs	r2, #255	@ 0xff
 8007db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007dbc:	f001 fd96 	bl	80098ec <vPortExitCritical>
}
 8007dc0:	bf00      	nop
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dd0:	f001 fd5a 	bl	8009888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	e001      	b.n	8007de6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007de6:	f001 fd81 	bl	80098ec <vPortExitCritical>

	return xReturn;
 8007dea:	68fb      	ldr	r3, [r7, #12]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dfc:	f001 fd44 	bl	8009888 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d102      	bne.n	8007e12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e001      	b.n	8007e16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e16:	f001 fd69 	bl	80098ec <vPortExitCritical>

	return xReturn;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	e014      	b.n	8007e5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e34:	4a0f      	ldr	r2, [pc, #60]	@ (8007e74 <vQueueAddToRegistry+0x50>)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e40:	490c      	ldr	r1, [pc, #48]	@ (8007e74 <vQueueAddToRegistry+0x50>)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	683a      	ldr	r2, [r7, #0]
 8007e46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8007e74 <vQueueAddToRegistry+0x50>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	4413      	add	r3, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e56:	e006      	b.n	8007e66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2b07      	cmp	r3, #7
 8007e62:	d9e7      	bls.n	8007e34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000b54 	.word	0x20000b54

08007e78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e88:	f001 fcfe 	bl	8009888 <vPortEnterCritical>
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e92:	b25b      	sxtb	r3, r3
 8007e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e98:	d103      	bne.n	8007ea2 <vQueueWaitForMessageRestricted+0x2a>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d103      	bne.n	8007eb8 <vQueueWaitForMessageRestricted+0x40>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eb8:	f001 fd18 	bl	80098ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d106      	bne.n	8007ed2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	3324      	adds	r3, #36	@ 0x24
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fc6d 	bl	80087ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f7ff ff26 	bl	8007d24 <prvUnlockQueue>
	}
 8007ed8:	bf00      	nop
 8007eda:	3718      	adds	r7, #24
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08e      	sub	sp, #56	@ 0x38
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
 8007eec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10b      	bne.n	8007f0c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	623b      	str	r3, [r7, #32]
}
 8007f06:	bf00      	nop
 8007f08:	bf00      	nop
 8007f0a:	e7fd      	b.n	8007f08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10b      	bne.n	8007f2a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	61fb      	str	r3, [r7, #28]
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	e7fd      	b.n	8007f26 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f2a:	23a8      	movs	r3, #168	@ 0xa8
 8007f2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2ba8      	cmp	r3, #168	@ 0xa8
 8007f32:	d00b      	beq.n	8007f4c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	61bb      	str	r3, [r7, #24]
}
 8007f46:	bf00      	nop
 8007f48:	bf00      	nop
 8007f4a:	e7fd      	b.n	8007f48 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d01e      	beq.n	8007f92 <xTaskCreateStatic+0xb2>
 8007f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d01b      	beq.n	8007f92 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f62:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9303      	str	r3, [sp, #12]
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f851 	bl	800802c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f8c:	f000 f8f6 	bl	800817c <prvAddNewTaskToReadyList>
 8007f90:	e001      	b.n	8007f96 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f96:	697b      	ldr	r3, [r7, #20]
	}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3728      	adds	r7, #40	@ 0x28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08c      	sub	sp, #48	@ 0x30
 8007fa4:	af04      	add	r7, sp, #16
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	603b      	str	r3, [r7, #0]
 8007fac:	4613      	mov	r3, r2
 8007fae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fb0:	88fb      	ldrh	r3, [r7, #6]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f001 fd89 	bl	8009acc <pvPortMalloc>
 8007fba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00e      	beq.n	8007fe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fc2:	20a8      	movs	r0, #168	@ 0xa8
 8007fc4:	f001 fd82 	bl	8009acc <pvPortMalloc>
 8007fc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fd6:	e005      	b.n	8007fe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fd8:	6978      	ldr	r0, [r7, #20]
 8007fda:	f001 fe45 	bl	8009c68 <vPortFree>
 8007fde:	e001      	b.n	8007fe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d017      	beq.n	800801a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ff2:	88fa      	ldrh	r2, [r7, #6]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9303      	str	r3, [sp, #12]
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	9302      	str	r3, [sp, #8]
 8007ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffe:	9301      	str	r3, [sp, #4]
 8008000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	68b9      	ldr	r1, [r7, #8]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f80f 	bl	800802c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800800e:	69f8      	ldr	r0, [r7, #28]
 8008010:	f000 f8b4 	bl	800817c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008014:	2301      	movs	r3, #1
 8008016:	61bb      	str	r3, [r7, #24]
 8008018:	e002      	b.n	8008020 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
 800801e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008020:	69bb      	ldr	r3, [r7, #24]
	}
 8008022:	4618      	mov	r0, r3
 8008024:	3720      	adds	r7, #32
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	461a      	mov	r2, r3
 8008044:	21a5      	movs	r1, #165	@ 0xa5
 8008046:	f002 fcc0 	bl	800a9ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008054:	3b01      	subs	r3, #1
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	f023 0307 	bic.w	r3, r3, #7
 8008062:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00b      	beq.n	8008086 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	617b      	str	r3, [r7, #20]
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	e7fd      	b.n	8008082 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01f      	beq.n	80080cc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800808c:	2300      	movs	r3, #0
 800808e:	61fb      	str	r3, [r7, #28]
 8008090:	e012      	b.n	80080b8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008092:	68ba      	ldr	r2, [r7, #8]
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	4413      	add	r3, r2
 8008098:	7819      	ldrb	r1, [r3, #0]
 800809a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	3334      	adds	r3, #52	@ 0x34
 80080a2:	460a      	mov	r2, r1
 80080a4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	4413      	add	r3, r2
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d006      	beq.n	80080c0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	3301      	adds	r3, #1
 80080b6:	61fb      	str	r3, [r7, #28]
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	2b0f      	cmp	r3, #15
 80080bc:	d9e9      	bls.n	8008092 <prvInitialiseNewTask+0x66>
 80080be:	e000      	b.n	80080c2 <prvInitialiseNewTask+0x96>
			{
				break;
 80080c0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080ca:	e003      	b.n	80080d4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080d6:	2b37      	cmp	r3, #55	@ 0x37
 80080d8:	d901      	bls.n	80080de <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080da:	2337      	movs	r3, #55	@ 0x37
 80080dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080e8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	2200      	movs	r2, #0
 80080ee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f2:	3304      	adds	r3, #4
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe fec7 	bl	8006e88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	3318      	adds	r3, #24
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe fec2 	bl	8006e88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008108:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008112:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008118:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800811a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008124:	2200      	movs	r2, #0
 8008126:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	3354      	adds	r3, #84	@ 0x54
 800812e:	224c      	movs	r2, #76	@ 0x4c
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f002 fc49 	bl	800a9ca <memset>
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	4a0d      	ldr	r2, [pc, #52]	@ (8008170 <prvInitialiseNewTask+0x144>)
 800813c:	659a      	str	r2, [r3, #88]	@ 0x58
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	4a0c      	ldr	r2, [pc, #48]	@ (8008174 <prvInitialiseNewTask+0x148>)
 8008142:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008146:	4a0c      	ldr	r2, [pc, #48]	@ (8008178 <prvInitialiseNewTask+0x14c>)
 8008148:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	68f9      	ldr	r1, [r7, #12]
 800814e:	69b8      	ldr	r0, [r7, #24]
 8008150:	f001 fa6a 	bl	8009628 <pxPortInitialiseStack>
 8008154:	4602      	mov	r2, r0
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800815a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008166:	bf00      	nop
 8008168:	3720      	adds	r7, #32
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	20004de8 	.word	0x20004de8
 8008174:	20004e50 	.word	0x20004e50
 8008178:	20004eb8 	.word	0x20004eb8

0800817c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008184:	f001 fb80 	bl	8009888 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008188:	4b2d      	ldr	r3, [pc, #180]	@ (8008240 <prvAddNewTaskToReadyList+0xc4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	3301      	adds	r3, #1
 800818e:	4a2c      	ldr	r2, [pc, #176]	@ (8008240 <prvAddNewTaskToReadyList+0xc4>)
 8008190:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008192:	4b2c      	ldr	r3, [pc, #176]	@ (8008244 <prvAddNewTaskToReadyList+0xc8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d109      	bne.n	80081ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800819a:	4a2a      	ldr	r2, [pc, #168]	@ (8008244 <prvAddNewTaskToReadyList+0xc8>)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081a0:	4b27      	ldr	r3, [pc, #156]	@ (8008240 <prvAddNewTaskToReadyList+0xc4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d110      	bne.n	80081ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081a8:	f000 fc2e 	bl	8008a08 <prvInitialiseTaskLists>
 80081ac:	e00d      	b.n	80081ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081ae:	4b26      	ldr	r3, [pc, #152]	@ (8008248 <prvAddNewTaskToReadyList+0xcc>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081b6:	4b23      	ldr	r3, [pc, #140]	@ (8008244 <prvAddNewTaskToReadyList+0xc8>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d802      	bhi.n	80081ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081c4:	4a1f      	ldr	r2, [pc, #124]	@ (8008244 <prvAddNewTaskToReadyList+0xc8>)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081ca:	4b20      	ldr	r3, [pc, #128]	@ (800824c <prvAddNewTaskToReadyList+0xd0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	4a1e      	ldr	r2, [pc, #120]	@ (800824c <prvAddNewTaskToReadyList+0xd0>)
 80081d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081d4:	4b1d      	ldr	r3, [pc, #116]	@ (800824c <prvAddNewTaskToReadyList+0xd0>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008250 <prvAddNewTaskToReadyList+0xd4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d903      	bls.n	80081f0 <prvAddNewTaskToReadyList+0x74>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ec:	4a18      	ldr	r2, [pc, #96]	@ (8008250 <prvAddNewTaskToReadyList+0xd4>)
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4a15      	ldr	r2, [pc, #84]	@ (8008254 <prvAddNewTaskToReadyList+0xd8>)
 80081fe:	441a      	add	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe fe4b 	bl	8006ea2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800820c:	f001 fb6e 	bl	80098ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008210:	4b0d      	ldr	r3, [pc, #52]	@ (8008248 <prvAddNewTaskToReadyList+0xcc>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00e      	beq.n	8008236 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008218:	4b0a      	ldr	r3, [pc, #40]	@ (8008244 <prvAddNewTaskToReadyList+0xc8>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008222:	429a      	cmp	r2, r3
 8008224:	d207      	bcs.n	8008236 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008226:	4b0c      	ldr	r3, [pc, #48]	@ (8008258 <prvAddNewTaskToReadyList+0xdc>)
 8008228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20001068 	.word	0x20001068
 8008244:	20000b94 	.word	0x20000b94
 8008248:	20001074 	.word	0x20001074
 800824c:	20001084 	.word	0x20001084
 8008250:	20001070 	.word	0x20001070
 8008254:	20000b98 	.word	0x20000b98
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d018      	beq.n	80082a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800826e:	4b14      	ldr	r3, [pc, #80]	@ (80082c0 <vTaskDelay+0x64>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00b      	beq.n	800828e <vTaskDelay+0x32>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	60bb      	str	r3, [r7, #8]
}
 8008288:	bf00      	nop
 800828a:	bf00      	nop
 800828c:	e7fd      	b.n	800828a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800828e:	f000 f88b 	bl	80083a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008292:	2100      	movs	r1, #0
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 fe19 	bl	8008ecc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800829a:	f000 f893 	bl	80083c4 <xTaskResumeAll>
 800829e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d107      	bne.n	80082b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082a6:	4b07      	ldr	r3, [pc, #28]	@ (80082c4 <vTaskDelay+0x68>)
 80082a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082b6:	bf00      	nop
 80082b8:	3710      	adds	r7, #16
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	20001090 	.word	0x20001090
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	@ 0x28
 80082cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082d6:	463a      	mov	r2, r7
 80082d8:	1d39      	adds	r1, r7, #4
 80082da:	f107 0308 	add.w	r3, r7, #8
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fd7e 	bl	8006de0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	9202      	str	r2, [sp, #8]
 80082ec:	9301      	str	r3, [sp, #4]
 80082ee:	2300      	movs	r3, #0
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	460a      	mov	r2, r1
 80082f6:	4924      	ldr	r1, [pc, #144]	@ (8008388 <vTaskStartScheduler+0xc0>)
 80082f8:	4824      	ldr	r0, [pc, #144]	@ (800838c <vTaskStartScheduler+0xc4>)
 80082fa:	f7ff fdf1 	bl	8007ee0 <xTaskCreateStatic>
 80082fe:	4603      	mov	r3, r0
 8008300:	4a23      	ldr	r2, [pc, #140]	@ (8008390 <vTaskStartScheduler+0xc8>)
 8008302:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008304:	4b22      	ldr	r3, [pc, #136]	@ (8008390 <vTaskStartScheduler+0xc8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800830c:	2301      	movs	r3, #1
 800830e:	617b      	str	r3, [r7, #20]
 8008310:	e001      	b.n	8008316 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008312:	2300      	movs	r3, #0
 8008314:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d102      	bne.n	8008322 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800831c:	f000 fe2a 	bl	8008f74 <xTimerCreateTimerTask>
 8008320:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d11b      	bne.n	8008360 <vTaskStartScheduler+0x98>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	613b      	str	r3, [r7, #16]
}
 800833a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800833c:	4b15      	ldr	r3, [pc, #84]	@ (8008394 <vTaskStartScheduler+0xcc>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3354      	adds	r3, #84	@ 0x54
 8008342:	4a15      	ldr	r2, [pc, #84]	@ (8008398 <vTaskStartScheduler+0xd0>)
 8008344:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008346:	4b15      	ldr	r3, [pc, #84]	@ (800839c <vTaskStartScheduler+0xd4>)
 8008348:	f04f 32ff 	mov.w	r2, #4294967295
 800834c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800834e:	4b14      	ldr	r3, [pc, #80]	@ (80083a0 <vTaskStartScheduler+0xd8>)
 8008350:	2201      	movs	r2, #1
 8008352:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008354:	4b13      	ldr	r3, [pc, #76]	@ (80083a4 <vTaskStartScheduler+0xdc>)
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800835a:	f001 f9f1 	bl	8009740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800835e:	e00f      	b.n	8008380 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008366:	d10b      	bne.n	8008380 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	e7fd      	b.n	800837c <vTaskStartScheduler+0xb4>
}
 8008380:	bf00      	nop
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	0800d190 	.word	0x0800d190
 800838c:	080089d9 	.word	0x080089d9
 8008390:	2000108c 	.word	0x2000108c
 8008394:	20000b94 	.word	0x20000b94
 8008398:	20000028 	.word	0x20000028
 800839c:	20001088 	.word	0x20001088
 80083a0:	20001074 	.word	0x20001074
 80083a4:	2000106c 	.word	0x2000106c

080083a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083ac:	4b04      	ldr	r3, [pc, #16]	@ (80083c0 <vTaskSuspendAll+0x18>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	4a03      	ldr	r2, [pc, #12]	@ (80083c0 <vTaskSuspendAll+0x18>)
 80083b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083b6:	bf00      	nop
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20001090 	.word	0x20001090

080083c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083d2:	4b42      	ldr	r3, [pc, #264]	@ (80084dc <xTaskResumeAll+0x118>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	603b      	str	r3, [r7, #0]
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80083f2:	f001 fa49 	bl	8009888 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80083f6:	4b39      	ldr	r3, [pc, #228]	@ (80084dc <xTaskResumeAll+0x118>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	4a37      	ldr	r2, [pc, #220]	@ (80084dc <xTaskResumeAll+0x118>)
 80083fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008400:	4b36      	ldr	r3, [pc, #216]	@ (80084dc <xTaskResumeAll+0x118>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d162      	bne.n	80084ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008408:	4b35      	ldr	r3, [pc, #212]	@ (80084e0 <xTaskResumeAll+0x11c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d05e      	beq.n	80084ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008410:	e02f      	b.n	8008472 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008412:	4b34      	ldr	r3, [pc, #208]	@ (80084e4 <xTaskResumeAll+0x120>)
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3318      	adds	r3, #24
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe fd9c 	bl	8006f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3304      	adds	r3, #4
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fd97 	bl	8006f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008432:	4b2d      	ldr	r3, [pc, #180]	@ (80084e8 <xTaskResumeAll+0x124>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	d903      	bls.n	8008442 <xTaskResumeAll+0x7e>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843e:	4a2a      	ldr	r2, [pc, #168]	@ (80084e8 <xTaskResumeAll+0x124>)
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4a27      	ldr	r2, [pc, #156]	@ (80084ec <xTaskResumeAll+0x128>)
 8008450:	441a      	add	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3304      	adds	r3, #4
 8008456:	4619      	mov	r1, r3
 8008458:	4610      	mov	r0, r2
 800845a:	f7fe fd22 	bl	8006ea2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008462:	4b23      	ldr	r3, [pc, #140]	@ (80084f0 <xTaskResumeAll+0x12c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008468:	429a      	cmp	r2, r3
 800846a:	d302      	bcc.n	8008472 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800846c:	4b21      	ldr	r3, [pc, #132]	@ (80084f4 <xTaskResumeAll+0x130>)
 800846e:	2201      	movs	r2, #1
 8008470:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008472:	4b1c      	ldr	r3, [pc, #112]	@ (80084e4 <xTaskResumeAll+0x120>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1cb      	bne.n	8008412 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008480:	f000 fb66 	bl	8008b50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008484:	4b1c      	ldr	r3, [pc, #112]	@ (80084f8 <xTaskResumeAll+0x134>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d010      	beq.n	80084b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008490:	f000 f846 	bl	8008520 <xTaskIncrementTick>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800849a:	4b16      	ldr	r3, [pc, #88]	@ (80084f4 <xTaskResumeAll+0x130>)
 800849c:	2201      	movs	r2, #1
 800849e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3b01      	subs	r3, #1
 80084a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f1      	bne.n	8008490 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084ac:	4b12      	ldr	r3, [pc, #72]	@ (80084f8 <xTaskResumeAll+0x134>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084b2:	4b10      	ldr	r3, [pc, #64]	@ (80084f4 <xTaskResumeAll+0x130>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d009      	beq.n	80084ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084be:	4b0f      	ldr	r3, [pc, #60]	@ (80084fc <xTaskResumeAll+0x138>)
 80084c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084ce:	f001 fa0d 	bl	80098ec <vPortExitCritical>

	return xAlreadyYielded;
 80084d2:	68bb      	ldr	r3, [r7, #8]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	20001090 	.word	0x20001090
 80084e0:	20001068 	.word	0x20001068
 80084e4:	20001028 	.word	0x20001028
 80084e8:	20001070 	.word	0x20001070
 80084ec:	20000b98 	.word	0x20000b98
 80084f0:	20000b94 	.word	0x20000b94
 80084f4:	2000107c 	.word	0x2000107c
 80084f8:	20001078 	.word	0x20001078
 80084fc:	e000ed04 	.word	0xe000ed04

08008500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008506:	4b05      	ldr	r3, [pc, #20]	@ (800851c <xTaskGetTickCount+0x1c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800850c:	687b      	ldr	r3, [r7, #4]
}
 800850e:	4618      	mov	r0, r3
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	2000106c 	.word	0x2000106c

08008520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852a:	4b4f      	ldr	r3, [pc, #316]	@ (8008668 <xTaskIncrementTick+0x148>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f040 8090 	bne.w	8008654 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008534:	4b4d      	ldr	r3, [pc, #308]	@ (800866c <xTaskIncrementTick+0x14c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3301      	adds	r3, #1
 800853a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800853c:	4a4b      	ldr	r2, [pc, #300]	@ (800866c <xTaskIncrementTick+0x14c>)
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d121      	bne.n	800858c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008548:	4b49      	ldr	r3, [pc, #292]	@ (8008670 <xTaskIncrementTick+0x150>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00b      	beq.n	800856a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	603b      	str	r3, [r7, #0]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <xTaskIncrementTick+0x46>
 800856a:	4b41      	ldr	r3, [pc, #260]	@ (8008670 <xTaskIncrementTick+0x150>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	4b40      	ldr	r3, [pc, #256]	@ (8008674 <xTaskIncrementTick+0x154>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a3e      	ldr	r2, [pc, #248]	@ (8008670 <xTaskIncrementTick+0x150>)
 8008576:	6013      	str	r3, [r2, #0]
 8008578:	4a3e      	ldr	r2, [pc, #248]	@ (8008674 <xTaskIncrementTick+0x154>)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	4b3e      	ldr	r3, [pc, #248]	@ (8008678 <xTaskIncrementTick+0x158>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3301      	adds	r3, #1
 8008584:	4a3c      	ldr	r2, [pc, #240]	@ (8008678 <xTaskIncrementTick+0x158>)
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	f000 fae2 	bl	8008b50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800858c:	4b3b      	ldr	r3, [pc, #236]	@ (800867c <xTaskIncrementTick+0x15c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	429a      	cmp	r2, r3
 8008594:	d349      	bcc.n	800862a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008596:	4b36      	ldr	r3, [pc, #216]	@ (8008670 <xTaskIncrementTick+0x150>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d104      	bne.n	80085aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085a0:	4b36      	ldr	r3, [pc, #216]	@ (800867c <xTaskIncrementTick+0x15c>)
 80085a2:	f04f 32ff 	mov.w	r2, #4294967295
 80085a6:	601a      	str	r2, [r3, #0]
					break;
 80085a8:	e03f      	b.n	800862a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085aa:	4b31      	ldr	r3, [pc, #196]	@ (8008670 <xTaskIncrementTick+0x150>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d203      	bcs.n	80085ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085c2:	4a2e      	ldr	r2, [pc, #184]	@ (800867c <xTaskIncrementTick+0x15c>)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085c8:	e02f      	b.n	800862a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fcc4 	bl	8006f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d004      	beq.n	80085e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3318      	adds	r3, #24
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe fcbb 	bl	8006f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085ea:	4b25      	ldr	r3, [pc, #148]	@ (8008680 <xTaskIncrementTick+0x160>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d903      	bls.n	80085fa <xTaskIncrementTick+0xda>
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f6:	4a22      	ldr	r2, [pc, #136]	@ (8008680 <xTaskIncrementTick+0x160>)
 80085f8:	6013      	str	r3, [r2, #0]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4a1f      	ldr	r2, [pc, #124]	@ (8008684 <xTaskIncrementTick+0x164>)
 8008608:	441a      	add	r2, r3
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	3304      	adds	r3, #4
 800860e:	4619      	mov	r1, r3
 8008610:	4610      	mov	r0, r2
 8008612:	f7fe fc46 	bl	8006ea2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861a:	4b1b      	ldr	r3, [pc, #108]	@ (8008688 <xTaskIncrementTick+0x168>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008620:	429a      	cmp	r2, r3
 8008622:	d3b8      	bcc.n	8008596 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008624:	2301      	movs	r3, #1
 8008626:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008628:	e7b5      	b.n	8008596 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800862a:	4b17      	ldr	r3, [pc, #92]	@ (8008688 <xTaskIncrementTick+0x168>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008630:	4914      	ldr	r1, [pc, #80]	@ (8008684 <xTaskIncrementTick+0x164>)
 8008632:	4613      	mov	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	440b      	add	r3, r1
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d901      	bls.n	8008646 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008642:	2301      	movs	r3, #1
 8008644:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008646:	4b11      	ldr	r3, [pc, #68]	@ (800868c <xTaskIncrementTick+0x16c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800864e:	2301      	movs	r3, #1
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	e004      	b.n	800865e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008654:	4b0e      	ldr	r3, [pc, #56]	@ (8008690 <xTaskIncrementTick+0x170>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3301      	adds	r3, #1
 800865a:	4a0d      	ldr	r2, [pc, #52]	@ (8008690 <xTaskIncrementTick+0x170>)
 800865c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800865e:	697b      	ldr	r3, [r7, #20]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	20001090 	.word	0x20001090
 800866c:	2000106c 	.word	0x2000106c
 8008670:	20001020 	.word	0x20001020
 8008674:	20001024 	.word	0x20001024
 8008678:	20001080 	.word	0x20001080
 800867c:	20001088 	.word	0x20001088
 8008680:	20001070 	.word	0x20001070
 8008684:	20000b98 	.word	0x20000b98
 8008688:	20000b94 	.word	0x20000b94
 800868c:	2000107c 	.word	0x2000107c
 8008690:	20001078 	.word	0x20001078

08008694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800869a:	4b2b      	ldr	r3, [pc, #172]	@ (8008748 <vTaskSwitchContext+0xb4>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086a2:	4b2a      	ldr	r3, [pc, #168]	@ (800874c <vTaskSwitchContext+0xb8>)
 80086a4:	2201      	movs	r2, #1
 80086a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086a8:	e047      	b.n	800873a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80086aa:	4b28      	ldr	r3, [pc, #160]	@ (800874c <vTaskSwitchContext+0xb8>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b0:	4b27      	ldr	r3, [pc, #156]	@ (8008750 <vTaskSwitchContext+0xbc>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	e011      	b.n	80086dc <vTaskSwitchContext+0x48>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <vTaskSwitchContext+0x42>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	607b      	str	r3, [r7, #4]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <vTaskSwitchContext+0x3e>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3b01      	subs	r3, #1
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	491d      	ldr	r1, [pc, #116]	@ (8008754 <vTaskSwitchContext+0xc0>)
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0e3      	beq.n	80086b8 <vTaskSwitchContext+0x24>
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4a16      	ldr	r2, [pc, #88]	@ (8008754 <vTaskSwitchContext+0xc0>)
 80086fc:	4413      	add	r3, r2
 80086fe:	60bb      	str	r3, [r7, #8]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	605a      	str	r2, [r3, #4]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	3308      	adds	r3, #8
 8008712:	429a      	cmp	r2, r3
 8008714:	d104      	bne.n	8008720 <vTaskSwitchContext+0x8c>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	605a      	str	r2, [r3, #4]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	4a0c      	ldr	r2, [pc, #48]	@ (8008758 <vTaskSwitchContext+0xc4>)
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	4a09      	ldr	r2, [pc, #36]	@ (8008750 <vTaskSwitchContext+0xbc>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008730:	4b09      	ldr	r3, [pc, #36]	@ (8008758 <vTaskSwitchContext+0xc4>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3354      	adds	r3, #84	@ 0x54
 8008736:	4a09      	ldr	r2, [pc, #36]	@ (800875c <vTaskSwitchContext+0xc8>)
 8008738:	6013      	str	r3, [r2, #0]
}
 800873a:	bf00      	nop
 800873c:	3714      	adds	r7, #20
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	20001090 	.word	0x20001090
 800874c:	2000107c 	.word	0x2000107c
 8008750:	20001070 	.word	0x20001070
 8008754:	20000b98 	.word	0x20000b98
 8008758:	20000b94 	.word	0x20000b94
 800875c:	20000028 	.word	0x20000028

08008760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10b      	bne.n	8008788 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	60fb      	str	r3, [r7, #12]
}
 8008782:	bf00      	nop
 8008784:	bf00      	nop
 8008786:	e7fd      	b.n	8008784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008788:	4b07      	ldr	r3, [pc, #28]	@ (80087a8 <vTaskPlaceOnEventList+0x48>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3318      	adds	r3, #24
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7fe fbaa 	bl	8006eea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008796:	2101      	movs	r1, #1
 8008798:	6838      	ldr	r0, [r7, #0]
 800879a:	f000 fb97 	bl	8008ecc <prvAddCurrentTaskToDelayedList>
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20000b94 	.word	0x20000b94

080087ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10b      	bne.n	80087d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	617b      	str	r3, [r7, #20]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008800 <vTaskPlaceOnEventListRestricted+0x54>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3318      	adds	r3, #24
 80087dc:	4619      	mov	r1, r3
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7fe fb5f 	bl	8006ea2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80087ea:	f04f 33ff 	mov.w	r3, #4294967295
 80087ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	68b8      	ldr	r0, [r7, #8]
 80087f4:	f000 fb6a 	bl	8008ecc <prvAddCurrentTaskToDelayedList>
	}
 80087f8:	bf00      	nop
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20000b94 	.word	0x20000b94

08008804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10b      	bne.n	8008832 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60fb      	str	r3, [r7, #12]
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	e7fd      	b.n	800882e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	3318      	adds	r3, #24
 8008836:	4618      	mov	r0, r3
 8008838:	f7fe fb90 	bl	8006f5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800883c:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <xTaskRemoveFromEventList+0xb0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d11d      	bne.n	8008880 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	3304      	adds	r3, #4
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fb87 	bl	8006f5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008852:	4b19      	ldr	r3, [pc, #100]	@ (80088b8 <xTaskRemoveFromEventList+0xb4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <xTaskRemoveFromEventList+0x5e>
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800885e:	4a16      	ldr	r2, [pc, #88]	@ (80088b8 <xTaskRemoveFromEventList+0xb4>)
 8008860:	6013      	str	r3, [r2, #0]
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008866:	4613      	mov	r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4a13      	ldr	r2, [pc, #76]	@ (80088bc <xTaskRemoveFromEventList+0xb8>)
 8008870:	441a      	add	r2, r3
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	3304      	adds	r3, #4
 8008876:	4619      	mov	r1, r3
 8008878:	4610      	mov	r0, r2
 800887a:	f7fe fb12 	bl	8006ea2 <vListInsertEnd>
 800887e:	e005      	b.n	800888c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	3318      	adds	r3, #24
 8008884:	4619      	mov	r1, r3
 8008886:	480e      	ldr	r0, [pc, #56]	@ (80088c0 <xTaskRemoveFromEventList+0xbc>)
 8008888:	f7fe fb0b 	bl	8006ea2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008890:	4b0c      	ldr	r3, [pc, #48]	@ (80088c4 <xTaskRemoveFromEventList+0xc0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008896:	429a      	cmp	r2, r3
 8008898:	d905      	bls.n	80088a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800889a:	2301      	movs	r3, #1
 800889c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800889e:	4b0a      	ldr	r3, [pc, #40]	@ (80088c8 <xTaskRemoveFromEventList+0xc4>)
 80088a0:	2201      	movs	r2, #1
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	e001      	b.n	80088aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088aa:	697b      	ldr	r3, [r7, #20]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20001090 	.word	0x20001090
 80088b8:	20001070 	.word	0x20001070
 80088bc:	20000b98 	.word	0x20000b98
 80088c0:	20001028 	.word	0x20001028
 80088c4:	20000b94 	.word	0x20000b94
 80088c8:	2000107c 	.word	0x2000107c

080088cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088d4:	4b06      	ldr	r3, [pc, #24]	@ (80088f0 <vTaskInternalSetTimeOutState+0x24>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088dc:	4b05      	ldr	r3, [pc, #20]	@ (80088f4 <vTaskInternalSetTimeOutState+0x28>)
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	605a      	str	r2, [r3, #4]
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20001080 	.word	0x20001080
 80088f4:	2000106c 	.word	0x2000106c

080088f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d10b      	bne.n	8008920 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890c:	f383 8811 	msr	BASEPRI, r3
 8008910:	f3bf 8f6f 	isb	sy
 8008914:	f3bf 8f4f 	dsb	sy
 8008918:	613b      	str	r3, [r7, #16]
}
 800891a:	bf00      	nop
 800891c:	bf00      	nop
 800891e:	e7fd      	b.n	800891c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10b      	bne.n	800893e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	60fb      	str	r3, [r7, #12]
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	e7fd      	b.n	800893a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800893e:	f000 ffa3 	bl	8009888 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008942:	4b1d      	ldr	r3, [pc, #116]	@ (80089b8 <xTaskCheckForTimeOut+0xc0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d102      	bne.n	8008962 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
 8008960:	e023      	b.n	80089aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	4b15      	ldr	r3, [pc, #84]	@ (80089bc <xTaskCheckForTimeOut+0xc4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	429a      	cmp	r2, r3
 800896c:	d007      	beq.n	800897e <xTaskCheckForTimeOut+0x86>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	429a      	cmp	r2, r3
 8008976:	d302      	bcc.n	800897e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	e015      	b.n	80089aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	429a      	cmp	r2, r3
 8008986:	d20b      	bcs.n	80089a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	1ad2      	subs	r2, r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff ff99 	bl	80088cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800899a:	2300      	movs	r3, #0
 800899c:	61fb      	str	r3, [r7, #28]
 800899e:	e004      	b.n	80089aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089a6:	2301      	movs	r3, #1
 80089a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089aa:	f000 ff9f 	bl	80098ec <vPortExitCritical>

	return xReturn;
 80089ae:	69fb      	ldr	r3, [r7, #28]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3720      	adds	r7, #32
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	2000106c 	.word	0x2000106c
 80089bc:	20001080 	.word	0x20001080

080089c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089c4:	4b03      	ldr	r3, [pc, #12]	@ (80089d4 <vTaskMissedYield+0x14>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
}
 80089ca:	bf00      	nop
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	2000107c 	.word	0x2000107c

080089d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089e0:	f000 f852 	bl	8008a88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089e4:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <prvIdleTask+0x28>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d9f9      	bls.n	80089e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80089ec:	4b05      	ldr	r3, [pc, #20]	@ (8008a04 <prvIdleTask+0x2c>)
 80089ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80089fc:	e7f0      	b.n	80089e0 <prvIdleTask+0x8>
 80089fe:	bf00      	nop
 8008a00:	20000b98 	.word	0x20000b98
 8008a04:	e000ed04 	.word	0xe000ed04

08008a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a0e:	2300      	movs	r3, #0
 8008a10:	607b      	str	r3, [r7, #4]
 8008a12:	e00c      	b.n	8008a2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4a12      	ldr	r2, [pc, #72]	@ (8008a68 <prvInitialiseTaskLists+0x60>)
 8008a20:	4413      	add	r3, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fa10 	bl	8006e48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	607b      	str	r3, [r7, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b37      	cmp	r3, #55	@ 0x37
 8008a32:	d9ef      	bls.n	8008a14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a34:	480d      	ldr	r0, [pc, #52]	@ (8008a6c <prvInitialiseTaskLists+0x64>)
 8008a36:	f7fe fa07 	bl	8006e48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a3a:	480d      	ldr	r0, [pc, #52]	@ (8008a70 <prvInitialiseTaskLists+0x68>)
 8008a3c:	f7fe fa04 	bl	8006e48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a40:	480c      	ldr	r0, [pc, #48]	@ (8008a74 <prvInitialiseTaskLists+0x6c>)
 8008a42:	f7fe fa01 	bl	8006e48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a46:	480c      	ldr	r0, [pc, #48]	@ (8008a78 <prvInitialiseTaskLists+0x70>)
 8008a48:	f7fe f9fe 	bl	8006e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a4c:	480b      	ldr	r0, [pc, #44]	@ (8008a7c <prvInitialiseTaskLists+0x74>)
 8008a4e:	f7fe f9fb 	bl	8006e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a52:	4b0b      	ldr	r3, [pc, #44]	@ (8008a80 <prvInitialiseTaskLists+0x78>)
 8008a54:	4a05      	ldr	r2, [pc, #20]	@ (8008a6c <prvInitialiseTaskLists+0x64>)
 8008a56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a58:	4b0a      	ldr	r3, [pc, #40]	@ (8008a84 <prvInitialiseTaskLists+0x7c>)
 8008a5a:	4a05      	ldr	r2, [pc, #20]	@ (8008a70 <prvInitialiseTaskLists+0x68>)
 8008a5c:	601a      	str	r2, [r3, #0]
}
 8008a5e:	bf00      	nop
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20000b98 	.word	0x20000b98
 8008a6c:	20000ff8 	.word	0x20000ff8
 8008a70:	2000100c 	.word	0x2000100c
 8008a74:	20001028 	.word	0x20001028
 8008a78:	2000103c 	.word	0x2000103c
 8008a7c:	20001054 	.word	0x20001054
 8008a80:	20001020 	.word	0x20001020
 8008a84:	20001024 	.word	0x20001024

08008a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008a8e:	e019      	b.n	8008ac4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008a90:	f000 fefa 	bl	8009888 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a94:	4b10      	ldr	r3, [pc, #64]	@ (8008ad8 <prvCheckTasksWaitingTermination+0x50>)
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fa5b 	bl	8006f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <prvCheckTasksWaitingTermination+0x54>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	4a0b      	ldr	r2, [pc, #44]	@ (8008adc <prvCheckTasksWaitingTermination+0x54>)
 8008aae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8008ae0 <prvCheckTasksWaitingTermination+0x58>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8008ae0 <prvCheckTasksWaitingTermination+0x58>)
 8008ab8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008aba:	f000 ff17 	bl	80098ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f810 	bl	8008ae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ac4:	4b06      	ldr	r3, [pc, #24]	@ (8008ae0 <prvCheckTasksWaitingTermination+0x58>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1e1      	bne.n	8008a90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	2000103c 	.word	0x2000103c
 8008adc:	20001068 	.word	0x20001068
 8008ae0:	20001050 	.word	0x20001050

08008ae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3354      	adds	r3, #84	@ 0x54
 8008af0:	4618      	mov	r0, r3
 8008af2:	f001 ff87 	bl	800aa04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d108      	bne.n	8008b12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b04:	4618      	mov	r0, r3
 8008b06:	f001 f8af 	bl	8009c68 <vPortFree>
				vPortFree( pxTCB );
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f001 f8ac 	bl	8009c68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b10:	e019      	b.n	8008b46 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d103      	bne.n	8008b24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f8a3 	bl	8009c68 <vPortFree>
	}
 8008b22:	e010      	b.n	8008b46 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d00b      	beq.n	8008b46 <prvDeleteTCB+0x62>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	60fb      	str	r3, [r7, #12]
}
 8008b40:	bf00      	nop
 8008b42:	bf00      	nop
 8008b44:	e7fd      	b.n	8008b42 <prvDeleteTCB+0x5e>
	}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b56:	4b0c      	ldr	r3, [pc, #48]	@ (8008b88 <prvResetNextTaskUnblockTime+0x38>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b60:	4b0a      	ldr	r3, [pc, #40]	@ (8008b8c <prvResetNextTaskUnblockTime+0x3c>)
 8008b62:	f04f 32ff 	mov.w	r2, #4294967295
 8008b66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b68:	e008      	b.n	8008b7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b6a:	4b07      	ldr	r3, [pc, #28]	@ (8008b88 <prvResetNextTaskUnblockTime+0x38>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	4a04      	ldr	r2, [pc, #16]	@ (8008b8c <prvResetNextTaskUnblockTime+0x3c>)
 8008b7a:	6013      	str	r3, [r2, #0]
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	20001020 	.word	0x20001020
 8008b8c:	20001088 	.word	0x20001088

08008b90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008b96:	4b05      	ldr	r3, [pc, #20]	@ (8008bac <xTaskGetCurrentTaskHandle+0x1c>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008b9c:	687b      	ldr	r3, [r7, #4]
	}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000b94 	.word	0x20000b94

08008bb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8008be4 <xTaskGetSchedulerState+0x34>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	e008      	b.n	8008bd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc4:	4b08      	ldr	r3, [pc, #32]	@ (8008be8 <xTaskGetSchedulerState+0x38>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	607b      	str	r3, [r7, #4]
 8008bd0:	e001      	b.n	8008bd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bd6:	687b      	ldr	r3, [r7, #4]
	}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	20001074 	.word	0x20001074
 8008be8:	20001090 	.word	0x20001090

08008bec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d051      	beq.n	8008ca6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c06:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d241      	bcs.n	8008c94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	699b      	ldr	r3, [r3, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	db06      	blt.n	8008c26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c18:	4b25      	ldr	r3, [pc, #148]	@ (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	6959      	ldr	r1, [r3, #20]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4a1f      	ldr	r2, [pc, #124]	@ (8008cb4 <xTaskPriorityInherit+0xc8>)
 8008c38:	4413      	add	r3, r2
 8008c3a:	4299      	cmp	r1, r3
 8008c3c:	d122      	bne.n	8008c84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	3304      	adds	r3, #4
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fe f98a 	bl	8006f5c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c48:	4b19      	ldr	r3, [pc, #100]	@ (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c56:	4b18      	ldr	r3, [pc, #96]	@ (8008cb8 <xTaskPriorityInherit+0xcc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d903      	bls.n	8008c66 <xTaskPriorityInherit+0x7a>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c62:	4a15      	ldr	r2, [pc, #84]	@ (8008cb8 <xTaskPriorityInherit+0xcc>)
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4a10      	ldr	r2, [pc, #64]	@ (8008cb4 <xTaskPriorityInherit+0xc8>)
 8008c74:	441a      	add	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	3304      	adds	r3, #4
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	4610      	mov	r0, r2
 8008c7e:	f7fe f910 	bl	8006ea2 <vListInsertEnd>
 8008c82:	e004      	b.n	8008c8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008c84:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e008      	b.n	8008ca6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c98:	4b05      	ldr	r3, [pc, #20]	@ (8008cb0 <xTaskPriorityInherit+0xc4>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d201      	bcs.n	8008ca6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	20000b94 	.word	0x20000b94
 8008cb4:	20000b98 	.word	0x20000b98
 8008cb8:	20001070 	.word	0x20001070

08008cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b086      	sub	sp, #24
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d058      	beq.n	8008d84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8008d90 <xTaskPriorityDisinherit+0xd4>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d00b      	beq.n	8008cf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	60fb      	str	r3, [r7, #12]
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	e7fd      	b.n	8008cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d10b      	bne.n	8008d14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	60bb      	str	r3, [r7, #8]
}
 8008d0e:	bf00      	nop
 8008d10:	bf00      	nop
 8008d12:	e7fd      	b.n	8008d10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d18:	1e5a      	subs	r2, r3, #1
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d02c      	beq.n	8008d84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d128      	bne.n	8008d84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	3304      	adds	r3, #4
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fe f910 	bl	8006f5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d54:	4b0f      	ldr	r3, [pc, #60]	@ (8008d94 <xTaskPriorityDisinherit+0xd8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d903      	bls.n	8008d64 <xTaskPriorityDisinherit+0xa8>
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d60:	4a0c      	ldr	r2, [pc, #48]	@ (8008d94 <xTaskPriorityDisinherit+0xd8>)
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d68:	4613      	mov	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4a09      	ldr	r2, [pc, #36]	@ (8008d98 <xTaskPriorityDisinherit+0xdc>)
 8008d72:	441a      	add	r2, r3
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f7fe f891 	bl	8006ea2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d80:	2301      	movs	r3, #1
 8008d82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d84:	697b      	ldr	r3, [r7, #20]
	}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20000b94 	.word	0x20000b94
 8008d94:	20001070 	.word	0x20001070
 8008d98:	20000b98 	.word	0x20000b98

08008d9c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008daa:	2301      	movs	r3, #1
 8008dac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d06c      	beq.n	8008e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10b      	bne.n	8008dd4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	60fb      	str	r3, [r7, #12]
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	e7fd      	b.n	8008dd0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd8:	683a      	ldr	r2, [r7, #0]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d902      	bls.n	8008de4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	61fb      	str	r3, [r7, #28]
 8008de2:	e002      	b.n	8008dea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008de8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d04c      	beq.n	8008e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d147      	bne.n	8008e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dfe:	4b26      	ldr	r3, [pc, #152]	@ (8008e98 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d10b      	bne.n	8008e20 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	60bb      	str	r3, [r7, #8]
}
 8008e1a:	bf00      	nop
 8008e1c:	bf00      	nop
 8008e1e:	e7fd      	b.n	8008e1c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	db04      	blt.n	8008e3e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	6959      	ldr	r1, [r3, #20]
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4a13      	ldr	r2, [pc, #76]	@ (8008e9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e4e:	4413      	add	r3, r2
 8008e50:	4299      	cmp	r1, r3
 8008e52:	d11c      	bne.n	8008e8e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fe f87f 	bl	8006f5c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e62:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d903      	bls.n	8008e72 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008ea0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4a07      	ldr	r2, [pc, #28]	@ (8008e9c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008e80:	441a      	add	r2, r3
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	3304      	adds	r3, #4
 8008e86:	4619      	mov	r1, r3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f7fe f80a 	bl	8006ea2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e8e:	bf00      	nop
 8008e90:	3720      	adds	r7, #32
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	20000b94 	.word	0x20000b94
 8008e9c:	20000b98 	.word	0x20000b98
 8008ea0:	20001070 	.word	0x20001070

08008ea4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ea8:	4b07      	ldr	r3, [pc, #28]	@ (8008ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d004      	beq.n	8008eba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008eb0:	4b05      	ldr	r3, [pc, #20]	@ (8008ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008eb6:	3201      	adds	r2, #1
 8008eb8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008eba:	4b03      	ldr	r3, [pc, #12]	@ (8008ec8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
	}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr
 8008ec8:	20000b94 	.word	0x20000b94

08008ecc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ed6:	4b21      	ldr	r3, [pc, #132]	@ (8008f5c <prvAddCurrentTaskToDelayedList+0x90>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008edc:	4b20      	ldr	r3, [pc, #128]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe f83a 	bl	8006f5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d10a      	bne.n	8008f06 <prvAddCurrentTaskToDelayedList+0x3a>
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d007      	beq.n	8008f06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3304      	adds	r3, #4
 8008efc:	4619      	mov	r1, r3
 8008efe:	4819      	ldr	r0, [pc, #100]	@ (8008f64 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f00:	f7fd ffcf 	bl	8006ea2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f04:	e026      	b.n	8008f54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f0e:	4b14      	ldr	r3, [pc, #80]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	68ba      	ldr	r2, [r7, #8]
 8008f14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d209      	bcs.n	8008f32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f1e:	4b12      	ldr	r3, [pc, #72]	@ (8008f68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b0f      	ldr	r3, [pc, #60]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3304      	adds	r3, #4
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7fd ffdd 	bl	8006eea <vListInsert>
}
 8008f30:	e010      	b.n	8008f54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f32:	4b0e      	ldr	r3, [pc, #56]	@ (8008f6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	4b0a      	ldr	r3, [pc, #40]	@ (8008f60 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4610      	mov	r0, r2
 8008f40:	f7fd ffd3 	bl	8006eea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f44:	4b0a      	ldr	r3, [pc, #40]	@ (8008f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d202      	bcs.n	8008f54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f4e:	4a08      	ldr	r2, [pc, #32]	@ (8008f70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	6013      	str	r3, [r2, #0]
}
 8008f54:	bf00      	nop
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	2000106c 	.word	0x2000106c
 8008f60:	20000b94 	.word	0x20000b94
 8008f64:	20001054 	.word	0x20001054
 8008f68:	20001024 	.word	0x20001024
 8008f6c:	20001020 	.word	0x20001020
 8008f70:	20001088 	.word	0x20001088

08008f74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b08a      	sub	sp, #40	@ 0x28
 8008f78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f7e:	f000 fb13 	bl	80095a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f82:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff8 <xTimerCreateTimerTask+0x84>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d021      	beq.n	8008fce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f92:	1d3a      	adds	r2, r7, #4
 8008f94:	f107 0108 	add.w	r1, r7, #8
 8008f98:	f107 030c 	add.w	r3, r7, #12
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fd ff39 	bl	8006e14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	9202      	str	r2, [sp, #8]
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	2302      	movs	r3, #2
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	460a      	mov	r2, r1
 8008fb4:	4911      	ldr	r1, [pc, #68]	@ (8008ffc <xTimerCreateTimerTask+0x88>)
 8008fb6:	4812      	ldr	r0, [pc, #72]	@ (8009000 <xTimerCreateTimerTask+0x8c>)
 8008fb8:	f7fe ff92 	bl	8007ee0 <xTaskCreateStatic>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	4a11      	ldr	r2, [pc, #68]	@ (8009004 <xTimerCreateTimerTask+0x90>)
 8008fc0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008fc2:	4b10      	ldr	r3, [pc, #64]	@ (8009004 <xTimerCreateTimerTask+0x90>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d10b      	bne.n	8008fec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	613b      	str	r3, [r7, #16]
}
 8008fe6:	bf00      	nop
 8008fe8:	bf00      	nop
 8008fea:	e7fd      	b.n	8008fe8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008fec:	697b      	ldr	r3, [r7, #20]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	200010c4 	.word	0x200010c4
 8008ffc:	0800d198 	.word	0x0800d198
 8009000:	08009141 	.word	0x08009141
 8009004:	200010c8 	.word	0x200010c8

08009008 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08a      	sub	sp, #40	@ 0x28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009016:	2300      	movs	r3, #0
 8009018:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d10b      	bne.n	8009038 <xTimerGenericCommand+0x30>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	623b      	str	r3, [r7, #32]
}
 8009032:	bf00      	nop
 8009034:	bf00      	nop
 8009036:	e7fd      	b.n	8009034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009038:	4b19      	ldr	r3, [pc, #100]	@ (80090a0 <xTimerGenericCommand+0x98>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d02a      	beq.n	8009096 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b05      	cmp	r3, #5
 8009050:	dc18      	bgt.n	8009084 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009052:	f7ff fdad 	bl	8008bb0 <xTaskGetSchedulerState>
 8009056:	4603      	mov	r3, r0
 8009058:	2b02      	cmp	r3, #2
 800905a:	d109      	bne.n	8009070 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800905c:	4b10      	ldr	r3, [pc, #64]	@ (80090a0 <xTimerGenericCommand+0x98>)
 800905e:	6818      	ldr	r0, [r3, #0]
 8009060:	f107 0110 	add.w	r1, r7, #16
 8009064:	2300      	movs	r3, #0
 8009066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009068:	f7fe f9a0 	bl	80073ac <xQueueGenericSend>
 800906c:	6278      	str	r0, [r7, #36]	@ 0x24
 800906e:	e012      	b.n	8009096 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009070:	4b0b      	ldr	r3, [pc, #44]	@ (80090a0 <xTimerGenericCommand+0x98>)
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	f107 0110 	add.w	r1, r7, #16
 8009078:	2300      	movs	r3, #0
 800907a:	2200      	movs	r2, #0
 800907c:	f7fe f996 	bl	80073ac <xQueueGenericSend>
 8009080:	6278      	str	r0, [r7, #36]	@ 0x24
 8009082:	e008      	b.n	8009096 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009084:	4b06      	ldr	r3, [pc, #24]	@ (80090a0 <xTimerGenericCommand+0x98>)
 8009086:	6818      	ldr	r0, [r3, #0]
 8009088:	f107 0110 	add.w	r1, r7, #16
 800908c:	2300      	movs	r3, #0
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	f7fe fa8e 	bl	80075b0 <xQueueGenericSendFromISR>
 8009094:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009098:	4618      	mov	r0, r3
 800909a:	3728      	adds	r7, #40	@ 0x28
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	200010c4 	.word	0x200010c4

080090a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ae:	4b23      	ldr	r3, [pc, #140]	@ (800913c <prvProcessExpiredTimer+0x98>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	3304      	adds	r3, #4
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fd ff4d 	bl	8006f5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d023      	beq.n	8009118 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	699a      	ldr	r2, [r3, #24]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	18d1      	adds	r1, r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	6978      	ldr	r0, [r7, #20]
 80090de:	f000 f8d5 	bl	800928c <prvInsertTimerInActiveList>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d020      	beq.n	800912a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090e8:	2300      	movs	r3, #0
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	2100      	movs	r1, #0
 80090f2:	6978      	ldr	r0, [r7, #20]
 80090f4:	f7ff ff88 	bl	8009008 <xTimerGenericCommand>
 80090f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d114      	bne.n	800912a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	60fb      	str	r3, [r7, #12]
}
 8009112:	bf00      	nop
 8009114:	bf00      	nop
 8009116:	e7fd      	b.n	8009114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800911e:	f023 0301 	bic.w	r3, r3, #1
 8009122:	b2da      	uxtb	r2, r3
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	6978      	ldr	r0, [r7, #20]
 8009130:	4798      	blx	r3
}
 8009132:	bf00      	nop
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	200010bc 	.word	0x200010bc

08009140 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009148:	f107 0308 	add.w	r3, r7, #8
 800914c:	4618      	mov	r0, r3
 800914e:	f000 f859 	bl	8009204 <prvGetNextExpireTime>
 8009152:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	4619      	mov	r1, r3
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 f805 	bl	8009168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800915e:	f000 f8d7 	bl	8009310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009162:	bf00      	nop
 8009164:	e7f0      	b.n	8009148 <prvTimerTask+0x8>
	...

08009168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009172:	f7ff f919 	bl	80083a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009176:	f107 0308 	add.w	r3, r7, #8
 800917a:	4618      	mov	r0, r3
 800917c:	f000 f866 	bl	800924c <prvSampleTimeNow>
 8009180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d130      	bne.n	80091ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10a      	bne.n	80091a4 <prvProcessTimerOrBlockTask+0x3c>
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	429a      	cmp	r2, r3
 8009194:	d806      	bhi.n	80091a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009196:	f7ff f915 	bl	80083c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800919a:	68f9      	ldr	r1, [r7, #12]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff ff81 	bl	80090a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80091a2:	e024      	b.n	80091ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d008      	beq.n	80091bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80091aa:	4b13      	ldr	r3, [pc, #76]	@ (80091f8 <prvProcessTimerOrBlockTask+0x90>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d101      	bne.n	80091b8 <prvProcessTimerOrBlockTask+0x50>
 80091b4:	2301      	movs	r3, #1
 80091b6:	e000      	b.n	80091ba <prvProcessTimerOrBlockTask+0x52>
 80091b8:	2300      	movs	r3, #0
 80091ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80091bc:	4b0f      	ldr	r3, [pc, #60]	@ (80091fc <prvProcessTimerOrBlockTask+0x94>)
 80091be:	6818      	ldr	r0, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	4619      	mov	r1, r3
 80091ca:	f7fe fe55 	bl	8007e78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80091ce:	f7ff f8f9 	bl	80083c4 <xTaskResumeAll>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10a      	bne.n	80091ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80091d8:	4b09      	ldr	r3, [pc, #36]	@ (8009200 <prvProcessTimerOrBlockTask+0x98>)
 80091da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091de:	601a      	str	r2, [r3, #0]
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	f3bf 8f6f 	isb	sy
}
 80091e8:	e001      	b.n	80091ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80091ea:	f7ff f8eb 	bl	80083c4 <xTaskResumeAll>
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	200010c0 	.word	0x200010c0
 80091fc:	200010c4 	.word	0x200010c4
 8009200:	e000ed04 	.word	0xe000ed04

08009204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800920c:	4b0e      	ldr	r3, [pc, #56]	@ (8009248 <prvGetNextExpireTime+0x44>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d101      	bne.n	800921a <prvGetNextExpireTime+0x16>
 8009216:	2201      	movs	r2, #1
 8009218:	e000      	b.n	800921c <prvGetNextExpireTime+0x18>
 800921a:	2200      	movs	r2, #0
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d105      	bne.n	8009234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009228:	4b07      	ldr	r3, [pc, #28]	@ (8009248 <prvGetNextExpireTime+0x44>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68db      	ldr	r3, [r3, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60fb      	str	r3, [r7, #12]
 8009232:	e001      	b.n	8009238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009234:	2300      	movs	r3, #0
 8009236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009238:	68fb      	ldr	r3, [r7, #12]
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	200010bc 	.word	0x200010bc

0800924c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009254:	f7ff f954 	bl	8008500 <xTaskGetTickCount>
 8009258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800925a:	4b0b      	ldr	r3, [pc, #44]	@ (8009288 <prvSampleTimeNow+0x3c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	429a      	cmp	r2, r3
 8009262:	d205      	bcs.n	8009270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009264:	f000 f93a 	bl	80094dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	e002      	b.n	8009276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009276:	4a04      	ldr	r2, [pc, #16]	@ (8009288 <prvSampleTimeNow+0x3c>)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800927c:	68fb      	ldr	r3, [r7, #12]
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	200010cc 	.word	0x200010cc

0800928c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
 8009298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d812      	bhi.n	80092d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	1ad2      	subs	r2, r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d302      	bcc.n	80092c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e01b      	b.n	80092fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80092c6:	4b10      	ldr	r3, [pc, #64]	@ (8009308 <prvInsertTimerInActiveList+0x7c>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3304      	adds	r3, #4
 80092ce:	4619      	mov	r1, r3
 80092d0:	4610      	mov	r0, r2
 80092d2:	f7fd fe0a 	bl	8006eea <vListInsert>
 80092d6:	e012      	b.n	80092fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d206      	bcs.n	80092ee <prvInsertTimerInActiveList+0x62>
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d302      	bcc.n	80092ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80092e8:	2301      	movs	r3, #1
 80092ea:	617b      	str	r3, [r7, #20]
 80092ec:	e007      	b.n	80092fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092ee:	4b07      	ldr	r3, [pc, #28]	@ (800930c <prvInsertTimerInActiveList+0x80>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f7fd fdf6 	bl	8006eea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80092fe:	697b      	ldr	r3, [r7, #20]
}
 8009300:	4618      	mov	r0, r3
 8009302:	3718      	adds	r7, #24
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	200010c0 	.word	0x200010c0
 800930c:	200010bc 	.word	0x200010bc

08009310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08e      	sub	sp, #56	@ 0x38
 8009314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009316:	e0ce      	b.n	80094b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	da19      	bge.n	8009352 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800931e:	1d3b      	adds	r3, r7, #4
 8009320:	3304      	adds	r3, #4
 8009322:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10b      	bne.n	8009342 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	61fb      	str	r3, [r7, #28]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009348:	6850      	ldr	r0, [r2, #4]
 800934a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800934c:	6892      	ldr	r2, [r2, #8]
 800934e:	4611      	mov	r1, r2
 8009350:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	f2c0 80ae 	blt.w	80094b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800935e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d004      	beq.n	8009370 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	3304      	adds	r3, #4
 800936a:	4618      	mov	r0, r3
 800936c:	f7fd fdf6 	bl	8006f5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009370:	463b      	mov	r3, r7
 8009372:	4618      	mov	r0, r3
 8009374:	f7ff ff6a 	bl	800924c <prvSampleTimeNow>
 8009378:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b09      	cmp	r3, #9
 800937e:	f200 8097 	bhi.w	80094b0 <prvProcessReceivedCommands+0x1a0>
 8009382:	a201      	add	r2, pc, #4	@ (adr r2, 8009388 <prvProcessReceivedCommands+0x78>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	080093b1 	.word	0x080093b1
 800938c:	080093b1 	.word	0x080093b1
 8009390:	080093b1 	.word	0x080093b1
 8009394:	08009427 	.word	0x08009427
 8009398:	0800943b 	.word	0x0800943b
 800939c:	08009487 	.word	0x08009487
 80093a0:	080093b1 	.word	0x080093b1
 80093a4:	080093b1 	.word	0x080093b1
 80093a8:	08009427 	.word	0x08009427
 80093ac:	0800943b 	.word	0x0800943b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80093b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093b6:	f043 0301 	orr.w	r3, r3, #1
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	18d1      	adds	r1, r2, r3
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093d0:	f7ff ff5c 	bl	800928c <prvInsertTimerInActiveList>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d06c      	beq.n	80094b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80093e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d061      	beq.n	80094b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093f4:	699b      	ldr	r3, [r3, #24]
 80093f6:	441a      	add	r2, r3
 80093f8:	2300      	movs	r3, #0
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	2300      	movs	r3, #0
 80093fe:	2100      	movs	r1, #0
 8009400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009402:	f7ff fe01 	bl	8009008 <xTimerGenericCommand>
 8009406:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d152      	bne.n	80094b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	61bb      	str	r3, [r7, #24]
}
 8009420:	bf00      	nop
 8009422:	bf00      	nop
 8009424:	e7fd      	b.n	8009422 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800942c:	f023 0301 	bic.w	r3, r3, #1
 8009430:	b2da      	uxtb	r2, r3
 8009432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009434:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009438:	e03d      	b.n	80094b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009440:	f043 0301 	orr.w	r3, r3, #1
 8009444:	b2da      	uxtb	r2, r3
 8009446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009448:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009450:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10b      	bne.n	8009472 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	617b      	str	r3, [r7, #20]
}
 800946c:	bf00      	nop
 800946e:	bf00      	nop
 8009470:	e7fd      	b.n	800946e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009474:	699a      	ldr	r2, [r3, #24]
 8009476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009478:	18d1      	adds	r1, r2, r3
 800947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800947e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009480:	f7ff ff04 	bl	800928c <prvInsertTimerInActiveList>
					break;
 8009484:	e017      	b.n	80094b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d103      	bne.n	800949c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009496:	f000 fbe7 	bl	8009c68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800949a:	e00c      	b.n	80094b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094a2:	f023 0301 	bic.w	r3, r3, #1
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80094ae:	e002      	b.n	80094b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80094b0:	bf00      	nop
 80094b2:	e000      	b.n	80094b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80094b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094b6:	4b08      	ldr	r3, [pc, #32]	@ (80094d8 <prvProcessReceivedCommands+0x1c8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	1d39      	adds	r1, r7, #4
 80094bc:	2200      	movs	r2, #0
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe f914 	bl	80076ec <xQueueReceive>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f47f af26 	bne.w	8009318 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80094cc:	bf00      	nop
 80094ce:	bf00      	nop
 80094d0:	3730      	adds	r7, #48	@ 0x30
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200010c4 	.word	0x200010c4

080094dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b088      	sub	sp, #32
 80094e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094e2:	e049      	b.n	8009578 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80094e4:	4b2e      	ldr	r3, [pc, #184]	@ (80095a0 <prvSwitchTimerLists+0xc4>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ee:	4b2c      	ldr	r3, [pc, #176]	@ (80095a0 <prvSwitchTimerLists+0xc4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3304      	adds	r3, #4
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7fd fd2d 	bl	8006f5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d02f      	beq.n	8009578 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	4413      	add	r3, r2
 8009520:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	d90e      	bls.n	8009548 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009536:	4b1a      	ldr	r3, [pc, #104]	@ (80095a0 <prvSwitchTimerLists+0xc4>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f7fd fcd2 	bl	8006eea <vListInsert>
 8009546:	e017      	b.n	8009578 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009548:	2300      	movs	r3, #0
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	2300      	movs	r3, #0
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	2100      	movs	r1, #0
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f7ff fd58 	bl	8009008 <xTimerGenericCommand>
 8009558:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10b      	bne.n	8009578 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	603b      	str	r3, [r7, #0]
}
 8009572:	bf00      	nop
 8009574:	bf00      	nop
 8009576:	e7fd      	b.n	8009574 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009578:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <prvSwitchTimerLists+0xc4>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1b0      	bne.n	80094e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009582:	4b07      	ldr	r3, [pc, #28]	@ (80095a0 <prvSwitchTimerLists+0xc4>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009588:	4b06      	ldr	r3, [pc, #24]	@ (80095a4 <prvSwitchTimerLists+0xc8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a04      	ldr	r2, [pc, #16]	@ (80095a0 <prvSwitchTimerLists+0xc4>)
 800958e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009590:	4a04      	ldr	r2, [pc, #16]	@ (80095a4 <prvSwitchTimerLists+0xc8>)
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6013      	str	r3, [r2, #0]
}
 8009596:	bf00      	nop
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	200010bc 	.word	0x200010bc
 80095a4:	200010c0 	.word	0x200010c0

080095a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80095ae:	f000 f96b 	bl	8009888 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80095b2:	4b15      	ldr	r3, [pc, #84]	@ (8009608 <prvCheckForValidListAndQueue+0x60>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d120      	bne.n	80095fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80095ba:	4814      	ldr	r0, [pc, #80]	@ (800960c <prvCheckForValidListAndQueue+0x64>)
 80095bc:	f7fd fc44 	bl	8006e48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80095c0:	4813      	ldr	r0, [pc, #76]	@ (8009610 <prvCheckForValidListAndQueue+0x68>)
 80095c2:	f7fd fc41 	bl	8006e48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80095c6:	4b13      	ldr	r3, [pc, #76]	@ (8009614 <prvCheckForValidListAndQueue+0x6c>)
 80095c8:	4a10      	ldr	r2, [pc, #64]	@ (800960c <prvCheckForValidListAndQueue+0x64>)
 80095ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80095cc:	4b12      	ldr	r3, [pc, #72]	@ (8009618 <prvCheckForValidListAndQueue+0x70>)
 80095ce:	4a10      	ldr	r2, [pc, #64]	@ (8009610 <prvCheckForValidListAndQueue+0x68>)
 80095d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80095d2:	2300      	movs	r3, #0
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	4b11      	ldr	r3, [pc, #68]	@ (800961c <prvCheckForValidListAndQueue+0x74>)
 80095d8:	4a11      	ldr	r2, [pc, #68]	@ (8009620 <prvCheckForValidListAndQueue+0x78>)
 80095da:	2110      	movs	r1, #16
 80095dc:	200a      	movs	r0, #10
 80095de:	f7fd fd51 	bl	8007084 <xQueueGenericCreateStatic>
 80095e2:	4603      	mov	r3, r0
 80095e4:	4a08      	ldr	r2, [pc, #32]	@ (8009608 <prvCheckForValidListAndQueue+0x60>)
 80095e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80095e8:	4b07      	ldr	r3, [pc, #28]	@ (8009608 <prvCheckForValidListAndQueue+0x60>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d005      	beq.n	80095fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80095f0:	4b05      	ldr	r3, [pc, #20]	@ (8009608 <prvCheckForValidListAndQueue+0x60>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	490b      	ldr	r1, [pc, #44]	@ (8009624 <prvCheckForValidListAndQueue+0x7c>)
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7fe fc14 	bl	8007e24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095fc:	f000 f976 	bl	80098ec <vPortExitCritical>
}
 8009600:	bf00      	nop
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	200010c4 	.word	0x200010c4
 800960c:	20001094 	.word	0x20001094
 8009610:	200010a8 	.word	0x200010a8
 8009614:	200010bc 	.word	0x200010bc
 8009618:	200010c0 	.word	0x200010c0
 800961c:	20001170 	.word	0x20001170
 8009620:	200010d0 	.word	0x200010d0
 8009624:	0800d1a0 	.word	0x0800d1a0

08009628 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3b04      	subs	r3, #4
 8009638:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	3b04      	subs	r3, #4
 8009646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	f023 0201 	bic.w	r2, r3, #1
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3b04      	subs	r3, #4
 8009656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009658:	4a0c      	ldr	r2, [pc, #48]	@ (800968c <pxPortInitialiseStack+0x64>)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3b14      	subs	r3, #20
 8009662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3b04      	subs	r3, #4
 800966e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f06f 0202 	mvn.w	r2, #2
 8009676:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	3b20      	subs	r3, #32
 800967c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800967e:	68fb      	ldr	r3, [r7, #12]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	08009691 	.word	0x08009691

08009690 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800969a:	4b13      	ldr	r3, [pc, #76]	@ (80096e8 <prvTaskExitError+0x58>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a2:	d00b      	beq.n	80096bc <prvTaskExitError+0x2c>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	60fb      	str	r3, [r7, #12]
}
 80096b6:	bf00      	nop
 80096b8:	bf00      	nop
 80096ba:	e7fd      	b.n	80096b8 <prvTaskExitError+0x28>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	60bb      	str	r3, [r7, #8]
}
 80096ce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096d0:	bf00      	nop
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0fc      	beq.n	80096d2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	20000018 	.word	0x20000018
 80096ec:	00000000 	.word	0x00000000

080096f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80096f0:	4b07      	ldr	r3, [pc, #28]	@ (8009710 <pxCurrentTCBConst2>)
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	6808      	ldr	r0, [r1, #0]
 80096f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	f380 8809 	msr	PSP, r0
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f04f 0000 	mov.w	r0, #0
 8009706:	f380 8811 	msr	BASEPRI, r0
 800970a:	4770      	bx	lr
 800970c:	f3af 8000 	nop.w

08009710 <pxCurrentTCBConst2>:
 8009710:	20000b94 	.word	0x20000b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop

08009718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009718:	4808      	ldr	r0, [pc, #32]	@ (800973c <prvPortStartFirstTask+0x24>)
 800971a:	6800      	ldr	r0, [r0, #0]
 800971c:	6800      	ldr	r0, [r0, #0]
 800971e:	f380 8808 	msr	MSP, r0
 8009722:	f04f 0000 	mov.w	r0, #0
 8009726:	f380 8814 	msr	CONTROL, r0
 800972a:	b662      	cpsie	i
 800972c:	b661      	cpsie	f
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	df00      	svc	0
 8009738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800973a:	bf00      	nop
 800973c:	e000ed08 	.word	0xe000ed08

08009740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009746:	4b47      	ldr	r3, [pc, #284]	@ (8009864 <xPortStartScheduler+0x124>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a47      	ldr	r2, [pc, #284]	@ (8009868 <xPortStartScheduler+0x128>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10b      	bne.n	8009768 <xPortStartScheduler+0x28>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	60fb      	str	r3, [r7, #12]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009768:	4b3e      	ldr	r3, [pc, #248]	@ (8009864 <xPortStartScheduler+0x124>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a3f      	ldr	r2, [pc, #252]	@ (800986c <xPortStartScheduler+0x12c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d10b      	bne.n	800978a <xPortStartScheduler+0x4a>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	613b      	str	r3, [r7, #16]
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	e7fd      	b.n	8009786 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800978a:	4b39      	ldr	r3, [pc, #228]	@ (8009870 <xPortStartScheduler+0x130>)
 800978c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	22ff      	movs	r2, #255	@ 0xff
 800979a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	4b31      	ldr	r3, [pc, #196]	@ (8009874 <xPortStartScheduler+0x134>)
 80097b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097b2:	4b31      	ldr	r3, [pc, #196]	@ (8009878 <xPortStartScheduler+0x138>)
 80097b4:	2207      	movs	r2, #7
 80097b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097b8:	e009      	b.n	80097ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80097ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009878 <xPortStartScheduler+0x138>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3b01      	subs	r3, #1
 80097c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009878 <xPortStartScheduler+0x138>)
 80097c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097c4:	78fb      	ldrb	r3, [r7, #3]
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ce:	78fb      	ldrb	r3, [r7, #3]
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097d6:	2b80      	cmp	r3, #128	@ 0x80
 80097d8:	d0ef      	beq.n	80097ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097da:	4b27      	ldr	r3, [pc, #156]	@ (8009878 <xPortStartScheduler+0x138>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f1c3 0307 	rsb	r3, r3, #7
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	d00b      	beq.n	80097fe <xPortStartScheduler+0xbe>
	__asm volatile
 80097e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097ea:	f383 8811 	msr	BASEPRI, r3
 80097ee:	f3bf 8f6f 	isb	sy
 80097f2:	f3bf 8f4f 	dsb	sy
 80097f6:	60bb      	str	r3, [r7, #8]
}
 80097f8:	bf00      	nop
 80097fa:	bf00      	nop
 80097fc:	e7fd      	b.n	80097fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80097fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009878 <xPortStartScheduler+0x138>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	4a1c      	ldr	r2, [pc, #112]	@ (8009878 <xPortStartScheduler+0x138>)
 8009806:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009808:	4b1b      	ldr	r3, [pc, #108]	@ (8009878 <xPortStartScheduler+0x138>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009810:	4a19      	ldr	r2, [pc, #100]	@ (8009878 <xPortStartScheduler+0x138>)
 8009812:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	b2da      	uxtb	r2, r3
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800981c:	4b17      	ldr	r3, [pc, #92]	@ (800987c <xPortStartScheduler+0x13c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a16      	ldr	r2, [pc, #88]	@ (800987c <xPortStartScheduler+0x13c>)
 8009822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009826:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009828:	4b14      	ldr	r3, [pc, #80]	@ (800987c <xPortStartScheduler+0x13c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a13      	ldr	r2, [pc, #76]	@ (800987c <xPortStartScheduler+0x13c>)
 800982e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009832:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009834:	f000 f8da 	bl	80099ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009838:	4b11      	ldr	r3, [pc, #68]	@ (8009880 <xPortStartScheduler+0x140>)
 800983a:	2200      	movs	r2, #0
 800983c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800983e:	f000 f8f9 	bl	8009a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009842:	4b10      	ldr	r3, [pc, #64]	@ (8009884 <xPortStartScheduler+0x144>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a0f      	ldr	r2, [pc, #60]	@ (8009884 <xPortStartScheduler+0x144>)
 8009848:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800984c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800984e:	f7ff ff63 	bl	8009718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009852:	f7fe ff1f 	bl	8008694 <vTaskSwitchContext>
	prvTaskExitError();
 8009856:	f7ff ff1b 	bl	8009690 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	e000ed00 	.word	0xe000ed00
 8009868:	410fc271 	.word	0x410fc271
 800986c:	410fc270 	.word	0x410fc270
 8009870:	e000e400 	.word	0xe000e400
 8009874:	200011c0 	.word	0x200011c0
 8009878:	200011c4 	.word	0x200011c4
 800987c:	e000ed20 	.word	0xe000ed20
 8009880:	20000018 	.word	0x20000018
 8009884:	e000ef34 	.word	0xe000ef34

08009888 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	607b      	str	r3, [r7, #4]
}
 80098a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098a2:	4b10      	ldr	r3, [pc, #64]	@ (80098e4 <vPortEnterCritical+0x5c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3301      	adds	r3, #1
 80098a8:	4a0e      	ldr	r2, [pc, #56]	@ (80098e4 <vPortEnterCritical+0x5c>)
 80098aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098ac:	4b0d      	ldr	r3, [pc, #52]	@ (80098e4 <vPortEnterCritical+0x5c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d110      	bne.n	80098d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098b4:	4b0c      	ldr	r3, [pc, #48]	@ (80098e8 <vPortEnterCritical+0x60>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00b      	beq.n	80098d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	603b      	str	r3, [r7, #0]
}
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <vPortEnterCritical+0x4a>
	}
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	20000018 	.word	0x20000018
 80098e8:	e000ed04 	.word	0xe000ed04

080098ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098f2:	4b12      	ldr	r3, [pc, #72]	@ (800993c <vPortExitCritical+0x50>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10b      	bne.n	8009912 <vPortExitCritical+0x26>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	607b      	str	r3, [r7, #4]
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	e7fd      	b.n	800990e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009912:	4b0a      	ldr	r3, [pc, #40]	@ (800993c <vPortExitCritical+0x50>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	3b01      	subs	r3, #1
 8009918:	4a08      	ldr	r2, [pc, #32]	@ (800993c <vPortExitCritical+0x50>)
 800991a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800991c:	4b07      	ldr	r3, [pc, #28]	@ (800993c <vPortExitCritical+0x50>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d105      	bne.n	8009930 <vPortExitCritical+0x44>
 8009924:	2300      	movs	r3, #0
 8009926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f383 8811 	msr	BASEPRI, r3
}
 800992e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	20000018 	.word	0x20000018

08009940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009940:	f3ef 8009 	mrs	r0, PSP
 8009944:	f3bf 8f6f 	isb	sy
 8009948:	4b15      	ldr	r3, [pc, #84]	@ (80099a0 <pxCurrentTCBConst>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	f01e 0f10 	tst.w	lr, #16
 8009950:	bf08      	it	eq
 8009952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	6010      	str	r0, [r2, #0]
 800995c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009960:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009964:	f380 8811 	msr	BASEPRI, r0
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f7fe fe90 	bl	8008694 <vTaskSwitchContext>
 8009974:	f04f 0000 	mov.w	r0, #0
 8009978:	f380 8811 	msr	BASEPRI, r0
 800997c:	bc09      	pop	{r0, r3}
 800997e:	6819      	ldr	r1, [r3, #0]
 8009980:	6808      	ldr	r0, [r1, #0]
 8009982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009986:	f01e 0f10 	tst.w	lr, #16
 800998a:	bf08      	it	eq
 800998c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009990:	f380 8809 	msr	PSP, r0
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	f3af 8000 	nop.w

080099a0 <pxCurrentTCBConst>:
 80099a0:	20000b94 	.word	0x20000b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099a4:	bf00      	nop
 80099a6:	bf00      	nop

080099a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099c2:	f7fe fdad 	bl	8008520 <xTaskIncrementTick>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099cc:	4b06      	ldr	r3, [pc, #24]	@ (80099e8 <xPortSysTickHandler+0x40>)
 80099ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099d2:	601a      	str	r2, [r3, #0]
 80099d4:	2300      	movs	r3, #0
 80099d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f383 8811 	msr	BASEPRI, r3
}
 80099de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80099e0:	bf00      	nop
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009a20 <vPortSetupTimerInterrupt+0x34>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009a24 <vPortSetupTimerInterrupt+0x38>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009a28 <vPortSetupTimerInterrupt+0x3c>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a0a      	ldr	r2, [pc, #40]	@ (8009a2c <vPortSetupTimerInterrupt+0x40>)
 8009a02:	fba2 2303 	umull	r2, r3, r2, r3
 8009a06:	099b      	lsrs	r3, r3, #6
 8009a08:	4a09      	ldr	r2, [pc, #36]	@ (8009a30 <vPortSetupTimerInterrupt+0x44>)
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a0e:	4b04      	ldr	r3, [pc, #16]	@ (8009a20 <vPortSetupTimerInterrupt+0x34>)
 8009a10:	2207      	movs	r2, #7
 8009a12:	601a      	str	r2, [r3, #0]
}
 8009a14:	bf00      	nop
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop
 8009a20:	e000e010 	.word	0xe000e010
 8009a24:	e000e018 	.word	0xe000e018
 8009a28:	2000000c 	.word	0x2000000c
 8009a2c:	10624dd3 	.word	0x10624dd3
 8009a30:	e000e014 	.word	0xe000e014

08009a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009a44 <vPortEnableVFP+0x10>
 8009a38:	6801      	ldr	r1, [r0, #0]
 8009a3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009a3e:	6001      	str	r1, [r0, #0]
 8009a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a42:	bf00      	nop
 8009a44:	e000ed88 	.word	0xe000ed88

08009a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009a4e:	f3ef 8305 	mrs	r3, IPSR
 8009a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b0f      	cmp	r3, #15
 8009a58:	d915      	bls.n	8009a86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009a5a:	4a18      	ldr	r2, [pc, #96]	@ (8009abc <vPortValidateInterruptPriority+0x74>)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a64:	4b16      	ldr	r3, [pc, #88]	@ (8009ac0 <vPortValidateInterruptPriority+0x78>)
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	7afa      	ldrb	r2, [r7, #11]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d20b      	bcs.n	8009a86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	607b      	str	r3, [r7, #4]
}
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	e7fd      	b.n	8009a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a86:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac4 <vPortValidateInterruptPriority+0x7c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ac8 <vPortValidateInterruptPriority+0x80>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d90b      	bls.n	8009aae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	603b      	str	r3, [r7, #0]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <vPortValidateInterruptPriority+0x62>
	}
 8009aae:	bf00      	nop
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	e000e3f0 	.word	0xe000e3f0
 8009ac0:	200011c0 	.word	0x200011c0
 8009ac4:	e000ed0c 	.word	0xe000ed0c
 8009ac8:	200011c4 	.word	0x200011c4

08009acc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	@ 0x28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ad8:	f7fe fc66 	bl	80083a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009adc:	4b5c      	ldr	r3, [pc, #368]	@ (8009c50 <pvPortMalloc+0x184>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ae4:	f000 f924 	bl	8009d30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8009c54 <pvPortMalloc+0x188>)
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4013      	ands	r3, r2
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f040 8095 	bne.w	8009c20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01e      	beq.n	8009b3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009afc:	2208      	movs	r2, #8
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4413      	add	r3, r2
 8009b02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f003 0307 	and.w	r3, r3, #7
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d015      	beq.n	8009b3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f023 0307 	bic.w	r3, r3, #7
 8009b14:	3308      	adds	r3, #8
 8009b16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f003 0307 	and.w	r3, r3, #7
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00b      	beq.n	8009b3a <pvPortMalloc+0x6e>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	617b      	str	r3, [r7, #20]
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop
 8009b38:	e7fd      	b.n	8009b36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d06f      	beq.n	8009c20 <pvPortMalloc+0x154>
 8009b40:	4b45      	ldr	r3, [pc, #276]	@ (8009c58 <pvPortMalloc+0x18c>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d86a      	bhi.n	8009c20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b4a:	4b44      	ldr	r3, [pc, #272]	@ (8009c5c <pvPortMalloc+0x190>)
 8009b4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009b4e:	4b43      	ldr	r3, [pc, #268]	@ (8009c5c <pvPortMalloc+0x190>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b54:	e004      	b.n	8009b60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d903      	bls.n	8009b72 <pvPortMalloc+0xa6>
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1f1      	bne.n	8009b56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b72:	4b37      	ldr	r3, [pc, #220]	@ (8009c50 <pvPortMalloc+0x184>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d051      	beq.n	8009c20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b7c:	6a3b      	ldr	r3, [r7, #32]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2208      	movs	r2, #8
 8009b82:	4413      	add	r3, r2
 8009b84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b90:	685a      	ldr	r2, [r3, #4]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	1ad2      	subs	r2, r2, r3
 8009b96:	2308      	movs	r3, #8
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d920      	bls.n	8009be0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	f003 0307 	and.w	r3, r3, #7
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00b      	beq.n	8009bc8 <pvPortMalloc+0xfc>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	613b      	str	r3, [r7, #16]
}
 8009bc2:	bf00      	nop
 8009bc4:	bf00      	nop
 8009bc6:	e7fd      	b.n	8009bc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	1ad2      	subs	r2, r2, r3
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009bda:	69b8      	ldr	r0, [r7, #24]
 8009bdc:	f000 f90a 	bl	8009df4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009be0:	4b1d      	ldr	r3, [pc, #116]	@ (8009c58 <pvPortMalloc+0x18c>)
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	1ad3      	subs	r3, r2, r3
 8009bea:	4a1b      	ldr	r2, [pc, #108]	@ (8009c58 <pvPortMalloc+0x18c>)
 8009bec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009bee:	4b1a      	ldr	r3, [pc, #104]	@ (8009c58 <pvPortMalloc+0x18c>)
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8009c60 <pvPortMalloc+0x194>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d203      	bcs.n	8009c02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009bfa:	4b17      	ldr	r3, [pc, #92]	@ (8009c58 <pvPortMalloc+0x18c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a18      	ldr	r2, [pc, #96]	@ (8009c60 <pvPortMalloc+0x194>)
 8009c00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c04:	685a      	ldr	r2, [r3, #4]
 8009c06:	4b13      	ldr	r3, [pc, #76]	@ (8009c54 <pvPortMalloc+0x188>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c16:	4b13      	ldr	r3, [pc, #76]	@ (8009c64 <pvPortMalloc+0x198>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	4a11      	ldr	r2, [pc, #68]	@ (8009c64 <pvPortMalloc+0x198>)
 8009c1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c20:	f7fe fbd0 	bl	80083c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d00b      	beq.n	8009c46 <pvPortMalloc+0x17a>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	60fb      	str	r3, [r7, #12]
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	e7fd      	b.n	8009c42 <pvPortMalloc+0x176>
	return pvReturn;
 8009c46:	69fb      	ldr	r3, [r7, #28]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3728      	adds	r7, #40	@ 0x28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20004dd0 	.word	0x20004dd0
 8009c54:	20004de4 	.word	0x20004de4
 8009c58:	20004dd4 	.word	0x20004dd4
 8009c5c:	20004dc8 	.word	0x20004dc8
 8009c60:	20004dd8 	.word	0x20004dd8
 8009c64:	20004ddc 	.word	0x20004ddc

08009c68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d04f      	beq.n	8009d1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c7a:	2308      	movs	r3, #8
 8009c7c:	425b      	negs	r3, r3
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	4413      	add	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	4b25      	ldr	r3, [pc, #148]	@ (8009d24 <vPortFree+0xbc>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4013      	ands	r3, r2
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10b      	bne.n	8009cae <vPortFree+0x46>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	60fb      	str	r3, [r7, #12]
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	e7fd      	b.n	8009caa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00b      	beq.n	8009cce <vPortFree+0x66>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	60bb      	str	r3, [r7, #8]
}
 8009cc8:	bf00      	nop
 8009cca:	bf00      	nop
 8009ccc:	e7fd      	b.n	8009cca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	4b14      	ldr	r3, [pc, #80]	@ (8009d24 <vPortFree+0xbc>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d01e      	beq.n	8009d1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d11a      	bne.n	8009d1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	685a      	ldr	r2, [r3, #4]
 8009ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8009d24 <vPortFree+0xbc>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	43db      	mvns	r3, r3
 8009cee:	401a      	ands	r2, r3
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009cf4:	f7fe fb58 	bl	80083a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8009d28 <vPortFree+0xc0>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4413      	add	r3, r2
 8009d02:	4a09      	ldr	r2, [pc, #36]	@ (8009d28 <vPortFree+0xc0>)
 8009d04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d06:	6938      	ldr	r0, [r7, #16]
 8009d08:	f000 f874 	bl	8009df4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d0c:	4b07      	ldr	r3, [pc, #28]	@ (8009d2c <vPortFree+0xc4>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3301      	adds	r3, #1
 8009d12:	4a06      	ldr	r2, [pc, #24]	@ (8009d2c <vPortFree+0xc4>)
 8009d14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d16:	f7fe fb55 	bl	80083c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d1a:	bf00      	nop
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20004de4 	.word	0x20004de4
 8009d28:	20004dd4 	.word	0x20004dd4
 8009d2c:	20004de0 	.word	0x20004de0

08009d30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009d3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d3c:	4b27      	ldr	r3, [pc, #156]	@ (8009ddc <prvHeapInit+0xac>)
 8009d3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00c      	beq.n	8009d64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3307      	adds	r3, #7
 8009d4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f023 0307 	bic.w	r3, r3, #7
 8009d56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	1ad3      	subs	r3, r2, r3
 8009d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009ddc <prvHeapInit+0xac>)
 8009d60:	4413      	add	r3, r2
 8009d62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d68:	4a1d      	ldr	r2, [pc, #116]	@ (8009de0 <prvHeapInit+0xb0>)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8009de0 <prvHeapInit+0xb0>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	4413      	add	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d7c:	2208      	movs	r2, #8
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1a9b      	subs	r3, r3, r2
 8009d82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 0307 	bic.w	r3, r3, #7
 8009d8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4a15      	ldr	r2, [pc, #84]	@ (8009de4 <prvHeapInit+0xb4>)
 8009d90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d92:	4b14      	ldr	r3, [pc, #80]	@ (8009de4 <prvHeapInit+0xb4>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2200      	movs	r2, #0
 8009d98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d9a:	4b12      	ldr	r3, [pc, #72]	@ (8009de4 <prvHeapInit+0xb4>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	1ad2      	subs	r2, r2, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009db0:	4b0c      	ldr	r3, [pc, #48]	@ (8009de4 <prvHeapInit+0xb4>)
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8009de8 <prvHeapInit+0xb8>)
 8009dbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	4a09      	ldr	r2, [pc, #36]	@ (8009dec <prvHeapInit+0xbc>)
 8009dc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dc8:	4b09      	ldr	r3, [pc, #36]	@ (8009df0 <prvHeapInit+0xc0>)
 8009dca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009dce:	601a      	str	r2, [r3, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	200011c8 	.word	0x200011c8
 8009de0:	20004dc8 	.word	0x20004dc8
 8009de4:	20004dd0 	.word	0x20004dd0
 8009de8:	20004dd8 	.word	0x20004dd8
 8009dec:	20004dd4 	.word	0x20004dd4
 8009df0:	20004de4 	.word	0x20004de4

08009df4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b085      	sub	sp, #20
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009dfc:	4b28      	ldr	r3, [pc, #160]	@ (8009ea0 <prvInsertBlockIntoFreeList+0xac>)
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e002      	b.n	8009e08 <prvInsertBlockIntoFreeList+0x14>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d8f7      	bhi.n	8009e02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	68ba      	ldr	r2, [r7, #8]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d108      	bne.n	8009e36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	441a      	add	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	441a      	add	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d118      	bne.n	8009e7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	4b15      	ldr	r3, [pc, #84]	@ (8009ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d00d      	beq.n	8009e72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	441a      	add	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	e008      	b.n	8009e84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea4 <prvInsertBlockIntoFreeList+0xb0>)
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	e003      	b.n	8009e84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d002      	beq.n	8009e92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20004dc8 	.word	0x20004dc8
 8009ea4:	20004dd0 	.word	0x20004dd0

08009ea8 <__cvt>:
 8009ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eac:	ec57 6b10 	vmov	r6, r7, d0
 8009eb0:	2f00      	cmp	r7, #0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	463b      	mov	r3, r7
 8009eb8:	bfbb      	ittet	lt
 8009eba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009ebe:	461f      	movlt	r7, r3
 8009ec0:	2300      	movge	r3, #0
 8009ec2:	232d      	movlt	r3, #45	@ 0x2d
 8009ec4:	700b      	strb	r3, [r1, #0]
 8009ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ec8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ecc:	4691      	mov	r9, r2
 8009ece:	f023 0820 	bic.w	r8, r3, #32
 8009ed2:	bfbc      	itt	lt
 8009ed4:	4632      	movlt	r2, r6
 8009ed6:	4616      	movlt	r6, r2
 8009ed8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009edc:	d005      	beq.n	8009eea <__cvt+0x42>
 8009ede:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009ee2:	d100      	bne.n	8009ee6 <__cvt+0x3e>
 8009ee4:	3401      	adds	r4, #1
 8009ee6:	2102      	movs	r1, #2
 8009ee8:	e000      	b.n	8009eec <__cvt+0x44>
 8009eea:	2103      	movs	r1, #3
 8009eec:	ab03      	add	r3, sp, #12
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	ab02      	add	r3, sp, #8
 8009ef2:	9300      	str	r3, [sp, #0]
 8009ef4:	ec47 6b10 	vmov	d0, r6, r7
 8009ef8:	4653      	mov	r3, sl
 8009efa:	4622      	mov	r2, r4
 8009efc:	f000 fedc 	bl	800acb8 <_dtoa_r>
 8009f00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f04:	4605      	mov	r5, r0
 8009f06:	d119      	bne.n	8009f3c <__cvt+0x94>
 8009f08:	f019 0f01 	tst.w	r9, #1
 8009f0c:	d00e      	beq.n	8009f2c <__cvt+0x84>
 8009f0e:	eb00 0904 	add.w	r9, r0, r4
 8009f12:	2200      	movs	r2, #0
 8009f14:	2300      	movs	r3, #0
 8009f16:	4630      	mov	r0, r6
 8009f18:	4639      	mov	r1, r7
 8009f1a:	f7f6 fddd 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f1e:	b108      	cbz	r0, 8009f24 <__cvt+0x7c>
 8009f20:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f24:	2230      	movs	r2, #48	@ 0x30
 8009f26:	9b03      	ldr	r3, [sp, #12]
 8009f28:	454b      	cmp	r3, r9
 8009f2a:	d31e      	bcc.n	8009f6a <__cvt+0xc2>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f30:	1b5b      	subs	r3, r3, r5
 8009f32:	4628      	mov	r0, r5
 8009f34:	6013      	str	r3, [r2, #0]
 8009f36:	b004      	add	sp, #16
 8009f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f40:	eb00 0904 	add.w	r9, r0, r4
 8009f44:	d1e5      	bne.n	8009f12 <__cvt+0x6a>
 8009f46:	7803      	ldrb	r3, [r0, #0]
 8009f48:	2b30      	cmp	r3, #48	@ 0x30
 8009f4a:	d10a      	bne.n	8009f62 <__cvt+0xba>
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2300      	movs	r3, #0
 8009f50:	4630      	mov	r0, r6
 8009f52:	4639      	mov	r1, r7
 8009f54:	f7f6 fdc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f58:	b918      	cbnz	r0, 8009f62 <__cvt+0xba>
 8009f5a:	f1c4 0401 	rsb	r4, r4, #1
 8009f5e:	f8ca 4000 	str.w	r4, [sl]
 8009f62:	f8da 3000 	ldr.w	r3, [sl]
 8009f66:	4499      	add	r9, r3
 8009f68:	e7d3      	b.n	8009f12 <__cvt+0x6a>
 8009f6a:	1c59      	adds	r1, r3, #1
 8009f6c:	9103      	str	r1, [sp, #12]
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	e7d9      	b.n	8009f26 <__cvt+0x7e>

08009f72 <__exponent>:
 8009f72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f74:	2900      	cmp	r1, #0
 8009f76:	bfba      	itte	lt
 8009f78:	4249      	neglt	r1, r1
 8009f7a:	232d      	movlt	r3, #45	@ 0x2d
 8009f7c:	232b      	movge	r3, #43	@ 0x2b
 8009f7e:	2909      	cmp	r1, #9
 8009f80:	7002      	strb	r2, [r0, #0]
 8009f82:	7043      	strb	r3, [r0, #1]
 8009f84:	dd29      	ble.n	8009fda <__exponent+0x68>
 8009f86:	f10d 0307 	add.w	r3, sp, #7
 8009f8a:	461d      	mov	r5, r3
 8009f8c:	270a      	movs	r7, #10
 8009f8e:	461a      	mov	r2, r3
 8009f90:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f94:	fb07 1416 	mls	r4, r7, r6, r1
 8009f98:	3430      	adds	r4, #48	@ 0x30
 8009f9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	2c63      	cmp	r4, #99	@ 0x63
 8009fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	dcf1      	bgt.n	8009f8e <__exponent+0x1c>
 8009faa:	3130      	adds	r1, #48	@ 0x30
 8009fac:	1e94      	subs	r4, r2, #2
 8009fae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009fb2:	1c41      	adds	r1, r0, #1
 8009fb4:	4623      	mov	r3, r4
 8009fb6:	42ab      	cmp	r3, r5
 8009fb8:	d30a      	bcc.n	8009fd0 <__exponent+0x5e>
 8009fba:	f10d 0309 	add.w	r3, sp, #9
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	42ac      	cmp	r4, r5
 8009fc2:	bf88      	it	hi
 8009fc4:	2300      	movhi	r3, #0
 8009fc6:	3302      	adds	r3, #2
 8009fc8:	4403      	add	r3, r0
 8009fca:	1a18      	subs	r0, r3, r0
 8009fcc:	b003      	add	sp, #12
 8009fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009fd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009fd8:	e7ed      	b.n	8009fb6 <__exponent+0x44>
 8009fda:	2330      	movs	r3, #48	@ 0x30
 8009fdc:	3130      	adds	r1, #48	@ 0x30
 8009fde:	7083      	strb	r3, [r0, #2]
 8009fe0:	70c1      	strb	r1, [r0, #3]
 8009fe2:	1d03      	adds	r3, r0, #4
 8009fe4:	e7f1      	b.n	8009fca <__exponent+0x58>
	...

08009fe8 <_printf_float>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	b08d      	sub	sp, #52	@ 0x34
 8009fee:	460c      	mov	r4, r1
 8009ff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	461f      	mov	r7, r3
 8009ff8:	4605      	mov	r5, r0
 8009ffa:	f000 fcef 	bl	800a9dc <_localeconv_r>
 8009ffe:	6803      	ldr	r3, [r0, #0]
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	4618      	mov	r0, r3
 800a004:	f7f6 f93c 	bl	8000280 <strlen>
 800a008:	2300      	movs	r3, #0
 800a00a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a00c:	f8d8 3000 	ldr.w	r3, [r8]
 800a010:	9005      	str	r0, [sp, #20]
 800a012:	3307      	adds	r3, #7
 800a014:	f023 0307 	bic.w	r3, r3, #7
 800a018:	f103 0208 	add.w	r2, r3, #8
 800a01c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a020:	f8d4 b000 	ldr.w	fp, [r4]
 800a024:	f8c8 2000 	str.w	r2, [r8]
 800a028:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a02c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	f8cd 8018 	str.w	r8, [sp, #24]
 800a036:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a03a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a03e:	4b9c      	ldr	r3, [pc, #624]	@ (800a2b0 <_printf_float+0x2c8>)
 800a040:	f04f 32ff 	mov.w	r2, #4294967295
 800a044:	f7f6 fd7a 	bl	8000b3c <__aeabi_dcmpun>
 800a048:	bb70      	cbnz	r0, 800a0a8 <_printf_float+0xc0>
 800a04a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a04e:	4b98      	ldr	r3, [pc, #608]	@ (800a2b0 <_printf_float+0x2c8>)
 800a050:	f04f 32ff 	mov.w	r2, #4294967295
 800a054:	f7f6 fd54 	bl	8000b00 <__aeabi_dcmple>
 800a058:	bb30      	cbnz	r0, 800a0a8 <_printf_float+0xc0>
 800a05a:	2200      	movs	r2, #0
 800a05c:	2300      	movs	r3, #0
 800a05e:	4640      	mov	r0, r8
 800a060:	4649      	mov	r1, r9
 800a062:	f7f6 fd43 	bl	8000aec <__aeabi_dcmplt>
 800a066:	b110      	cbz	r0, 800a06e <_printf_float+0x86>
 800a068:	232d      	movs	r3, #45	@ 0x2d
 800a06a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a06e:	4a91      	ldr	r2, [pc, #580]	@ (800a2b4 <_printf_float+0x2cc>)
 800a070:	4b91      	ldr	r3, [pc, #580]	@ (800a2b8 <_printf_float+0x2d0>)
 800a072:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a076:	bf8c      	ite	hi
 800a078:	4690      	movhi	r8, r2
 800a07a:	4698      	movls	r8, r3
 800a07c:	2303      	movs	r3, #3
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	f02b 0304 	bic.w	r3, fp, #4
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	f04f 0900 	mov.w	r9, #0
 800a08a:	9700      	str	r7, [sp, #0]
 800a08c:	4633      	mov	r3, r6
 800a08e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a090:	4621      	mov	r1, r4
 800a092:	4628      	mov	r0, r5
 800a094:	f000 f9d2 	bl	800a43c <_printf_common>
 800a098:	3001      	adds	r0, #1
 800a09a:	f040 808d 	bne.w	800a1b8 <_printf_float+0x1d0>
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a2:	b00d      	add	sp, #52	@ 0x34
 800a0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0a8:	4642      	mov	r2, r8
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	f7f6 fd44 	bl	8000b3c <__aeabi_dcmpun>
 800a0b4:	b140      	cbz	r0, 800a0c8 <_printf_float+0xe0>
 800a0b6:	464b      	mov	r3, r9
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	bfbc      	itt	lt
 800a0bc:	232d      	movlt	r3, #45	@ 0x2d
 800a0be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a0c2:	4a7e      	ldr	r2, [pc, #504]	@ (800a2bc <_printf_float+0x2d4>)
 800a0c4:	4b7e      	ldr	r3, [pc, #504]	@ (800a2c0 <_printf_float+0x2d8>)
 800a0c6:	e7d4      	b.n	800a072 <_printf_float+0x8a>
 800a0c8:	6863      	ldr	r3, [r4, #4]
 800a0ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a0ce:	9206      	str	r2, [sp, #24]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	d13b      	bne.n	800a14c <_printf_float+0x164>
 800a0d4:	2306      	movs	r3, #6
 800a0d6:	6063      	str	r3, [r4, #4]
 800a0d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a0dc:	2300      	movs	r3, #0
 800a0de:	6022      	str	r2, [r4, #0]
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a0e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a0e8:	ab09      	add	r3, sp, #36	@ 0x24
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	6861      	ldr	r1, [r4, #4]
 800a0ee:	ec49 8b10 	vmov	d0, r8, r9
 800a0f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a0f6:	4628      	mov	r0, r5
 800a0f8:	f7ff fed6 	bl	8009ea8 <__cvt>
 800a0fc:	9b06      	ldr	r3, [sp, #24]
 800a0fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a100:	2b47      	cmp	r3, #71	@ 0x47
 800a102:	4680      	mov	r8, r0
 800a104:	d129      	bne.n	800a15a <_printf_float+0x172>
 800a106:	1cc8      	adds	r0, r1, #3
 800a108:	db02      	blt.n	800a110 <_printf_float+0x128>
 800a10a:	6863      	ldr	r3, [r4, #4]
 800a10c:	4299      	cmp	r1, r3
 800a10e:	dd41      	ble.n	800a194 <_printf_float+0x1ac>
 800a110:	f1aa 0a02 	sub.w	sl, sl, #2
 800a114:	fa5f fa8a 	uxtb.w	sl, sl
 800a118:	3901      	subs	r1, #1
 800a11a:	4652      	mov	r2, sl
 800a11c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a120:	9109      	str	r1, [sp, #36]	@ 0x24
 800a122:	f7ff ff26 	bl	8009f72 <__exponent>
 800a126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a128:	1813      	adds	r3, r2, r0
 800a12a:	2a01      	cmp	r2, #1
 800a12c:	4681      	mov	r9, r0
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	dc02      	bgt.n	800a138 <_printf_float+0x150>
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	07d2      	lsls	r2, r2, #31
 800a136:	d501      	bpl.n	800a13c <_printf_float+0x154>
 800a138:	3301      	adds	r3, #1
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a140:	2b00      	cmp	r3, #0
 800a142:	d0a2      	beq.n	800a08a <_printf_float+0xa2>
 800a144:	232d      	movs	r3, #45	@ 0x2d
 800a146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a14a:	e79e      	b.n	800a08a <_printf_float+0xa2>
 800a14c:	9a06      	ldr	r2, [sp, #24]
 800a14e:	2a47      	cmp	r2, #71	@ 0x47
 800a150:	d1c2      	bne.n	800a0d8 <_printf_float+0xf0>
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1c0      	bne.n	800a0d8 <_printf_float+0xf0>
 800a156:	2301      	movs	r3, #1
 800a158:	e7bd      	b.n	800a0d6 <_printf_float+0xee>
 800a15a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a15e:	d9db      	bls.n	800a118 <_printf_float+0x130>
 800a160:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a164:	d118      	bne.n	800a198 <_printf_float+0x1b0>
 800a166:	2900      	cmp	r1, #0
 800a168:	6863      	ldr	r3, [r4, #4]
 800a16a:	dd0b      	ble.n	800a184 <_printf_float+0x19c>
 800a16c:	6121      	str	r1, [r4, #16]
 800a16e:	b913      	cbnz	r3, 800a176 <_printf_float+0x18e>
 800a170:	6822      	ldr	r2, [r4, #0]
 800a172:	07d0      	lsls	r0, r2, #31
 800a174:	d502      	bpl.n	800a17c <_printf_float+0x194>
 800a176:	3301      	adds	r3, #1
 800a178:	440b      	add	r3, r1
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a17e:	f04f 0900 	mov.w	r9, #0
 800a182:	e7db      	b.n	800a13c <_printf_float+0x154>
 800a184:	b913      	cbnz	r3, 800a18c <_printf_float+0x1a4>
 800a186:	6822      	ldr	r2, [r4, #0]
 800a188:	07d2      	lsls	r2, r2, #31
 800a18a:	d501      	bpl.n	800a190 <_printf_float+0x1a8>
 800a18c:	3302      	adds	r3, #2
 800a18e:	e7f4      	b.n	800a17a <_printf_float+0x192>
 800a190:	2301      	movs	r3, #1
 800a192:	e7f2      	b.n	800a17a <_printf_float+0x192>
 800a194:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a19a:	4299      	cmp	r1, r3
 800a19c:	db05      	blt.n	800a1aa <_printf_float+0x1c2>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	6121      	str	r1, [r4, #16]
 800a1a2:	07d8      	lsls	r0, r3, #31
 800a1a4:	d5ea      	bpl.n	800a17c <_printf_float+0x194>
 800a1a6:	1c4b      	adds	r3, r1, #1
 800a1a8:	e7e7      	b.n	800a17a <_printf_float+0x192>
 800a1aa:	2900      	cmp	r1, #0
 800a1ac:	bfd4      	ite	le
 800a1ae:	f1c1 0202 	rsble	r2, r1, #2
 800a1b2:	2201      	movgt	r2, #1
 800a1b4:	4413      	add	r3, r2
 800a1b6:	e7e0      	b.n	800a17a <_printf_float+0x192>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	055a      	lsls	r2, r3, #21
 800a1bc:	d407      	bmi.n	800a1ce <_printf_float+0x1e6>
 800a1be:	6923      	ldr	r3, [r4, #16]
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	47b8      	blx	r7
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d12b      	bne.n	800a224 <_printf_float+0x23c>
 800a1cc:	e767      	b.n	800a09e <_printf_float+0xb6>
 800a1ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a1d2:	f240 80dd 	bls.w	800a390 <_printf_float+0x3a8>
 800a1d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f7f6 fc7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	d033      	beq.n	800a24e <_printf_float+0x266>
 800a1e6:	4a37      	ldr	r2, [pc, #220]	@ (800a2c4 <_printf_float+0x2dc>)
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	47b8      	blx	r7
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	f43f af54 	beq.w	800a09e <_printf_float+0xb6>
 800a1f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a1fa:	4543      	cmp	r3, r8
 800a1fc:	db02      	blt.n	800a204 <_printf_float+0x21c>
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	07d8      	lsls	r0, r3, #31
 800a202:	d50f      	bpl.n	800a224 <_printf_float+0x23c>
 800a204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a208:	4631      	mov	r1, r6
 800a20a:	4628      	mov	r0, r5
 800a20c:	47b8      	blx	r7
 800a20e:	3001      	adds	r0, #1
 800a210:	f43f af45 	beq.w	800a09e <_printf_float+0xb6>
 800a214:	f04f 0900 	mov.w	r9, #0
 800a218:	f108 38ff 	add.w	r8, r8, #4294967295
 800a21c:	f104 0a1a 	add.w	sl, r4, #26
 800a220:	45c8      	cmp	r8, r9
 800a222:	dc09      	bgt.n	800a238 <_printf_float+0x250>
 800a224:	6823      	ldr	r3, [r4, #0]
 800a226:	079b      	lsls	r3, r3, #30
 800a228:	f100 8103 	bmi.w	800a432 <_printf_float+0x44a>
 800a22c:	68e0      	ldr	r0, [r4, #12]
 800a22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a230:	4298      	cmp	r0, r3
 800a232:	bfb8      	it	lt
 800a234:	4618      	movlt	r0, r3
 800a236:	e734      	b.n	800a0a2 <_printf_float+0xba>
 800a238:	2301      	movs	r3, #1
 800a23a:	4652      	mov	r2, sl
 800a23c:	4631      	mov	r1, r6
 800a23e:	4628      	mov	r0, r5
 800a240:	47b8      	blx	r7
 800a242:	3001      	adds	r0, #1
 800a244:	f43f af2b 	beq.w	800a09e <_printf_float+0xb6>
 800a248:	f109 0901 	add.w	r9, r9, #1
 800a24c:	e7e8      	b.n	800a220 <_printf_float+0x238>
 800a24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a250:	2b00      	cmp	r3, #0
 800a252:	dc39      	bgt.n	800a2c8 <_printf_float+0x2e0>
 800a254:	4a1b      	ldr	r2, [pc, #108]	@ (800a2c4 <_printf_float+0x2dc>)
 800a256:	2301      	movs	r3, #1
 800a258:	4631      	mov	r1, r6
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b8      	blx	r7
 800a25e:	3001      	adds	r0, #1
 800a260:	f43f af1d 	beq.w	800a09e <_printf_float+0xb6>
 800a264:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a268:	ea59 0303 	orrs.w	r3, r9, r3
 800a26c:	d102      	bne.n	800a274 <_printf_float+0x28c>
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	07d9      	lsls	r1, r3, #31
 800a272:	d5d7      	bpl.n	800a224 <_printf_float+0x23c>
 800a274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a278:	4631      	mov	r1, r6
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b8      	blx	r7
 800a27e:	3001      	adds	r0, #1
 800a280:	f43f af0d 	beq.w	800a09e <_printf_float+0xb6>
 800a284:	f04f 0a00 	mov.w	sl, #0
 800a288:	f104 0b1a 	add.w	fp, r4, #26
 800a28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28e:	425b      	negs	r3, r3
 800a290:	4553      	cmp	r3, sl
 800a292:	dc01      	bgt.n	800a298 <_printf_float+0x2b0>
 800a294:	464b      	mov	r3, r9
 800a296:	e793      	b.n	800a1c0 <_printf_float+0x1d8>
 800a298:	2301      	movs	r3, #1
 800a29a:	465a      	mov	r2, fp
 800a29c:	4631      	mov	r1, r6
 800a29e:	4628      	mov	r0, r5
 800a2a0:	47b8      	blx	r7
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f43f aefb 	beq.w	800a09e <_printf_float+0xb6>
 800a2a8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ac:	e7ee      	b.n	800a28c <_printf_float+0x2a4>
 800a2ae:	bf00      	nop
 800a2b0:	7fefffff 	.word	0x7fefffff
 800a2b4:	0800d374 	.word	0x0800d374
 800a2b8:	0800d370 	.word	0x0800d370
 800a2bc:	0800d37c 	.word	0x0800d37c
 800a2c0:	0800d378 	.word	0x0800d378
 800a2c4:	0800d380 	.word	0x0800d380
 800a2c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2ce:	4553      	cmp	r3, sl
 800a2d0:	bfa8      	it	ge
 800a2d2:	4653      	movge	r3, sl
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	4699      	mov	r9, r3
 800a2d8:	dc36      	bgt.n	800a348 <_printf_float+0x360>
 800a2da:	f04f 0b00 	mov.w	fp, #0
 800a2de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2e2:	f104 021a 	add.w	r2, r4, #26
 800a2e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a2e8:	9306      	str	r3, [sp, #24]
 800a2ea:	eba3 0309 	sub.w	r3, r3, r9
 800a2ee:	455b      	cmp	r3, fp
 800a2f0:	dc31      	bgt.n	800a356 <_printf_float+0x36e>
 800a2f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2f4:	459a      	cmp	sl, r3
 800a2f6:	dc3a      	bgt.n	800a36e <_printf_float+0x386>
 800a2f8:	6823      	ldr	r3, [r4, #0]
 800a2fa:	07da      	lsls	r2, r3, #31
 800a2fc:	d437      	bmi.n	800a36e <_printf_float+0x386>
 800a2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a300:	ebaa 0903 	sub.w	r9, sl, r3
 800a304:	9b06      	ldr	r3, [sp, #24]
 800a306:	ebaa 0303 	sub.w	r3, sl, r3
 800a30a:	4599      	cmp	r9, r3
 800a30c:	bfa8      	it	ge
 800a30e:	4699      	movge	r9, r3
 800a310:	f1b9 0f00 	cmp.w	r9, #0
 800a314:	dc33      	bgt.n	800a37e <_printf_float+0x396>
 800a316:	f04f 0800 	mov.w	r8, #0
 800a31a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a31e:	f104 0b1a 	add.w	fp, r4, #26
 800a322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a324:	ebaa 0303 	sub.w	r3, sl, r3
 800a328:	eba3 0309 	sub.w	r3, r3, r9
 800a32c:	4543      	cmp	r3, r8
 800a32e:	f77f af79 	ble.w	800a224 <_printf_float+0x23c>
 800a332:	2301      	movs	r3, #1
 800a334:	465a      	mov	r2, fp
 800a336:	4631      	mov	r1, r6
 800a338:	4628      	mov	r0, r5
 800a33a:	47b8      	blx	r7
 800a33c:	3001      	adds	r0, #1
 800a33e:	f43f aeae 	beq.w	800a09e <_printf_float+0xb6>
 800a342:	f108 0801 	add.w	r8, r8, #1
 800a346:	e7ec      	b.n	800a322 <_printf_float+0x33a>
 800a348:	4642      	mov	r2, r8
 800a34a:	4631      	mov	r1, r6
 800a34c:	4628      	mov	r0, r5
 800a34e:	47b8      	blx	r7
 800a350:	3001      	adds	r0, #1
 800a352:	d1c2      	bne.n	800a2da <_printf_float+0x2f2>
 800a354:	e6a3      	b.n	800a09e <_printf_float+0xb6>
 800a356:	2301      	movs	r3, #1
 800a358:	4631      	mov	r1, r6
 800a35a:	4628      	mov	r0, r5
 800a35c:	9206      	str	r2, [sp, #24]
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	f43f ae9c 	beq.w	800a09e <_printf_float+0xb6>
 800a366:	9a06      	ldr	r2, [sp, #24]
 800a368:	f10b 0b01 	add.w	fp, fp, #1
 800a36c:	e7bb      	b.n	800a2e6 <_printf_float+0x2fe>
 800a36e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a372:	4631      	mov	r1, r6
 800a374:	4628      	mov	r0, r5
 800a376:	47b8      	blx	r7
 800a378:	3001      	adds	r0, #1
 800a37a:	d1c0      	bne.n	800a2fe <_printf_float+0x316>
 800a37c:	e68f      	b.n	800a09e <_printf_float+0xb6>
 800a37e:	9a06      	ldr	r2, [sp, #24]
 800a380:	464b      	mov	r3, r9
 800a382:	4442      	add	r2, r8
 800a384:	4631      	mov	r1, r6
 800a386:	4628      	mov	r0, r5
 800a388:	47b8      	blx	r7
 800a38a:	3001      	adds	r0, #1
 800a38c:	d1c3      	bne.n	800a316 <_printf_float+0x32e>
 800a38e:	e686      	b.n	800a09e <_printf_float+0xb6>
 800a390:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a394:	f1ba 0f01 	cmp.w	sl, #1
 800a398:	dc01      	bgt.n	800a39e <_printf_float+0x3b6>
 800a39a:	07db      	lsls	r3, r3, #31
 800a39c:	d536      	bpl.n	800a40c <_printf_float+0x424>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4642      	mov	r2, r8
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b8      	blx	r7
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	f43f ae78 	beq.w	800a09e <_printf_float+0xb6>
 800a3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b8      	blx	r7
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	f43f ae70 	beq.w	800a09e <_printf_float+0xb6>
 800a3be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3ca:	f7f6 fb85 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3ce:	b9c0      	cbnz	r0, 800a402 <_printf_float+0x41a>
 800a3d0:	4653      	mov	r3, sl
 800a3d2:	f108 0201 	add.w	r2, r8, #1
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4628      	mov	r0, r5
 800a3da:	47b8      	blx	r7
 800a3dc:	3001      	adds	r0, #1
 800a3de:	d10c      	bne.n	800a3fa <_printf_float+0x412>
 800a3e0:	e65d      	b.n	800a09e <_printf_float+0xb6>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	465a      	mov	r2, fp
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f43f ae56 	beq.w	800a09e <_printf_float+0xb6>
 800a3f2:	f108 0801 	add.w	r8, r8, #1
 800a3f6:	45d0      	cmp	r8, sl
 800a3f8:	dbf3      	blt.n	800a3e2 <_printf_float+0x3fa>
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a400:	e6df      	b.n	800a1c2 <_printf_float+0x1da>
 800a402:	f04f 0800 	mov.w	r8, #0
 800a406:	f104 0b1a 	add.w	fp, r4, #26
 800a40a:	e7f4      	b.n	800a3f6 <_printf_float+0x40e>
 800a40c:	2301      	movs	r3, #1
 800a40e:	4642      	mov	r2, r8
 800a410:	e7e1      	b.n	800a3d6 <_printf_float+0x3ee>
 800a412:	2301      	movs	r3, #1
 800a414:	464a      	mov	r2, r9
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f ae3e 	beq.w	800a09e <_printf_float+0xb6>
 800a422:	f108 0801 	add.w	r8, r8, #1
 800a426:	68e3      	ldr	r3, [r4, #12]
 800a428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a42a:	1a5b      	subs	r3, r3, r1
 800a42c:	4543      	cmp	r3, r8
 800a42e:	dcf0      	bgt.n	800a412 <_printf_float+0x42a>
 800a430:	e6fc      	b.n	800a22c <_printf_float+0x244>
 800a432:	f04f 0800 	mov.w	r8, #0
 800a436:	f104 0919 	add.w	r9, r4, #25
 800a43a:	e7f4      	b.n	800a426 <_printf_float+0x43e>

0800a43c <_printf_common>:
 800a43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a440:	4616      	mov	r6, r2
 800a442:	4698      	mov	r8, r3
 800a444:	688a      	ldr	r2, [r1, #8]
 800a446:	690b      	ldr	r3, [r1, #16]
 800a448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a44c:	4293      	cmp	r3, r2
 800a44e:	bfb8      	it	lt
 800a450:	4613      	movlt	r3, r2
 800a452:	6033      	str	r3, [r6, #0]
 800a454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a458:	4607      	mov	r7, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	b10a      	cbz	r2, 800a462 <_printf_common+0x26>
 800a45e:	3301      	adds	r3, #1
 800a460:	6033      	str	r3, [r6, #0]
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	0699      	lsls	r1, r3, #26
 800a466:	bf42      	ittt	mi
 800a468:	6833      	ldrmi	r3, [r6, #0]
 800a46a:	3302      	addmi	r3, #2
 800a46c:	6033      	strmi	r3, [r6, #0]
 800a46e:	6825      	ldr	r5, [r4, #0]
 800a470:	f015 0506 	ands.w	r5, r5, #6
 800a474:	d106      	bne.n	800a484 <_printf_common+0x48>
 800a476:	f104 0a19 	add.w	sl, r4, #25
 800a47a:	68e3      	ldr	r3, [r4, #12]
 800a47c:	6832      	ldr	r2, [r6, #0]
 800a47e:	1a9b      	subs	r3, r3, r2
 800a480:	42ab      	cmp	r3, r5
 800a482:	dc26      	bgt.n	800a4d2 <_printf_common+0x96>
 800a484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a488:	6822      	ldr	r2, [r4, #0]
 800a48a:	3b00      	subs	r3, #0
 800a48c:	bf18      	it	ne
 800a48e:	2301      	movne	r3, #1
 800a490:	0692      	lsls	r2, r2, #26
 800a492:	d42b      	bmi.n	800a4ec <_printf_common+0xb0>
 800a494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a498:	4641      	mov	r1, r8
 800a49a:	4638      	mov	r0, r7
 800a49c:	47c8      	blx	r9
 800a49e:	3001      	adds	r0, #1
 800a4a0:	d01e      	beq.n	800a4e0 <_printf_common+0xa4>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	6922      	ldr	r2, [r4, #16]
 800a4a6:	f003 0306 	and.w	r3, r3, #6
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	bf02      	ittt	eq
 800a4ae:	68e5      	ldreq	r5, [r4, #12]
 800a4b0:	6833      	ldreq	r3, [r6, #0]
 800a4b2:	1aed      	subeq	r5, r5, r3
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	bf0c      	ite	eq
 800a4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4bc:	2500      	movne	r5, #0
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	bfc4      	itt	gt
 800a4c2:	1a9b      	subgt	r3, r3, r2
 800a4c4:	18ed      	addgt	r5, r5, r3
 800a4c6:	2600      	movs	r6, #0
 800a4c8:	341a      	adds	r4, #26
 800a4ca:	42b5      	cmp	r5, r6
 800a4cc:	d11a      	bne.n	800a504 <_printf_common+0xc8>
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	e008      	b.n	800a4e4 <_printf_common+0xa8>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	4641      	mov	r1, r8
 800a4d8:	4638      	mov	r0, r7
 800a4da:	47c8      	blx	r9
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d103      	bne.n	800a4e8 <_printf_common+0xac>
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e8:	3501      	adds	r5, #1
 800a4ea:	e7c6      	b.n	800a47a <_printf_common+0x3e>
 800a4ec:	18e1      	adds	r1, r4, r3
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	2030      	movs	r0, #48	@ 0x30
 800a4f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4f6:	4422      	add	r2, r4
 800a4f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a500:	3302      	adds	r3, #2
 800a502:	e7c7      	b.n	800a494 <_printf_common+0x58>
 800a504:	2301      	movs	r3, #1
 800a506:	4622      	mov	r2, r4
 800a508:	4641      	mov	r1, r8
 800a50a:	4638      	mov	r0, r7
 800a50c:	47c8      	blx	r9
 800a50e:	3001      	adds	r0, #1
 800a510:	d0e6      	beq.n	800a4e0 <_printf_common+0xa4>
 800a512:	3601      	adds	r6, #1
 800a514:	e7d9      	b.n	800a4ca <_printf_common+0x8e>
	...

0800a518 <_printf_i>:
 800a518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a51c:	7e0f      	ldrb	r7, [r1, #24]
 800a51e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a520:	2f78      	cmp	r7, #120	@ 0x78
 800a522:	4691      	mov	r9, r2
 800a524:	4680      	mov	r8, r0
 800a526:	460c      	mov	r4, r1
 800a528:	469a      	mov	sl, r3
 800a52a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a52e:	d807      	bhi.n	800a540 <_printf_i+0x28>
 800a530:	2f62      	cmp	r7, #98	@ 0x62
 800a532:	d80a      	bhi.n	800a54a <_printf_i+0x32>
 800a534:	2f00      	cmp	r7, #0
 800a536:	f000 80d1 	beq.w	800a6dc <_printf_i+0x1c4>
 800a53a:	2f58      	cmp	r7, #88	@ 0x58
 800a53c:	f000 80b8 	beq.w	800a6b0 <_printf_i+0x198>
 800a540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a548:	e03a      	b.n	800a5c0 <_printf_i+0xa8>
 800a54a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a54e:	2b15      	cmp	r3, #21
 800a550:	d8f6      	bhi.n	800a540 <_printf_i+0x28>
 800a552:	a101      	add	r1, pc, #4	@ (adr r1, 800a558 <_printf_i+0x40>)
 800a554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a558:	0800a5b1 	.word	0x0800a5b1
 800a55c:	0800a5c5 	.word	0x0800a5c5
 800a560:	0800a541 	.word	0x0800a541
 800a564:	0800a541 	.word	0x0800a541
 800a568:	0800a541 	.word	0x0800a541
 800a56c:	0800a541 	.word	0x0800a541
 800a570:	0800a5c5 	.word	0x0800a5c5
 800a574:	0800a541 	.word	0x0800a541
 800a578:	0800a541 	.word	0x0800a541
 800a57c:	0800a541 	.word	0x0800a541
 800a580:	0800a541 	.word	0x0800a541
 800a584:	0800a6c3 	.word	0x0800a6c3
 800a588:	0800a5ef 	.word	0x0800a5ef
 800a58c:	0800a67d 	.word	0x0800a67d
 800a590:	0800a541 	.word	0x0800a541
 800a594:	0800a541 	.word	0x0800a541
 800a598:	0800a6e5 	.word	0x0800a6e5
 800a59c:	0800a541 	.word	0x0800a541
 800a5a0:	0800a5ef 	.word	0x0800a5ef
 800a5a4:	0800a541 	.word	0x0800a541
 800a5a8:	0800a541 	.word	0x0800a541
 800a5ac:	0800a685 	.word	0x0800a685
 800a5b0:	6833      	ldr	r3, [r6, #0]
 800a5b2:	1d1a      	adds	r2, r3, #4
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	6032      	str	r2, [r6, #0]
 800a5b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e09c      	b.n	800a6fe <_printf_i+0x1e6>
 800a5c4:	6833      	ldr	r3, [r6, #0]
 800a5c6:	6820      	ldr	r0, [r4, #0]
 800a5c8:	1d19      	adds	r1, r3, #4
 800a5ca:	6031      	str	r1, [r6, #0]
 800a5cc:	0606      	lsls	r6, r0, #24
 800a5ce:	d501      	bpl.n	800a5d4 <_printf_i+0xbc>
 800a5d0:	681d      	ldr	r5, [r3, #0]
 800a5d2:	e003      	b.n	800a5dc <_printf_i+0xc4>
 800a5d4:	0645      	lsls	r5, r0, #25
 800a5d6:	d5fb      	bpl.n	800a5d0 <_printf_i+0xb8>
 800a5d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5dc:	2d00      	cmp	r5, #0
 800a5de:	da03      	bge.n	800a5e8 <_printf_i+0xd0>
 800a5e0:	232d      	movs	r3, #45	@ 0x2d
 800a5e2:	426d      	negs	r5, r5
 800a5e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5e8:	4858      	ldr	r0, [pc, #352]	@ (800a74c <_printf_i+0x234>)
 800a5ea:	230a      	movs	r3, #10
 800a5ec:	e011      	b.n	800a612 <_printf_i+0xfa>
 800a5ee:	6821      	ldr	r1, [r4, #0]
 800a5f0:	6833      	ldr	r3, [r6, #0]
 800a5f2:	0608      	lsls	r0, r1, #24
 800a5f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5f8:	d402      	bmi.n	800a600 <_printf_i+0xe8>
 800a5fa:	0649      	lsls	r1, r1, #25
 800a5fc:	bf48      	it	mi
 800a5fe:	b2ad      	uxthmi	r5, r5
 800a600:	2f6f      	cmp	r7, #111	@ 0x6f
 800a602:	4852      	ldr	r0, [pc, #328]	@ (800a74c <_printf_i+0x234>)
 800a604:	6033      	str	r3, [r6, #0]
 800a606:	bf14      	ite	ne
 800a608:	230a      	movne	r3, #10
 800a60a:	2308      	moveq	r3, #8
 800a60c:	2100      	movs	r1, #0
 800a60e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a612:	6866      	ldr	r6, [r4, #4]
 800a614:	60a6      	str	r6, [r4, #8]
 800a616:	2e00      	cmp	r6, #0
 800a618:	db05      	blt.n	800a626 <_printf_i+0x10e>
 800a61a:	6821      	ldr	r1, [r4, #0]
 800a61c:	432e      	orrs	r6, r5
 800a61e:	f021 0104 	bic.w	r1, r1, #4
 800a622:	6021      	str	r1, [r4, #0]
 800a624:	d04b      	beq.n	800a6be <_printf_i+0x1a6>
 800a626:	4616      	mov	r6, r2
 800a628:	fbb5 f1f3 	udiv	r1, r5, r3
 800a62c:	fb03 5711 	mls	r7, r3, r1, r5
 800a630:	5dc7      	ldrb	r7, [r0, r7]
 800a632:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a636:	462f      	mov	r7, r5
 800a638:	42bb      	cmp	r3, r7
 800a63a:	460d      	mov	r5, r1
 800a63c:	d9f4      	bls.n	800a628 <_printf_i+0x110>
 800a63e:	2b08      	cmp	r3, #8
 800a640:	d10b      	bne.n	800a65a <_printf_i+0x142>
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	07df      	lsls	r7, r3, #31
 800a646:	d508      	bpl.n	800a65a <_printf_i+0x142>
 800a648:	6923      	ldr	r3, [r4, #16]
 800a64a:	6861      	ldr	r1, [r4, #4]
 800a64c:	4299      	cmp	r1, r3
 800a64e:	bfde      	ittt	le
 800a650:	2330      	movle	r3, #48	@ 0x30
 800a652:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a656:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a65a:	1b92      	subs	r2, r2, r6
 800a65c:	6122      	str	r2, [r4, #16]
 800a65e:	f8cd a000 	str.w	sl, [sp]
 800a662:	464b      	mov	r3, r9
 800a664:	aa03      	add	r2, sp, #12
 800a666:	4621      	mov	r1, r4
 800a668:	4640      	mov	r0, r8
 800a66a:	f7ff fee7 	bl	800a43c <_printf_common>
 800a66e:	3001      	adds	r0, #1
 800a670:	d14a      	bne.n	800a708 <_printf_i+0x1f0>
 800a672:	f04f 30ff 	mov.w	r0, #4294967295
 800a676:	b004      	add	sp, #16
 800a678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67c:	6823      	ldr	r3, [r4, #0]
 800a67e:	f043 0320 	orr.w	r3, r3, #32
 800a682:	6023      	str	r3, [r4, #0]
 800a684:	4832      	ldr	r0, [pc, #200]	@ (800a750 <_printf_i+0x238>)
 800a686:	2778      	movs	r7, #120	@ 0x78
 800a688:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a68c:	6823      	ldr	r3, [r4, #0]
 800a68e:	6831      	ldr	r1, [r6, #0]
 800a690:	061f      	lsls	r7, r3, #24
 800a692:	f851 5b04 	ldr.w	r5, [r1], #4
 800a696:	d402      	bmi.n	800a69e <_printf_i+0x186>
 800a698:	065f      	lsls	r7, r3, #25
 800a69a:	bf48      	it	mi
 800a69c:	b2ad      	uxthmi	r5, r5
 800a69e:	6031      	str	r1, [r6, #0]
 800a6a0:	07d9      	lsls	r1, r3, #31
 800a6a2:	bf44      	itt	mi
 800a6a4:	f043 0320 	orrmi.w	r3, r3, #32
 800a6a8:	6023      	strmi	r3, [r4, #0]
 800a6aa:	b11d      	cbz	r5, 800a6b4 <_printf_i+0x19c>
 800a6ac:	2310      	movs	r3, #16
 800a6ae:	e7ad      	b.n	800a60c <_printf_i+0xf4>
 800a6b0:	4826      	ldr	r0, [pc, #152]	@ (800a74c <_printf_i+0x234>)
 800a6b2:	e7e9      	b.n	800a688 <_printf_i+0x170>
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	f023 0320 	bic.w	r3, r3, #32
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	e7f6      	b.n	800a6ac <_printf_i+0x194>
 800a6be:	4616      	mov	r6, r2
 800a6c0:	e7bd      	b.n	800a63e <_printf_i+0x126>
 800a6c2:	6833      	ldr	r3, [r6, #0]
 800a6c4:	6825      	ldr	r5, [r4, #0]
 800a6c6:	6961      	ldr	r1, [r4, #20]
 800a6c8:	1d18      	adds	r0, r3, #4
 800a6ca:	6030      	str	r0, [r6, #0]
 800a6cc:	062e      	lsls	r6, r5, #24
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	d501      	bpl.n	800a6d6 <_printf_i+0x1be>
 800a6d2:	6019      	str	r1, [r3, #0]
 800a6d4:	e002      	b.n	800a6dc <_printf_i+0x1c4>
 800a6d6:	0668      	lsls	r0, r5, #25
 800a6d8:	d5fb      	bpl.n	800a6d2 <_printf_i+0x1ba>
 800a6da:	8019      	strh	r1, [r3, #0]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	6123      	str	r3, [r4, #16]
 800a6e0:	4616      	mov	r6, r2
 800a6e2:	e7bc      	b.n	800a65e <_printf_i+0x146>
 800a6e4:	6833      	ldr	r3, [r6, #0]
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	6032      	str	r2, [r6, #0]
 800a6ea:	681e      	ldr	r6, [r3, #0]
 800a6ec:	6862      	ldr	r2, [r4, #4]
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	f7f5 fd75 	bl	80001e0 <memchr>
 800a6f6:	b108      	cbz	r0, 800a6fc <_printf_i+0x1e4>
 800a6f8:	1b80      	subs	r0, r0, r6
 800a6fa:	6060      	str	r0, [r4, #4]
 800a6fc:	6863      	ldr	r3, [r4, #4]
 800a6fe:	6123      	str	r3, [r4, #16]
 800a700:	2300      	movs	r3, #0
 800a702:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a706:	e7aa      	b.n	800a65e <_printf_i+0x146>
 800a708:	6923      	ldr	r3, [r4, #16]
 800a70a:	4632      	mov	r2, r6
 800a70c:	4649      	mov	r1, r9
 800a70e:	4640      	mov	r0, r8
 800a710:	47d0      	blx	sl
 800a712:	3001      	adds	r0, #1
 800a714:	d0ad      	beq.n	800a672 <_printf_i+0x15a>
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	079b      	lsls	r3, r3, #30
 800a71a:	d413      	bmi.n	800a744 <_printf_i+0x22c>
 800a71c:	68e0      	ldr	r0, [r4, #12]
 800a71e:	9b03      	ldr	r3, [sp, #12]
 800a720:	4298      	cmp	r0, r3
 800a722:	bfb8      	it	lt
 800a724:	4618      	movlt	r0, r3
 800a726:	e7a6      	b.n	800a676 <_printf_i+0x15e>
 800a728:	2301      	movs	r3, #1
 800a72a:	4632      	mov	r2, r6
 800a72c:	4649      	mov	r1, r9
 800a72e:	4640      	mov	r0, r8
 800a730:	47d0      	blx	sl
 800a732:	3001      	adds	r0, #1
 800a734:	d09d      	beq.n	800a672 <_printf_i+0x15a>
 800a736:	3501      	adds	r5, #1
 800a738:	68e3      	ldr	r3, [r4, #12]
 800a73a:	9903      	ldr	r1, [sp, #12]
 800a73c:	1a5b      	subs	r3, r3, r1
 800a73e:	42ab      	cmp	r3, r5
 800a740:	dcf2      	bgt.n	800a728 <_printf_i+0x210>
 800a742:	e7eb      	b.n	800a71c <_printf_i+0x204>
 800a744:	2500      	movs	r5, #0
 800a746:	f104 0619 	add.w	r6, r4, #25
 800a74a:	e7f5      	b.n	800a738 <_printf_i+0x220>
 800a74c:	0800d382 	.word	0x0800d382
 800a750:	0800d393 	.word	0x0800d393

0800a754 <std>:
 800a754:	2300      	movs	r3, #0
 800a756:	b510      	push	{r4, lr}
 800a758:	4604      	mov	r4, r0
 800a75a:	e9c0 3300 	strd	r3, r3, [r0]
 800a75e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a762:	6083      	str	r3, [r0, #8]
 800a764:	8181      	strh	r1, [r0, #12]
 800a766:	6643      	str	r3, [r0, #100]	@ 0x64
 800a768:	81c2      	strh	r2, [r0, #14]
 800a76a:	6183      	str	r3, [r0, #24]
 800a76c:	4619      	mov	r1, r3
 800a76e:	2208      	movs	r2, #8
 800a770:	305c      	adds	r0, #92	@ 0x5c
 800a772:	f000 f92a 	bl	800a9ca <memset>
 800a776:	4b0d      	ldr	r3, [pc, #52]	@ (800a7ac <std+0x58>)
 800a778:	6263      	str	r3, [r4, #36]	@ 0x24
 800a77a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b0 <std+0x5c>)
 800a77c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a77e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <std+0x60>)
 800a780:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a782:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b8 <std+0x64>)
 800a784:	6323      	str	r3, [r4, #48]	@ 0x30
 800a786:	4b0d      	ldr	r3, [pc, #52]	@ (800a7bc <std+0x68>)
 800a788:	6224      	str	r4, [r4, #32]
 800a78a:	429c      	cmp	r4, r3
 800a78c:	d006      	beq.n	800a79c <std+0x48>
 800a78e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a792:	4294      	cmp	r4, r2
 800a794:	d002      	beq.n	800a79c <std+0x48>
 800a796:	33d0      	adds	r3, #208	@ 0xd0
 800a798:	429c      	cmp	r4, r3
 800a79a:	d105      	bne.n	800a7a8 <std+0x54>
 800a79c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a4:	f000 b9ec 	b.w	800ab80 <__retarget_lock_init_recursive>
 800a7a8:	bd10      	pop	{r4, pc}
 800a7aa:	bf00      	nop
 800a7ac:	0800a945 	.word	0x0800a945
 800a7b0:	0800a967 	.word	0x0800a967
 800a7b4:	0800a99f 	.word	0x0800a99f
 800a7b8:	0800a9c3 	.word	0x0800a9c3
 800a7bc:	20004de8 	.word	0x20004de8

0800a7c0 <stdio_exit_handler>:
 800a7c0:	4a02      	ldr	r2, [pc, #8]	@ (800a7cc <stdio_exit_handler+0xc>)
 800a7c2:	4903      	ldr	r1, [pc, #12]	@ (800a7d0 <stdio_exit_handler+0x10>)
 800a7c4:	4803      	ldr	r0, [pc, #12]	@ (800a7d4 <stdio_exit_handler+0x14>)
 800a7c6:	f000 b869 	b.w	800a89c <_fwalk_sglue>
 800a7ca:	bf00      	nop
 800a7cc:	2000001c 	.word	0x2000001c
 800a7d0:	0800c505 	.word	0x0800c505
 800a7d4:	2000002c 	.word	0x2000002c

0800a7d8 <cleanup_stdio>:
 800a7d8:	6841      	ldr	r1, [r0, #4]
 800a7da:	4b0c      	ldr	r3, [pc, #48]	@ (800a80c <cleanup_stdio+0x34>)
 800a7dc:	4299      	cmp	r1, r3
 800a7de:	b510      	push	{r4, lr}
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	d001      	beq.n	800a7e8 <cleanup_stdio+0x10>
 800a7e4:	f001 fe8e 	bl	800c504 <_fflush_r>
 800a7e8:	68a1      	ldr	r1, [r4, #8]
 800a7ea:	4b09      	ldr	r3, [pc, #36]	@ (800a810 <cleanup_stdio+0x38>)
 800a7ec:	4299      	cmp	r1, r3
 800a7ee:	d002      	beq.n	800a7f6 <cleanup_stdio+0x1e>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f001 fe87 	bl	800c504 <_fflush_r>
 800a7f6:	68e1      	ldr	r1, [r4, #12]
 800a7f8:	4b06      	ldr	r3, [pc, #24]	@ (800a814 <cleanup_stdio+0x3c>)
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	d004      	beq.n	800a808 <cleanup_stdio+0x30>
 800a7fe:	4620      	mov	r0, r4
 800a800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a804:	f001 be7e 	b.w	800c504 <_fflush_r>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	bf00      	nop
 800a80c:	20004de8 	.word	0x20004de8
 800a810:	20004e50 	.word	0x20004e50
 800a814:	20004eb8 	.word	0x20004eb8

0800a818 <global_stdio_init.part.0>:
 800a818:	b510      	push	{r4, lr}
 800a81a:	4b0b      	ldr	r3, [pc, #44]	@ (800a848 <global_stdio_init.part.0+0x30>)
 800a81c:	4c0b      	ldr	r4, [pc, #44]	@ (800a84c <global_stdio_init.part.0+0x34>)
 800a81e:	4a0c      	ldr	r2, [pc, #48]	@ (800a850 <global_stdio_init.part.0+0x38>)
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	4620      	mov	r0, r4
 800a824:	2200      	movs	r2, #0
 800a826:	2104      	movs	r1, #4
 800a828:	f7ff ff94 	bl	800a754 <std>
 800a82c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a830:	2201      	movs	r2, #1
 800a832:	2109      	movs	r1, #9
 800a834:	f7ff ff8e 	bl	800a754 <std>
 800a838:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a83c:	2202      	movs	r2, #2
 800a83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a842:	2112      	movs	r1, #18
 800a844:	f7ff bf86 	b.w	800a754 <std>
 800a848:	20004f20 	.word	0x20004f20
 800a84c:	20004de8 	.word	0x20004de8
 800a850:	0800a7c1 	.word	0x0800a7c1

0800a854 <__sfp_lock_acquire>:
 800a854:	4801      	ldr	r0, [pc, #4]	@ (800a85c <__sfp_lock_acquire+0x8>)
 800a856:	f000 b994 	b.w	800ab82 <__retarget_lock_acquire_recursive>
 800a85a:	bf00      	nop
 800a85c:	20004f29 	.word	0x20004f29

0800a860 <__sfp_lock_release>:
 800a860:	4801      	ldr	r0, [pc, #4]	@ (800a868 <__sfp_lock_release+0x8>)
 800a862:	f000 b98f 	b.w	800ab84 <__retarget_lock_release_recursive>
 800a866:	bf00      	nop
 800a868:	20004f29 	.word	0x20004f29

0800a86c <__sinit>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	4604      	mov	r4, r0
 800a870:	f7ff fff0 	bl	800a854 <__sfp_lock_acquire>
 800a874:	6a23      	ldr	r3, [r4, #32]
 800a876:	b11b      	cbz	r3, 800a880 <__sinit+0x14>
 800a878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a87c:	f7ff bff0 	b.w	800a860 <__sfp_lock_release>
 800a880:	4b04      	ldr	r3, [pc, #16]	@ (800a894 <__sinit+0x28>)
 800a882:	6223      	str	r3, [r4, #32]
 800a884:	4b04      	ldr	r3, [pc, #16]	@ (800a898 <__sinit+0x2c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f5      	bne.n	800a878 <__sinit+0xc>
 800a88c:	f7ff ffc4 	bl	800a818 <global_stdio_init.part.0>
 800a890:	e7f2      	b.n	800a878 <__sinit+0xc>
 800a892:	bf00      	nop
 800a894:	0800a7d9 	.word	0x0800a7d9
 800a898:	20004f20 	.word	0x20004f20

0800a89c <_fwalk_sglue>:
 800a89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	4688      	mov	r8, r1
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8ac:	f1b9 0901 	subs.w	r9, r9, #1
 800a8b0:	d505      	bpl.n	800a8be <_fwalk_sglue+0x22>
 800a8b2:	6824      	ldr	r4, [r4, #0]
 800a8b4:	2c00      	cmp	r4, #0
 800a8b6:	d1f7      	bne.n	800a8a8 <_fwalk_sglue+0xc>
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8be:	89ab      	ldrh	r3, [r5, #12]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d907      	bls.n	800a8d4 <_fwalk_sglue+0x38>
 800a8c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	d003      	beq.n	800a8d4 <_fwalk_sglue+0x38>
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	47c0      	blx	r8
 800a8d2:	4306      	orrs	r6, r0
 800a8d4:	3568      	adds	r5, #104	@ 0x68
 800a8d6:	e7e9      	b.n	800a8ac <_fwalk_sglue+0x10>

0800a8d8 <sniprintf>:
 800a8d8:	b40c      	push	{r2, r3}
 800a8da:	b530      	push	{r4, r5, lr}
 800a8dc:	4b18      	ldr	r3, [pc, #96]	@ (800a940 <sniprintf+0x68>)
 800a8de:	1e0c      	subs	r4, r1, #0
 800a8e0:	681d      	ldr	r5, [r3, #0]
 800a8e2:	b09d      	sub	sp, #116	@ 0x74
 800a8e4:	da08      	bge.n	800a8f8 <sniprintf+0x20>
 800a8e6:	238b      	movs	r3, #139	@ 0x8b
 800a8e8:	602b      	str	r3, [r5, #0]
 800a8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ee:	b01d      	add	sp, #116	@ 0x74
 800a8f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8f4:	b002      	add	sp, #8
 800a8f6:	4770      	bx	lr
 800a8f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a8fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a900:	f04f 0300 	mov.w	r3, #0
 800a904:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a906:	bf14      	ite	ne
 800a908:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a90c:	4623      	moveq	r3, r4
 800a90e:	9304      	str	r3, [sp, #16]
 800a910:	9307      	str	r3, [sp, #28]
 800a912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a916:	9002      	str	r0, [sp, #8]
 800a918:	9006      	str	r0, [sp, #24]
 800a91a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a91e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a920:	ab21      	add	r3, sp, #132	@ 0x84
 800a922:	a902      	add	r1, sp, #8
 800a924:	4628      	mov	r0, r5
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	f001 fc6c 	bl	800c204 <_svfiprintf_r>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	bfbc      	itt	lt
 800a930:	238b      	movlt	r3, #139	@ 0x8b
 800a932:	602b      	strlt	r3, [r5, #0]
 800a934:	2c00      	cmp	r4, #0
 800a936:	d0da      	beq.n	800a8ee <sniprintf+0x16>
 800a938:	9b02      	ldr	r3, [sp, #8]
 800a93a:	2200      	movs	r2, #0
 800a93c:	701a      	strb	r2, [r3, #0]
 800a93e:	e7d6      	b.n	800a8ee <sniprintf+0x16>
 800a940:	20000028 	.word	0x20000028

0800a944 <__sread>:
 800a944:	b510      	push	{r4, lr}
 800a946:	460c      	mov	r4, r1
 800a948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a94c:	f000 f8ca 	bl	800aae4 <_read_r>
 800a950:	2800      	cmp	r0, #0
 800a952:	bfab      	itete	ge
 800a954:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a956:	89a3      	ldrhlt	r3, [r4, #12]
 800a958:	181b      	addge	r3, r3, r0
 800a95a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a95e:	bfac      	ite	ge
 800a960:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a962:	81a3      	strhlt	r3, [r4, #12]
 800a964:	bd10      	pop	{r4, pc}

0800a966 <__swrite>:
 800a966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96a:	461f      	mov	r7, r3
 800a96c:	898b      	ldrh	r3, [r1, #12]
 800a96e:	05db      	lsls	r3, r3, #23
 800a970:	4605      	mov	r5, r0
 800a972:	460c      	mov	r4, r1
 800a974:	4616      	mov	r6, r2
 800a976:	d505      	bpl.n	800a984 <__swrite+0x1e>
 800a978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a97c:	2302      	movs	r3, #2
 800a97e:	2200      	movs	r2, #0
 800a980:	f000 f89e 	bl	800aac0 <_lseek_r>
 800a984:	89a3      	ldrh	r3, [r4, #12]
 800a986:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a98a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	4632      	mov	r2, r6
 800a992:	463b      	mov	r3, r7
 800a994:	4628      	mov	r0, r5
 800a996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a99a:	f000 b8b5 	b.w	800ab08 <_write_r>

0800a99e <__sseek>:
 800a99e:	b510      	push	{r4, lr}
 800a9a0:	460c      	mov	r4, r1
 800a9a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a6:	f000 f88b 	bl	800aac0 <_lseek_r>
 800a9aa:	1c43      	adds	r3, r0, #1
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	bf15      	itete	ne
 800a9b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9ba:	81a3      	strheq	r3, [r4, #12]
 800a9bc:	bf18      	it	ne
 800a9be:	81a3      	strhne	r3, [r4, #12]
 800a9c0:	bd10      	pop	{r4, pc}

0800a9c2 <__sclose>:
 800a9c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c6:	f000 b80d 	b.w	800a9e4 <_close_r>

0800a9ca <memset>:
 800a9ca:	4402      	add	r2, r0
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d100      	bne.n	800a9d4 <memset+0xa>
 800a9d2:	4770      	bx	lr
 800a9d4:	f803 1b01 	strb.w	r1, [r3], #1
 800a9d8:	e7f9      	b.n	800a9ce <memset+0x4>
	...

0800a9dc <_localeconv_r>:
 800a9dc:	4800      	ldr	r0, [pc, #0]	@ (800a9e0 <_localeconv_r+0x4>)
 800a9de:	4770      	bx	lr
 800a9e0:	20000168 	.word	0x20000168

0800a9e4 <_close_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d06      	ldr	r5, [pc, #24]	@ (800aa00 <_close_r+0x1c>)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	602b      	str	r3, [r5, #0]
 800a9f0:	f7f8 f8a6 	bl	8002b40 <_close>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_close_r+0x1a>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_close_r+0x1a>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	20004f24 	.word	0x20004f24

0800aa04 <_reclaim_reent>:
 800aa04:	4b2d      	ldr	r3, [pc, #180]	@ (800aabc <_reclaim_reent+0xb8>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4283      	cmp	r3, r0
 800aa0a:	b570      	push	{r4, r5, r6, lr}
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	d053      	beq.n	800aab8 <_reclaim_reent+0xb4>
 800aa10:	69c3      	ldr	r3, [r0, #28]
 800aa12:	b31b      	cbz	r3, 800aa5c <_reclaim_reent+0x58>
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	b163      	cbz	r3, 800aa32 <_reclaim_reent+0x2e>
 800aa18:	2500      	movs	r5, #0
 800aa1a:	69e3      	ldr	r3, [r4, #28]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	5959      	ldr	r1, [r3, r5]
 800aa20:	b9b1      	cbnz	r1, 800aa50 <_reclaim_reent+0x4c>
 800aa22:	3504      	adds	r5, #4
 800aa24:	2d80      	cmp	r5, #128	@ 0x80
 800aa26:	d1f8      	bne.n	800aa1a <_reclaim_reent+0x16>
 800aa28:	69e3      	ldr	r3, [r4, #28]
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	68d9      	ldr	r1, [r3, #12]
 800aa2e:	f000 ff13 	bl	800b858 <_free_r>
 800aa32:	69e3      	ldr	r3, [r4, #28]
 800aa34:	6819      	ldr	r1, [r3, #0]
 800aa36:	b111      	cbz	r1, 800aa3e <_reclaim_reent+0x3a>
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 ff0d 	bl	800b858 <_free_r>
 800aa3e:	69e3      	ldr	r3, [r4, #28]
 800aa40:	689d      	ldr	r5, [r3, #8]
 800aa42:	b15d      	cbz	r5, 800aa5c <_reclaim_reent+0x58>
 800aa44:	4629      	mov	r1, r5
 800aa46:	4620      	mov	r0, r4
 800aa48:	682d      	ldr	r5, [r5, #0]
 800aa4a:	f000 ff05 	bl	800b858 <_free_r>
 800aa4e:	e7f8      	b.n	800aa42 <_reclaim_reent+0x3e>
 800aa50:	680e      	ldr	r6, [r1, #0]
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 ff00 	bl	800b858 <_free_r>
 800aa58:	4631      	mov	r1, r6
 800aa5a:	e7e1      	b.n	800aa20 <_reclaim_reent+0x1c>
 800aa5c:	6961      	ldr	r1, [r4, #20]
 800aa5e:	b111      	cbz	r1, 800aa66 <_reclaim_reent+0x62>
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fef9 	bl	800b858 <_free_r>
 800aa66:	69e1      	ldr	r1, [r4, #28]
 800aa68:	b111      	cbz	r1, 800aa70 <_reclaim_reent+0x6c>
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f000 fef4 	bl	800b858 <_free_r>
 800aa70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800aa72:	b111      	cbz	r1, 800aa7a <_reclaim_reent+0x76>
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 feef 	bl	800b858 <_free_r>
 800aa7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa7c:	b111      	cbz	r1, 800aa84 <_reclaim_reent+0x80>
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 feea 	bl	800b858 <_free_r>
 800aa84:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800aa86:	b111      	cbz	r1, 800aa8e <_reclaim_reent+0x8a>
 800aa88:	4620      	mov	r0, r4
 800aa8a:	f000 fee5 	bl	800b858 <_free_r>
 800aa8e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800aa90:	b111      	cbz	r1, 800aa98 <_reclaim_reent+0x94>
 800aa92:	4620      	mov	r0, r4
 800aa94:	f000 fee0 	bl	800b858 <_free_r>
 800aa98:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800aa9a:	b111      	cbz	r1, 800aaa2 <_reclaim_reent+0x9e>
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 fedb 	bl	800b858 <_free_r>
 800aaa2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800aaa4:	b111      	cbz	r1, 800aaac <_reclaim_reent+0xa8>
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 fed6 	bl	800b858 <_free_r>
 800aaac:	6a23      	ldr	r3, [r4, #32]
 800aaae:	b11b      	cbz	r3, 800aab8 <_reclaim_reent+0xb4>
 800aab0:	4620      	mov	r0, r4
 800aab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aab6:	4718      	bx	r3
 800aab8:	bd70      	pop	{r4, r5, r6, pc}
 800aaba:	bf00      	nop
 800aabc:	20000028 	.word	0x20000028

0800aac0 <_lseek_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d07      	ldr	r5, [pc, #28]	@ (800aae0 <_lseek_r+0x20>)
 800aac4:	4604      	mov	r4, r0
 800aac6:	4608      	mov	r0, r1
 800aac8:	4611      	mov	r1, r2
 800aaca:	2200      	movs	r2, #0
 800aacc:	602a      	str	r2, [r5, #0]
 800aace:	461a      	mov	r2, r3
 800aad0:	f7f8 f85d 	bl	8002b8e <_lseek>
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d102      	bne.n	800aade <_lseek_r+0x1e>
 800aad8:	682b      	ldr	r3, [r5, #0]
 800aada:	b103      	cbz	r3, 800aade <_lseek_r+0x1e>
 800aadc:	6023      	str	r3, [r4, #0]
 800aade:	bd38      	pop	{r3, r4, r5, pc}
 800aae0:	20004f24 	.word	0x20004f24

0800aae4 <_read_r>:
 800aae4:	b538      	push	{r3, r4, r5, lr}
 800aae6:	4d07      	ldr	r5, [pc, #28]	@ (800ab04 <_read_r+0x20>)
 800aae8:	4604      	mov	r4, r0
 800aaea:	4608      	mov	r0, r1
 800aaec:	4611      	mov	r1, r2
 800aaee:	2200      	movs	r2, #0
 800aaf0:	602a      	str	r2, [r5, #0]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	f7f7 ffeb 	bl	8002ace <_read>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_read_r+0x1e>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_read_r+0x1e>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	20004f24 	.word	0x20004f24

0800ab08 <_write_r>:
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4d07      	ldr	r5, [pc, #28]	@ (800ab28 <_write_r+0x20>)
 800ab0c:	4604      	mov	r4, r0
 800ab0e:	4608      	mov	r0, r1
 800ab10:	4611      	mov	r1, r2
 800ab12:	2200      	movs	r2, #0
 800ab14:	602a      	str	r2, [r5, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	f7f7 fff6 	bl	8002b08 <_write>
 800ab1c:	1c43      	adds	r3, r0, #1
 800ab1e:	d102      	bne.n	800ab26 <_write_r+0x1e>
 800ab20:	682b      	ldr	r3, [r5, #0]
 800ab22:	b103      	cbz	r3, 800ab26 <_write_r+0x1e>
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	bd38      	pop	{r3, r4, r5, pc}
 800ab28:	20004f24 	.word	0x20004f24

0800ab2c <__errno>:
 800ab2c:	4b01      	ldr	r3, [pc, #4]	@ (800ab34 <__errno+0x8>)
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	20000028 	.word	0x20000028

0800ab38 <__libc_init_array>:
 800ab38:	b570      	push	{r4, r5, r6, lr}
 800ab3a:	4d0d      	ldr	r5, [pc, #52]	@ (800ab70 <__libc_init_array+0x38>)
 800ab3c:	4c0d      	ldr	r4, [pc, #52]	@ (800ab74 <__libc_init_array+0x3c>)
 800ab3e:	1b64      	subs	r4, r4, r5
 800ab40:	10a4      	asrs	r4, r4, #2
 800ab42:	2600      	movs	r6, #0
 800ab44:	42a6      	cmp	r6, r4
 800ab46:	d109      	bne.n	800ab5c <__libc_init_array+0x24>
 800ab48:	4d0b      	ldr	r5, [pc, #44]	@ (800ab78 <__libc_init_array+0x40>)
 800ab4a:	4c0c      	ldr	r4, [pc, #48]	@ (800ab7c <__libc_init_array+0x44>)
 800ab4c:	f002 f86a 	bl	800cc24 <_init>
 800ab50:	1b64      	subs	r4, r4, r5
 800ab52:	10a4      	asrs	r4, r4, #2
 800ab54:	2600      	movs	r6, #0
 800ab56:	42a6      	cmp	r6, r4
 800ab58:	d105      	bne.n	800ab66 <__libc_init_array+0x2e>
 800ab5a:	bd70      	pop	{r4, r5, r6, pc}
 800ab5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab60:	4798      	blx	r3
 800ab62:	3601      	adds	r6, #1
 800ab64:	e7ee      	b.n	800ab44 <__libc_init_array+0xc>
 800ab66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab6a:	4798      	blx	r3
 800ab6c:	3601      	adds	r6, #1
 800ab6e:	e7f2      	b.n	800ab56 <__libc_init_array+0x1e>
 800ab70:	0800d6ec 	.word	0x0800d6ec
 800ab74:	0800d6ec 	.word	0x0800d6ec
 800ab78:	0800d6ec 	.word	0x0800d6ec
 800ab7c:	0800d6f0 	.word	0x0800d6f0

0800ab80 <__retarget_lock_init_recursive>:
 800ab80:	4770      	bx	lr

0800ab82 <__retarget_lock_acquire_recursive>:
 800ab82:	4770      	bx	lr

0800ab84 <__retarget_lock_release_recursive>:
 800ab84:	4770      	bx	lr

0800ab86 <memcpy>:
 800ab86:	440a      	add	r2, r1
 800ab88:	4291      	cmp	r1, r2
 800ab8a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab8e:	d100      	bne.n	800ab92 <memcpy+0xc>
 800ab90:	4770      	bx	lr
 800ab92:	b510      	push	{r4, lr}
 800ab94:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab98:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab9c:	4291      	cmp	r1, r2
 800ab9e:	d1f9      	bne.n	800ab94 <memcpy+0xe>
 800aba0:	bd10      	pop	{r4, pc}

0800aba2 <quorem>:
 800aba2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba6:	6903      	ldr	r3, [r0, #16]
 800aba8:	690c      	ldr	r4, [r1, #16]
 800abaa:	42a3      	cmp	r3, r4
 800abac:	4607      	mov	r7, r0
 800abae:	db7e      	blt.n	800acae <quorem+0x10c>
 800abb0:	3c01      	subs	r4, #1
 800abb2:	f101 0814 	add.w	r8, r1, #20
 800abb6:	00a3      	lsls	r3, r4, #2
 800abb8:	f100 0514 	add.w	r5, r0, #20
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abcc:	3301      	adds	r3, #1
 800abce:	429a      	cmp	r2, r3
 800abd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abd4:	fbb2 f6f3 	udiv	r6, r2, r3
 800abd8:	d32e      	bcc.n	800ac38 <quorem+0x96>
 800abda:	f04f 0a00 	mov.w	sl, #0
 800abde:	46c4      	mov	ip, r8
 800abe0:	46ae      	mov	lr, r5
 800abe2:	46d3      	mov	fp, sl
 800abe4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abe8:	b298      	uxth	r0, r3
 800abea:	fb06 a000 	mla	r0, r6, r0, sl
 800abee:	0c02      	lsrs	r2, r0, #16
 800abf0:	0c1b      	lsrs	r3, r3, #16
 800abf2:	fb06 2303 	mla	r3, r6, r3, r2
 800abf6:	f8de 2000 	ldr.w	r2, [lr]
 800abfa:	b280      	uxth	r0, r0
 800abfc:	b292      	uxth	r2, r2
 800abfe:	1a12      	subs	r2, r2, r0
 800ac00:	445a      	add	r2, fp
 800ac02:	f8de 0000 	ldr.w	r0, [lr]
 800ac06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac14:	b292      	uxth	r2, r2
 800ac16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac1a:	45e1      	cmp	r9, ip
 800ac1c:	f84e 2b04 	str.w	r2, [lr], #4
 800ac20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac24:	d2de      	bcs.n	800abe4 <quorem+0x42>
 800ac26:	9b00      	ldr	r3, [sp, #0]
 800ac28:	58eb      	ldr	r3, [r5, r3]
 800ac2a:	b92b      	cbnz	r3, 800ac38 <quorem+0x96>
 800ac2c:	9b01      	ldr	r3, [sp, #4]
 800ac2e:	3b04      	subs	r3, #4
 800ac30:	429d      	cmp	r5, r3
 800ac32:	461a      	mov	r2, r3
 800ac34:	d32f      	bcc.n	800ac96 <quorem+0xf4>
 800ac36:	613c      	str	r4, [r7, #16]
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f001 f97f 	bl	800bf3c <__mcmp>
 800ac3e:	2800      	cmp	r0, #0
 800ac40:	db25      	blt.n	800ac8e <quorem+0xec>
 800ac42:	4629      	mov	r1, r5
 800ac44:	2000      	movs	r0, #0
 800ac46:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac4a:	f8d1 c000 	ldr.w	ip, [r1]
 800ac4e:	fa1f fe82 	uxth.w	lr, r2
 800ac52:	fa1f f38c 	uxth.w	r3, ip
 800ac56:	eba3 030e 	sub.w	r3, r3, lr
 800ac5a:	4403      	add	r3, r0
 800ac5c:	0c12      	lsrs	r2, r2, #16
 800ac5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ac62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac6c:	45c1      	cmp	r9, r8
 800ac6e:	f841 3b04 	str.w	r3, [r1], #4
 800ac72:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac76:	d2e6      	bcs.n	800ac46 <quorem+0xa4>
 800ac78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac80:	b922      	cbnz	r2, 800ac8c <quorem+0xea>
 800ac82:	3b04      	subs	r3, #4
 800ac84:	429d      	cmp	r5, r3
 800ac86:	461a      	mov	r2, r3
 800ac88:	d30b      	bcc.n	800aca2 <quorem+0x100>
 800ac8a:	613c      	str	r4, [r7, #16]
 800ac8c:	3601      	adds	r6, #1
 800ac8e:	4630      	mov	r0, r6
 800ac90:	b003      	add	sp, #12
 800ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac96:	6812      	ldr	r2, [r2, #0]
 800ac98:	3b04      	subs	r3, #4
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	d1cb      	bne.n	800ac36 <quorem+0x94>
 800ac9e:	3c01      	subs	r4, #1
 800aca0:	e7c6      	b.n	800ac30 <quorem+0x8e>
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	3b04      	subs	r3, #4
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	d1ef      	bne.n	800ac8a <quorem+0xe8>
 800acaa:	3c01      	subs	r4, #1
 800acac:	e7ea      	b.n	800ac84 <quorem+0xe2>
 800acae:	2000      	movs	r0, #0
 800acb0:	e7ee      	b.n	800ac90 <quorem+0xee>
 800acb2:	0000      	movs	r0, r0
 800acb4:	0000      	movs	r0, r0
	...

0800acb8 <_dtoa_r>:
 800acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	69c7      	ldr	r7, [r0, #28]
 800acbe:	b097      	sub	sp, #92	@ 0x5c
 800acc0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800acc4:	ec55 4b10 	vmov	r4, r5, d0
 800acc8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800acca:	9107      	str	r1, [sp, #28]
 800accc:	4681      	mov	r9, r0
 800acce:	920c      	str	r2, [sp, #48]	@ 0x30
 800acd0:	9311      	str	r3, [sp, #68]	@ 0x44
 800acd2:	b97f      	cbnz	r7, 800acf4 <_dtoa_r+0x3c>
 800acd4:	2010      	movs	r0, #16
 800acd6:	f000 fe09 	bl	800b8ec <malloc>
 800acda:	4602      	mov	r2, r0
 800acdc:	f8c9 001c 	str.w	r0, [r9, #28]
 800ace0:	b920      	cbnz	r0, 800acec <_dtoa_r+0x34>
 800ace2:	4ba9      	ldr	r3, [pc, #676]	@ (800af88 <_dtoa_r+0x2d0>)
 800ace4:	21ef      	movs	r1, #239	@ 0xef
 800ace6:	48a9      	ldr	r0, [pc, #676]	@ (800af8c <_dtoa_r+0x2d4>)
 800ace8:	f001 fc5e 	bl	800c5a8 <__assert_func>
 800acec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800acf0:	6007      	str	r7, [r0, #0]
 800acf2:	60c7      	str	r7, [r0, #12]
 800acf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800acf8:	6819      	ldr	r1, [r3, #0]
 800acfa:	b159      	cbz	r1, 800ad14 <_dtoa_r+0x5c>
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	604a      	str	r2, [r1, #4]
 800ad00:	2301      	movs	r3, #1
 800ad02:	4093      	lsls	r3, r2
 800ad04:	608b      	str	r3, [r1, #8]
 800ad06:	4648      	mov	r0, r9
 800ad08:	f000 fee6 	bl	800bad8 <_Bfree>
 800ad0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad10:	2200      	movs	r2, #0
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	1e2b      	subs	r3, r5, #0
 800ad16:	bfb9      	ittee	lt
 800ad18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad1c:	9305      	strlt	r3, [sp, #20]
 800ad1e:	2300      	movge	r3, #0
 800ad20:	6033      	strge	r3, [r6, #0]
 800ad22:	9f05      	ldr	r7, [sp, #20]
 800ad24:	4b9a      	ldr	r3, [pc, #616]	@ (800af90 <_dtoa_r+0x2d8>)
 800ad26:	bfbc      	itt	lt
 800ad28:	2201      	movlt	r2, #1
 800ad2a:	6032      	strlt	r2, [r6, #0]
 800ad2c:	43bb      	bics	r3, r7
 800ad2e:	d112      	bne.n	800ad56 <_dtoa_r+0x9e>
 800ad30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad32:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad3c:	4323      	orrs	r3, r4
 800ad3e:	f000 855a 	beq.w	800b7f6 <_dtoa_r+0xb3e>
 800ad42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad44:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800afa4 <_dtoa_r+0x2ec>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 855c 	beq.w	800b806 <_dtoa_r+0xb4e>
 800ad4e:	f10a 0303 	add.w	r3, sl, #3
 800ad52:	f000 bd56 	b.w	800b802 <_dtoa_r+0xb4a>
 800ad56:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	ec51 0b17 	vmov	r0, r1, d7
 800ad60:	2300      	movs	r3, #0
 800ad62:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ad66:	f7f5 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad6a:	4680      	mov	r8, r0
 800ad6c:	b158      	cbz	r0, 800ad86 <_dtoa_r+0xce>
 800ad6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ad70:	2301      	movs	r3, #1
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad76:	b113      	cbz	r3, 800ad7e <_dtoa_r+0xc6>
 800ad78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ad7a:	4b86      	ldr	r3, [pc, #536]	@ (800af94 <_dtoa_r+0x2dc>)
 800ad7c:	6013      	str	r3, [r2, #0]
 800ad7e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800afa8 <_dtoa_r+0x2f0>
 800ad82:	f000 bd40 	b.w	800b806 <_dtoa_r+0xb4e>
 800ad86:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ad8a:	aa14      	add	r2, sp, #80	@ 0x50
 800ad8c:	a915      	add	r1, sp, #84	@ 0x54
 800ad8e:	4648      	mov	r0, r9
 800ad90:	f001 f984 	bl	800c09c <__d2b>
 800ad94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ad98:	9002      	str	r0, [sp, #8]
 800ad9a:	2e00      	cmp	r6, #0
 800ad9c:	d078      	beq.n	800ae90 <_dtoa_r+0x1d8>
 800ad9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ada0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ada4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ada8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800adb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800adb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800adb8:	4619      	mov	r1, r3
 800adba:	2200      	movs	r2, #0
 800adbc:	4b76      	ldr	r3, [pc, #472]	@ (800af98 <_dtoa_r+0x2e0>)
 800adbe:	f7f5 fa6b 	bl	8000298 <__aeabi_dsub>
 800adc2:	a36b      	add	r3, pc, #428	@ (adr r3, 800af70 <_dtoa_r+0x2b8>)
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	f7f5 fc1e 	bl	8000608 <__aeabi_dmul>
 800adcc:	a36a      	add	r3, pc, #424	@ (adr r3, 800af78 <_dtoa_r+0x2c0>)
 800adce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add2:	f7f5 fa63 	bl	800029c <__adddf3>
 800add6:	4604      	mov	r4, r0
 800add8:	4630      	mov	r0, r6
 800adda:	460d      	mov	r5, r1
 800addc:	f7f5 fbaa 	bl	8000534 <__aeabi_i2d>
 800ade0:	a367      	add	r3, pc, #412	@ (adr r3, 800af80 <_dtoa_r+0x2c8>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f7f5 fc0f 	bl	8000608 <__aeabi_dmul>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	4620      	mov	r0, r4
 800adf0:	4629      	mov	r1, r5
 800adf2:	f7f5 fa53 	bl	800029c <__adddf3>
 800adf6:	4604      	mov	r4, r0
 800adf8:	460d      	mov	r5, r1
 800adfa:	f7f5 feb5 	bl	8000b68 <__aeabi_d2iz>
 800adfe:	2200      	movs	r2, #0
 800ae00:	4607      	mov	r7, r0
 800ae02:	2300      	movs	r3, #0
 800ae04:	4620      	mov	r0, r4
 800ae06:	4629      	mov	r1, r5
 800ae08:	f7f5 fe70 	bl	8000aec <__aeabi_dcmplt>
 800ae0c:	b140      	cbz	r0, 800ae20 <_dtoa_r+0x168>
 800ae0e:	4638      	mov	r0, r7
 800ae10:	f7f5 fb90 	bl	8000534 <__aeabi_i2d>
 800ae14:	4622      	mov	r2, r4
 800ae16:	462b      	mov	r3, r5
 800ae18:	f7f5 fe5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae1c:	b900      	cbnz	r0, 800ae20 <_dtoa_r+0x168>
 800ae1e:	3f01      	subs	r7, #1
 800ae20:	2f16      	cmp	r7, #22
 800ae22:	d852      	bhi.n	800aeca <_dtoa_r+0x212>
 800ae24:	4b5d      	ldr	r3, [pc, #372]	@ (800af9c <_dtoa_r+0x2e4>)
 800ae26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae32:	f7f5 fe5b 	bl	8000aec <__aeabi_dcmplt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d049      	beq.n	800aece <_dtoa_r+0x216>
 800ae3a:	3f01      	subs	r7, #1
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae42:	1b9b      	subs	r3, r3, r6
 800ae44:	1e5a      	subs	r2, r3, #1
 800ae46:	bf45      	ittet	mi
 800ae48:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae4c:	9300      	strmi	r3, [sp, #0]
 800ae4e:	2300      	movpl	r3, #0
 800ae50:	2300      	movmi	r3, #0
 800ae52:	9206      	str	r2, [sp, #24]
 800ae54:	bf54      	ite	pl
 800ae56:	9300      	strpl	r3, [sp, #0]
 800ae58:	9306      	strmi	r3, [sp, #24]
 800ae5a:	2f00      	cmp	r7, #0
 800ae5c:	db39      	blt.n	800aed2 <_dtoa_r+0x21a>
 800ae5e:	9b06      	ldr	r3, [sp, #24]
 800ae60:	970d      	str	r7, [sp, #52]	@ 0x34
 800ae62:	443b      	add	r3, r7
 800ae64:	9306      	str	r3, [sp, #24]
 800ae66:	2300      	movs	r3, #0
 800ae68:	9308      	str	r3, [sp, #32]
 800ae6a:	9b07      	ldr	r3, [sp, #28]
 800ae6c:	2b09      	cmp	r3, #9
 800ae6e:	d863      	bhi.n	800af38 <_dtoa_r+0x280>
 800ae70:	2b05      	cmp	r3, #5
 800ae72:	bfc4      	itt	gt
 800ae74:	3b04      	subgt	r3, #4
 800ae76:	9307      	strgt	r3, [sp, #28]
 800ae78:	9b07      	ldr	r3, [sp, #28]
 800ae7a:	f1a3 0302 	sub.w	r3, r3, #2
 800ae7e:	bfcc      	ite	gt
 800ae80:	2400      	movgt	r4, #0
 800ae82:	2401      	movle	r4, #1
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d863      	bhi.n	800af50 <_dtoa_r+0x298>
 800ae88:	e8df f003 	tbb	[pc, r3]
 800ae8c:	2b375452 	.word	0x2b375452
 800ae90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ae94:	441e      	add	r6, r3
 800ae96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ae9a:	2b20      	cmp	r3, #32
 800ae9c:	bfc1      	itttt	gt
 800ae9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aea2:	409f      	lslgt	r7, r3
 800aea4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aea8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aeac:	bfd6      	itet	le
 800aeae:	f1c3 0320 	rsble	r3, r3, #32
 800aeb2:	ea47 0003 	orrgt.w	r0, r7, r3
 800aeb6:	fa04 f003 	lslle.w	r0, r4, r3
 800aeba:	f7f5 fb2b 	bl	8000514 <__aeabi_ui2d>
 800aebe:	2201      	movs	r2, #1
 800aec0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aec4:	3e01      	subs	r6, #1
 800aec6:	9212      	str	r2, [sp, #72]	@ 0x48
 800aec8:	e776      	b.n	800adb8 <_dtoa_r+0x100>
 800aeca:	2301      	movs	r3, #1
 800aecc:	e7b7      	b.n	800ae3e <_dtoa_r+0x186>
 800aece:	9010      	str	r0, [sp, #64]	@ 0x40
 800aed0:	e7b6      	b.n	800ae40 <_dtoa_r+0x188>
 800aed2:	9b00      	ldr	r3, [sp, #0]
 800aed4:	1bdb      	subs	r3, r3, r7
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	427b      	negs	r3, r7
 800aeda:	9308      	str	r3, [sp, #32]
 800aedc:	2300      	movs	r3, #0
 800aede:	930d      	str	r3, [sp, #52]	@ 0x34
 800aee0:	e7c3      	b.n	800ae6a <_dtoa_r+0x1b2>
 800aee2:	2301      	movs	r3, #1
 800aee4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aee6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aee8:	eb07 0b03 	add.w	fp, r7, r3
 800aeec:	f10b 0301 	add.w	r3, fp, #1
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	9303      	str	r3, [sp, #12]
 800aef4:	bfb8      	it	lt
 800aef6:	2301      	movlt	r3, #1
 800aef8:	e006      	b.n	800af08 <_dtoa_r+0x250>
 800aefa:	2301      	movs	r3, #1
 800aefc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aefe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af00:	2b00      	cmp	r3, #0
 800af02:	dd28      	ble.n	800af56 <_dtoa_r+0x29e>
 800af04:	469b      	mov	fp, r3
 800af06:	9303      	str	r3, [sp, #12]
 800af08:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800af0c:	2100      	movs	r1, #0
 800af0e:	2204      	movs	r2, #4
 800af10:	f102 0514 	add.w	r5, r2, #20
 800af14:	429d      	cmp	r5, r3
 800af16:	d926      	bls.n	800af66 <_dtoa_r+0x2ae>
 800af18:	6041      	str	r1, [r0, #4]
 800af1a:	4648      	mov	r0, r9
 800af1c:	f000 fd9c 	bl	800ba58 <_Balloc>
 800af20:	4682      	mov	sl, r0
 800af22:	2800      	cmp	r0, #0
 800af24:	d142      	bne.n	800afac <_dtoa_r+0x2f4>
 800af26:	4b1e      	ldr	r3, [pc, #120]	@ (800afa0 <_dtoa_r+0x2e8>)
 800af28:	4602      	mov	r2, r0
 800af2a:	f240 11af 	movw	r1, #431	@ 0x1af
 800af2e:	e6da      	b.n	800ace6 <_dtoa_r+0x2e>
 800af30:	2300      	movs	r3, #0
 800af32:	e7e3      	b.n	800aefc <_dtoa_r+0x244>
 800af34:	2300      	movs	r3, #0
 800af36:	e7d5      	b.n	800aee4 <_dtoa_r+0x22c>
 800af38:	2401      	movs	r4, #1
 800af3a:	2300      	movs	r3, #0
 800af3c:	9307      	str	r3, [sp, #28]
 800af3e:	9409      	str	r4, [sp, #36]	@ 0x24
 800af40:	f04f 3bff 	mov.w	fp, #4294967295
 800af44:	2200      	movs	r2, #0
 800af46:	f8cd b00c 	str.w	fp, [sp, #12]
 800af4a:	2312      	movs	r3, #18
 800af4c:	920c      	str	r2, [sp, #48]	@ 0x30
 800af4e:	e7db      	b.n	800af08 <_dtoa_r+0x250>
 800af50:	2301      	movs	r3, #1
 800af52:	9309      	str	r3, [sp, #36]	@ 0x24
 800af54:	e7f4      	b.n	800af40 <_dtoa_r+0x288>
 800af56:	f04f 0b01 	mov.w	fp, #1
 800af5a:	f8cd b00c 	str.w	fp, [sp, #12]
 800af5e:	465b      	mov	r3, fp
 800af60:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800af64:	e7d0      	b.n	800af08 <_dtoa_r+0x250>
 800af66:	3101      	adds	r1, #1
 800af68:	0052      	lsls	r2, r2, #1
 800af6a:	e7d1      	b.n	800af10 <_dtoa_r+0x258>
 800af6c:	f3af 8000 	nop.w
 800af70:	636f4361 	.word	0x636f4361
 800af74:	3fd287a7 	.word	0x3fd287a7
 800af78:	8b60c8b3 	.word	0x8b60c8b3
 800af7c:	3fc68a28 	.word	0x3fc68a28
 800af80:	509f79fb 	.word	0x509f79fb
 800af84:	3fd34413 	.word	0x3fd34413
 800af88:	0800d3b1 	.word	0x0800d3b1
 800af8c:	0800d3c8 	.word	0x0800d3c8
 800af90:	7ff00000 	.word	0x7ff00000
 800af94:	0800d381 	.word	0x0800d381
 800af98:	3ff80000 	.word	0x3ff80000
 800af9c:	0800d518 	.word	0x0800d518
 800afa0:	0800d420 	.word	0x0800d420
 800afa4:	0800d3ad 	.word	0x0800d3ad
 800afa8:	0800d380 	.word	0x0800d380
 800afac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800afb0:	6018      	str	r0, [r3, #0]
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	2b0e      	cmp	r3, #14
 800afb6:	f200 80a1 	bhi.w	800b0fc <_dtoa_r+0x444>
 800afba:	2c00      	cmp	r4, #0
 800afbc:	f000 809e 	beq.w	800b0fc <_dtoa_r+0x444>
 800afc0:	2f00      	cmp	r7, #0
 800afc2:	dd33      	ble.n	800b02c <_dtoa_r+0x374>
 800afc4:	4b9c      	ldr	r3, [pc, #624]	@ (800b238 <_dtoa_r+0x580>)
 800afc6:	f007 020f 	and.w	r2, r7, #15
 800afca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afce:	ed93 7b00 	vldr	d7, [r3]
 800afd2:	05f8      	lsls	r0, r7, #23
 800afd4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800afd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800afdc:	d516      	bpl.n	800b00c <_dtoa_r+0x354>
 800afde:	4b97      	ldr	r3, [pc, #604]	@ (800b23c <_dtoa_r+0x584>)
 800afe0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800afe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800afe8:	f7f5 fc38 	bl	800085c <__aeabi_ddiv>
 800afec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aff0:	f004 040f 	and.w	r4, r4, #15
 800aff4:	2603      	movs	r6, #3
 800aff6:	4d91      	ldr	r5, [pc, #580]	@ (800b23c <_dtoa_r+0x584>)
 800aff8:	b954      	cbnz	r4, 800b010 <_dtoa_r+0x358>
 800affa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800affe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b002:	f7f5 fc2b 	bl	800085c <__aeabi_ddiv>
 800b006:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b00a:	e028      	b.n	800b05e <_dtoa_r+0x3a6>
 800b00c:	2602      	movs	r6, #2
 800b00e:	e7f2      	b.n	800aff6 <_dtoa_r+0x33e>
 800b010:	07e1      	lsls	r1, r4, #31
 800b012:	d508      	bpl.n	800b026 <_dtoa_r+0x36e>
 800b014:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b018:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b01c:	f7f5 faf4 	bl	8000608 <__aeabi_dmul>
 800b020:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b024:	3601      	adds	r6, #1
 800b026:	1064      	asrs	r4, r4, #1
 800b028:	3508      	adds	r5, #8
 800b02a:	e7e5      	b.n	800aff8 <_dtoa_r+0x340>
 800b02c:	f000 80af 	beq.w	800b18e <_dtoa_r+0x4d6>
 800b030:	427c      	negs	r4, r7
 800b032:	4b81      	ldr	r3, [pc, #516]	@ (800b238 <_dtoa_r+0x580>)
 800b034:	4d81      	ldr	r5, [pc, #516]	@ (800b23c <_dtoa_r+0x584>)
 800b036:	f004 020f 	and.w	r2, r4, #15
 800b03a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b042:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b046:	f7f5 fadf 	bl	8000608 <__aeabi_dmul>
 800b04a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b04e:	1124      	asrs	r4, r4, #4
 800b050:	2300      	movs	r3, #0
 800b052:	2602      	movs	r6, #2
 800b054:	2c00      	cmp	r4, #0
 800b056:	f040 808f 	bne.w	800b178 <_dtoa_r+0x4c0>
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d1d3      	bne.n	800b006 <_dtoa_r+0x34e>
 800b05e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b060:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8094 	beq.w	800b192 <_dtoa_r+0x4da>
 800b06a:	4b75      	ldr	r3, [pc, #468]	@ (800b240 <_dtoa_r+0x588>)
 800b06c:	2200      	movs	r2, #0
 800b06e:	4620      	mov	r0, r4
 800b070:	4629      	mov	r1, r5
 800b072:	f7f5 fd3b 	bl	8000aec <__aeabi_dcmplt>
 800b076:	2800      	cmp	r0, #0
 800b078:	f000 808b 	beq.w	800b192 <_dtoa_r+0x4da>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 8087 	beq.w	800b192 <_dtoa_r+0x4da>
 800b084:	f1bb 0f00 	cmp.w	fp, #0
 800b088:	dd34      	ble.n	800b0f4 <_dtoa_r+0x43c>
 800b08a:	4620      	mov	r0, r4
 800b08c:	4b6d      	ldr	r3, [pc, #436]	@ (800b244 <_dtoa_r+0x58c>)
 800b08e:	2200      	movs	r2, #0
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 fab9 	bl	8000608 <__aeabi_dmul>
 800b096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b09a:	f107 38ff 	add.w	r8, r7, #4294967295
 800b09e:	3601      	adds	r6, #1
 800b0a0:	465c      	mov	r4, fp
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	f7f5 fa46 	bl	8000534 <__aeabi_i2d>
 800b0a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ac:	f7f5 faac 	bl	8000608 <__aeabi_dmul>
 800b0b0:	4b65      	ldr	r3, [pc, #404]	@ (800b248 <_dtoa_r+0x590>)
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f7f5 f8f2 	bl	800029c <__adddf3>
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b0be:	2c00      	cmp	r4, #0
 800b0c0:	d16a      	bne.n	800b198 <_dtoa_r+0x4e0>
 800b0c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0c6:	4b61      	ldr	r3, [pc, #388]	@ (800b24c <_dtoa_r+0x594>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f7f5 f8e5 	bl	8000298 <__aeabi_dsub>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	4633      	mov	r3, r6
 800b0da:	f7f5 fd25 	bl	8000b28 <__aeabi_dcmpgt>
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f040 8298 	bne.w	800b614 <_dtoa_r+0x95c>
 800b0e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0e8:	462a      	mov	r2, r5
 800b0ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b0ee:	f7f5 fcfd 	bl	8000aec <__aeabi_dcmplt>
 800b0f2:	bb38      	cbnz	r0, 800b144 <_dtoa_r+0x48c>
 800b0f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b0f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b0fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f2c0 8157 	blt.w	800b3b2 <_dtoa_r+0x6fa>
 800b104:	2f0e      	cmp	r7, #14
 800b106:	f300 8154 	bgt.w	800b3b2 <_dtoa_r+0x6fa>
 800b10a:	4b4b      	ldr	r3, [pc, #300]	@ (800b238 <_dtoa_r+0x580>)
 800b10c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b110:	ed93 7b00 	vldr	d7, [r3]
 800b114:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b116:	2b00      	cmp	r3, #0
 800b118:	ed8d 7b00 	vstr	d7, [sp]
 800b11c:	f280 80e5 	bge.w	800b2ea <_dtoa_r+0x632>
 800b120:	9b03      	ldr	r3, [sp, #12]
 800b122:	2b00      	cmp	r3, #0
 800b124:	f300 80e1 	bgt.w	800b2ea <_dtoa_r+0x632>
 800b128:	d10c      	bne.n	800b144 <_dtoa_r+0x48c>
 800b12a:	4b48      	ldr	r3, [pc, #288]	@ (800b24c <_dtoa_r+0x594>)
 800b12c:	2200      	movs	r2, #0
 800b12e:	ec51 0b17 	vmov	r0, r1, d7
 800b132:	f7f5 fa69 	bl	8000608 <__aeabi_dmul>
 800b136:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b13a:	f7f5 fceb 	bl	8000b14 <__aeabi_dcmpge>
 800b13e:	2800      	cmp	r0, #0
 800b140:	f000 8266 	beq.w	800b610 <_dtoa_r+0x958>
 800b144:	2400      	movs	r4, #0
 800b146:	4625      	mov	r5, r4
 800b148:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b14a:	4656      	mov	r6, sl
 800b14c:	ea6f 0803 	mvn.w	r8, r3
 800b150:	2700      	movs	r7, #0
 800b152:	4621      	mov	r1, r4
 800b154:	4648      	mov	r0, r9
 800b156:	f000 fcbf 	bl	800bad8 <_Bfree>
 800b15a:	2d00      	cmp	r5, #0
 800b15c:	f000 80bd 	beq.w	800b2da <_dtoa_r+0x622>
 800b160:	b12f      	cbz	r7, 800b16e <_dtoa_r+0x4b6>
 800b162:	42af      	cmp	r7, r5
 800b164:	d003      	beq.n	800b16e <_dtoa_r+0x4b6>
 800b166:	4639      	mov	r1, r7
 800b168:	4648      	mov	r0, r9
 800b16a:	f000 fcb5 	bl	800bad8 <_Bfree>
 800b16e:	4629      	mov	r1, r5
 800b170:	4648      	mov	r0, r9
 800b172:	f000 fcb1 	bl	800bad8 <_Bfree>
 800b176:	e0b0      	b.n	800b2da <_dtoa_r+0x622>
 800b178:	07e2      	lsls	r2, r4, #31
 800b17a:	d505      	bpl.n	800b188 <_dtoa_r+0x4d0>
 800b17c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b180:	f7f5 fa42 	bl	8000608 <__aeabi_dmul>
 800b184:	3601      	adds	r6, #1
 800b186:	2301      	movs	r3, #1
 800b188:	1064      	asrs	r4, r4, #1
 800b18a:	3508      	adds	r5, #8
 800b18c:	e762      	b.n	800b054 <_dtoa_r+0x39c>
 800b18e:	2602      	movs	r6, #2
 800b190:	e765      	b.n	800b05e <_dtoa_r+0x3a6>
 800b192:	9c03      	ldr	r4, [sp, #12]
 800b194:	46b8      	mov	r8, r7
 800b196:	e784      	b.n	800b0a2 <_dtoa_r+0x3ea>
 800b198:	4b27      	ldr	r3, [pc, #156]	@ (800b238 <_dtoa_r+0x580>)
 800b19a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b19c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1a4:	4454      	add	r4, sl
 800b1a6:	2900      	cmp	r1, #0
 800b1a8:	d054      	beq.n	800b254 <_dtoa_r+0x59c>
 800b1aa:	4929      	ldr	r1, [pc, #164]	@ (800b250 <_dtoa_r+0x598>)
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	f7f5 fb55 	bl	800085c <__aeabi_ddiv>
 800b1b2:	4633      	mov	r3, r6
 800b1b4:	462a      	mov	r2, r5
 800b1b6:	f7f5 f86f 	bl	8000298 <__aeabi_dsub>
 800b1ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1be:	4656      	mov	r6, sl
 800b1c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1c4:	f7f5 fcd0 	bl	8000b68 <__aeabi_d2iz>
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	f7f5 f9b3 	bl	8000534 <__aeabi_i2d>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1d6:	f7f5 f85f 	bl	8000298 <__aeabi_dsub>
 800b1da:	3530      	adds	r5, #48	@ 0x30
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b1e4:	f806 5b01 	strb.w	r5, [r6], #1
 800b1e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b1ec:	f7f5 fc7e 	bl	8000aec <__aeabi_dcmplt>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d172      	bne.n	800b2da <_dtoa_r+0x622>
 800b1f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1f8:	4911      	ldr	r1, [pc, #68]	@ (800b240 <_dtoa_r+0x588>)
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	f7f5 f84c 	bl	8000298 <__aeabi_dsub>
 800b200:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b204:	f7f5 fc72 	bl	8000aec <__aeabi_dcmplt>
 800b208:	2800      	cmp	r0, #0
 800b20a:	f040 80b4 	bne.w	800b376 <_dtoa_r+0x6be>
 800b20e:	42a6      	cmp	r6, r4
 800b210:	f43f af70 	beq.w	800b0f4 <_dtoa_r+0x43c>
 800b214:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b218:	4b0a      	ldr	r3, [pc, #40]	@ (800b244 <_dtoa_r+0x58c>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	f7f5 f9f4 	bl	8000608 <__aeabi_dmul>
 800b220:	4b08      	ldr	r3, [pc, #32]	@ (800b244 <_dtoa_r+0x58c>)
 800b222:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b226:	2200      	movs	r2, #0
 800b228:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b22c:	f7f5 f9ec 	bl	8000608 <__aeabi_dmul>
 800b230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b234:	e7c4      	b.n	800b1c0 <_dtoa_r+0x508>
 800b236:	bf00      	nop
 800b238:	0800d518 	.word	0x0800d518
 800b23c:	0800d4f0 	.word	0x0800d4f0
 800b240:	3ff00000 	.word	0x3ff00000
 800b244:	40240000 	.word	0x40240000
 800b248:	401c0000 	.word	0x401c0000
 800b24c:	40140000 	.word	0x40140000
 800b250:	3fe00000 	.word	0x3fe00000
 800b254:	4631      	mov	r1, r6
 800b256:	4628      	mov	r0, r5
 800b258:	f7f5 f9d6 	bl	8000608 <__aeabi_dmul>
 800b25c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b260:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b262:	4656      	mov	r6, sl
 800b264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b268:	f7f5 fc7e 	bl	8000b68 <__aeabi_d2iz>
 800b26c:	4605      	mov	r5, r0
 800b26e:	f7f5 f961 	bl	8000534 <__aeabi_i2d>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b27a:	f7f5 f80d 	bl	8000298 <__aeabi_dsub>
 800b27e:	3530      	adds	r5, #48	@ 0x30
 800b280:	f806 5b01 	strb.w	r5, [r6], #1
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	42a6      	cmp	r6, r4
 800b28a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b28e:	f04f 0200 	mov.w	r2, #0
 800b292:	d124      	bne.n	800b2de <_dtoa_r+0x626>
 800b294:	4baf      	ldr	r3, [pc, #700]	@ (800b554 <_dtoa_r+0x89c>)
 800b296:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b29a:	f7f4 ffff 	bl	800029c <__adddf3>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2a6:	f7f5 fc3f 	bl	8000b28 <__aeabi_dcmpgt>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d163      	bne.n	800b376 <_dtoa_r+0x6be>
 800b2ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b2b2:	49a8      	ldr	r1, [pc, #672]	@ (800b554 <_dtoa_r+0x89c>)
 800b2b4:	2000      	movs	r0, #0
 800b2b6:	f7f4 ffef 	bl	8000298 <__aeabi_dsub>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2c2:	f7f5 fc13 	bl	8000aec <__aeabi_dcmplt>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	f43f af14 	beq.w	800b0f4 <_dtoa_r+0x43c>
 800b2cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b2ce:	1e73      	subs	r3, r6, #1
 800b2d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2d6:	2b30      	cmp	r3, #48	@ 0x30
 800b2d8:	d0f8      	beq.n	800b2cc <_dtoa_r+0x614>
 800b2da:	4647      	mov	r7, r8
 800b2dc:	e03b      	b.n	800b356 <_dtoa_r+0x69e>
 800b2de:	4b9e      	ldr	r3, [pc, #632]	@ (800b558 <_dtoa_r+0x8a0>)
 800b2e0:	f7f5 f992 	bl	8000608 <__aeabi_dmul>
 800b2e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b2e8:	e7bc      	b.n	800b264 <_dtoa_r+0x5ac>
 800b2ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b2ee:	4656      	mov	r6, sl
 800b2f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2f4:	4620      	mov	r0, r4
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f7f5 fab0 	bl	800085c <__aeabi_ddiv>
 800b2fc:	f7f5 fc34 	bl	8000b68 <__aeabi_d2iz>
 800b300:	4680      	mov	r8, r0
 800b302:	f7f5 f917 	bl	8000534 <__aeabi_i2d>
 800b306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b30a:	f7f5 f97d 	bl	8000608 <__aeabi_dmul>
 800b30e:	4602      	mov	r2, r0
 800b310:	460b      	mov	r3, r1
 800b312:	4620      	mov	r0, r4
 800b314:	4629      	mov	r1, r5
 800b316:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b31a:	f7f4 ffbd 	bl	8000298 <__aeabi_dsub>
 800b31e:	f806 4b01 	strb.w	r4, [r6], #1
 800b322:	9d03      	ldr	r5, [sp, #12]
 800b324:	eba6 040a 	sub.w	r4, r6, sl
 800b328:	42a5      	cmp	r5, r4
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	d133      	bne.n	800b398 <_dtoa_r+0x6e0>
 800b330:	f7f4 ffb4 	bl	800029c <__adddf3>
 800b334:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	f7f5 fbf4 	bl	8000b28 <__aeabi_dcmpgt>
 800b340:	b9c0      	cbnz	r0, 800b374 <_dtoa_r+0x6bc>
 800b342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b346:	4620      	mov	r0, r4
 800b348:	4629      	mov	r1, r5
 800b34a:	f7f5 fbc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800b34e:	b110      	cbz	r0, 800b356 <_dtoa_r+0x69e>
 800b350:	f018 0f01 	tst.w	r8, #1
 800b354:	d10e      	bne.n	800b374 <_dtoa_r+0x6bc>
 800b356:	9902      	ldr	r1, [sp, #8]
 800b358:	4648      	mov	r0, r9
 800b35a:	f000 fbbd 	bl	800bad8 <_Bfree>
 800b35e:	2300      	movs	r3, #0
 800b360:	7033      	strb	r3, [r6, #0]
 800b362:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b364:	3701      	adds	r7, #1
 800b366:	601f      	str	r7, [r3, #0]
 800b368:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 824b 	beq.w	800b806 <_dtoa_r+0xb4e>
 800b370:	601e      	str	r6, [r3, #0]
 800b372:	e248      	b.n	800b806 <_dtoa_r+0xb4e>
 800b374:	46b8      	mov	r8, r7
 800b376:	4633      	mov	r3, r6
 800b378:	461e      	mov	r6, r3
 800b37a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b37e:	2a39      	cmp	r2, #57	@ 0x39
 800b380:	d106      	bne.n	800b390 <_dtoa_r+0x6d8>
 800b382:	459a      	cmp	sl, r3
 800b384:	d1f8      	bne.n	800b378 <_dtoa_r+0x6c0>
 800b386:	2230      	movs	r2, #48	@ 0x30
 800b388:	f108 0801 	add.w	r8, r8, #1
 800b38c:	f88a 2000 	strb.w	r2, [sl]
 800b390:	781a      	ldrb	r2, [r3, #0]
 800b392:	3201      	adds	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	e7a0      	b.n	800b2da <_dtoa_r+0x622>
 800b398:	4b6f      	ldr	r3, [pc, #444]	@ (800b558 <_dtoa_r+0x8a0>)
 800b39a:	2200      	movs	r2, #0
 800b39c:	f7f5 f934 	bl	8000608 <__aeabi_dmul>
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	460d      	mov	r5, r1
 800b3a8:	f7f5 fb96 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	d09f      	beq.n	800b2f0 <_dtoa_r+0x638>
 800b3b0:	e7d1      	b.n	800b356 <_dtoa_r+0x69e>
 800b3b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3b4:	2a00      	cmp	r2, #0
 800b3b6:	f000 80ea 	beq.w	800b58e <_dtoa_r+0x8d6>
 800b3ba:	9a07      	ldr	r2, [sp, #28]
 800b3bc:	2a01      	cmp	r2, #1
 800b3be:	f300 80cd 	bgt.w	800b55c <_dtoa_r+0x8a4>
 800b3c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b3c4:	2a00      	cmp	r2, #0
 800b3c6:	f000 80c1 	beq.w	800b54c <_dtoa_r+0x894>
 800b3ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b3ce:	9c08      	ldr	r4, [sp, #32]
 800b3d0:	9e00      	ldr	r6, [sp, #0]
 800b3d2:	9a00      	ldr	r2, [sp, #0]
 800b3d4:	441a      	add	r2, r3
 800b3d6:	9200      	str	r2, [sp, #0]
 800b3d8:	9a06      	ldr	r2, [sp, #24]
 800b3da:	2101      	movs	r1, #1
 800b3dc:	441a      	add	r2, r3
 800b3de:	4648      	mov	r0, r9
 800b3e0:	9206      	str	r2, [sp, #24]
 800b3e2:	f000 fc2d 	bl	800bc40 <__i2b>
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	b166      	cbz	r6, 800b404 <_dtoa_r+0x74c>
 800b3ea:	9b06      	ldr	r3, [sp, #24]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dd09      	ble.n	800b404 <_dtoa_r+0x74c>
 800b3f0:	42b3      	cmp	r3, r6
 800b3f2:	9a00      	ldr	r2, [sp, #0]
 800b3f4:	bfa8      	it	ge
 800b3f6:	4633      	movge	r3, r6
 800b3f8:	1ad2      	subs	r2, r2, r3
 800b3fa:	9200      	str	r2, [sp, #0]
 800b3fc:	9a06      	ldr	r2, [sp, #24]
 800b3fe:	1af6      	subs	r6, r6, r3
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	9306      	str	r3, [sp, #24]
 800b404:	9b08      	ldr	r3, [sp, #32]
 800b406:	b30b      	cbz	r3, 800b44c <_dtoa_r+0x794>
 800b408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	f000 80c6 	beq.w	800b59c <_dtoa_r+0x8e4>
 800b410:	2c00      	cmp	r4, #0
 800b412:	f000 80c0 	beq.w	800b596 <_dtoa_r+0x8de>
 800b416:	4629      	mov	r1, r5
 800b418:	4622      	mov	r2, r4
 800b41a:	4648      	mov	r0, r9
 800b41c:	f000 fcc8 	bl	800bdb0 <__pow5mult>
 800b420:	9a02      	ldr	r2, [sp, #8]
 800b422:	4601      	mov	r1, r0
 800b424:	4605      	mov	r5, r0
 800b426:	4648      	mov	r0, r9
 800b428:	f000 fc20 	bl	800bc6c <__multiply>
 800b42c:	9902      	ldr	r1, [sp, #8]
 800b42e:	4680      	mov	r8, r0
 800b430:	4648      	mov	r0, r9
 800b432:	f000 fb51 	bl	800bad8 <_Bfree>
 800b436:	9b08      	ldr	r3, [sp, #32]
 800b438:	1b1b      	subs	r3, r3, r4
 800b43a:	9308      	str	r3, [sp, #32]
 800b43c:	f000 80b1 	beq.w	800b5a2 <_dtoa_r+0x8ea>
 800b440:	9a08      	ldr	r2, [sp, #32]
 800b442:	4641      	mov	r1, r8
 800b444:	4648      	mov	r0, r9
 800b446:	f000 fcb3 	bl	800bdb0 <__pow5mult>
 800b44a:	9002      	str	r0, [sp, #8]
 800b44c:	2101      	movs	r1, #1
 800b44e:	4648      	mov	r0, r9
 800b450:	f000 fbf6 	bl	800bc40 <__i2b>
 800b454:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b456:	4604      	mov	r4, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	f000 81d8 	beq.w	800b80e <_dtoa_r+0xb56>
 800b45e:	461a      	mov	r2, r3
 800b460:	4601      	mov	r1, r0
 800b462:	4648      	mov	r0, r9
 800b464:	f000 fca4 	bl	800bdb0 <__pow5mult>
 800b468:	9b07      	ldr	r3, [sp, #28]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	4604      	mov	r4, r0
 800b46e:	f300 809f 	bgt.w	800b5b0 <_dtoa_r+0x8f8>
 800b472:	9b04      	ldr	r3, [sp, #16]
 800b474:	2b00      	cmp	r3, #0
 800b476:	f040 8097 	bne.w	800b5a8 <_dtoa_r+0x8f0>
 800b47a:	9b05      	ldr	r3, [sp, #20]
 800b47c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b480:	2b00      	cmp	r3, #0
 800b482:	f040 8093 	bne.w	800b5ac <_dtoa_r+0x8f4>
 800b486:	9b05      	ldr	r3, [sp, #20]
 800b488:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b48c:	0d1b      	lsrs	r3, r3, #20
 800b48e:	051b      	lsls	r3, r3, #20
 800b490:	b133      	cbz	r3, 800b4a0 <_dtoa_r+0x7e8>
 800b492:	9b00      	ldr	r3, [sp, #0]
 800b494:	3301      	adds	r3, #1
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	9b06      	ldr	r3, [sp, #24]
 800b49a:	3301      	adds	r3, #1
 800b49c:	9306      	str	r3, [sp, #24]
 800b49e:	2301      	movs	r3, #1
 800b4a0:	9308      	str	r3, [sp, #32]
 800b4a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 81b8 	beq.w	800b81a <_dtoa_r+0xb62>
 800b4aa:	6923      	ldr	r3, [r4, #16]
 800b4ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4b0:	6918      	ldr	r0, [r3, #16]
 800b4b2:	f000 fb79 	bl	800bba8 <__hi0bits>
 800b4b6:	f1c0 0020 	rsb	r0, r0, #32
 800b4ba:	9b06      	ldr	r3, [sp, #24]
 800b4bc:	4418      	add	r0, r3
 800b4be:	f010 001f 	ands.w	r0, r0, #31
 800b4c2:	f000 8082 	beq.w	800b5ca <_dtoa_r+0x912>
 800b4c6:	f1c0 0320 	rsb	r3, r0, #32
 800b4ca:	2b04      	cmp	r3, #4
 800b4cc:	dd73      	ble.n	800b5b6 <_dtoa_r+0x8fe>
 800b4ce:	9b00      	ldr	r3, [sp, #0]
 800b4d0:	f1c0 001c 	rsb	r0, r0, #28
 800b4d4:	4403      	add	r3, r0
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	9b06      	ldr	r3, [sp, #24]
 800b4da:	4403      	add	r3, r0
 800b4dc:	4406      	add	r6, r0
 800b4de:	9306      	str	r3, [sp, #24]
 800b4e0:	9b00      	ldr	r3, [sp, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	dd05      	ble.n	800b4f2 <_dtoa_r+0x83a>
 800b4e6:	9902      	ldr	r1, [sp, #8]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	4648      	mov	r0, r9
 800b4ec:	f000 fcba 	bl	800be64 <__lshift>
 800b4f0:	9002      	str	r0, [sp, #8]
 800b4f2:	9b06      	ldr	r3, [sp, #24]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dd05      	ble.n	800b504 <_dtoa_r+0x84c>
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	4648      	mov	r0, r9
 800b4fe:	f000 fcb1 	bl	800be64 <__lshift>
 800b502:	4604      	mov	r4, r0
 800b504:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b506:	2b00      	cmp	r3, #0
 800b508:	d061      	beq.n	800b5ce <_dtoa_r+0x916>
 800b50a:	9802      	ldr	r0, [sp, #8]
 800b50c:	4621      	mov	r1, r4
 800b50e:	f000 fd15 	bl	800bf3c <__mcmp>
 800b512:	2800      	cmp	r0, #0
 800b514:	da5b      	bge.n	800b5ce <_dtoa_r+0x916>
 800b516:	2300      	movs	r3, #0
 800b518:	9902      	ldr	r1, [sp, #8]
 800b51a:	220a      	movs	r2, #10
 800b51c:	4648      	mov	r0, r9
 800b51e:	f000 fafd 	bl	800bb1c <__multadd>
 800b522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b524:	9002      	str	r0, [sp, #8]
 800b526:	f107 38ff 	add.w	r8, r7, #4294967295
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 8177 	beq.w	800b81e <_dtoa_r+0xb66>
 800b530:	4629      	mov	r1, r5
 800b532:	2300      	movs	r3, #0
 800b534:	220a      	movs	r2, #10
 800b536:	4648      	mov	r0, r9
 800b538:	f000 faf0 	bl	800bb1c <__multadd>
 800b53c:	f1bb 0f00 	cmp.w	fp, #0
 800b540:	4605      	mov	r5, r0
 800b542:	dc6f      	bgt.n	800b624 <_dtoa_r+0x96c>
 800b544:	9b07      	ldr	r3, [sp, #28]
 800b546:	2b02      	cmp	r3, #2
 800b548:	dc49      	bgt.n	800b5de <_dtoa_r+0x926>
 800b54a:	e06b      	b.n	800b624 <_dtoa_r+0x96c>
 800b54c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b54e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b552:	e73c      	b.n	800b3ce <_dtoa_r+0x716>
 800b554:	3fe00000 	.word	0x3fe00000
 800b558:	40240000 	.word	0x40240000
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	1e5c      	subs	r4, r3, #1
 800b560:	9b08      	ldr	r3, [sp, #32]
 800b562:	42a3      	cmp	r3, r4
 800b564:	db09      	blt.n	800b57a <_dtoa_r+0x8c2>
 800b566:	1b1c      	subs	r4, r3, r4
 800b568:	9b03      	ldr	r3, [sp, #12]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f6bf af30 	bge.w	800b3d0 <_dtoa_r+0x718>
 800b570:	9b00      	ldr	r3, [sp, #0]
 800b572:	9a03      	ldr	r2, [sp, #12]
 800b574:	1a9e      	subs	r6, r3, r2
 800b576:	2300      	movs	r3, #0
 800b578:	e72b      	b.n	800b3d2 <_dtoa_r+0x71a>
 800b57a:	9b08      	ldr	r3, [sp, #32]
 800b57c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b57e:	9408      	str	r4, [sp, #32]
 800b580:	1ae3      	subs	r3, r4, r3
 800b582:	441a      	add	r2, r3
 800b584:	9e00      	ldr	r6, [sp, #0]
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	920d      	str	r2, [sp, #52]	@ 0x34
 800b58a:	2400      	movs	r4, #0
 800b58c:	e721      	b.n	800b3d2 <_dtoa_r+0x71a>
 800b58e:	9c08      	ldr	r4, [sp, #32]
 800b590:	9e00      	ldr	r6, [sp, #0]
 800b592:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b594:	e728      	b.n	800b3e8 <_dtoa_r+0x730>
 800b596:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b59a:	e751      	b.n	800b440 <_dtoa_r+0x788>
 800b59c:	9a08      	ldr	r2, [sp, #32]
 800b59e:	9902      	ldr	r1, [sp, #8]
 800b5a0:	e750      	b.n	800b444 <_dtoa_r+0x78c>
 800b5a2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b5a6:	e751      	b.n	800b44c <_dtoa_r+0x794>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	e779      	b.n	800b4a0 <_dtoa_r+0x7e8>
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	e777      	b.n	800b4a0 <_dtoa_r+0x7e8>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	9308      	str	r3, [sp, #32]
 800b5b4:	e779      	b.n	800b4aa <_dtoa_r+0x7f2>
 800b5b6:	d093      	beq.n	800b4e0 <_dtoa_r+0x828>
 800b5b8:	9a00      	ldr	r2, [sp, #0]
 800b5ba:	331c      	adds	r3, #28
 800b5bc:	441a      	add	r2, r3
 800b5be:	9200      	str	r2, [sp, #0]
 800b5c0:	9a06      	ldr	r2, [sp, #24]
 800b5c2:	441a      	add	r2, r3
 800b5c4:	441e      	add	r6, r3
 800b5c6:	9206      	str	r2, [sp, #24]
 800b5c8:	e78a      	b.n	800b4e0 <_dtoa_r+0x828>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	e7f4      	b.n	800b5b8 <_dtoa_r+0x900>
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	46b8      	mov	r8, r7
 800b5d4:	dc20      	bgt.n	800b618 <_dtoa_r+0x960>
 800b5d6:	469b      	mov	fp, r3
 800b5d8:	9b07      	ldr	r3, [sp, #28]
 800b5da:	2b02      	cmp	r3, #2
 800b5dc:	dd1e      	ble.n	800b61c <_dtoa_r+0x964>
 800b5de:	f1bb 0f00 	cmp.w	fp, #0
 800b5e2:	f47f adb1 	bne.w	800b148 <_dtoa_r+0x490>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	465b      	mov	r3, fp
 800b5ea:	2205      	movs	r2, #5
 800b5ec:	4648      	mov	r0, r9
 800b5ee:	f000 fa95 	bl	800bb1c <__multadd>
 800b5f2:	4601      	mov	r1, r0
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	9802      	ldr	r0, [sp, #8]
 800b5f8:	f000 fca0 	bl	800bf3c <__mcmp>
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f77f ada3 	ble.w	800b148 <_dtoa_r+0x490>
 800b602:	4656      	mov	r6, sl
 800b604:	2331      	movs	r3, #49	@ 0x31
 800b606:	f806 3b01 	strb.w	r3, [r6], #1
 800b60a:	f108 0801 	add.w	r8, r8, #1
 800b60e:	e59f      	b.n	800b150 <_dtoa_r+0x498>
 800b610:	9c03      	ldr	r4, [sp, #12]
 800b612:	46b8      	mov	r8, r7
 800b614:	4625      	mov	r5, r4
 800b616:	e7f4      	b.n	800b602 <_dtoa_r+0x94a>
 800b618:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61e:	2b00      	cmp	r3, #0
 800b620:	f000 8101 	beq.w	800b826 <_dtoa_r+0xb6e>
 800b624:	2e00      	cmp	r6, #0
 800b626:	dd05      	ble.n	800b634 <_dtoa_r+0x97c>
 800b628:	4629      	mov	r1, r5
 800b62a:	4632      	mov	r2, r6
 800b62c:	4648      	mov	r0, r9
 800b62e:	f000 fc19 	bl	800be64 <__lshift>
 800b632:	4605      	mov	r5, r0
 800b634:	9b08      	ldr	r3, [sp, #32]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d05c      	beq.n	800b6f4 <_dtoa_r+0xa3c>
 800b63a:	6869      	ldr	r1, [r5, #4]
 800b63c:	4648      	mov	r0, r9
 800b63e:	f000 fa0b 	bl	800ba58 <_Balloc>
 800b642:	4606      	mov	r6, r0
 800b644:	b928      	cbnz	r0, 800b652 <_dtoa_r+0x99a>
 800b646:	4b82      	ldr	r3, [pc, #520]	@ (800b850 <_dtoa_r+0xb98>)
 800b648:	4602      	mov	r2, r0
 800b64a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b64e:	f7ff bb4a 	b.w	800ace6 <_dtoa_r+0x2e>
 800b652:	692a      	ldr	r2, [r5, #16]
 800b654:	3202      	adds	r2, #2
 800b656:	0092      	lsls	r2, r2, #2
 800b658:	f105 010c 	add.w	r1, r5, #12
 800b65c:	300c      	adds	r0, #12
 800b65e:	f7ff fa92 	bl	800ab86 <memcpy>
 800b662:	2201      	movs	r2, #1
 800b664:	4631      	mov	r1, r6
 800b666:	4648      	mov	r0, r9
 800b668:	f000 fbfc 	bl	800be64 <__lshift>
 800b66c:	f10a 0301 	add.w	r3, sl, #1
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	eb0a 030b 	add.w	r3, sl, fp
 800b676:	9308      	str	r3, [sp, #32]
 800b678:	9b04      	ldr	r3, [sp, #16]
 800b67a:	f003 0301 	and.w	r3, r3, #1
 800b67e:	462f      	mov	r7, r5
 800b680:	9306      	str	r3, [sp, #24]
 800b682:	4605      	mov	r5, r0
 800b684:	9b00      	ldr	r3, [sp, #0]
 800b686:	9802      	ldr	r0, [sp, #8]
 800b688:	4621      	mov	r1, r4
 800b68a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b68e:	f7ff fa88 	bl	800aba2 <quorem>
 800b692:	4603      	mov	r3, r0
 800b694:	3330      	adds	r3, #48	@ 0x30
 800b696:	9003      	str	r0, [sp, #12]
 800b698:	4639      	mov	r1, r7
 800b69a:	9802      	ldr	r0, [sp, #8]
 800b69c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b69e:	f000 fc4d 	bl	800bf3c <__mcmp>
 800b6a2:	462a      	mov	r2, r5
 800b6a4:	9004      	str	r0, [sp, #16]
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	4648      	mov	r0, r9
 800b6aa:	f000 fc63 	bl	800bf74 <__mdiff>
 800b6ae:	68c2      	ldr	r2, [r0, #12]
 800b6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	bb02      	cbnz	r2, 800b6f8 <_dtoa_r+0xa40>
 800b6b6:	4601      	mov	r1, r0
 800b6b8:	9802      	ldr	r0, [sp, #8]
 800b6ba:	f000 fc3f 	bl	800bf3c <__mcmp>
 800b6be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	4648      	mov	r0, r9
 800b6c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6ca:	f000 fa05 	bl	800bad8 <_Bfree>
 800b6ce:	9b07      	ldr	r3, [sp, #28]
 800b6d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b6d2:	9e00      	ldr	r6, [sp, #0]
 800b6d4:	ea42 0103 	orr.w	r1, r2, r3
 800b6d8:	9b06      	ldr	r3, [sp, #24]
 800b6da:	4319      	orrs	r1, r3
 800b6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6de:	d10d      	bne.n	800b6fc <_dtoa_r+0xa44>
 800b6e0:	2b39      	cmp	r3, #57	@ 0x39
 800b6e2:	d027      	beq.n	800b734 <_dtoa_r+0xa7c>
 800b6e4:	9a04      	ldr	r2, [sp, #16]
 800b6e6:	2a00      	cmp	r2, #0
 800b6e8:	dd01      	ble.n	800b6ee <_dtoa_r+0xa36>
 800b6ea:	9b03      	ldr	r3, [sp, #12]
 800b6ec:	3331      	adds	r3, #49	@ 0x31
 800b6ee:	f88b 3000 	strb.w	r3, [fp]
 800b6f2:	e52e      	b.n	800b152 <_dtoa_r+0x49a>
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	e7b9      	b.n	800b66c <_dtoa_r+0x9b4>
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	e7e2      	b.n	800b6c2 <_dtoa_r+0xa0a>
 800b6fc:	9904      	ldr	r1, [sp, #16]
 800b6fe:	2900      	cmp	r1, #0
 800b700:	db04      	blt.n	800b70c <_dtoa_r+0xa54>
 800b702:	9807      	ldr	r0, [sp, #28]
 800b704:	4301      	orrs	r1, r0
 800b706:	9806      	ldr	r0, [sp, #24]
 800b708:	4301      	orrs	r1, r0
 800b70a:	d120      	bne.n	800b74e <_dtoa_r+0xa96>
 800b70c:	2a00      	cmp	r2, #0
 800b70e:	ddee      	ble.n	800b6ee <_dtoa_r+0xa36>
 800b710:	9902      	ldr	r1, [sp, #8]
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	2201      	movs	r2, #1
 800b716:	4648      	mov	r0, r9
 800b718:	f000 fba4 	bl	800be64 <__lshift>
 800b71c:	4621      	mov	r1, r4
 800b71e:	9002      	str	r0, [sp, #8]
 800b720:	f000 fc0c 	bl	800bf3c <__mcmp>
 800b724:	2800      	cmp	r0, #0
 800b726:	9b00      	ldr	r3, [sp, #0]
 800b728:	dc02      	bgt.n	800b730 <_dtoa_r+0xa78>
 800b72a:	d1e0      	bne.n	800b6ee <_dtoa_r+0xa36>
 800b72c:	07da      	lsls	r2, r3, #31
 800b72e:	d5de      	bpl.n	800b6ee <_dtoa_r+0xa36>
 800b730:	2b39      	cmp	r3, #57	@ 0x39
 800b732:	d1da      	bne.n	800b6ea <_dtoa_r+0xa32>
 800b734:	2339      	movs	r3, #57	@ 0x39
 800b736:	f88b 3000 	strb.w	r3, [fp]
 800b73a:	4633      	mov	r3, r6
 800b73c:	461e      	mov	r6, r3
 800b73e:	3b01      	subs	r3, #1
 800b740:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b744:	2a39      	cmp	r2, #57	@ 0x39
 800b746:	d04e      	beq.n	800b7e6 <_dtoa_r+0xb2e>
 800b748:	3201      	adds	r2, #1
 800b74a:	701a      	strb	r2, [r3, #0]
 800b74c:	e501      	b.n	800b152 <_dtoa_r+0x49a>
 800b74e:	2a00      	cmp	r2, #0
 800b750:	dd03      	ble.n	800b75a <_dtoa_r+0xaa2>
 800b752:	2b39      	cmp	r3, #57	@ 0x39
 800b754:	d0ee      	beq.n	800b734 <_dtoa_r+0xa7c>
 800b756:	3301      	adds	r3, #1
 800b758:	e7c9      	b.n	800b6ee <_dtoa_r+0xa36>
 800b75a:	9a00      	ldr	r2, [sp, #0]
 800b75c:	9908      	ldr	r1, [sp, #32]
 800b75e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b762:	428a      	cmp	r2, r1
 800b764:	d028      	beq.n	800b7b8 <_dtoa_r+0xb00>
 800b766:	9902      	ldr	r1, [sp, #8]
 800b768:	2300      	movs	r3, #0
 800b76a:	220a      	movs	r2, #10
 800b76c:	4648      	mov	r0, r9
 800b76e:	f000 f9d5 	bl	800bb1c <__multadd>
 800b772:	42af      	cmp	r7, r5
 800b774:	9002      	str	r0, [sp, #8]
 800b776:	f04f 0300 	mov.w	r3, #0
 800b77a:	f04f 020a 	mov.w	r2, #10
 800b77e:	4639      	mov	r1, r7
 800b780:	4648      	mov	r0, r9
 800b782:	d107      	bne.n	800b794 <_dtoa_r+0xadc>
 800b784:	f000 f9ca 	bl	800bb1c <__multadd>
 800b788:	4607      	mov	r7, r0
 800b78a:	4605      	mov	r5, r0
 800b78c:	9b00      	ldr	r3, [sp, #0]
 800b78e:	3301      	adds	r3, #1
 800b790:	9300      	str	r3, [sp, #0]
 800b792:	e777      	b.n	800b684 <_dtoa_r+0x9cc>
 800b794:	f000 f9c2 	bl	800bb1c <__multadd>
 800b798:	4629      	mov	r1, r5
 800b79a:	4607      	mov	r7, r0
 800b79c:	2300      	movs	r3, #0
 800b79e:	220a      	movs	r2, #10
 800b7a0:	4648      	mov	r0, r9
 800b7a2:	f000 f9bb 	bl	800bb1c <__multadd>
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	e7f0      	b.n	800b78c <_dtoa_r+0xad4>
 800b7aa:	f1bb 0f00 	cmp.w	fp, #0
 800b7ae:	bfcc      	ite	gt
 800b7b0:	465e      	movgt	r6, fp
 800b7b2:	2601      	movle	r6, #1
 800b7b4:	4456      	add	r6, sl
 800b7b6:	2700      	movs	r7, #0
 800b7b8:	9902      	ldr	r1, [sp, #8]
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	4648      	mov	r0, r9
 800b7c0:	f000 fb50 	bl	800be64 <__lshift>
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	9002      	str	r0, [sp, #8]
 800b7c8:	f000 fbb8 	bl	800bf3c <__mcmp>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	dcb4      	bgt.n	800b73a <_dtoa_r+0xa82>
 800b7d0:	d102      	bne.n	800b7d8 <_dtoa_r+0xb20>
 800b7d2:	9b00      	ldr	r3, [sp, #0]
 800b7d4:	07db      	lsls	r3, r3, #31
 800b7d6:	d4b0      	bmi.n	800b73a <_dtoa_r+0xa82>
 800b7d8:	4633      	mov	r3, r6
 800b7da:	461e      	mov	r6, r3
 800b7dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7e0:	2a30      	cmp	r2, #48	@ 0x30
 800b7e2:	d0fa      	beq.n	800b7da <_dtoa_r+0xb22>
 800b7e4:	e4b5      	b.n	800b152 <_dtoa_r+0x49a>
 800b7e6:	459a      	cmp	sl, r3
 800b7e8:	d1a8      	bne.n	800b73c <_dtoa_r+0xa84>
 800b7ea:	2331      	movs	r3, #49	@ 0x31
 800b7ec:	f108 0801 	add.w	r8, r8, #1
 800b7f0:	f88a 3000 	strb.w	r3, [sl]
 800b7f4:	e4ad      	b.n	800b152 <_dtoa_r+0x49a>
 800b7f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b854 <_dtoa_r+0xb9c>
 800b7fc:	b11b      	cbz	r3, 800b806 <_dtoa_r+0xb4e>
 800b7fe:	f10a 0308 	add.w	r3, sl, #8
 800b802:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b804:	6013      	str	r3, [r2, #0]
 800b806:	4650      	mov	r0, sl
 800b808:	b017      	add	sp, #92	@ 0x5c
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	9b07      	ldr	r3, [sp, #28]
 800b810:	2b01      	cmp	r3, #1
 800b812:	f77f ae2e 	ble.w	800b472 <_dtoa_r+0x7ba>
 800b816:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b818:	9308      	str	r3, [sp, #32]
 800b81a:	2001      	movs	r0, #1
 800b81c:	e64d      	b.n	800b4ba <_dtoa_r+0x802>
 800b81e:	f1bb 0f00 	cmp.w	fp, #0
 800b822:	f77f aed9 	ble.w	800b5d8 <_dtoa_r+0x920>
 800b826:	4656      	mov	r6, sl
 800b828:	9802      	ldr	r0, [sp, #8]
 800b82a:	4621      	mov	r1, r4
 800b82c:	f7ff f9b9 	bl	800aba2 <quorem>
 800b830:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b834:	f806 3b01 	strb.w	r3, [r6], #1
 800b838:	eba6 020a 	sub.w	r2, r6, sl
 800b83c:	4593      	cmp	fp, r2
 800b83e:	ddb4      	ble.n	800b7aa <_dtoa_r+0xaf2>
 800b840:	9902      	ldr	r1, [sp, #8]
 800b842:	2300      	movs	r3, #0
 800b844:	220a      	movs	r2, #10
 800b846:	4648      	mov	r0, r9
 800b848:	f000 f968 	bl	800bb1c <__multadd>
 800b84c:	9002      	str	r0, [sp, #8]
 800b84e:	e7eb      	b.n	800b828 <_dtoa_r+0xb70>
 800b850:	0800d420 	.word	0x0800d420
 800b854:	0800d3a4 	.word	0x0800d3a4

0800b858 <_free_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	4605      	mov	r5, r0
 800b85c:	2900      	cmp	r1, #0
 800b85e:	d041      	beq.n	800b8e4 <_free_r+0x8c>
 800b860:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b864:	1f0c      	subs	r4, r1, #4
 800b866:	2b00      	cmp	r3, #0
 800b868:	bfb8      	it	lt
 800b86a:	18e4      	addlt	r4, r4, r3
 800b86c:	f000 f8e8 	bl	800ba40 <__malloc_lock>
 800b870:	4a1d      	ldr	r2, [pc, #116]	@ (800b8e8 <_free_r+0x90>)
 800b872:	6813      	ldr	r3, [r2, #0]
 800b874:	b933      	cbnz	r3, 800b884 <_free_r+0x2c>
 800b876:	6063      	str	r3, [r4, #4]
 800b878:	6014      	str	r4, [r2, #0]
 800b87a:	4628      	mov	r0, r5
 800b87c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b880:	f000 b8e4 	b.w	800ba4c <__malloc_unlock>
 800b884:	42a3      	cmp	r3, r4
 800b886:	d908      	bls.n	800b89a <_free_r+0x42>
 800b888:	6820      	ldr	r0, [r4, #0]
 800b88a:	1821      	adds	r1, r4, r0
 800b88c:	428b      	cmp	r3, r1
 800b88e:	bf01      	itttt	eq
 800b890:	6819      	ldreq	r1, [r3, #0]
 800b892:	685b      	ldreq	r3, [r3, #4]
 800b894:	1809      	addeq	r1, r1, r0
 800b896:	6021      	streq	r1, [r4, #0]
 800b898:	e7ed      	b.n	800b876 <_free_r+0x1e>
 800b89a:	461a      	mov	r2, r3
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	b10b      	cbz	r3, 800b8a4 <_free_r+0x4c>
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	d9fa      	bls.n	800b89a <_free_r+0x42>
 800b8a4:	6811      	ldr	r1, [r2, #0]
 800b8a6:	1850      	adds	r0, r2, r1
 800b8a8:	42a0      	cmp	r0, r4
 800b8aa:	d10b      	bne.n	800b8c4 <_free_r+0x6c>
 800b8ac:	6820      	ldr	r0, [r4, #0]
 800b8ae:	4401      	add	r1, r0
 800b8b0:	1850      	adds	r0, r2, r1
 800b8b2:	4283      	cmp	r3, r0
 800b8b4:	6011      	str	r1, [r2, #0]
 800b8b6:	d1e0      	bne.n	800b87a <_free_r+0x22>
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	6053      	str	r3, [r2, #4]
 800b8be:	4408      	add	r0, r1
 800b8c0:	6010      	str	r0, [r2, #0]
 800b8c2:	e7da      	b.n	800b87a <_free_r+0x22>
 800b8c4:	d902      	bls.n	800b8cc <_free_r+0x74>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	602b      	str	r3, [r5, #0]
 800b8ca:	e7d6      	b.n	800b87a <_free_r+0x22>
 800b8cc:	6820      	ldr	r0, [r4, #0]
 800b8ce:	1821      	adds	r1, r4, r0
 800b8d0:	428b      	cmp	r3, r1
 800b8d2:	bf04      	itt	eq
 800b8d4:	6819      	ldreq	r1, [r3, #0]
 800b8d6:	685b      	ldreq	r3, [r3, #4]
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	bf04      	itt	eq
 800b8dc:	1809      	addeq	r1, r1, r0
 800b8de:	6021      	streq	r1, [r4, #0]
 800b8e0:	6054      	str	r4, [r2, #4]
 800b8e2:	e7ca      	b.n	800b87a <_free_r+0x22>
 800b8e4:	bd38      	pop	{r3, r4, r5, pc}
 800b8e6:	bf00      	nop
 800b8e8:	20004f30 	.word	0x20004f30

0800b8ec <malloc>:
 800b8ec:	4b02      	ldr	r3, [pc, #8]	@ (800b8f8 <malloc+0xc>)
 800b8ee:	4601      	mov	r1, r0
 800b8f0:	6818      	ldr	r0, [r3, #0]
 800b8f2:	f000 b825 	b.w	800b940 <_malloc_r>
 800b8f6:	bf00      	nop
 800b8f8:	20000028 	.word	0x20000028

0800b8fc <sbrk_aligned>:
 800b8fc:	b570      	push	{r4, r5, r6, lr}
 800b8fe:	4e0f      	ldr	r6, [pc, #60]	@ (800b93c <sbrk_aligned+0x40>)
 800b900:	460c      	mov	r4, r1
 800b902:	6831      	ldr	r1, [r6, #0]
 800b904:	4605      	mov	r5, r0
 800b906:	b911      	cbnz	r1, 800b90e <sbrk_aligned+0x12>
 800b908:	f000 fe3e 	bl	800c588 <_sbrk_r>
 800b90c:	6030      	str	r0, [r6, #0]
 800b90e:	4621      	mov	r1, r4
 800b910:	4628      	mov	r0, r5
 800b912:	f000 fe39 	bl	800c588 <_sbrk_r>
 800b916:	1c43      	adds	r3, r0, #1
 800b918:	d103      	bne.n	800b922 <sbrk_aligned+0x26>
 800b91a:	f04f 34ff 	mov.w	r4, #4294967295
 800b91e:	4620      	mov	r0, r4
 800b920:	bd70      	pop	{r4, r5, r6, pc}
 800b922:	1cc4      	adds	r4, r0, #3
 800b924:	f024 0403 	bic.w	r4, r4, #3
 800b928:	42a0      	cmp	r0, r4
 800b92a:	d0f8      	beq.n	800b91e <sbrk_aligned+0x22>
 800b92c:	1a21      	subs	r1, r4, r0
 800b92e:	4628      	mov	r0, r5
 800b930:	f000 fe2a 	bl	800c588 <_sbrk_r>
 800b934:	3001      	adds	r0, #1
 800b936:	d1f2      	bne.n	800b91e <sbrk_aligned+0x22>
 800b938:	e7ef      	b.n	800b91a <sbrk_aligned+0x1e>
 800b93a:	bf00      	nop
 800b93c:	20004f2c 	.word	0x20004f2c

0800b940 <_malloc_r>:
 800b940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b944:	1ccd      	adds	r5, r1, #3
 800b946:	f025 0503 	bic.w	r5, r5, #3
 800b94a:	3508      	adds	r5, #8
 800b94c:	2d0c      	cmp	r5, #12
 800b94e:	bf38      	it	cc
 800b950:	250c      	movcc	r5, #12
 800b952:	2d00      	cmp	r5, #0
 800b954:	4606      	mov	r6, r0
 800b956:	db01      	blt.n	800b95c <_malloc_r+0x1c>
 800b958:	42a9      	cmp	r1, r5
 800b95a:	d904      	bls.n	800b966 <_malloc_r+0x26>
 800b95c:	230c      	movs	r3, #12
 800b95e:	6033      	str	r3, [r6, #0]
 800b960:	2000      	movs	r0, #0
 800b962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba3c <_malloc_r+0xfc>
 800b96a:	f000 f869 	bl	800ba40 <__malloc_lock>
 800b96e:	f8d8 3000 	ldr.w	r3, [r8]
 800b972:	461c      	mov	r4, r3
 800b974:	bb44      	cbnz	r4, 800b9c8 <_malloc_r+0x88>
 800b976:	4629      	mov	r1, r5
 800b978:	4630      	mov	r0, r6
 800b97a:	f7ff ffbf 	bl	800b8fc <sbrk_aligned>
 800b97e:	1c43      	adds	r3, r0, #1
 800b980:	4604      	mov	r4, r0
 800b982:	d158      	bne.n	800ba36 <_malloc_r+0xf6>
 800b984:	f8d8 4000 	ldr.w	r4, [r8]
 800b988:	4627      	mov	r7, r4
 800b98a:	2f00      	cmp	r7, #0
 800b98c:	d143      	bne.n	800ba16 <_malloc_r+0xd6>
 800b98e:	2c00      	cmp	r4, #0
 800b990:	d04b      	beq.n	800ba2a <_malloc_r+0xea>
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	4639      	mov	r1, r7
 800b996:	4630      	mov	r0, r6
 800b998:	eb04 0903 	add.w	r9, r4, r3
 800b99c:	f000 fdf4 	bl	800c588 <_sbrk_r>
 800b9a0:	4581      	cmp	r9, r0
 800b9a2:	d142      	bne.n	800ba2a <_malloc_r+0xea>
 800b9a4:	6821      	ldr	r1, [r4, #0]
 800b9a6:	1a6d      	subs	r5, r5, r1
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ffa6 	bl	800b8fc <sbrk_aligned>
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d03a      	beq.n	800ba2a <_malloc_r+0xea>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	442b      	add	r3, r5
 800b9b8:	6023      	str	r3, [r4, #0]
 800b9ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b9be:	685a      	ldr	r2, [r3, #4]
 800b9c0:	bb62      	cbnz	r2, 800ba1c <_malloc_r+0xdc>
 800b9c2:	f8c8 7000 	str.w	r7, [r8]
 800b9c6:	e00f      	b.n	800b9e8 <_malloc_r+0xa8>
 800b9c8:	6822      	ldr	r2, [r4, #0]
 800b9ca:	1b52      	subs	r2, r2, r5
 800b9cc:	d420      	bmi.n	800ba10 <_malloc_r+0xd0>
 800b9ce:	2a0b      	cmp	r2, #11
 800b9d0:	d917      	bls.n	800ba02 <_malloc_r+0xc2>
 800b9d2:	1961      	adds	r1, r4, r5
 800b9d4:	42a3      	cmp	r3, r4
 800b9d6:	6025      	str	r5, [r4, #0]
 800b9d8:	bf18      	it	ne
 800b9da:	6059      	strne	r1, [r3, #4]
 800b9dc:	6863      	ldr	r3, [r4, #4]
 800b9de:	bf08      	it	eq
 800b9e0:	f8c8 1000 	streq.w	r1, [r8]
 800b9e4:	5162      	str	r2, [r4, r5]
 800b9e6:	604b      	str	r3, [r1, #4]
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f000 f82f 	bl	800ba4c <__malloc_unlock>
 800b9ee:	f104 000b 	add.w	r0, r4, #11
 800b9f2:	1d23      	adds	r3, r4, #4
 800b9f4:	f020 0007 	bic.w	r0, r0, #7
 800b9f8:	1ac2      	subs	r2, r0, r3
 800b9fa:	bf1c      	itt	ne
 800b9fc:	1a1b      	subne	r3, r3, r0
 800b9fe:	50a3      	strne	r3, [r4, r2]
 800ba00:	e7af      	b.n	800b962 <_malloc_r+0x22>
 800ba02:	6862      	ldr	r2, [r4, #4]
 800ba04:	42a3      	cmp	r3, r4
 800ba06:	bf0c      	ite	eq
 800ba08:	f8c8 2000 	streq.w	r2, [r8]
 800ba0c:	605a      	strne	r2, [r3, #4]
 800ba0e:	e7eb      	b.n	800b9e8 <_malloc_r+0xa8>
 800ba10:	4623      	mov	r3, r4
 800ba12:	6864      	ldr	r4, [r4, #4]
 800ba14:	e7ae      	b.n	800b974 <_malloc_r+0x34>
 800ba16:	463c      	mov	r4, r7
 800ba18:	687f      	ldr	r7, [r7, #4]
 800ba1a:	e7b6      	b.n	800b98a <_malloc_r+0x4a>
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	42a3      	cmp	r3, r4
 800ba22:	d1fb      	bne.n	800ba1c <_malloc_r+0xdc>
 800ba24:	2300      	movs	r3, #0
 800ba26:	6053      	str	r3, [r2, #4]
 800ba28:	e7de      	b.n	800b9e8 <_malloc_r+0xa8>
 800ba2a:	230c      	movs	r3, #12
 800ba2c:	6033      	str	r3, [r6, #0]
 800ba2e:	4630      	mov	r0, r6
 800ba30:	f000 f80c 	bl	800ba4c <__malloc_unlock>
 800ba34:	e794      	b.n	800b960 <_malloc_r+0x20>
 800ba36:	6005      	str	r5, [r0, #0]
 800ba38:	e7d6      	b.n	800b9e8 <_malloc_r+0xa8>
 800ba3a:	bf00      	nop
 800ba3c:	20004f30 	.word	0x20004f30

0800ba40 <__malloc_lock>:
 800ba40:	4801      	ldr	r0, [pc, #4]	@ (800ba48 <__malloc_lock+0x8>)
 800ba42:	f7ff b89e 	b.w	800ab82 <__retarget_lock_acquire_recursive>
 800ba46:	bf00      	nop
 800ba48:	20004f28 	.word	0x20004f28

0800ba4c <__malloc_unlock>:
 800ba4c:	4801      	ldr	r0, [pc, #4]	@ (800ba54 <__malloc_unlock+0x8>)
 800ba4e:	f7ff b899 	b.w	800ab84 <__retarget_lock_release_recursive>
 800ba52:	bf00      	nop
 800ba54:	20004f28 	.word	0x20004f28

0800ba58 <_Balloc>:
 800ba58:	b570      	push	{r4, r5, r6, lr}
 800ba5a:	69c6      	ldr	r6, [r0, #28]
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	460d      	mov	r5, r1
 800ba60:	b976      	cbnz	r6, 800ba80 <_Balloc+0x28>
 800ba62:	2010      	movs	r0, #16
 800ba64:	f7ff ff42 	bl	800b8ec <malloc>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	61e0      	str	r0, [r4, #28]
 800ba6c:	b920      	cbnz	r0, 800ba78 <_Balloc+0x20>
 800ba6e:	4b18      	ldr	r3, [pc, #96]	@ (800bad0 <_Balloc+0x78>)
 800ba70:	4818      	ldr	r0, [pc, #96]	@ (800bad4 <_Balloc+0x7c>)
 800ba72:	216b      	movs	r1, #107	@ 0x6b
 800ba74:	f000 fd98 	bl	800c5a8 <__assert_func>
 800ba78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba7c:	6006      	str	r6, [r0, #0]
 800ba7e:	60c6      	str	r6, [r0, #12]
 800ba80:	69e6      	ldr	r6, [r4, #28]
 800ba82:	68f3      	ldr	r3, [r6, #12]
 800ba84:	b183      	cbz	r3, 800baa8 <_Balloc+0x50>
 800ba86:	69e3      	ldr	r3, [r4, #28]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba8e:	b9b8      	cbnz	r0, 800bac0 <_Balloc+0x68>
 800ba90:	2101      	movs	r1, #1
 800ba92:	fa01 f605 	lsl.w	r6, r1, r5
 800ba96:	1d72      	adds	r2, r6, #5
 800ba98:	0092      	lsls	r2, r2, #2
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 fda2 	bl	800c5e4 <_calloc_r>
 800baa0:	b160      	cbz	r0, 800babc <_Balloc+0x64>
 800baa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baa6:	e00e      	b.n	800bac6 <_Balloc+0x6e>
 800baa8:	2221      	movs	r2, #33	@ 0x21
 800baaa:	2104      	movs	r1, #4
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fd99 	bl	800c5e4 <_calloc_r>
 800bab2:	69e3      	ldr	r3, [r4, #28]
 800bab4:	60f0      	str	r0, [r6, #12]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d1e4      	bne.n	800ba86 <_Balloc+0x2e>
 800babc:	2000      	movs	r0, #0
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	6802      	ldr	r2, [r0, #0]
 800bac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bac6:	2300      	movs	r3, #0
 800bac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bacc:	e7f7      	b.n	800babe <_Balloc+0x66>
 800bace:	bf00      	nop
 800bad0:	0800d3b1 	.word	0x0800d3b1
 800bad4:	0800d431 	.word	0x0800d431

0800bad8 <_Bfree>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	69c6      	ldr	r6, [r0, #28]
 800badc:	4605      	mov	r5, r0
 800bade:	460c      	mov	r4, r1
 800bae0:	b976      	cbnz	r6, 800bb00 <_Bfree+0x28>
 800bae2:	2010      	movs	r0, #16
 800bae4:	f7ff ff02 	bl	800b8ec <malloc>
 800bae8:	4602      	mov	r2, r0
 800baea:	61e8      	str	r0, [r5, #28]
 800baec:	b920      	cbnz	r0, 800baf8 <_Bfree+0x20>
 800baee:	4b09      	ldr	r3, [pc, #36]	@ (800bb14 <_Bfree+0x3c>)
 800baf0:	4809      	ldr	r0, [pc, #36]	@ (800bb18 <_Bfree+0x40>)
 800baf2:	218f      	movs	r1, #143	@ 0x8f
 800baf4:	f000 fd58 	bl	800c5a8 <__assert_func>
 800baf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bafc:	6006      	str	r6, [r0, #0]
 800bafe:	60c6      	str	r6, [r0, #12]
 800bb00:	b13c      	cbz	r4, 800bb12 <_Bfree+0x3a>
 800bb02:	69eb      	ldr	r3, [r5, #28]
 800bb04:	6862      	ldr	r2, [r4, #4]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb0c:	6021      	str	r1, [r4, #0]
 800bb0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	0800d3b1 	.word	0x0800d3b1
 800bb18:	0800d431 	.word	0x0800d431

0800bb1c <__multadd>:
 800bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb20:	690d      	ldr	r5, [r1, #16]
 800bb22:	4607      	mov	r7, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	461e      	mov	r6, r3
 800bb28:	f101 0c14 	add.w	ip, r1, #20
 800bb2c:	2000      	movs	r0, #0
 800bb2e:	f8dc 3000 	ldr.w	r3, [ip]
 800bb32:	b299      	uxth	r1, r3
 800bb34:	fb02 6101 	mla	r1, r2, r1, r6
 800bb38:	0c1e      	lsrs	r6, r3, #16
 800bb3a:	0c0b      	lsrs	r3, r1, #16
 800bb3c:	fb02 3306 	mla	r3, r2, r6, r3
 800bb40:	b289      	uxth	r1, r1
 800bb42:	3001      	adds	r0, #1
 800bb44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb48:	4285      	cmp	r5, r0
 800bb4a:	f84c 1b04 	str.w	r1, [ip], #4
 800bb4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb52:	dcec      	bgt.n	800bb2e <__multadd+0x12>
 800bb54:	b30e      	cbz	r6, 800bb9a <__multadd+0x7e>
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	42ab      	cmp	r3, r5
 800bb5a:	dc19      	bgt.n	800bb90 <__multadd+0x74>
 800bb5c:	6861      	ldr	r1, [r4, #4]
 800bb5e:	4638      	mov	r0, r7
 800bb60:	3101      	adds	r1, #1
 800bb62:	f7ff ff79 	bl	800ba58 <_Balloc>
 800bb66:	4680      	mov	r8, r0
 800bb68:	b928      	cbnz	r0, 800bb76 <__multadd+0x5a>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	4b0c      	ldr	r3, [pc, #48]	@ (800bba0 <__multadd+0x84>)
 800bb6e:	480d      	ldr	r0, [pc, #52]	@ (800bba4 <__multadd+0x88>)
 800bb70:	21ba      	movs	r1, #186	@ 0xba
 800bb72:	f000 fd19 	bl	800c5a8 <__assert_func>
 800bb76:	6922      	ldr	r2, [r4, #16]
 800bb78:	3202      	adds	r2, #2
 800bb7a:	f104 010c 	add.w	r1, r4, #12
 800bb7e:	0092      	lsls	r2, r2, #2
 800bb80:	300c      	adds	r0, #12
 800bb82:	f7ff f800 	bl	800ab86 <memcpy>
 800bb86:	4621      	mov	r1, r4
 800bb88:	4638      	mov	r0, r7
 800bb8a:	f7ff ffa5 	bl	800bad8 <_Bfree>
 800bb8e:	4644      	mov	r4, r8
 800bb90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb94:	3501      	adds	r5, #1
 800bb96:	615e      	str	r6, [r3, #20]
 800bb98:	6125      	str	r5, [r4, #16]
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bba0:	0800d420 	.word	0x0800d420
 800bba4:	0800d431 	.word	0x0800d431

0800bba8 <__hi0bits>:
 800bba8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bbac:	4603      	mov	r3, r0
 800bbae:	bf36      	itet	cc
 800bbb0:	0403      	lslcc	r3, r0, #16
 800bbb2:	2000      	movcs	r0, #0
 800bbb4:	2010      	movcc	r0, #16
 800bbb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbba:	bf3c      	itt	cc
 800bbbc:	021b      	lslcc	r3, r3, #8
 800bbbe:	3008      	addcc	r0, #8
 800bbc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbc4:	bf3c      	itt	cc
 800bbc6:	011b      	lslcc	r3, r3, #4
 800bbc8:	3004      	addcc	r0, #4
 800bbca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbce:	bf3c      	itt	cc
 800bbd0:	009b      	lslcc	r3, r3, #2
 800bbd2:	3002      	addcc	r0, #2
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	db05      	blt.n	800bbe4 <__hi0bits+0x3c>
 800bbd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bbdc:	f100 0001 	add.w	r0, r0, #1
 800bbe0:	bf08      	it	eq
 800bbe2:	2020      	moveq	r0, #32
 800bbe4:	4770      	bx	lr

0800bbe6 <__lo0bits>:
 800bbe6:	6803      	ldr	r3, [r0, #0]
 800bbe8:	4602      	mov	r2, r0
 800bbea:	f013 0007 	ands.w	r0, r3, #7
 800bbee:	d00b      	beq.n	800bc08 <__lo0bits+0x22>
 800bbf0:	07d9      	lsls	r1, r3, #31
 800bbf2:	d421      	bmi.n	800bc38 <__lo0bits+0x52>
 800bbf4:	0798      	lsls	r0, r3, #30
 800bbf6:	bf49      	itett	mi
 800bbf8:	085b      	lsrmi	r3, r3, #1
 800bbfa:	089b      	lsrpl	r3, r3, #2
 800bbfc:	2001      	movmi	r0, #1
 800bbfe:	6013      	strmi	r3, [r2, #0]
 800bc00:	bf5c      	itt	pl
 800bc02:	6013      	strpl	r3, [r2, #0]
 800bc04:	2002      	movpl	r0, #2
 800bc06:	4770      	bx	lr
 800bc08:	b299      	uxth	r1, r3
 800bc0a:	b909      	cbnz	r1, 800bc10 <__lo0bits+0x2a>
 800bc0c:	0c1b      	lsrs	r3, r3, #16
 800bc0e:	2010      	movs	r0, #16
 800bc10:	b2d9      	uxtb	r1, r3
 800bc12:	b909      	cbnz	r1, 800bc18 <__lo0bits+0x32>
 800bc14:	3008      	adds	r0, #8
 800bc16:	0a1b      	lsrs	r3, r3, #8
 800bc18:	0719      	lsls	r1, r3, #28
 800bc1a:	bf04      	itt	eq
 800bc1c:	091b      	lsreq	r3, r3, #4
 800bc1e:	3004      	addeq	r0, #4
 800bc20:	0799      	lsls	r1, r3, #30
 800bc22:	bf04      	itt	eq
 800bc24:	089b      	lsreq	r3, r3, #2
 800bc26:	3002      	addeq	r0, #2
 800bc28:	07d9      	lsls	r1, r3, #31
 800bc2a:	d403      	bmi.n	800bc34 <__lo0bits+0x4e>
 800bc2c:	085b      	lsrs	r3, r3, #1
 800bc2e:	f100 0001 	add.w	r0, r0, #1
 800bc32:	d003      	beq.n	800bc3c <__lo0bits+0x56>
 800bc34:	6013      	str	r3, [r2, #0]
 800bc36:	4770      	bx	lr
 800bc38:	2000      	movs	r0, #0
 800bc3a:	4770      	bx	lr
 800bc3c:	2020      	movs	r0, #32
 800bc3e:	4770      	bx	lr

0800bc40 <__i2b>:
 800bc40:	b510      	push	{r4, lr}
 800bc42:	460c      	mov	r4, r1
 800bc44:	2101      	movs	r1, #1
 800bc46:	f7ff ff07 	bl	800ba58 <_Balloc>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	b928      	cbnz	r0, 800bc5a <__i2b+0x1a>
 800bc4e:	4b05      	ldr	r3, [pc, #20]	@ (800bc64 <__i2b+0x24>)
 800bc50:	4805      	ldr	r0, [pc, #20]	@ (800bc68 <__i2b+0x28>)
 800bc52:	f240 1145 	movw	r1, #325	@ 0x145
 800bc56:	f000 fca7 	bl	800c5a8 <__assert_func>
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	6144      	str	r4, [r0, #20]
 800bc5e:	6103      	str	r3, [r0, #16]
 800bc60:	bd10      	pop	{r4, pc}
 800bc62:	bf00      	nop
 800bc64:	0800d420 	.word	0x0800d420
 800bc68:	0800d431 	.word	0x0800d431

0800bc6c <__multiply>:
 800bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	4617      	mov	r7, r2
 800bc72:	690a      	ldr	r2, [r1, #16]
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	bfa8      	it	ge
 800bc7a:	463b      	movge	r3, r7
 800bc7c:	4689      	mov	r9, r1
 800bc7e:	bfa4      	itt	ge
 800bc80:	460f      	movge	r7, r1
 800bc82:	4699      	movge	r9, r3
 800bc84:	693d      	ldr	r5, [r7, #16]
 800bc86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6879      	ldr	r1, [r7, #4]
 800bc8e:	eb05 060a 	add.w	r6, r5, sl
 800bc92:	42b3      	cmp	r3, r6
 800bc94:	b085      	sub	sp, #20
 800bc96:	bfb8      	it	lt
 800bc98:	3101      	addlt	r1, #1
 800bc9a:	f7ff fedd 	bl	800ba58 <_Balloc>
 800bc9e:	b930      	cbnz	r0, 800bcae <__multiply+0x42>
 800bca0:	4602      	mov	r2, r0
 800bca2:	4b41      	ldr	r3, [pc, #260]	@ (800bda8 <__multiply+0x13c>)
 800bca4:	4841      	ldr	r0, [pc, #260]	@ (800bdac <__multiply+0x140>)
 800bca6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bcaa:	f000 fc7d 	bl	800c5a8 <__assert_func>
 800bcae:	f100 0414 	add.w	r4, r0, #20
 800bcb2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bcb6:	4623      	mov	r3, r4
 800bcb8:	2200      	movs	r2, #0
 800bcba:	4573      	cmp	r3, lr
 800bcbc:	d320      	bcc.n	800bd00 <__multiply+0x94>
 800bcbe:	f107 0814 	add.w	r8, r7, #20
 800bcc2:	f109 0114 	add.w	r1, r9, #20
 800bcc6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bcca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bcce:	9302      	str	r3, [sp, #8]
 800bcd0:	1beb      	subs	r3, r5, r7
 800bcd2:	3b15      	subs	r3, #21
 800bcd4:	f023 0303 	bic.w	r3, r3, #3
 800bcd8:	3304      	adds	r3, #4
 800bcda:	3715      	adds	r7, #21
 800bcdc:	42bd      	cmp	r5, r7
 800bcde:	bf38      	it	cc
 800bce0:	2304      	movcc	r3, #4
 800bce2:	9301      	str	r3, [sp, #4]
 800bce4:	9b02      	ldr	r3, [sp, #8]
 800bce6:	9103      	str	r1, [sp, #12]
 800bce8:	428b      	cmp	r3, r1
 800bcea:	d80c      	bhi.n	800bd06 <__multiply+0x9a>
 800bcec:	2e00      	cmp	r6, #0
 800bcee:	dd03      	ble.n	800bcf8 <__multiply+0x8c>
 800bcf0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d055      	beq.n	800bda4 <__multiply+0x138>
 800bcf8:	6106      	str	r6, [r0, #16]
 800bcfa:	b005      	add	sp, #20
 800bcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd00:	f843 2b04 	str.w	r2, [r3], #4
 800bd04:	e7d9      	b.n	800bcba <__multiply+0x4e>
 800bd06:	f8b1 a000 	ldrh.w	sl, [r1]
 800bd0a:	f1ba 0f00 	cmp.w	sl, #0
 800bd0e:	d01f      	beq.n	800bd50 <__multiply+0xe4>
 800bd10:	46c4      	mov	ip, r8
 800bd12:	46a1      	mov	r9, r4
 800bd14:	2700      	movs	r7, #0
 800bd16:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bd1a:	f8d9 3000 	ldr.w	r3, [r9]
 800bd1e:	fa1f fb82 	uxth.w	fp, r2
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	fb0a 330b 	mla	r3, sl, fp, r3
 800bd28:	443b      	add	r3, r7
 800bd2a:	f8d9 7000 	ldr.w	r7, [r9]
 800bd2e:	0c12      	lsrs	r2, r2, #16
 800bd30:	0c3f      	lsrs	r7, r7, #16
 800bd32:	fb0a 7202 	mla	r2, sl, r2, r7
 800bd36:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd40:	4565      	cmp	r5, ip
 800bd42:	f849 3b04 	str.w	r3, [r9], #4
 800bd46:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bd4a:	d8e4      	bhi.n	800bd16 <__multiply+0xaa>
 800bd4c:	9b01      	ldr	r3, [sp, #4]
 800bd4e:	50e7      	str	r7, [r4, r3]
 800bd50:	9b03      	ldr	r3, [sp, #12]
 800bd52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd56:	3104      	adds	r1, #4
 800bd58:	f1b9 0f00 	cmp.w	r9, #0
 800bd5c:	d020      	beq.n	800bda0 <__multiply+0x134>
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	4647      	mov	r7, r8
 800bd62:	46a4      	mov	ip, r4
 800bd64:	f04f 0a00 	mov.w	sl, #0
 800bd68:	f8b7 b000 	ldrh.w	fp, [r7]
 800bd6c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bd70:	fb09 220b 	mla	r2, r9, fp, r2
 800bd74:	4452      	add	r2, sl
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd7c:	f84c 3b04 	str.w	r3, [ip], #4
 800bd80:	f857 3b04 	ldr.w	r3, [r7], #4
 800bd84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd88:	f8bc 3000 	ldrh.w	r3, [ip]
 800bd8c:	fb09 330a 	mla	r3, r9, sl, r3
 800bd90:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bd94:	42bd      	cmp	r5, r7
 800bd96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd9a:	d8e5      	bhi.n	800bd68 <__multiply+0xfc>
 800bd9c:	9a01      	ldr	r2, [sp, #4]
 800bd9e:	50a3      	str	r3, [r4, r2]
 800bda0:	3404      	adds	r4, #4
 800bda2:	e79f      	b.n	800bce4 <__multiply+0x78>
 800bda4:	3e01      	subs	r6, #1
 800bda6:	e7a1      	b.n	800bcec <__multiply+0x80>
 800bda8:	0800d420 	.word	0x0800d420
 800bdac:	0800d431 	.word	0x0800d431

0800bdb0 <__pow5mult>:
 800bdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	4615      	mov	r5, r2
 800bdb6:	f012 0203 	ands.w	r2, r2, #3
 800bdba:	4607      	mov	r7, r0
 800bdbc:	460e      	mov	r6, r1
 800bdbe:	d007      	beq.n	800bdd0 <__pow5mult+0x20>
 800bdc0:	4c25      	ldr	r4, [pc, #148]	@ (800be58 <__pow5mult+0xa8>)
 800bdc2:	3a01      	subs	r2, #1
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdca:	f7ff fea7 	bl	800bb1c <__multadd>
 800bdce:	4606      	mov	r6, r0
 800bdd0:	10ad      	asrs	r5, r5, #2
 800bdd2:	d03d      	beq.n	800be50 <__pow5mult+0xa0>
 800bdd4:	69fc      	ldr	r4, [r7, #28]
 800bdd6:	b97c      	cbnz	r4, 800bdf8 <__pow5mult+0x48>
 800bdd8:	2010      	movs	r0, #16
 800bdda:	f7ff fd87 	bl	800b8ec <malloc>
 800bdde:	4602      	mov	r2, r0
 800bde0:	61f8      	str	r0, [r7, #28]
 800bde2:	b928      	cbnz	r0, 800bdf0 <__pow5mult+0x40>
 800bde4:	4b1d      	ldr	r3, [pc, #116]	@ (800be5c <__pow5mult+0xac>)
 800bde6:	481e      	ldr	r0, [pc, #120]	@ (800be60 <__pow5mult+0xb0>)
 800bde8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bdec:	f000 fbdc 	bl	800c5a8 <__assert_func>
 800bdf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bdf4:	6004      	str	r4, [r0, #0]
 800bdf6:	60c4      	str	r4, [r0, #12]
 800bdf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bdfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be00:	b94c      	cbnz	r4, 800be16 <__pow5mult+0x66>
 800be02:	f240 2171 	movw	r1, #625	@ 0x271
 800be06:	4638      	mov	r0, r7
 800be08:	f7ff ff1a 	bl	800bc40 <__i2b>
 800be0c:	2300      	movs	r3, #0
 800be0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be12:	4604      	mov	r4, r0
 800be14:	6003      	str	r3, [r0, #0]
 800be16:	f04f 0900 	mov.w	r9, #0
 800be1a:	07eb      	lsls	r3, r5, #31
 800be1c:	d50a      	bpl.n	800be34 <__pow5mult+0x84>
 800be1e:	4631      	mov	r1, r6
 800be20:	4622      	mov	r2, r4
 800be22:	4638      	mov	r0, r7
 800be24:	f7ff ff22 	bl	800bc6c <__multiply>
 800be28:	4631      	mov	r1, r6
 800be2a:	4680      	mov	r8, r0
 800be2c:	4638      	mov	r0, r7
 800be2e:	f7ff fe53 	bl	800bad8 <_Bfree>
 800be32:	4646      	mov	r6, r8
 800be34:	106d      	asrs	r5, r5, #1
 800be36:	d00b      	beq.n	800be50 <__pow5mult+0xa0>
 800be38:	6820      	ldr	r0, [r4, #0]
 800be3a:	b938      	cbnz	r0, 800be4c <__pow5mult+0x9c>
 800be3c:	4622      	mov	r2, r4
 800be3e:	4621      	mov	r1, r4
 800be40:	4638      	mov	r0, r7
 800be42:	f7ff ff13 	bl	800bc6c <__multiply>
 800be46:	6020      	str	r0, [r4, #0]
 800be48:	f8c0 9000 	str.w	r9, [r0]
 800be4c:	4604      	mov	r4, r0
 800be4e:	e7e4      	b.n	800be1a <__pow5mult+0x6a>
 800be50:	4630      	mov	r0, r6
 800be52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be56:	bf00      	nop
 800be58:	0800d4e4 	.word	0x0800d4e4
 800be5c:	0800d3b1 	.word	0x0800d3b1
 800be60:	0800d431 	.word	0x0800d431

0800be64 <__lshift>:
 800be64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	6849      	ldr	r1, [r1, #4]
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be72:	68a3      	ldr	r3, [r4, #8]
 800be74:	4607      	mov	r7, r0
 800be76:	4691      	mov	r9, r2
 800be78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be7c:	f108 0601 	add.w	r6, r8, #1
 800be80:	42b3      	cmp	r3, r6
 800be82:	db0b      	blt.n	800be9c <__lshift+0x38>
 800be84:	4638      	mov	r0, r7
 800be86:	f7ff fde7 	bl	800ba58 <_Balloc>
 800be8a:	4605      	mov	r5, r0
 800be8c:	b948      	cbnz	r0, 800bea2 <__lshift+0x3e>
 800be8e:	4602      	mov	r2, r0
 800be90:	4b28      	ldr	r3, [pc, #160]	@ (800bf34 <__lshift+0xd0>)
 800be92:	4829      	ldr	r0, [pc, #164]	@ (800bf38 <__lshift+0xd4>)
 800be94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800be98:	f000 fb86 	bl	800c5a8 <__assert_func>
 800be9c:	3101      	adds	r1, #1
 800be9e:	005b      	lsls	r3, r3, #1
 800bea0:	e7ee      	b.n	800be80 <__lshift+0x1c>
 800bea2:	2300      	movs	r3, #0
 800bea4:	f100 0114 	add.w	r1, r0, #20
 800bea8:	f100 0210 	add.w	r2, r0, #16
 800beac:	4618      	mov	r0, r3
 800beae:	4553      	cmp	r3, sl
 800beb0:	db33      	blt.n	800bf1a <__lshift+0xb6>
 800beb2:	6920      	ldr	r0, [r4, #16]
 800beb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beb8:	f104 0314 	add.w	r3, r4, #20
 800bebc:	f019 091f 	ands.w	r9, r9, #31
 800bec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bec8:	d02b      	beq.n	800bf22 <__lshift+0xbe>
 800beca:	f1c9 0e20 	rsb	lr, r9, #32
 800bece:	468a      	mov	sl, r1
 800bed0:	2200      	movs	r2, #0
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	fa00 f009 	lsl.w	r0, r0, r9
 800bed8:	4310      	orrs	r0, r2
 800beda:	f84a 0b04 	str.w	r0, [sl], #4
 800bede:	f853 2b04 	ldr.w	r2, [r3], #4
 800bee2:	459c      	cmp	ip, r3
 800bee4:	fa22 f20e 	lsr.w	r2, r2, lr
 800bee8:	d8f3      	bhi.n	800bed2 <__lshift+0x6e>
 800beea:	ebac 0304 	sub.w	r3, ip, r4
 800beee:	3b15      	subs	r3, #21
 800bef0:	f023 0303 	bic.w	r3, r3, #3
 800bef4:	3304      	adds	r3, #4
 800bef6:	f104 0015 	add.w	r0, r4, #21
 800befa:	4560      	cmp	r0, ip
 800befc:	bf88      	it	hi
 800befe:	2304      	movhi	r3, #4
 800bf00:	50ca      	str	r2, [r1, r3]
 800bf02:	b10a      	cbz	r2, 800bf08 <__lshift+0xa4>
 800bf04:	f108 0602 	add.w	r6, r8, #2
 800bf08:	3e01      	subs	r6, #1
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	612e      	str	r6, [r5, #16]
 800bf0e:	4621      	mov	r1, r4
 800bf10:	f7ff fde2 	bl	800bad8 <_Bfree>
 800bf14:	4628      	mov	r0, r5
 800bf16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf1e:	3301      	adds	r3, #1
 800bf20:	e7c5      	b.n	800beae <__lshift+0x4a>
 800bf22:	3904      	subs	r1, #4
 800bf24:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf28:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf2c:	459c      	cmp	ip, r3
 800bf2e:	d8f9      	bhi.n	800bf24 <__lshift+0xc0>
 800bf30:	e7ea      	b.n	800bf08 <__lshift+0xa4>
 800bf32:	bf00      	nop
 800bf34:	0800d420 	.word	0x0800d420
 800bf38:	0800d431 	.word	0x0800d431

0800bf3c <__mcmp>:
 800bf3c:	690a      	ldr	r2, [r1, #16]
 800bf3e:	4603      	mov	r3, r0
 800bf40:	6900      	ldr	r0, [r0, #16]
 800bf42:	1a80      	subs	r0, r0, r2
 800bf44:	b530      	push	{r4, r5, lr}
 800bf46:	d10e      	bne.n	800bf66 <__mcmp+0x2a>
 800bf48:	3314      	adds	r3, #20
 800bf4a:	3114      	adds	r1, #20
 800bf4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf5c:	4295      	cmp	r5, r2
 800bf5e:	d003      	beq.n	800bf68 <__mcmp+0x2c>
 800bf60:	d205      	bcs.n	800bf6e <__mcmp+0x32>
 800bf62:	f04f 30ff 	mov.w	r0, #4294967295
 800bf66:	bd30      	pop	{r4, r5, pc}
 800bf68:	42a3      	cmp	r3, r4
 800bf6a:	d3f3      	bcc.n	800bf54 <__mcmp+0x18>
 800bf6c:	e7fb      	b.n	800bf66 <__mcmp+0x2a>
 800bf6e:	2001      	movs	r0, #1
 800bf70:	e7f9      	b.n	800bf66 <__mcmp+0x2a>
	...

0800bf74 <__mdiff>:
 800bf74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf78:	4689      	mov	r9, r1
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4648      	mov	r0, r9
 800bf80:	4614      	mov	r4, r2
 800bf82:	f7ff ffdb 	bl	800bf3c <__mcmp>
 800bf86:	1e05      	subs	r5, r0, #0
 800bf88:	d112      	bne.n	800bfb0 <__mdiff+0x3c>
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff fd63 	bl	800ba58 <_Balloc>
 800bf92:	4602      	mov	r2, r0
 800bf94:	b928      	cbnz	r0, 800bfa2 <__mdiff+0x2e>
 800bf96:	4b3f      	ldr	r3, [pc, #252]	@ (800c094 <__mdiff+0x120>)
 800bf98:	f240 2137 	movw	r1, #567	@ 0x237
 800bf9c:	483e      	ldr	r0, [pc, #248]	@ (800c098 <__mdiff+0x124>)
 800bf9e:	f000 fb03 	bl	800c5a8 <__assert_func>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfa8:	4610      	mov	r0, r2
 800bfaa:	b003      	add	sp, #12
 800bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb0:	bfbc      	itt	lt
 800bfb2:	464b      	movlt	r3, r9
 800bfb4:	46a1      	movlt	r9, r4
 800bfb6:	4630      	mov	r0, r6
 800bfb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bfbc:	bfba      	itte	lt
 800bfbe:	461c      	movlt	r4, r3
 800bfc0:	2501      	movlt	r5, #1
 800bfc2:	2500      	movge	r5, #0
 800bfc4:	f7ff fd48 	bl	800ba58 <_Balloc>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	b918      	cbnz	r0, 800bfd4 <__mdiff+0x60>
 800bfcc:	4b31      	ldr	r3, [pc, #196]	@ (800c094 <__mdiff+0x120>)
 800bfce:	f240 2145 	movw	r1, #581	@ 0x245
 800bfd2:	e7e3      	b.n	800bf9c <__mdiff+0x28>
 800bfd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bfd8:	6926      	ldr	r6, [r4, #16]
 800bfda:	60c5      	str	r5, [r0, #12]
 800bfdc:	f109 0310 	add.w	r3, r9, #16
 800bfe0:	f109 0514 	add.w	r5, r9, #20
 800bfe4:	f104 0e14 	add.w	lr, r4, #20
 800bfe8:	f100 0b14 	add.w	fp, r0, #20
 800bfec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bff0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	46d9      	mov	r9, fp
 800bff8:	f04f 0c00 	mov.w	ip, #0
 800bffc:	9b01      	ldr	r3, [sp, #4]
 800bffe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c002:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c006:	9301      	str	r3, [sp, #4]
 800c008:	fa1f f38a 	uxth.w	r3, sl
 800c00c:	4619      	mov	r1, r3
 800c00e:	b283      	uxth	r3, r0
 800c010:	1acb      	subs	r3, r1, r3
 800c012:	0c00      	lsrs	r0, r0, #16
 800c014:	4463      	add	r3, ip
 800c016:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c01a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c01e:	b29b      	uxth	r3, r3
 800c020:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c024:	4576      	cmp	r6, lr
 800c026:	f849 3b04 	str.w	r3, [r9], #4
 800c02a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c02e:	d8e5      	bhi.n	800bffc <__mdiff+0x88>
 800c030:	1b33      	subs	r3, r6, r4
 800c032:	3b15      	subs	r3, #21
 800c034:	f023 0303 	bic.w	r3, r3, #3
 800c038:	3415      	adds	r4, #21
 800c03a:	3304      	adds	r3, #4
 800c03c:	42a6      	cmp	r6, r4
 800c03e:	bf38      	it	cc
 800c040:	2304      	movcc	r3, #4
 800c042:	441d      	add	r5, r3
 800c044:	445b      	add	r3, fp
 800c046:	461e      	mov	r6, r3
 800c048:	462c      	mov	r4, r5
 800c04a:	4544      	cmp	r4, r8
 800c04c:	d30e      	bcc.n	800c06c <__mdiff+0xf8>
 800c04e:	f108 0103 	add.w	r1, r8, #3
 800c052:	1b49      	subs	r1, r1, r5
 800c054:	f021 0103 	bic.w	r1, r1, #3
 800c058:	3d03      	subs	r5, #3
 800c05a:	45a8      	cmp	r8, r5
 800c05c:	bf38      	it	cc
 800c05e:	2100      	movcc	r1, #0
 800c060:	440b      	add	r3, r1
 800c062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c066:	b191      	cbz	r1, 800c08e <__mdiff+0x11a>
 800c068:	6117      	str	r7, [r2, #16]
 800c06a:	e79d      	b.n	800bfa8 <__mdiff+0x34>
 800c06c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c070:	46e6      	mov	lr, ip
 800c072:	0c08      	lsrs	r0, r1, #16
 800c074:	fa1c fc81 	uxtah	ip, ip, r1
 800c078:	4471      	add	r1, lr
 800c07a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c07e:	b289      	uxth	r1, r1
 800c080:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c084:	f846 1b04 	str.w	r1, [r6], #4
 800c088:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c08c:	e7dd      	b.n	800c04a <__mdiff+0xd6>
 800c08e:	3f01      	subs	r7, #1
 800c090:	e7e7      	b.n	800c062 <__mdiff+0xee>
 800c092:	bf00      	nop
 800c094:	0800d420 	.word	0x0800d420
 800c098:	0800d431 	.word	0x0800d431

0800c09c <__d2b>:
 800c09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	ec59 8b10 	vmov	r8, r9, d0
 800c0a8:	4616      	mov	r6, r2
 800c0aa:	f7ff fcd5 	bl	800ba58 <_Balloc>
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	b930      	cbnz	r0, 800c0c0 <__d2b+0x24>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	4b23      	ldr	r3, [pc, #140]	@ (800c144 <__d2b+0xa8>)
 800c0b6:	4824      	ldr	r0, [pc, #144]	@ (800c148 <__d2b+0xac>)
 800c0b8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c0bc:	f000 fa74 	bl	800c5a8 <__assert_func>
 800c0c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c0c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0c8:	b10d      	cbz	r5, 800c0ce <__d2b+0x32>
 800c0ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	f1b8 0300 	subs.w	r3, r8, #0
 800c0d4:	d023      	beq.n	800c11e <__d2b+0x82>
 800c0d6:	4668      	mov	r0, sp
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	f7ff fd84 	bl	800bbe6 <__lo0bits>
 800c0de:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c0e2:	b1d0      	cbz	r0, 800c11a <__d2b+0x7e>
 800c0e4:	f1c0 0320 	rsb	r3, r0, #32
 800c0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ec:	430b      	orrs	r3, r1
 800c0ee:	40c2      	lsrs	r2, r0
 800c0f0:	6163      	str	r3, [r4, #20]
 800c0f2:	9201      	str	r2, [sp, #4]
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	61a3      	str	r3, [r4, #24]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	bf0c      	ite	eq
 800c0fc:	2201      	moveq	r2, #1
 800c0fe:	2202      	movne	r2, #2
 800c100:	6122      	str	r2, [r4, #16]
 800c102:	b1a5      	cbz	r5, 800c12e <__d2b+0x92>
 800c104:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c108:	4405      	add	r5, r0
 800c10a:	603d      	str	r5, [r7, #0]
 800c10c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c110:	6030      	str	r0, [r6, #0]
 800c112:	4620      	mov	r0, r4
 800c114:	b003      	add	sp, #12
 800c116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c11a:	6161      	str	r1, [r4, #20]
 800c11c:	e7ea      	b.n	800c0f4 <__d2b+0x58>
 800c11e:	a801      	add	r0, sp, #4
 800c120:	f7ff fd61 	bl	800bbe6 <__lo0bits>
 800c124:	9b01      	ldr	r3, [sp, #4]
 800c126:	6163      	str	r3, [r4, #20]
 800c128:	3020      	adds	r0, #32
 800c12a:	2201      	movs	r2, #1
 800c12c:	e7e8      	b.n	800c100 <__d2b+0x64>
 800c12e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c132:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c136:	6038      	str	r0, [r7, #0]
 800c138:	6918      	ldr	r0, [r3, #16]
 800c13a:	f7ff fd35 	bl	800bba8 <__hi0bits>
 800c13e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c142:	e7e5      	b.n	800c110 <__d2b+0x74>
 800c144:	0800d420 	.word	0x0800d420
 800c148:	0800d431 	.word	0x0800d431

0800c14c <__ssputs_r>:
 800c14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	688e      	ldr	r6, [r1, #8]
 800c152:	461f      	mov	r7, r3
 800c154:	42be      	cmp	r6, r7
 800c156:	680b      	ldr	r3, [r1, #0]
 800c158:	4682      	mov	sl, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	4690      	mov	r8, r2
 800c15e:	d82d      	bhi.n	800c1bc <__ssputs_r+0x70>
 800c160:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c164:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c168:	d026      	beq.n	800c1b8 <__ssputs_r+0x6c>
 800c16a:	6965      	ldr	r5, [r4, #20]
 800c16c:	6909      	ldr	r1, [r1, #16]
 800c16e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c172:	eba3 0901 	sub.w	r9, r3, r1
 800c176:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c17a:	1c7b      	adds	r3, r7, #1
 800c17c:	444b      	add	r3, r9
 800c17e:	106d      	asrs	r5, r5, #1
 800c180:	429d      	cmp	r5, r3
 800c182:	bf38      	it	cc
 800c184:	461d      	movcc	r5, r3
 800c186:	0553      	lsls	r3, r2, #21
 800c188:	d527      	bpl.n	800c1da <__ssputs_r+0x8e>
 800c18a:	4629      	mov	r1, r5
 800c18c:	f7ff fbd8 	bl	800b940 <_malloc_r>
 800c190:	4606      	mov	r6, r0
 800c192:	b360      	cbz	r0, 800c1ee <__ssputs_r+0xa2>
 800c194:	6921      	ldr	r1, [r4, #16]
 800c196:	464a      	mov	r2, r9
 800c198:	f7fe fcf5 	bl	800ab86 <memcpy>
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1a6:	81a3      	strh	r3, [r4, #12]
 800c1a8:	6126      	str	r6, [r4, #16]
 800c1aa:	6165      	str	r5, [r4, #20]
 800c1ac:	444e      	add	r6, r9
 800c1ae:	eba5 0509 	sub.w	r5, r5, r9
 800c1b2:	6026      	str	r6, [r4, #0]
 800c1b4:	60a5      	str	r5, [r4, #8]
 800c1b6:	463e      	mov	r6, r7
 800c1b8:	42be      	cmp	r6, r7
 800c1ba:	d900      	bls.n	800c1be <__ssputs_r+0x72>
 800c1bc:	463e      	mov	r6, r7
 800c1be:	6820      	ldr	r0, [r4, #0]
 800c1c0:	4632      	mov	r2, r6
 800c1c2:	4641      	mov	r1, r8
 800c1c4:	f000 f9c6 	bl	800c554 <memmove>
 800c1c8:	68a3      	ldr	r3, [r4, #8]
 800c1ca:	1b9b      	subs	r3, r3, r6
 800c1cc:	60a3      	str	r3, [r4, #8]
 800c1ce:	6823      	ldr	r3, [r4, #0]
 800c1d0:	4433      	add	r3, r6
 800c1d2:	6023      	str	r3, [r4, #0]
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1da:	462a      	mov	r2, r5
 800c1dc:	f000 fa28 	bl	800c630 <_realloc_r>
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d1e0      	bne.n	800c1a8 <__ssputs_r+0x5c>
 800c1e6:	6921      	ldr	r1, [r4, #16]
 800c1e8:	4650      	mov	r0, sl
 800c1ea:	f7ff fb35 	bl	800b858 <_free_r>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	f8ca 3000 	str.w	r3, [sl]
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1fa:	81a3      	strh	r3, [r4, #12]
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c200:	e7e9      	b.n	800c1d6 <__ssputs_r+0x8a>
	...

0800c204 <_svfiprintf_r>:
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	4698      	mov	r8, r3
 800c20a:	898b      	ldrh	r3, [r1, #12]
 800c20c:	061b      	lsls	r3, r3, #24
 800c20e:	b09d      	sub	sp, #116	@ 0x74
 800c210:	4607      	mov	r7, r0
 800c212:	460d      	mov	r5, r1
 800c214:	4614      	mov	r4, r2
 800c216:	d510      	bpl.n	800c23a <_svfiprintf_r+0x36>
 800c218:	690b      	ldr	r3, [r1, #16]
 800c21a:	b973      	cbnz	r3, 800c23a <_svfiprintf_r+0x36>
 800c21c:	2140      	movs	r1, #64	@ 0x40
 800c21e:	f7ff fb8f 	bl	800b940 <_malloc_r>
 800c222:	6028      	str	r0, [r5, #0]
 800c224:	6128      	str	r0, [r5, #16]
 800c226:	b930      	cbnz	r0, 800c236 <_svfiprintf_r+0x32>
 800c228:	230c      	movs	r3, #12
 800c22a:	603b      	str	r3, [r7, #0]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	b01d      	add	sp, #116	@ 0x74
 800c232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c236:	2340      	movs	r3, #64	@ 0x40
 800c238:	616b      	str	r3, [r5, #20]
 800c23a:	2300      	movs	r3, #0
 800c23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c23e:	2320      	movs	r3, #32
 800c240:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c244:	f8cd 800c 	str.w	r8, [sp, #12]
 800c248:	2330      	movs	r3, #48	@ 0x30
 800c24a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c3e8 <_svfiprintf_r+0x1e4>
 800c24e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c252:	f04f 0901 	mov.w	r9, #1
 800c256:	4623      	mov	r3, r4
 800c258:	469a      	mov	sl, r3
 800c25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c25e:	b10a      	cbz	r2, 800c264 <_svfiprintf_r+0x60>
 800c260:	2a25      	cmp	r2, #37	@ 0x25
 800c262:	d1f9      	bne.n	800c258 <_svfiprintf_r+0x54>
 800c264:	ebba 0b04 	subs.w	fp, sl, r4
 800c268:	d00b      	beq.n	800c282 <_svfiprintf_r+0x7e>
 800c26a:	465b      	mov	r3, fp
 800c26c:	4622      	mov	r2, r4
 800c26e:	4629      	mov	r1, r5
 800c270:	4638      	mov	r0, r7
 800c272:	f7ff ff6b 	bl	800c14c <__ssputs_r>
 800c276:	3001      	adds	r0, #1
 800c278:	f000 80a7 	beq.w	800c3ca <_svfiprintf_r+0x1c6>
 800c27c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c27e:	445a      	add	r2, fp
 800c280:	9209      	str	r2, [sp, #36]	@ 0x24
 800c282:	f89a 3000 	ldrb.w	r3, [sl]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 809f 	beq.w	800c3ca <_svfiprintf_r+0x1c6>
 800c28c:	2300      	movs	r3, #0
 800c28e:	f04f 32ff 	mov.w	r2, #4294967295
 800c292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c296:	f10a 0a01 	add.w	sl, sl, #1
 800c29a:	9304      	str	r3, [sp, #16]
 800c29c:	9307      	str	r3, [sp, #28]
 800c29e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2a4:	4654      	mov	r4, sl
 800c2a6:	2205      	movs	r2, #5
 800c2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ac:	484e      	ldr	r0, [pc, #312]	@ (800c3e8 <_svfiprintf_r+0x1e4>)
 800c2ae:	f7f3 ff97 	bl	80001e0 <memchr>
 800c2b2:	9a04      	ldr	r2, [sp, #16]
 800c2b4:	b9d8      	cbnz	r0, 800c2ee <_svfiprintf_r+0xea>
 800c2b6:	06d0      	lsls	r0, r2, #27
 800c2b8:	bf44      	itt	mi
 800c2ba:	2320      	movmi	r3, #32
 800c2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2c0:	0711      	lsls	r1, r2, #28
 800c2c2:	bf44      	itt	mi
 800c2c4:	232b      	movmi	r3, #43	@ 0x2b
 800c2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2d0:	d015      	beq.n	800c2fe <_svfiprintf_r+0xfa>
 800c2d2:	9a07      	ldr	r2, [sp, #28]
 800c2d4:	4654      	mov	r4, sl
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f04f 0c0a 	mov.w	ip, #10
 800c2dc:	4621      	mov	r1, r4
 800c2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2e2:	3b30      	subs	r3, #48	@ 0x30
 800c2e4:	2b09      	cmp	r3, #9
 800c2e6:	d94b      	bls.n	800c380 <_svfiprintf_r+0x17c>
 800c2e8:	b1b0      	cbz	r0, 800c318 <_svfiprintf_r+0x114>
 800c2ea:	9207      	str	r2, [sp, #28]
 800c2ec:	e014      	b.n	800c318 <_svfiprintf_r+0x114>
 800c2ee:	eba0 0308 	sub.w	r3, r0, r8
 800c2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	9304      	str	r3, [sp, #16]
 800c2fa:	46a2      	mov	sl, r4
 800c2fc:	e7d2      	b.n	800c2a4 <_svfiprintf_r+0xa0>
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	1d19      	adds	r1, r3, #4
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	9103      	str	r1, [sp, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	bfbb      	ittet	lt
 800c30a:	425b      	neglt	r3, r3
 800c30c:	f042 0202 	orrlt.w	r2, r2, #2
 800c310:	9307      	strge	r3, [sp, #28]
 800c312:	9307      	strlt	r3, [sp, #28]
 800c314:	bfb8      	it	lt
 800c316:	9204      	strlt	r2, [sp, #16]
 800c318:	7823      	ldrb	r3, [r4, #0]
 800c31a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c31c:	d10a      	bne.n	800c334 <_svfiprintf_r+0x130>
 800c31e:	7863      	ldrb	r3, [r4, #1]
 800c320:	2b2a      	cmp	r3, #42	@ 0x2a
 800c322:	d132      	bne.n	800c38a <_svfiprintf_r+0x186>
 800c324:	9b03      	ldr	r3, [sp, #12]
 800c326:	1d1a      	adds	r2, r3, #4
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	9203      	str	r2, [sp, #12]
 800c32c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c330:	3402      	adds	r4, #2
 800c332:	9305      	str	r3, [sp, #20]
 800c334:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c3f8 <_svfiprintf_r+0x1f4>
 800c338:	7821      	ldrb	r1, [r4, #0]
 800c33a:	2203      	movs	r2, #3
 800c33c:	4650      	mov	r0, sl
 800c33e:	f7f3 ff4f 	bl	80001e0 <memchr>
 800c342:	b138      	cbz	r0, 800c354 <_svfiprintf_r+0x150>
 800c344:	9b04      	ldr	r3, [sp, #16]
 800c346:	eba0 000a 	sub.w	r0, r0, sl
 800c34a:	2240      	movs	r2, #64	@ 0x40
 800c34c:	4082      	lsls	r2, r0
 800c34e:	4313      	orrs	r3, r2
 800c350:	3401      	adds	r4, #1
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c358:	4824      	ldr	r0, [pc, #144]	@ (800c3ec <_svfiprintf_r+0x1e8>)
 800c35a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c35e:	2206      	movs	r2, #6
 800c360:	f7f3 ff3e 	bl	80001e0 <memchr>
 800c364:	2800      	cmp	r0, #0
 800c366:	d036      	beq.n	800c3d6 <_svfiprintf_r+0x1d2>
 800c368:	4b21      	ldr	r3, [pc, #132]	@ (800c3f0 <_svfiprintf_r+0x1ec>)
 800c36a:	bb1b      	cbnz	r3, 800c3b4 <_svfiprintf_r+0x1b0>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	3307      	adds	r3, #7
 800c370:	f023 0307 	bic.w	r3, r3, #7
 800c374:	3308      	adds	r3, #8
 800c376:	9303      	str	r3, [sp, #12]
 800c378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c37a:	4433      	add	r3, r6
 800c37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c37e:	e76a      	b.n	800c256 <_svfiprintf_r+0x52>
 800c380:	fb0c 3202 	mla	r2, ip, r2, r3
 800c384:	460c      	mov	r4, r1
 800c386:	2001      	movs	r0, #1
 800c388:	e7a8      	b.n	800c2dc <_svfiprintf_r+0xd8>
 800c38a:	2300      	movs	r3, #0
 800c38c:	3401      	adds	r4, #1
 800c38e:	9305      	str	r3, [sp, #20]
 800c390:	4619      	mov	r1, r3
 800c392:	f04f 0c0a 	mov.w	ip, #10
 800c396:	4620      	mov	r0, r4
 800c398:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c39c:	3a30      	subs	r2, #48	@ 0x30
 800c39e:	2a09      	cmp	r2, #9
 800c3a0:	d903      	bls.n	800c3aa <_svfiprintf_r+0x1a6>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0c6      	beq.n	800c334 <_svfiprintf_r+0x130>
 800c3a6:	9105      	str	r1, [sp, #20]
 800c3a8:	e7c4      	b.n	800c334 <_svfiprintf_r+0x130>
 800c3aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e7f0      	b.n	800c396 <_svfiprintf_r+0x192>
 800c3b4:	ab03      	add	r3, sp, #12
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	462a      	mov	r2, r5
 800c3ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c3f4 <_svfiprintf_r+0x1f0>)
 800c3bc:	a904      	add	r1, sp, #16
 800c3be:	4638      	mov	r0, r7
 800c3c0:	f7fd fe12 	bl	8009fe8 <_printf_float>
 800c3c4:	1c42      	adds	r2, r0, #1
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	d1d6      	bne.n	800c378 <_svfiprintf_r+0x174>
 800c3ca:	89ab      	ldrh	r3, [r5, #12]
 800c3cc:	065b      	lsls	r3, r3, #25
 800c3ce:	f53f af2d 	bmi.w	800c22c <_svfiprintf_r+0x28>
 800c3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3d4:	e72c      	b.n	800c230 <_svfiprintf_r+0x2c>
 800c3d6:	ab03      	add	r3, sp, #12
 800c3d8:	9300      	str	r3, [sp, #0]
 800c3da:	462a      	mov	r2, r5
 800c3dc:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <_svfiprintf_r+0x1f0>)
 800c3de:	a904      	add	r1, sp, #16
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	f7fe f899 	bl	800a518 <_printf_i>
 800c3e6:	e7ed      	b.n	800c3c4 <_svfiprintf_r+0x1c0>
 800c3e8:	0800d48a 	.word	0x0800d48a
 800c3ec:	0800d494 	.word	0x0800d494
 800c3f0:	08009fe9 	.word	0x08009fe9
 800c3f4:	0800c14d 	.word	0x0800c14d
 800c3f8:	0800d490 	.word	0x0800d490

0800c3fc <__sflush_r>:
 800c3fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c404:	0716      	lsls	r6, r2, #28
 800c406:	4605      	mov	r5, r0
 800c408:	460c      	mov	r4, r1
 800c40a:	d454      	bmi.n	800c4b6 <__sflush_r+0xba>
 800c40c:	684b      	ldr	r3, [r1, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	dc02      	bgt.n	800c418 <__sflush_r+0x1c>
 800c412:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c414:	2b00      	cmp	r3, #0
 800c416:	dd48      	ble.n	800c4aa <__sflush_r+0xae>
 800c418:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c41a:	2e00      	cmp	r6, #0
 800c41c:	d045      	beq.n	800c4aa <__sflush_r+0xae>
 800c41e:	2300      	movs	r3, #0
 800c420:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c424:	682f      	ldr	r7, [r5, #0]
 800c426:	6a21      	ldr	r1, [r4, #32]
 800c428:	602b      	str	r3, [r5, #0]
 800c42a:	d030      	beq.n	800c48e <__sflush_r+0x92>
 800c42c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c42e:	89a3      	ldrh	r3, [r4, #12]
 800c430:	0759      	lsls	r1, r3, #29
 800c432:	d505      	bpl.n	800c440 <__sflush_r+0x44>
 800c434:	6863      	ldr	r3, [r4, #4]
 800c436:	1ad2      	subs	r2, r2, r3
 800c438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c43a:	b10b      	cbz	r3, 800c440 <__sflush_r+0x44>
 800c43c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	2300      	movs	r3, #0
 800c442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c444:	6a21      	ldr	r1, [r4, #32]
 800c446:	4628      	mov	r0, r5
 800c448:	47b0      	blx	r6
 800c44a:	1c43      	adds	r3, r0, #1
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	d106      	bne.n	800c45e <__sflush_r+0x62>
 800c450:	6829      	ldr	r1, [r5, #0]
 800c452:	291d      	cmp	r1, #29
 800c454:	d82b      	bhi.n	800c4ae <__sflush_r+0xb2>
 800c456:	4a2a      	ldr	r2, [pc, #168]	@ (800c500 <__sflush_r+0x104>)
 800c458:	40ca      	lsrs	r2, r1
 800c45a:	07d6      	lsls	r6, r2, #31
 800c45c:	d527      	bpl.n	800c4ae <__sflush_r+0xb2>
 800c45e:	2200      	movs	r2, #0
 800c460:	6062      	str	r2, [r4, #4]
 800c462:	04d9      	lsls	r1, r3, #19
 800c464:	6922      	ldr	r2, [r4, #16]
 800c466:	6022      	str	r2, [r4, #0]
 800c468:	d504      	bpl.n	800c474 <__sflush_r+0x78>
 800c46a:	1c42      	adds	r2, r0, #1
 800c46c:	d101      	bne.n	800c472 <__sflush_r+0x76>
 800c46e:	682b      	ldr	r3, [r5, #0]
 800c470:	b903      	cbnz	r3, 800c474 <__sflush_r+0x78>
 800c472:	6560      	str	r0, [r4, #84]	@ 0x54
 800c474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c476:	602f      	str	r7, [r5, #0]
 800c478:	b1b9      	cbz	r1, 800c4aa <__sflush_r+0xae>
 800c47a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c47e:	4299      	cmp	r1, r3
 800c480:	d002      	beq.n	800c488 <__sflush_r+0x8c>
 800c482:	4628      	mov	r0, r5
 800c484:	f7ff f9e8 	bl	800b858 <_free_r>
 800c488:	2300      	movs	r3, #0
 800c48a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c48c:	e00d      	b.n	800c4aa <__sflush_r+0xae>
 800c48e:	2301      	movs	r3, #1
 800c490:	4628      	mov	r0, r5
 800c492:	47b0      	blx	r6
 800c494:	4602      	mov	r2, r0
 800c496:	1c50      	adds	r0, r2, #1
 800c498:	d1c9      	bne.n	800c42e <__sflush_r+0x32>
 800c49a:	682b      	ldr	r3, [r5, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d0c6      	beq.n	800c42e <__sflush_r+0x32>
 800c4a0:	2b1d      	cmp	r3, #29
 800c4a2:	d001      	beq.n	800c4a8 <__sflush_r+0xac>
 800c4a4:	2b16      	cmp	r3, #22
 800c4a6:	d11e      	bne.n	800c4e6 <__sflush_r+0xea>
 800c4a8:	602f      	str	r7, [r5, #0]
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	e022      	b.n	800c4f4 <__sflush_r+0xf8>
 800c4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4b2:	b21b      	sxth	r3, r3
 800c4b4:	e01b      	b.n	800c4ee <__sflush_r+0xf2>
 800c4b6:	690f      	ldr	r7, [r1, #16]
 800c4b8:	2f00      	cmp	r7, #0
 800c4ba:	d0f6      	beq.n	800c4aa <__sflush_r+0xae>
 800c4bc:	0793      	lsls	r3, r2, #30
 800c4be:	680e      	ldr	r6, [r1, #0]
 800c4c0:	bf08      	it	eq
 800c4c2:	694b      	ldreq	r3, [r1, #20]
 800c4c4:	600f      	str	r7, [r1, #0]
 800c4c6:	bf18      	it	ne
 800c4c8:	2300      	movne	r3, #0
 800c4ca:	eba6 0807 	sub.w	r8, r6, r7
 800c4ce:	608b      	str	r3, [r1, #8]
 800c4d0:	f1b8 0f00 	cmp.w	r8, #0
 800c4d4:	dde9      	ble.n	800c4aa <__sflush_r+0xae>
 800c4d6:	6a21      	ldr	r1, [r4, #32]
 800c4d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c4da:	4643      	mov	r3, r8
 800c4dc:	463a      	mov	r2, r7
 800c4de:	4628      	mov	r0, r5
 800c4e0:	47b0      	blx	r6
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	dc08      	bgt.n	800c4f8 <__sflush_r+0xfc>
 800c4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4ee:	81a3      	strh	r3, [r4, #12]
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4f8:	4407      	add	r7, r0
 800c4fa:	eba8 0800 	sub.w	r8, r8, r0
 800c4fe:	e7e7      	b.n	800c4d0 <__sflush_r+0xd4>
 800c500:	20400001 	.word	0x20400001

0800c504 <_fflush_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	690b      	ldr	r3, [r1, #16]
 800c508:	4605      	mov	r5, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	b913      	cbnz	r3, 800c514 <_fflush_r+0x10>
 800c50e:	2500      	movs	r5, #0
 800c510:	4628      	mov	r0, r5
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	b118      	cbz	r0, 800c51e <_fflush_r+0x1a>
 800c516:	6a03      	ldr	r3, [r0, #32]
 800c518:	b90b      	cbnz	r3, 800c51e <_fflush_r+0x1a>
 800c51a:	f7fe f9a7 	bl	800a86c <__sinit>
 800c51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d0f3      	beq.n	800c50e <_fflush_r+0xa>
 800c526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c528:	07d0      	lsls	r0, r2, #31
 800c52a:	d404      	bmi.n	800c536 <_fflush_r+0x32>
 800c52c:	0599      	lsls	r1, r3, #22
 800c52e:	d402      	bmi.n	800c536 <_fflush_r+0x32>
 800c530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c532:	f7fe fb26 	bl	800ab82 <__retarget_lock_acquire_recursive>
 800c536:	4628      	mov	r0, r5
 800c538:	4621      	mov	r1, r4
 800c53a:	f7ff ff5f 	bl	800c3fc <__sflush_r>
 800c53e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c540:	07da      	lsls	r2, r3, #31
 800c542:	4605      	mov	r5, r0
 800c544:	d4e4      	bmi.n	800c510 <_fflush_r+0xc>
 800c546:	89a3      	ldrh	r3, [r4, #12]
 800c548:	059b      	lsls	r3, r3, #22
 800c54a:	d4e1      	bmi.n	800c510 <_fflush_r+0xc>
 800c54c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c54e:	f7fe fb19 	bl	800ab84 <__retarget_lock_release_recursive>
 800c552:	e7dd      	b.n	800c510 <_fflush_r+0xc>

0800c554 <memmove>:
 800c554:	4288      	cmp	r0, r1
 800c556:	b510      	push	{r4, lr}
 800c558:	eb01 0402 	add.w	r4, r1, r2
 800c55c:	d902      	bls.n	800c564 <memmove+0x10>
 800c55e:	4284      	cmp	r4, r0
 800c560:	4623      	mov	r3, r4
 800c562:	d807      	bhi.n	800c574 <memmove+0x20>
 800c564:	1e43      	subs	r3, r0, #1
 800c566:	42a1      	cmp	r1, r4
 800c568:	d008      	beq.n	800c57c <memmove+0x28>
 800c56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c56e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c572:	e7f8      	b.n	800c566 <memmove+0x12>
 800c574:	4402      	add	r2, r0
 800c576:	4601      	mov	r1, r0
 800c578:	428a      	cmp	r2, r1
 800c57a:	d100      	bne.n	800c57e <memmove+0x2a>
 800c57c:	bd10      	pop	{r4, pc}
 800c57e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c586:	e7f7      	b.n	800c578 <memmove+0x24>

0800c588 <_sbrk_r>:
 800c588:	b538      	push	{r3, r4, r5, lr}
 800c58a:	4d06      	ldr	r5, [pc, #24]	@ (800c5a4 <_sbrk_r+0x1c>)
 800c58c:	2300      	movs	r3, #0
 800c58e:	4604      	mov	r4, r0
 800c590:	4608      	mov	r0, r1
 800c592:	602b      	str	r3, [r5, #0]
 800c594:	f7f6 fb08 	bl	8002ba8 <_sbrk>
 800c598:	1c43      	adds	r3, r0, #1
 800c59a:	d102      	bne.n	800c5a2 <_sbrk_r+0x1a>
 800c59c:	682b      	ldr	r3, [r5, #0]
 800c59e:	b103      	cbz	r3, 800c5a2 <_sbrk_r+0x1a>
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	bd38      	pop	{r3, r4, r5, pc}
 800c5a4:	20004f24 	.word	0x20004f24

0800c5a8 <__assert_func>:
 800c5a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5aa:	4614      	mov	r4, r2
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	4b09      	ldr	r3, [pc, #36]	@ (800c5d4 <__assert_func+0x2c>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4605      	mov	r5, r0
 800c5b4:	68d8      	ldr	r0, [r3, #12]
 800c5b6:	b14c      	cbz	r4, 800c5cc <__assert_func+0x24>
 800c5b8:	4b07      	ldr	r3, [pc, #28]	@ (800c5d8 <__assert_func+0x30>)
 800c5ba:	9100      	str	r1, [sp, #0]
 800c5bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5c0:	4906      	ldr	r1, [pc, #24]	@ (800c5dc <__assert_func+0x34>)
 800c5c2:	462b      	mov	r3, r5
 800c5c4:	f000 f870 	bl	800c6a8 <fiprintf>
 800c5c8:	f000 f880 	bl	800c6cc <abort>
 800c5cc:	4b04      	ldr	r3, [pc, #16]	@ (800c5e0 <__assert_func+0x38>)
 800c5ce:	461c      	mov	r4, r3
 800c5d0:	e7f3      	b.n	800c5ba <__assert_func+0x12>
 800c5d2:	bf00      	nop
 800c5d4:	20000028 	.word	0x20000028
 800c5d8:	0800d4a5 	.word	0x0800d4a5
 800c5dc:	0800d4b2 	.word	0x0800d4b2
 800c5e0:	0800d4e0 	.word	0x0800d4e0

0800c5e4 <_calloc_r>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	fba1 5402 	umull	r5, r4, r1, r2
 800c5ea:	b934      	cbnz	r4, 800c5fa <_calloc_r+0x16>
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	f7ff f9a7 	bl	800b940 <_malloc_r>
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	b928      	cbnz	r0, 800c602 <_calloc_r+0x1e>
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	bd70      	pop	{r4, r5, r6, pc}
 800c5fa:	220c      	movs	r2, #12
 800c5fc:	6002      	str	r2, [r0, #0]
 800c5fe:	2600      	movs	r6, #0
 800c600:	e7f9      	b.n	800c5f6 <_calloc_r+0x12>
 800c602:	462a      	mov	r2, r5
 800c604:	4621      	mov	r1, r4
 800c606:	f7fe f9e0 	bl	800a9ca <memset>
 800c60a:	e7f4      	b.n	800c5f6 <_calloc_r+0x12>

0800c60c <__ascii_mbtowc>:
 800c60c:	b082      	sub	sp, #8
 800c60e:	b901      	cbnz	r1, 800c612 <__ascii_mbtowc+0x6>
 800c610:	a901      	add	r1, sp, #4
 800c612:	b142      	cbz	r2, 800c626 <__ascii_mbtowc+0x1a>
 800c614:	b14b      	cbz	r3, 800c62a <__ascii_mbtowc+0x1e>
 800c616:	7813      	ldrb	r3, [r2, #0]
 800c618:	600b      	str	r3, [r1, #0]
 800c61a:	7812      	ldrb	r2, [r2, #0]
 800c61c:	1e10      	subs	r0, r2, #0
 800c61e:	bf18      	it	ne
 800c620:	2001      	movne	r0, #1
 800c622:	b002      	add	sp, #8
 800c624:	4770      	bx	lr
 800c626:	4610      	mov	r0, r2
 800c628:	e7fb      	b.n	800c622 <__ascii_mbtowc+0x16>
 800c62a:	f06f 0001 	mvn.w	r0, #1
 800c62e:	e7f8      	b.n	800c622 <__ascii_mbtowc+0x16>

0800c630 <_realloc_r>:
 800c630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c634:	4607      	mov	r7, r0
 800c636:	4614      	mov	r4, r2
 800c638:	460d      	mov	r5, r1
 800c63a:	b921      	cbnz	r1, 800c646 <_realloc_r+0x16>
 800c63c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c640:	4611      	mov	r1, r2
 800c642:	f7ff b97d 	b.w	800b940 <_malloc_r>
 800c646:	b92a      	cbnz	r2, 800c654 <_realloc_r+0x24>
 800c648:	f7ff f906 	bl	800b858 <_free_r>
 800c64c:	4625      	mov	r5, r4
 800c64e:	4628      	mov	r0, r5
 800c650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c654:	f000 f841 	bl	800c6da <_malloc_usable_size_r>
 800c658:	4284      	cmp	r4, r0
 800c65a:	4606      	mov	r6, r0
 800c65c:	d802      	bhi.n	800c664 <_realloc_r+0x34>
 800c65e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c662:	d8f4      	bhi.n	800c64e <_realloc_r+0x1e>
 800c664:	4621      	mov	r1, r4
 800c666:	4638      	mov	r0, r7
 800c668:	f7ff f96a 	bl	800b940 <_malloc_r>
 800c66c:	4680      	mov	r8, r0
 800c66e:	b908      	cbnz	r0, 800c674 <_realloc_r+0x44>
 800c670:	4645      	mov	r5, r8
 800c672:	e7ec      	b.n	800c64e <_realloc_r+0x1e>
 800c674:	42b4      	cmp	r4, r6
 800c676:	4622      	mov	r2, r4
 800c678:	4629      	mov	r1, r5
 800c67a:	bf28      	it	cs
 800c67c:	4632      	movcs	r2, r6
 800c67e:	f7fe fa82 	bl	800ab86 <memcpy>
 800c682:	4629      	mov	r1, r5
 800c684:	4638      	mov	r0, r7
 800c686:	f7ff f8e7 	bl	800b858 <_free_r>
 800c68a:	e7f1      	b.n	800c670 <_realloc_r+0x40>

0800c68c <__ascii_wctomb>:
 800c68c:	4603      	mov	r3, r0
 800c68e:	4608      	mov	r0, r1
 800c690:	b141      	cbz	r1, 800c6a4 <__ascii_wctomb+0x18>
 800c692:	2aff      	cmp	r2, #255	@ 0xff
 800c694:	d904      	bls.n	800c6a0 <__ascii_wctomb+0x14>
 800c696:	228a      	movs	r2, #138	@ 0x8a
 800c698:	601a      	str	r2, [r3, #0]
 800c69a:	f04f 30ff 	mov.w	r0, #4294967295
 800c69e:	4770      	bx	lr
 800c6a0:	700a      	strb	r2, [r1, #0]
 800c6a2:	2001      	movs	r0, #1
 800c6a4:	4770      	bx	lr
	...

0800c6a8 <fiprintf>:
 800c6a8:	b40e      	push	{r1, r2, r3}
 800c6aa:	b503      	push	{r0, r1, lr}
 800c6ac:	4601      	mov	r1, r0
 800c6ae:	ab03      	add	r3, sp, #12
 800c6b0:	4805      	ldr	r0, [pc, #20]	@ (800c6c8 <fiprintf+0x20>)
 800c6b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6b6:	6800      	ldr	r0, [r0, #0]
 800c6b8:	9301      	str	r3, [sp, #4]
 800c6ba:	f000 f83f 	bl	800c73c <_vfiprintf_r>
 800c6be:	b002      	add	sp, #8
 800c6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6c4:	b003      	add	sp, #12
 800c6c6:	4770      	bx	lr
 800c6c8:	20000028 	.word	0x20000028

0800c6cc <abort>:
 800c6cc:	b508      	push	{r3, lr}
 800c6ce:	2006      	movs	r0, #6
 800c6d0:	f000 fa08 	bl	800cae4 <raise>
 800c6d4:	2001      	movs	r0, #1
 800c6d6:	f7f6 f9ef 	bl	8002ab8 <_exit>

0800c6da <_malloc_usable_size_r>:
 800c6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6de:	1f18      	subs	r0, r3, #4
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	bfbc      	itt	lt
 800c6e4:	580b      	ldrlt	r3, [r1, r0]
 800c6e6:	18c0      	addlt	r0, r0, r3
 800c6e8:	4770      	bx	lr

0800c6ea <__sfputc_r>:
 800c6ea:	6893      	ldr	r3, [r2, #8]
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	b410      	push	{r4}
 800c6f2:	6093      	str	r3, [r2, #8]
 800c6f4:	da08      	bge.n	800c708 <__sfputc_r+0x1e>
 800c6f6:	6994      	ldr	r4, [r2, #24]
 800c6f8:	42a3      	cmp	r3, r4
 800c6fa:	db01      	blt.n	800c700 <__sfputc_r+0x16>
 800c6fc:	290a      	cmp	r1, #10
 800c6fe:	d103      	bne.n	800c708 <__sfputc_r+0x1e>
 800c700:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c704:	f000 b932 	b.w	800c96c <__swbuf_r>
 800c708:	6813      	ldr	r3, [r2, #0]
 800c70a:	1c58      	adds	r0, r3, #1
 800c70c:	6010      	str	r0, [r2, #0]
 800c70e:	7019      	strb	r1, [r3, #0]
 800c710:	4608      	mov	r0, r1
 800c712:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <__sfputs_r>:
 800c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71a:	4606      	mov	r6, r0
 800c71c:	460f      	mov	r7, r1
 800c71e:	4614      	mov	r4, r2
 800c720:	18d5      	adds	r5, r2, r3
 800c722:	42ac      	cmp	r4, r5
 800c724:	d101      	bne.n	800c72a <__sfputs_r+0x12>
 800c726:	2000      	movs	r0, #0
 800c728:	e007      	b.n	800c73a <__sfputs_r+0x22>
 800c72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72e:	463a      	mov	r2, r7
 800c730:	4630      	mov	r0, r6
 800c732:	f7ff ffda 	bl	800c6ea <__sfputc_r>
 800c736:	1c43      	adds	r3, r0, #1
 800c738:	d1f3      	bne.n	800c722 <__sfputs_r+0xa>
 800c73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c73c <_vfiprintf_r>:
 800c73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c740:	460d      	mov	r5, r1
 800c742:	b09d      	sub	sp, #116	@ 0x74
 800c744:	4614      	mov	r4, r2
 800c746:	4698      	mov	r8, r3
 800c748:	4606      	mov	r6, r0
 800c74a:	b118      	cbz	r0, 800c754 <_vfiprintf_r+0x18>
 800c74c:	6a03      	ldr	r3, [r0, #32]
 800c74e:	b90b      	cbnz	r3, 800c754 <_vfiprintf_r+0x18>
 800c750:	f7fe f88c 	bl	800a86c <__sinit>
 800c754:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c756:	07d9      	lsls	r1, r3, #31
 800c758:	d405      	bmi.n	800c766 <_vfiprintf_r+0x2a>
 800c75a:	89ab      	ldrh	r3, [r5, #12]
 800c75c:	059a      	lsls	r2, r3, #22
 800c75e:	d402      	bmi.n	800c766 <_vfiprintf_r+0x2a>
 800c760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c762:	f7fe fa0e 	bl	800ab82 <__retarget_lock_acquire_recursive>
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	071b      	lsls	r3, r3, #28
 800c76a:	d501      	bpl.n	800c770 <_vfiprintf_r+0x34>
 800c76c:	692b      	ldr	r3, [r5, #16]
 800c76e:	b99b      	cbnz	r3, 800c798 <_vfiprintf_r+0x5c>
 800c770:	4629      	mov	r1, r5
 800c772:	4630      	mov	r0, r6
 800c774:	f000 f938 	bl	800c9e8 <__swsetup_r>
 800c778:	b170      	cbz	r0, 800c798 <_vfiprintf_r+0x5c>
 800c77a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c77c:	07dc      	lsls	r4, r3, #31
 800c77e:	d504      	bpl.n	800c78a <_vfiprintf_r+0x4e>
 800c780:	f04f 30ff 	mov.w	r0, #4294967295
 800c784:	b01d      	add	sp, #116	@ 0x74
 800c786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c78a:	89ab      	ldrh	r3, [r5, #12]
 800c78c:	0598      	lsls	r0, r3, #22
 800c78e:	d4f7      	bmi.n	800c780 <_vfiprintf_r+0x44>
 800c790:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c792:	f7fe f9f7 	bl	800ab84 <__retarget_lock_release_recursive>
 800c796:	e7f3      	b.n	800c780 <_vfiprintf_r+0x44>
 800c798:	2300      	movs	r3, #0
 800c79a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c79c:	2320      	movs	r3, #32
 800c79e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7a6:	2330      	movs	r3, #48	@ 0x30
 800c7a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c958 <_vfiprintf_r+0x21c>
 800c7ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c7b0:	f04f 0901 	mov.w	r9, #1
 800c7b4:	4623      	mov	r3, r4
 800c7b6:	469a      	mov	sl, r3
 800c7b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7bc:	b10a      	cbz	r2, 800c7c2 <_vfiprintf_r+0x86>
 800c7be:	2a25      	cmp	r2, #37	@ 0x25
 800c7c0:	d1f9      	bne.n	800c7b6 <_vfiprintf_r+0x7a>
 800c7c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c7c6:	d00b      	beq.n	800c7e0 <_vfiprintf_r+0xa4>
 800c7c8:	465b      	mov	r3, fp
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	4630      	mov	r0, r6
 800c7d0:	f7ff ffa2 	bl	800c718 <__sfputs_r>
 800c7d4:	3001      	adds	r0, #1
 800c7d6:	f000 80a7 	beq.w	800c928 <_vfiprintf_r+0x1ec>
 800c7da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7dc:	445a      	add	r2, fp
 800c7de:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 809f 	beq.w	800c928 <_vfiprintf_r+0x1ec>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c7f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7f4:	f10a 0a01 	add.w	sl, sl, #1
 800c7f8:	9304      	str	r3, [sp, #16]
 800c7fa:	9307      	str	r3, [sp, #28]
 800c7fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c800:	931a      	str	r3, [sp, #104]	@ 0x68
 800c802:	4654      	mov	r4, sl
 800c804:	2205      	movs	r2, #5
 800c806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c80a:	4853      	ldr	r0, [pc, #332]	@ (800c958 <_vfiprintf_r+0x21c>)
 800c80c:	f7f3 fce8 	bl	80001e0 <memchr>
 800c810:	9a04      	ldr	r2, [sp, #16]
 800c812:	b9d8      	cbnz	r0, 800c84c <_vfiprintf_r+0x110>
 800c814:	06d1      	lsls	r1, r2, #27
 800c816:	bf44      	itt	mi
 800c818:	2320      	movmi	r3, #32
 800c81a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c81e:	0713      	lsls	r3, r2, #28
 800c820:	bf44      	itt	mi
 800c822:	232b      	movmi	r3, #43	@ 0x2b
 800c824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c828:	f89a 3000 	ldrb.w	r3, [sl]
 800c82c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c82e:	d015      	beq.n	800c85c <_vfiprintf_r+0x120>
 800c830:	9a07      	ldr	r2, [sp, #28]
 800c832:	4654      	mov	r4, sl
 800c834:	2000      	movs	r0, #0
 800c836:	f04f 0c0a 	mov.w	ip, #10
 800c83a:	4621      	mov	r1, r4
 800c83c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c840:	3b30      	subs	r3, #48	@ 0x30
 800c842:	2b09      	cmp	r3, #9
 800c844:	d94b      	bls.n	800c8de <_vfiprintf_r+0x1a2>
 800c846:	b1b0      	cbz	r0, 800c876 <_vfiprintf_r+0x13a>
 800c848:	9207      	str	r2, [sp, #28]
 800c84a:	e014      	b.n	800c876 <_vfiprintf_r+0x13a>
 800c84c:	eba0 0308 	sub.w	r3, r0, r8
 800c850:	fa09 f303 	lsl.w	r3, r9, r3
 800c854:	4313      	orrs	r3, r2
 800c856:	9304      	str	r3, [sp, #16]
 800c858:	46a2      	mov	sl, r4
 800c85a:	e7d2      	b.n	800c802 <_vfiprintf_r+0xc6>
 800c85c:	9b03      	ldr	r3, [sp, #12]
 800c85e:	1d19      	adds	r1, r3, #4
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	9103      	str	r1, [sp, #12]
 800c864:	2b00      	cmp	r3, #0
 800c866:	bfbb      	ittet	lt
 800c868:	425b      	neglt	r3, r3
 800c86a:	f042 0202 	orrlt.w	r2, r2, #2
 800c86e:	9307      	strge	r3, [sp, #28]
 800c870:	9307      	strlt	r3, [sp, #28]
 800c872:	bfb8      	it	lt
 800c874:	9204      	strlt	r2, [sp, #16]
 800c876:	7823      	ldrb	r3, [r4, #0]
 800c878:	2b2e      	cmp	r3, #46	@ 0x2e
 800c87a:	d10a      	bne.n	800c892 <_vfiprintf_r+0x156>
 800c87c:	7863      	ldrb	r3, [r4, #1]
 800c87e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c880:	d132      	bne.n	800c8e8 <_vfiprintf_r+0x1ac>
 800c882:	9b03      	ldr	r3, [sp, #12]
 800c884:	1d1a      	adds	r2, r3, #4
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	9203      	str	r2, [sp, #12]
 800c88a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c88e:	3402      	adds	r4, #2
 800c890:	9305      	str	r3, [sp, #20]
 800c892:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c968 <_vfiprintf_r+0x22c>
 800c896:	7821      	ldrb	r1, [r4, #0]
 800c898:	2203      	movs	r2, #3
 800c89a:	4650      	mov	r0, sl
 800c89c:	f7f3 fca0 	bl	80001e0 <memchr>
 800c8a0:	b138      	cbz	r0, 800c8b2 <_vfiprintf_r+0x176>
 800c8a2:	9b04      	ldr	r3, [sp, #16]
 800c8a4:	eba0 000a 	sub.w	r0, r0, sl
 800c8a8:	2240      	movs	r2, #64	@ 0x40
 800c8aa:	4082      	lsls	r2, r0
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	3401      	adds	r4, #1
 800c8b0:	9304      	str	r3, [sp, #16]
 800c8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b6:	4829      	ldr	r0, [pc, #164]	@ (800c95c <_vfiprintf_r+0x220>)
 800c8b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8bc:	2206      	movs	r2, #6
 800c8be:	f7f3 fc8f 	bl	80001e0 <memchr>
 800c8c2:	2800      	cmp	r0, #0
 800c8c4:	d03f      	beq.n	800c946 <_vfiprintf_r+0x20a>
 800c8c6:	4b26      	ldr	r3, [pc, #152]	@ (800c960 <_vfiprintf_r+0x224>)
 800c8c8:	bb1b      	cbnz	r3, 800c912 <_vfiprintf_r+0x1d6>
 800c8ca:	9b03      	ldr	r3, [sp, #12]
 800c8cc:	3307      	adds	r3, #7
 800c8ce:	f023 0307 	bic.w	r3, r3, #7
 800c8d2:	3308      	adds	r3, #8
 800c8d4:	9303      	str	r3, [sp, #12]
 800c8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8d8:	443b      	add	r3, r7
 800c8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8dc:	e76a      	b.n	800c7b4 <_vfiprintf_r+0x78>
 800c8de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	2001      	movs	r0, #1
 800c8e6:	e7a8      	b.n	800c83a <_vfiprintf_r+0xfe>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	3401      	adds	r4, #1
 800c8ec:	9305      	str	r3, [sp, #20]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	f04f 0c0a 	mov.w	ip, #10
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8fa:	3a30      	subs	r2, #48	@ 0x30
 800c8fc:	2a09      	cmp	r2, #9
 800c8fe:	d903      	bls.n	800c908 <_vfiprintf_r+0x1cc>
 800c900:	2b00      	cmp	r3, #0
 800c902:	d0c6      	beq.n	800c892 <_vfiprintf_r+0x156>
 800c904:	9105      	str	r1, [sp, #20]
 800c906:	e7c4      	b.n	800c892 <_vfiprintf_r+0x156>
 800c908:	fb0c 2101 	mla	r1, ip, r1, r2
 800c90c:	4604      	mov	r4, r0
 800c90e:	2301      	movs	r3, #1
 800c910:	e7f0      	b.n	800c8f4 <_vfiprintf_r+0x1b8>
 800c912:	ab03      	add	r3, sp, #12
 800c914:	9300      	str	r3, [sp, #0]
 800c916:	462a      	mov	r2, r5
 800c918:	4b12      	ldr	r3, [pc, #72]	@ (800c964 <_vfiprintf_r+0x228>)
 800c91a:	a904      	add	r1, sp, #16
 800c91c:	4630      	mov	r0, r6
 800c91e:	f7fd fb63 	bl	8009fe8 <_printf_float>
 800c922:	4607      	mov	r7, r0
 800c924:	1c78      	adds	r0, r7, #1
 800c926:	d1d6      	bne.n	800c8d6 <_vfiprintf_r+0x19a>
 800c928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c92a:	07d9      	lsls	r1, r3, #31
 800c92c:	d405      	bmi.n	800c93a <_vfiprintf_r+0x1fe>
 800c92e:	89ab      	ldrh	r3, [r5, #12]
 800c930:	059a      	lsls	r2, r3, #22
 800c932:	d402      	bmi.n	800c93a <_vfiprintf_r+0x1fe>
 800c934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c936:	f7fe f925 	bl	800ab84 <__retarget_lock_release_recursive>
 800c93a:	89ab      	ldrh	r3, [r5, #12]
 800c93c:	065b      	lsls	r3, r3, #25
 800c93e:	f53f af1f 	bmi.w	800c780 <_vfiprintf_r+0x44>
 800c942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c944:	e71e      	b.n	800c784 <_vfiprintf_r+0x48>
 800c946:	ab03      	add	r3, sp, #12
 800c948:	9300      	str	r3, [sp, #0]
 800c94a:	462a      	mov	r2, r5
 800c94c:	4b05      	ldr	r3, [pc, #20]	@ (800c964 <_vfiprintf_r+0x228>)
 800c94e:	a904      	add	r1, sp, #16
 800c950:	4630      	mov	r0, r6
 800c952:	f7fd fde1 	bl	800a518 <_printf_i>
 800c956:	e7e4      	b.n	800c922 <_vfiprintf_r+0x1e6>
 800c958:	0800d48a 	.word	0x0800d48a
 800c95c:	0800d494 	.word	0x0800d494
 800c960:	08009fe9 	.word	0x08009fe9
 800c964:	0800c719 	.word	0x0800c719
 800c968:	0800d490 	.word	0x0800d490

0800c96c <__swbuf_r>:
 800c96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96e:	460e      	mov	r6, r1
 800c970:	4614      	mov	r4, r2
 800c972:	4605      	mov	r5, r0
 800c974:	b118      	cbz	r0, 800c97e <__swbuf_r+0x12>
 800c976:	6a03      	ldr	r3, [r0, #32]
 800c978:	b90b      	cbnz	r3, 800c97e <__swbuf_r+0x12>
 800c97a:	f7fd ff77 	bl	800a86c <__sinit>
 800c97e:	69a3      	ldr	r3, [r4, #24]
 800c980:	60a3      	str	r3, [r4, #8]
 800c982:	89a3      	ldrh	r3, [r4, #12]
 800c984:	071a      	lsls	r2, r3, #28
 800c986:	d501      	bpl.n	800c98c <__swbuf_r+0x20>
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	b943      	cbnz	r3, 800c99e <__swbuf_r+0x32>
 800c98c:	4621      	mov	r1, r4
 800c98e:	4628      	mov	r0, r5
 800c990:	f000 f82a 	bl	800c9e8 <__swsetup_r>
 800c994:	b118      	cbz	r0, 800c99e <__swbuf_r+0x32>
 800c996:	f04f 37ff 	mov.w	r7, #4294967295
 800c99a:	4638      	mov	r0, r7
 800c99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c99e:	6823      	ldr	r3, [r4, #0]
 800c9a0:	6922      	ldr	r2, [r4, #16]
 800c9a2:	1a98      	subs	r0, r3, r2
 800c9a4:	6963      	ldr	r3, [r4, #20]
 800c9a6:	b2f6      	uxtb	r6, r6
 800c9a8:	4283      	cmp	r3, r0
 800c9aa:	4637      	mov	r7, r6
 800c9ac:	dc05      	bgt.n	800c9ba <__swbuf_r+0x4e>
 800c9ae:	4621      	mov	r1, r4
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	f7ff fda7 	bl	800c504 <_fflush_r>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d1ed      	bne.n	800c996 <__swbuf_r+0x2a>
 800c9ba:	68a3      	ldr	r3, [r4, #8]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	60a3      	str	r3, [r4, #8]
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	6022      	str	r2, [r4, #0]
 800c9c6:	701e      	strb	r6, [r3, #0]
 800c9c8:	6962      	ldr	r2, [r4, #20]
 800c9ca:	1c43      	adds	r3, r0, #1
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d004      	beq.n	800c9da <__swbuf_r+0x6e>
 800c9d0:	89a3      	ldrh	r3, [r4, #12]
 800c9d2:	07db      	lsls	r3, r3, #31
 800c9d4:	d5e1      	bpl.n	800c99a <__swbuf_r+0x2e>
 800c9d6:	2e0a      	cmp	r6, #10
 800c9d8:	d1df      	bne.n	800c99a <__swbuf_r+0x2e>
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4628      	mov	r0, r5
 800c9de:	f7ff fd91 	bl	800c504 <_fflush_r>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	d0d9      	beq.n	800c99a <__swbuf_r+0x2e>
 800c9e6:	e7d6      	b.n	800c996 <__swbuf_r+0x2a>

0800c9e8 <__swsetup_r>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	4b29      	ldr	r3, [pc, #164]	@ (800ca90 <__swsetup_r+0xa8>)
 800c9ec:	4605      	mov	r5, r0
 800c9ee:	6818      	ldr	r0, [r3, #0]
 800c9f0:	460c      	mov	r4, r1
 800c9f2:	b118      	cbz	r0, 800c9fc <__swsetup_r+0x14>
 800c9f4:	6a03      	ldr	r3, [r0, #32]
 800c9f6:	b90b      	cbnz	r3, 800c9fc <__swsetup_r+0x14>
 800c9f8:	f7fd ff38 	bl	800a86c <__sinit>
 800c9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca00:	0719      	lsls	r1, r3, #28
 800ca02:	d422      	bmi.n	800ca4a <__swsetup_r+0x62>
 800ca04:	06da      	lsls	r2, r3, #27
 800ca06:	d407      	bmi.n	800ca18 <__swsetup_r+0x30>
 800ca08:	2209      	movs	r2, #9
 800ca0a:	602a      	str	r2, [r5, #0]
 800ca0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295
 800ca16:	e033      	b.n	800ca80 <__swsetup_r+0x98>
 800ca18:	0758      	lsls	r0, r3, #29
 800ca1a:	d512      	bpl.n	800ca42 <__swsetup_r+0x5a>
 800ca1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca1e:	b141      	cbz	r1, 800ca32 <__swsetup_r+0x4a>
 800ca20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca24:	4299      	cmp	r1, r3
 800ca26:	d002      	beq.n	800ca2e <__swsetup_r+0x46>
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f7fe ff15 	bl	800b858 <_free_r>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca38:	81a3      	strh	r3, [r4, #12]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	6063      	str	r3, [r4, #4]
 800ca3e:	6923      	ldr	r3, [r4, #16]
 800ca40:	6023      	str	r3, [r4, #0]
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	f043 0308 	orr.w	r3, r3, #8
 800ca48:	81a3      	strh	r3, [r4, #12]
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	b94b      	cbnz	r3, 800ca62 <__swsetup_r+0x7a>
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ca54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca58:	d003      	beq.n	800ca62 <__swsetup_r+0x7a>
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f000 f883 	bl	800cb68 <__smakebuf_r>
 800ca62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca66:	f013 0201 	ands.w	r2, r3, #1
 800ca6a:	d00a      	beq.n	800ca82 <__swsetup_r+0x9a>
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	60a2      	str	r2, [r4, #8]
 800ca70:	6962      	ldr	r2, [r4, #20]
 800ca72:	4252      	negs	r2, r2
 800ca74:	61a2      	str	r2, [r4, #24]
 800ca76:	6922      	ldr	r2, [r4, #16]
 800ca78:	b942      	cbnz	r2, 800ca8c <__swsetup_r+0xa4>
 800ca7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca7e:	d1c5      	bne.n	800ca0c <__swsetup_r+0x24>
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
 800ca82:	0799      	lsls	r1, r3, #30
 800ca84:	bf58      	it	pl
 800ca86:	6962      	ldrpl	r2, [r4, #20]
 800ca88:	60a2      	str	r2, [r4, #8]
 800ca8a:	e7f4      	b.n	800ca76 <__swsetup_r+0x8e>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	e7f7      	b.n	800ca80 <__swsetup_r+0x98>
 800ca90:	20000028 	.word	0x20000028

0800ca94 <_raise_r>:
 800ca94:	291f      	cmp	r1, #31
 800ca96:	b538      	push	{r3, r4, r5, lr}
 800ca98:	4605      	mov	r5, r0
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	d904      	bls.n	800caa8 <_raise_r+0x14>
 800ca9e:	2316      	movs	r3, #22
 800caa0:	6003      	str	r3, [r0, #0]
 800caa2:	f04f 30ff 	mov.w	r0, #4294967295
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800caaa:	b112      	cbz	r2, 800cab2 <_raise_r+0x1e>
 800caac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cab0:	b94b      	cbnz	r3, 800cac6 <_raise_r+0x32>
 800cab2:	4628      	mov	r0, r5
 800cab4:	f000 f830 	bl	800cb18 <_getpid_r>
 800cab8:	4622      	mov	r2, r4
 800caba:	4601      	mov	r1, r0
 800cabc:	4628      	mov	r0, r5
 800cabe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cac2:	f000 b817 	b.w	800caf4 <_kill_r>
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d00a      	beq.n	800cae0 <_raise_r+0x4c>
 800caca:	1c59      	adds	r1, r3, #1
 800cacc:	d103      	bne.n	800cad6 <_raise_r+0x42>
 800cace:	2316      	movs	r3, #22
 800cad0:	6003      	str	r3, [r0, #0]
 800cad2:	2001      	movs	r0, #1
 800cad4:	e7e7      	b.n	800caa6 <_raise_r+0x12>
 800cad6:	2100      	movs	r1, #0
 800cad8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cadc:	4620      	mov	r0, r4
 800cade:	4798      	blx	r3
 800cae0:	2000      	movs	r0, #0
 800cae2:	e7e0      	b.n	800caa6 <_raise_r+0x12>

0800cae4 <raise>:
 800cae4:	4b02      	ldr	r3, [pc, #8]	@ (800caf0 <raise+0xc>)
 800cae6:	4601      	mov	r1, r0
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	f7ff bfd3 	b.w	800ca94 <_raise_r>
 800caee:	bf00      	nop
 800caf0:	20000028 	.word	0x20000028

0800caf4 <_kill_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4d07      	ldr	r5, [pc, #28]	@ (800cb14 <_kill_r+0x20>)
 800caf8:	2300      	movs	r3, #0
 800cafa:	4604      	mov	r4, r0
 800cafc:	4608      	mov	r0, r1
 800cafe:	4611      	mov	r1, r2
 800cb00:	602b      	str	r3, [r5, #0]
 800cb02:	f7f5 ffc9 	bl	8002a98 <_kill>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	d102      	bne.n	800cb10 <_kill_r+0x1c>
 800cb0a:	682b      	ldr	r3, [r5, #0]
 800cb0c:	b103      	cbz	r3, 800cb10 <_kill_r+0x1c>
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	20004f24 	.word	0x20004f24

0800cb18 <_getpid_r>:
 800cb18:	f7f5 bfb6 	b.w	8002a88 <_getpid>

0800cb1c <__swhatbuf_r>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	460c      	mov	r4, r1
 800cb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb24:	2900      	cmp	r1, #0
 800cb26:	b096      	sub	sp, #88	@ 0x58
 800cb28:	4615      	mov	r5, r2
 800cb2a:	461e      	mov	r6, r3
 800cb2c:	da0d      	bge.n	800cb4a <__swhatbuf_r+0x2e>
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb34:	f04f 0100 	mov.w	r1, #0
 800cb38:	bf14      	ite	ne
 800cb3a:	2340      	movne	r3, #64	@ 0x40
 800cb3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb40:	2000      	movs	r0, #0
 800cb42:	6031      	str	r1, [r6, #0]
 800cb44:	602b      	str	r3, [r5, #0]
 800cb46:	b016      	add	sp, #88	@ 0x58
 800cb48:	bd70      	pop	{r4, r5, r6, pc}
 800cb4a:	466a      	mov	r2, sp
 800cb4c:	f000 f848 	bl	800cbe0 <_fstat_r>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	dbec      	blt.n	800cb2e <__swhatbuf_r+0x12>
 800cb54:	9901      	ldr	r1, [sp, #4]
 800cb56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb5e:	4259      	negs	r1, r3
 800cb60:	4159      	adcs	r1, r3
 800cb62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb66:	e7eb      	b.n	800cb40 <__swhatbuf_r+0x24>

0800cb68 <__smakebuf_r>:
 800cb68:	898b      	ldrh	r3, [r1, #12]
 800cb6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb6c:	079d      	lsls	r5, r3, #30
 800cb6e:	4606      	mov	r6, r0
 800cb70:	460c      	mov	r4, r1
 800cb72:	d507      	bpl.n	800cb84 <__smakebuf_r+0x1c>
 800cb74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb78:	6023      	str	r3, [r4, #0]
 800cb7a:	6123      	str	r3, [r4, #16]
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	6163      	str	r3, [r4, #20]
 800cb80:	b003      	add	sp, #12
 800cb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb84:	ab01      	add	r3, sp, #4
 800cb86:	466a      	mov	r2, sp
 800cb88:	f7ff ffc8 	bl	800cb1c <__swhatbuf_r>
 800cb8c:	9f00      	ldr	r7, [sp, #0]
 800cb8e:	4605      	mov	r5, r0
 800cb90:	4639      	mov	r1, r7
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7fe fed4 	bl	800b940 <_malloc_r>
 800cb98:	b948      	cbnz	r0, 800cbae <__smakebuf_r+0x46>
 800cb9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9e:	059a      	lsls	r2, r3, #22
 800cba0:	d4ee      	bmi.n	800cb80 <__smakebuf_r+0x18>
 800cba2:	f023 0303 	bic.w	r3, r3, #3
 800cba6:	f043 0302 	orr.w	r3, r3, #2
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	e7e2      	b.n	800cb74 <__smakebuf_r+0xc>
 800cbae:	89a3      	ldrh	r3, [r4, #12]
 800cbb0:	6020      	str	r0, [r4, #0]
 800cbb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbb6:	81a3      	strh	r3, [r4, #12]
 800cbb8:	9b01      	ldr	r3, [sp, #4]
 800cbba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbbe:	b15b      	cbz	r3, 800cbd8 <__smakebuf_r+0x70>
 800cbc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f000 f81d 	bl	800cc04 <_isatty_r>
 800cbca:	b128      	cbz	r0, 800cbd8 <__smakebuf_r+0x70>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	f023 0303 	bic.w	r3, r3, #3
 800cbd2:	f043 0301 	orr.w	r3, r3, #1
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	89a3      	ldrh	r3, [r4, #12]
 800cbda:	431d      	orrs	r5, r3
 800cbdc:	81a5      	strh	r5, [r4, #12]
 800cbde:	e7cf      	b.n	800cb80 <__smakebuf_r+0x18>

0800cbe0 <_fstat_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	4d07      	ldr	r5, [pc, #28]	@ (800cc00 <_fstat_r+0x20>)
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	4608      	mov	r0, r1
 800cbea:	4611      	mov	r1, r2
 800cbec:	602b      	str	r3, [r5, #0]
 800cbee:	f7f5 ffb3 	bl	8002b58 <_fstat>
 800cbf2:	1c43      	adds	r3, r0, #1
 800cbf4:	d102      	bne.n	800cbfc <_fstat_r+0x1c>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	b103      	cbz	r3, 800cbfc <_fstat_r+0x1c>
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	bd38      	pop	{r3, r4, r5, pc}
 800cbfe:	bf00      	nop
 800cc00:	20004f24 	.word	0x20004f24

0800cc04 <_isatty_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d06      	ldr	r5, [pc, #24]	@ (800cc20 <_isatty_r+0x1c>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	f7f5 ffb2 	bl	8002b78 <_isatty>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d102      	bne.n	800cc1e <_isatty_r+0x1a>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	b103      	cbz	r3, 800cc1e <_isatty_r+0x1a>
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	20004f24 	.word	0x20004f24

0800cc24 <_init>:
 800cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc26:	bf00      	nop
 800cc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc2a:	bc08      	pop	{r3}
 800cc2c:	469e      	mov	lr, r3
 800cc2e:	4770      	bx	lr

0800cc30 <_fini>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	bf00      	nop
 800cc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc36:	bc08      	pop	{r3}
 800cc38:	469e      	mov	lr, r3
 800cc3a:	4770      	bx	lr
